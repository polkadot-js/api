{
  "outerEvent": {
    "name": "Event",
    "events": [
      [
        "system",
        [
          {
            "name": "ExtrinsicSuccess",
            "arguments": [],
            "documentation": [
              " An extrinsic completed successfully."
            ]
          },
          {
            "name": "ExtrinsicFailed",
            "arguments": [],
            "documentation": [
              " An extrinsic failed."
            ]
          }
        ]
      ],
      [
        "balances",
        [
          {
            "name": "NewAccount",
            "arguments": [
              "AccountId",
              "AccountIndex",
              "NewAccountOutcome"
            ],
            "documentation": [
              " A new account was created."
            ]
          },
          {
            "name": "ReapedAccount",
            "arguments": [
              "AccountId"
            ],
            "documentation": [
              " An account was reaped."
            ]
          },
          {
            "name": "Transfer",
            "arguments": [
              "AccountId",
              "AccountId",
              "Balance",
              "Balance"
            ],
            "documentation": [
              " Transfer succeeded (from, to, value, fees)."
            ]
          }
        ]
      ],
      [
        "session",
        [
          {
            "name": "NewSession",
            "arguments": [
              "BlockNumber"
            ],
            "documentation": [
              " New session has happened. Note that the argument is the session index, not the block",
              " number as the type might suggest."
            ]
          }
        ]
      ],
      [
        "staking",
        [
          {
            "name": "Reward",
            "arguments": [
              "Balance"
            ],
            "documentation": [
              " All validators have been rewarded by the given balance."
            ]
          },
          {
            "name": "OfflineWarning",
            "arguments": [
              "AccountId",
              "u32"
            ],
            "documentation": [
              " One validator (and their nominators) has been given a offline-warning (they're still",
              " within their grace). The accrued number of slashes is recorded, too."
            ]
          },
          {
            "name": "OfflineSlash",
            "arguments": [
              "AccountId",
              "Balance"
            ],
            "documentation": [
              " One validator (and their nominators) has been slashed by the given amount."
            ]
          }
        ]
      ],
      [
        "democracy",
        [
          {
            "name": "Tabled",
            "arguments": [
              "PropIndex",
              "Balance",
              "Vec<AccountId>"
            ],
            "documentation": []
          },
          {
            "name": "Started",
            "arguments": [
              "ReferendumIndex",
              "VoteThreshold"
            ],
            "documentation": []
          },
          {
            "name": "Passed",
            "arguments": [
              "ReferendumIndex"
            ],
            "documentation": []
          },
          {
            "name": "NotPassed",
            "arguments": [
              "ReferendumIndex"
            ],
            "documentation": []
          },
          {
            "name": "Cancelled",
            "arguments": [
              "ReferendumIndex"
            ],
            "documentation": []
          },
          {
            "name": "Executed",
            "arguments": [
              "ReferendumIndex",
              "bool"
            ],
            "documentation": []
          }
        ]
      ],
      [
        "council",
        [
          {
            "name": "VoterReaped",
            "arguments": [
              "AccountId",
              "AccountId"
            ],
            "documentation": [
              " reaped voter, reaper"
            ]
          },
          {
            "name": "BadReaperSlashed",
            "arguments": [
              "AccountId"
            ],
            "documentation": [
              " slashed reaper"
            ]
          },
          {
            "name": "TallyStarted",
            "arguments": [
              "u32"
            ],
            "documentation": [
              " A tally (for approval votes of council seat(s)) has started."
            ]
          },
          {
            "name": "TallyFinalised",
            "arguments": [
              "Vec<AccountId>",
              "Vec<AccountId>"
            ],
            "documentation": [
              " A tally (for approval votes of council seat(s)) has ended (with one or more new members)."
            ]
          }
        ]
      ],
      [
        "council_voting",
        [
          {
            "name": "TallyCancelation",
            "arguments": [
              "Hash",
              "u32",
              "u32",
              "u32"
            ],
            "documentation": [
              " A voting tally has happened for a referendum cancellation vote.",
              " Last three are yes, no, abstain counts."
            ]
          },
          {
            "name": "TallyReferendum",
            "arguments": [
              "Hash",
              "u32",
              "u32",
              "u32"
            ],
            "documentation": [
              " A voting tally has happened for a referendum vote.",
              " Last three are yes, no, abstain counts."
            ]
          }
        ]
      ],
      [
        "council_motions",
        [
          {
            "name": "Proposed",
            "arguments": [
              "AccountId",
              "ProposalIndex",
              "Hash",
              "u32"
            ],
            "documentation": [
              " A motion (given hash) has been proposed (by given account) with a threshold (given u32)."
            ]
          },
          {
            "name": "Voted",
            "arguments": [
              "AccountId",
              "Hash",
              "bool",
              "u32",
              "u32"
            ],
            "documentation": [
              " A motion (given hash) has been voted on by given account, leaving",
              " a tally (yes votes and no votes given as u32s respectively)."
            ]
          },
          {
            "name": "Approved",
            "arguments": [
              "Hash"
            ],
            "documentation": [
              " A motion was approved by the required threshold."
            ]
          },
          {
            "name": "Disapproved",
            "arguments": [
              "Hash"
            ],
            "documentation": [
              " A motion was not approved by the required threshold."
            ]
          },
          {
            "name": "Executed",
            "arguments": [
              "Hash",
              "bool"
            ],
            "documentation": [
              " A motion was executed; `bool` is true if returned without error."
            ]
          }
        ]
      ],
      [
        "grandpa",
        [
          {
            "name": "NewAuthorities",
            "arguments": [
              "Vec<(SessionKey, u64)>"
            ],
            "documentation": [
              " New authority set has been applied."
            ]
          }
        ]
      ],
      [
        "treasury",
        [
          {
            "name": "Proposed",
            "arguments": [
              "ProposalIndex"
            ],
            "documentation": [
              " New proposal."
            ]
          },
          {
            "name": "Spending",
            "arguments": [
              "Balance"
            ],
            "documentation": [
              " We have ended a spend period and will now allocate funds."
            ]
          },
          {
            "name": "Awarded",
            "arguments": [
              "ProposalIndex",
              "Balance",
              "AccountId"
            ],
            "documentation": [
              " Some funds have been allocated."
            ]
          },
          {
            "name": "Burnt",
            "arguments": [
              "Balance"
            ],
            "documentation": [
              " Some of our funds have been burnt."
            ]
          },
          {
            "name": "Rollover",
            "arguments": [
              "Balance"
            ],
            "documentation": [
              " Spending has finished; this is the amount that rolls over until next spend."
            ]
          }
        ]
      ],
      [
        "contract",
        [
          {
            "name": "Transfer",
            "arguments": [
              "AccountId",
              "AccountId",
              "Balance"
            ],
            "documentation": [
              " Transfer happened `from` -> `to` with given `value` as part of a `message-call` or `create`."
            ]
          },
          {
            "name": "Created",
            "arguments": [
              "AccountId",
              "AccountId"
            ],
            "documentation": [
              " Contract deployed by address at the specified address."
            ]
          }
        ]
      ],
      [
        "upgrade_key",
        [
          {
            "name": "Upgraded",
            "arguments": [],
            "documentation": [
              " An upgrade just happened."
            ]
          },
          {
            "name": "KeyChanged",
            "arguments": [
              "AccountId"
            ],
            "documentation": [
              " An upgrade just happened; old key is supplied as an argument."
            ]
          }
        ]
      ]
    ]
  },
  "modules": [
    {
      "prefix": "system",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": []
        }
      }
    },
    {
      "prefix": "timestamp",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "set",
              "arguments": [
                {
                  "name": "now",
                  "type": "Compact<Moment>"
                }
              ],
              "documentation": [
                " Set the current time.",
                "",
                " Extrinsic with this call should be placed at the specific position in the each block",
                " (specified by the Trait::TIMESTAMP_SET_POSITION) typically at the start of the each block.",
                " This call should be invoked exactly once per block. It will panic at the finalization phase,",
                " if this call hasn't been invoked by that time.",
                "",
                " The timestamp should be greater than the previous one by the amount specified by `block_period`."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "consensus",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "report_misbehavior",
              "arguments": [
                {
                  "name": "_report",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Report some misbehaviour."
              ]
            },
            {
              "id": 1,
              "name": "note_offline",
              "arguments": [
                {
                  "name": "offline_val_indices",
                  "type": "Vec<u32>"
                }
              ],
              "documentation": [
                " Note the previous block's validator missed their opportunity to propose a block.",
                " This only comes in if 2/3+1 of the validators agree that no proposal was submitted.",
                " It's only relevant for the previous block."
              ]
            },
            {
              "id": 2,
              "name": "remark",
              "arguments": [
                {
                  "name": "_remark",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Make some on-chain remark."
              ]
            },
            {
              "id": 3,
              "name": "set_heap_pages",
              "arguments": [
                {
                  "name": "pages",
                  "type": "u64"
                }
              ],
              "documentation": [
                " Set the number of pages in the WebAssembly environment's heap."
              ]
            },
            {
              "id": 4,
              "name": "set_code",
              "arguments": [
                {
                  "name": "new",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Set the new code."
              ]
            },
            {
              "id": 5,
              "name": "set_storage",
              "arguments": [
                {
                  "name": "items",
                  "type": "Vec<KeyValue>"
                }
              ],
              "documentation": [
                " Set some items of storage."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "balances",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "transfer",
              "arguments": [
                {
                  "name": "dest",
                  "type": "Address"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Transfer some liquid free balance to another staker."
              ]
            },
            {
              "id": 1,
              "name": "set_balance",
              "arguments": [
                {
                  "name": "who",
                  "type": "Address"
                },
                {
                  "name": "free",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "reserved",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Set the balances of a given account."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "session",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "set_key",
              "arguments": [
                {
                  "name": "key",
                  "type": "SessionKey"
                }
              ],
              "documentation": [
                " Sets the session key of `_validator` to `_key`. This doesn't take effect until the next",
                " session."
              ]
            },
            {
              "id": 1,
              "name": "set_length",
              "arguments": [
                {
                  "name": "new",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": [
                " Set a new session length. Won't kick in until the next session change (at current length)."
              ]
            },
            {
              "id": 2,
              "name": "force_new_session",
              "arguments": [
                {
                  "name": "apply_rewards",
                  "type": "bool"
                }
              ],
              "documentation": [
                " Forces a new session."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "staking",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "stake",
              "arguments": [],
              "documentation": [
                " Declare the desire to stake for the transactor.",
                "",
                " Effects will be felt at the beginning of the next era."
              ]
            },
            {
              "id": 1,
              "name": "unstake",
              "arguments": [
                {
                  "name": "intentions_index",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " Retract the desire to stake for the transactor.",
                "",
                " Effects will be felt at the beginning of the next era."
              ]
            },
            {
              "id": 2,
              "name": "nominate",
              "arguments": [
                {
                  "name": "target",
                  "type": "Address"
                }
              ],
              "documentation": []
            },
            {
              "id": 3,
              "name": "unnominate",
              "arguments": [
                {
                  "name": "target_index",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " Will panic if called when source isn't currently nominating target.",
                " Updates Nominating, NominatorsFor and NominationBalance."
              ]
            },
            {
              "id": 4,
              "name": "register_preferences",
              "arguments": [
                {
                  "name": "intentions_index",
                  "type": "Compact<u32>"
                },
                {
                  "name": "prefs",
                  "type": "ValidatorPrefs"
                }
              ],
              "documentation": [
                " Set the given account's preference for slashing behaviour should they be a validator.",
                "",
                " An error (no-op) if `Self::intentions()[intentions_index] != origin`."
              ]
            },
            {
              "id": 5,
              "name": "set_sessions_per_era",
              "arguments": [
                {
                  "name": "new",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": [
                " Set the number of sessions in an era."
              ]
            },
            {
              "id": 6,
              "name": "set_bonding_duration",
              "arguments": [
                {
                  "name": "new",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": [
                " The length of the bonding duration in eras."
              ]
            },
            {
              "id": 7,
              "name": "set_validator_count",
              "arguments": [
                {
                  "name": "new",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " The ideal number of validators."
              ]
            },
            {
              "id": 8,
              "name": "force_new_era",
              "arguments": [
                {
                  "name": "apply_rewards",
                  "type": "bool"
                }
              ],
              "documentation": [
                " Force there to be a new era. This also forces a new session immediately after.",
                " `apply_rewards` should be true for validators to get the session reward."
              ]
            },
            {
              "id": 9,
              "name": "set_offline_slash_grace",
              "arguments": [
                {
                  "name": "new",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " Set the offline slash grace period."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "democracy",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "propose",
              "arguments": [
                {
                  "name": "proposal",
                  "type": "Proposal"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Propose a sensitive action to be taken."
              ]
            },
            {
              "id": 1,
              "name": "second",
              "arguments": [
                {
                  "name": "proposal",
                  "type": "Compact<PropIndex>"
                }
              ],
              "documentation": [
                " Propose a sensitive action to be taken."
              ]
            },
            {
              "id": 2,
              "name": "vote",
              "arguments": [
                {
                  "name": "ref_index",
                  "type": "Compact<ReferendumIndex>"
                },
                {
                  "name": "approve_proposal",
                  "type": "bool"
                }
              ],
              "documentation": [
                " Vote in a referendum. If `approve_proposal` is true, the vote is to enact the proposal;",
                " false would be a vote to keep the status quo."
              ]
            },
            {
              "id": 3,
              "name": "start_referendum",
              "arguments": [
                {
                  "name": "proposal",
                  "type": "Proposal"
                },
                {
                  "name": "vote_threshold",
                  "type": "VoteThreshold"
                }
              ],
              "documentation": [
                " Start a referendum."
              ]
            },
            {
              "id": 4,
              "name": "cancel_referendum",
              "arguments": [
                {
                  "name": "ref_index",
                  "type": "Compact<ReferendumIndex>"
                }
              ],
              "documentation": [
                " Remove a referendum."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "council",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "set_approvals",
              "arguments": [
                {
                  "name": "votes",
                  "type": "Vec<bool>"
                },
                {
                  "name": "index",
                  "type": "Compact<VoteIndex>"
                }
              ],
              "documentation": [
                " Set candidate approvals. Approval slots stay valid as long as candidates in those slots",
                " are registered."
              ]
            },
            {
              "id": 1,
              "name": "reap_inactive_voter",
              "arguments": [
                {
                  "name": "reporter_index",
                  "type": "Compact<u32>"
                },
                {
                  "name": "who",
                  "type": "Address"
                },
                {
                  "name": "who_index",
                  "type": "Compact<u32>"
                },
                {
                  "name": "assumed_vote_index",
                  "type": "Compact<VoteIndex>"
                }
              ],
              "documentation": [
                " Remove a voter. For it not to be a bond-consuming no-op, all approved candidate indices",
                " must now be either unregistered or registered to a candidate that registered the slot after",
                " the voter gave their last approval set.",
                "",
                " May be called by anyone. Returns the voter deposit to `signed`."
              ]
            },
            {
              "id": 2,
              "name": "retract_voter",
              "arguments": [
                {
                  "name": "index",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " Remove a voter. All votes are cancelled and the voter deposit is returned."
              ]
            },
            {
              "id": 3,
              "name": "submit_candidacy",
              "arguments": [
                {
                  "name": "slot",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " Submit oneself for candidacy.",
                "",
                " Account must have enough transferrable funds in it to pay the bond."
              ]
            },
            {
              "id": 4,
              "name": "present_winner",
              "arguments": [
                {
                  "name": "candidate",
                  "type": "Address"
                },
                {
                  "name": "total",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "index",
                  "type": "Compact<VoteIndex>"
                }
              ],
              "documentation": [
                " Claim that `signed` is one of the top Self::carry_count() + current_vote().1 candidates.",
                " Only works if the `block_number >= current_vote().0` and `< current_vote().0 + presentation_duration()``",
                " `signed` should have at least"
              ]
            },
            {
              "id": 5,
              "name": "set_desired_seats",
              "arguments": [
                {
                  "name": "count",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " Set the desired member count; if lower than the current count, then seats will not be up",
                " election when they expire. If more, then a new vote will be started if one is not already",
                " in progress."
              ]
            },
            {
              "id": 6,
              "name": "remove_member",
              "arguments": [
                {
                  "name": "who",
                  "type": "Address"
                }
              ],
              "documentation": [
                " Remove a particular member. A tally will happen instantly (if not already in a presentation",
                " period) to fill the seat if removal means that the desired members are not met.",
                " This is effective immediately."
              ]
            },
            {
              "id": 7,
              "name": "set_presentation_duration",
              "arguments": [
                {
                  "name": "count",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": [
                " Set the presentation duration. If there is currently a vote being presented for, will",
                " invoke `finalise_vote`."
              ]
            },
            {
              "id": 8,
              "name": "set_term_duration",
              "arguments": [
                {
                  "name": "count",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": [
                " Set the presentation duration. If there is current a vote being presented for, will",
                " invoke `finalise_vote`."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "council_voting",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "propose",
              "arguments": [
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": []
            },
            {
              "id": 1,
              "name": "vote",
              "arguments": [
                {
                  "name": "proposal",
                  "type": "Hash"
                },
                {
                  "name": "approve",
                  "type": "bool"
                }
              ],
              "documentation": []
            },
            {
              "id": 2,
              "name": "veto",
              "arguments": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                }
              ],
              "documentation": []
            },
            {
              "id": 3,
              "name": "set_cooloff_period",
              "arguments": [
                {
                  "name": "blocks",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": []
            },
            {
              "id": 4,
              "name": "set_voting_period",
              "arguments": [
                {
                  "name": "blocks",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": []
            }
          ]
        }
      }
    },
    {
      "prefix": "council_motions",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "propose",
              "arguments": [
                {
                  "name": "threshold",
                  "type": "Compact<u32>"
                },
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": []
            },
            {
              "id": 1,
              "name": "vote",
              "arguments": [
                {
                  "name": "proposal",
                  "type": "Hash"
                },
                {
                  "name": "index",
                  "type": "Compact<ProposalIndex>"
                },
                {
                  "name": "approve",
                  "type": "bool"
                }
              ],
              "documentation": []
            }
          ]
        }
      }
    },
    {
      "prefix": "grandpa",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "report_misbehavior",
              "arguments": [
                {
                  "name": "_report",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Report some misbehaviour."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "treasury",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "propose_spend",
              "arguments": [
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "beneficiary",
                  "type": "Address"
                }
              ],
              "documentation": [
                " Put forward a suggestion for spending. A deposit proportional to the value",
                " is reserved and slashed if the proposal is rejected. It is returned once the",
                " proposal is awarded."
              ]
            },
            {
              "id": 1,
              "name": "set_pot",
              "arguments": [
                {
                  "name": "new_pot",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Set the balance of funds available to spend."
              ]
            },
            {
              "id": 2,
              "name": "configure",
              "arguments": [
                {
                  "name": "proposal_bond",
                  "type": "Permill"
                },
                {
                  "name": "proposal_bond_minimum",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "spend_period",
                  "type": "Compact<BlockNumber>"
                },
                {
                  "name": "burn",
                  "type": "Permill"
                }
              ],
              "documentation": [
                " (Re-)configure this module."
              ]
            },
            {
              "id": 3,
              "name": "reject_proposal",
              "arguments": [
                {
                  "name": "proposal_id",
                  "type": "Compact<ProposalIndex>"
                }
              ],
              "documentation": [
                " Reject a proposed spend. The original deposit will be slashed."
              ]
            },
            {
              "id": 4,
              "name": "approve_proposal",
              "arguments": [
                {
                  "name": "proposal_id",
                  "type": "Compact<ProposalIndex>"
                }
              ],
              "documentation": [
                " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                " and the original deposit will be returned."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "contract",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "call",
              "arguments": [
                {
                  "name": "dest",
                  "type": "AccountId"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "gas_limit",
                  "type": "Compact<Gas>"
                },
                {
                  "name": "data",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Make a call to a specified account, optionally transferring some balance.",
                " Make a call to a specified account, optionally transferring some balance."
              ]
            },
            {
              "id": 1,
              "name": "create",
              "arguments": [
                {
                  "name": "endowment",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "gas_limit",
                  "type": "Compact<Gas>"
                },
                {
                  "name": "ctor_code",
                  "type": "Bytes"
                },
                {
                  "name": "data",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Create a new contract, optionally transfering some balance to the created account.",
                "",
                " Creation is executed as follows:",
                "",
                " - the destination address is computed based on the sender and hash of the code.",
                " - account is created at the computed address.",
                " - the `ctor_code` is executed in the context of the newly created account. Buffer returned",
                "   after the execution is saved as the `code` of the account. That code will be invoked",
                "   upon any message received by this account."
              ]
            }
          ]
        }
      }
    },
    {
      "prefix": "upgrade_key",
      "module": {
        "name": "Module",
        "call": {
          "name": "Call",
          "functions": [
            {
              "id": 0,
              "name": "upgrade",
              "arguments": [
                {
                  "name": "new",
                  "type": "Bytes"
                }
              ],
              "documentation": []
            },
            {
              "id": 1,
              "name": "set_key",
              "arguments": [
                {
                  "name": "new",
                  "type": "AccountId"
                }
              ],
              "documentation": []
            }
          ]
        }
      }
    }
  ],
  "outerDispatch": {
    "name": "Call",
    "calls": [
      {
        "name": "Timestamp",
        "prefix": "timestamp",
        "index": 0
      },
      {
        "name": "Consensus",
        "prefix": "consensus",
        "index": 1
      },
      {
        "name": "Balances",
        "prefix": "balances",
        "index": 2
      },
      {
        "name": "Session",
        "prefix": "session",
        "index": 3
      },
      {
        "name": "Staking",
        "prefix": "staking",
        "index": 4
      },
      {
        "name": "Democracy",
        "prefix": "democracy",
        "index": 5
      },
      {
        "name": "Council",
        "prefix": "council",
        "index": 6
      },
      {
        "name": "CouncilVoting",
        "prefix": "council_voting",
        "index": 7
      },
      {
        "name": "CouncilMotions",
        "prefix": "council_motions",
        "index": 8
      },
      {
        "name": "Grandpa",
        "prefix": "grandpa",
        "index": 9
      },
      {
        "name": "Treasury",
        "prefix": "treasury",
        "index": 10
      },
      {
        "name": "Contract",
        "prefix": "contract",
        "index": 11
      },
      {
        "name": "UpgradeKey",
        "prefix": "upgrade_key",
        "index": 12
      }
    ]
  }
}
