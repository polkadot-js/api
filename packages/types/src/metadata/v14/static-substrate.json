{
  "magicNumber": 1635018093,
  "metadata": {
    "v14": {
      "types": {
        "types": [
          {
            "path": [
              "sp_core",
              "crypto",
              "AccountId32"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 1,
                    "typeName": "[u8; 32]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "An opaque 32-byte cryptographic identifier."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 32,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "primitive": "U8"
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "AccountInfo"
            ],
            "params": [
              {
                "name": "Index",
                "type": 4
              },
              {
                "name": "AccountData",
                "type": 5
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "nonce",
                    "type": 4,
                    "typeName": "Index",
                    "docs": [
                      "The number of transactions this account has sent."
                    ]
                  },
                  {
                    "name": "consumers",
                    "type": 4,
                    "typeName": "RefCount",
                    "docs": [
                      "The number of other modules that currently depend on this account\\'s existence. The account",
                      "cannot be reaped until this is zero."
                    ]
                  },
                  {
                    "name": "providers",
                    "type": 4,
                    "typeName": "RefCount",
                    "docs": [
                      "The number of other modules that allow this account to exist. The account may not be reaped",
                      "until this and `sufficients` are both zero."
                    ]
                  },
                  {
                    "name": "sufficients",
                    "type": 4,
                    "typeName": "RefCount",
                    "docs": [
                      "The number of modules that allow this account to exist for their own purposes only. The",
                      "account may not be reaped until this and `providers` are both zero."
                    ]
                  },
                  {
                    "name": "data",
                    "type": 5,
                    "typeName": "AccountData",
                    "docs": [
                      "The additional data that belongs to this account. Used to store the balance(s) in a lot of",
                      "chains."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information of an account."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "primitive": "U32"
            },
            "docs": []
          },
          {
            "path": [
              "pallet_balances",
              "AccountData"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "free",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Non-reserved part of the balance. There may still be restrictions on this, but it is the",
                      "total pool what may in principle be transferred, reserved and used for tipping.",
                      "",
                      "This is the only balance that matters in terms of most operations on tokens. It",
                      "alone is used to determine the balance when in the contract execution environment."
                    ]
                  },
                  {
                    "name": "reserved",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Balance which is reserved and may not be used at all.",
                      "",
                      "This can still get slashed, but gets slashed last of all.",
                      "",
                      "This balance is a \\'reserve\\' balance that other subsystems use in order to set aside tokens",
                      "that are still \\'owned\\' by the account holder, but which are suspendable.",
                      "This includes named reserve and unnamed reserve."
                    ]
                  },
                  {
                    "name": "misc_frozen",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount that `free` may not drop below when withdrawing for *anything except transaction",
                      "fee payment*."
                    ]
                  },
                  {
                    "name": "fee_frozen",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount that `free` may not drop below when withdrawing specifically for transaction",
                      "fee payment."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "All balance information for an account."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "primitive": "U128"
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "weights",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 8
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 8,
                    "typeName": "T",
                    "docs": [
                      "Value for `Normal` extrinsics."
                    ]
                  },
                  {
                    "name": "operational",
                    "type": 8,
                    "typeName": "T",
                    "docs": [
                      "Value for `Operational` extrinsics."
                    ]
                  },
                  {
                    "name": "mandatory",
                    "type": 8,
                    "typeName": "T",
                    "docs": [
                      "Value for `Mandatory` extrinsics."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A struct holding value for each `DispatchClass`."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "primitive": "U64"
            },
            "docs": []
          },
          {
            "path": [
              "primitive_types",
              "H256"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 1,
                    "typeName": "[u8; 32]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\" Fixed-size uninterpreted hash type with 32 bytes (256 bits) size."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "Digest"
            ],
            "params": [
              {
                "name": "Hash",
                "type": 9
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "logs",
                    "type": 12,
                    "typeName": "Vec<DigestItem<Hash>>",
                    "docs": [
                      "A list of logs in the digest."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Generic header digest."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 13
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "DigestItem"
            ],
            "params": [
              {
                "name": "Hash",
                "type": 9
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ChangesTrieRoot",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "System digest item that contains the root of changes trie at given",
                      "block. It is created for every block iff runtime supports changes",
                      "trie creation."
                    ]
                  },
                  {
                    "name": "PreRuntime",
                    "fields": [
                      {
                        "name": null,
                        "type": 14,
                        "typeName": "ConsensusEngineId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A pre-runtime digest.",
                      "",
                      "These are messages from the consensus engine to the runtime, although",
                      "the consensus engine can (and should) read them itself to avoid",
                      "code and state duplication. It is erroneous for a runtime to produce",
                      "these, but this is not (yet) checked.",
                      "",
                      "NOTE: the runtime is not allowed to panic or fail in an `on_initialize`",
                      "call if an expected `PreRuntime` digest is not present. It is the",
                      "responsibility of a external block verifier to check this. Runtime API calls",
                      "will initialize the block without pre-runtime digests, so initialization",
                      "cannot fail when they are missing."
                    ]
                  },
                  {
                    "name": "Consensus",
                    "fields": [
                      {
                        "name": null,
                        "type": 14,
                        "typeName": "ConsensusEngineId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A message from the runtime to the consensus engine. This should *never*",
                      "be generated by the native code of any consensus engine, but this is not",
                      "checked (yet)."
                    ]
                  },
                  {
                    "name": "Seal",
                    "fields": [
                      {
                        "name": null,
                        "type": 14,
                        "typeName": "ConsensusEngineId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Put a Seal on it. This is only used by native code, and is never seen",
                      "by runtimes."
                    ]
                  },
                  {
                    "name": "ChangesTrieSignal",
                    "fields": [
                      {
                        "name": null,
                        "type": 15,
                        "typeName": "ChangesTrieSignal",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Digest item that contains signal from changes tries manager to the",
                      "native code."
                    ]
                  },
                  {
                    "name": "Other",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some other thing. Unsupported and experimental."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Digest item that is able to encode/decode \\'system\\' digest items and",
              "provide opaque access to other items."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 4,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_runtime",
              "generic",
              "digest",
              "ChangesTrieSignal"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewConfiguration",
                    "fields": [
                      {
                        "name": null,
                        "type": 16,
                        "typeName": "Option<ChangesTrieConfiguration>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "New changes trie configuration is enacted, starting from **next block**.",
                      "",
                      "The block that emits this signal will contain changes trie (CT) that covers",
                      "blocks range [BEGIN; current block], where BEGIN is (order matters):",
                      "- LAST_TOP_LEVEL_DIGEST_BLOCK+1 if top level digest CT has ever been created",
                      "  using current configuration AND the last top level digest CT has been created",
                      "  at block LAST_TOP_LEVEL_DIGEST_BLOCK;",
                      "- LAST_CONFIGURATION_CHANGE_BLOCK+1 if there has been CT configuration change",
                      "  before and the last configuration change happened at block",
                      "  LAST_CONFIGURATION_CHANGE_BLOCK;",
                      "- 1 otherwise."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Available changes trie signals."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 17
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 17,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_core",
              "changes_trie",
              "ChangesTrieConfiguration"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "digest_interval",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Interval (in blocks) at which level1-digests are created. Digests are not",
                      "created when this is less or equal to 1."
                    ]
                  },
                  {
                    "name": "digest_levels",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Maximal number of digest levels in hierarchy. 0 means that digests are not",
                      "created at all (even level1 digests). 1 means only level1-digests are created.",
                      "2 means that every digest_interval^2 there will be a level2-digest, and so on.",
                      "Please ensure that maximum digest interval (i.e. digest_interval^digest_levels)",
                      "is within `u32` limits. Otherwise you\\'ll never see digests covering such intervals",
                      "&& maximal digests interval will be truncated to the last interval that fits",
                      "`u32` limits."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Substrate changes trie configuration."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 19
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "EventRecord"
            ],
            "params": [
              {
                "name": "E",
                "type": 20
              },
              {
                "name": "T",
                "type": 9
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "phase",
                    "type": 99,
                    "typeName": "Phase",
                    "docs": [
                      "The phase of the block it happened in."
                    ]
                  },
                  {
                    "name": "event",
                    "type": 20,
                    "typeName": "E",
                    "docs": [
                      "The event itself."
                    ]
                  },
                  {
                    "name": "topics",
                    "type": 100,
                    "typeName": "Vec<T>",
                    "docs": [
                      "The list of the topics this event has."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Record of an event happening."
            ]
          },
          {
            "path": [
              "node_runtime",
              "Event"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "System",
                    "fields": [
                      {
                        "name": null,
                        "type": 21,
                        "typeName": "frame_system::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 0,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Utility",
                    "fields": [
                      {
                        "name": null,
                        "type": 28,
                        "typeName": "pallet_utility::Event",
                        "docs": []
                      }
                    ],
                    "index": 1,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Indices",
                    "fields": [
                      {
                        "name": null,
                        "type": 29,
                        "typeName": "pallet_indices::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 5,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Balances",
                    "fields": [
                      {
                        "name": null,
                        "type": 30,
                        "typeName": "pallet_balances::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 6,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "ElectionProviderMultiPhase",
                    "fields": [
                      {
                        "name": null,
                        "type": 32,
                        "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 8,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Staking",
                    "fields": [
                      {
                        "name": null,
                        "type": 36,
                        "typeName": "pallet_staking::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 9,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Session",
                    "fields": [
                      {
                        "name": null,
                        "type": 37,
                        "typeName": "pallet_session::Event",
                        "docs": []
                      }
                    ],
                    "index": 10,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Democracy",
                    "fields": [
                      {
                        "name": null,
                        "type": 38,
                        "typeName": "pallet_democracy::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 11,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Council",
                    "fields": [
                      {
                        "name": null,
                        "type": 41,
                        "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                        "docs": []
                      }
                    ],
                    "index": 12,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TechnicalCommittee",
                    "fields": [
                      {
                        "name": null,
                        "type": 45,
                        "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                        "docs": []
                      }
                    ],
                    "index": 13,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Elections",
                    "fields": [
                      {
                        "name": null,
                        "type": 47,
                        "typeName": "pallet_elections_phragmen::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 14,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TechnicalMembership",
                    "fields": [
                      {
                        "name": null,
                        "type": 50,
                        "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                        "docs": []
                      }
                    ],
                    "index": 15,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Grandpa",
                    "fields": [
                      {
                        "name": null,
                        "type": 53,
                        "typeName": "pallet_grandpa::Event",
                        "docs": []
                      }
                    ],
                    "index": 16,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Treasury",
                    "fields": [
                      {
                        "name": null,
                        "type": 58,
                        "typeName": "pallet_treasury::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 17,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Contracts",
                    "fields": [
                      {
                        "name": null,
                        "type": 60,
                        "typeName": "pallet_contracts::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 18,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Sudo",
                    "fields": [
                      {
                        "name": null,
                        "type": 61,
                        "typeName": "pallet_sudo::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 19,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "ImOnline",
                    "fields": [
                      {
                        "name": null,
                        "type": 62,
                        "typeName": "pallet_im_online::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 20,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Offences",
                    "fields": [
                      {
                        "name": null,
                        "type": 71,
                        "typeName": "pallet_offences::Event",
                        "docs": []
                      }
                    ],
                    "index": 22,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Identity",
                    "fields": [
                      {
                        "name": null,
                        "type": 73,
                        "typeName": "pallet_identity::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 25,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Society",
                    "fields": [
                      {
                        "name": null,
                        "type": 74,
                        "typeName": "pallet_society::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 26,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Recovery",
                    "fields": [
                      {
                        "name": null,
                        "type": 76,
                        "typeName": "pallet_recovery::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 27,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Vesting",
                    "fields": [
                      {
                        "name": null,
                        "type": 77,
                        "typeName": "pallet_vesting::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 28,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Scheduler",
                    "fields": [
                      {
                        "name": null,
                        "type": 78,
                        "typeName": "pallet_scheduler::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 29,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Proxy",
                    "fields": [
                      {
                        "name": null,
                        "type": 81,
                        "typeName": "pallet_proxy::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 30,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Multisig",
                    "fields": [
                      {
                        "name": null,
                        "type": 84,
                        "typeName": "pallet_multisig::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 31,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Bounties",
                    "fields": [
                      {
                        "name": null,
                        "type": 86,
                        "typeName": "pallet_bounties::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 32,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Tips",
                    "fields": [
                      {
                        "name": null,
                        "type": 87,
                        "typeName": "pallet_tips::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 33,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "name": null,
                        "type": 88,
                        "typeName": "pallet_assets::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 34,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Lottery",
                    "fields": [
                      {
                        "name": null,
                        "type": 89,
                        "typeName": "pallet_lottery::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 36,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Gilt",
                    "fields": [
                      {
                        "name": null,
                        "type": 91,
                        "typeName": "pallet_gilt::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 37,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Uniques",
                    "fields": [
                      {
                        "name": null,
                        "type": 92,
                        "typeName": "pallet_uniques::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 38,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TransactionStorage",
                    "fields": [
                      {
                        "name": null,
                        "type": 98,
                        "typeName": "pallet_transaction_storage::Event<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 39,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ExtrinsicSuccess",
                    "fields": [
                      {
                        "name": null,
                        "type": 22,
                        "typeName": "DispatchInfo",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An extrinsic completed successfully. \\\\[info\\\\]"
                    ]
                  },
                  {
                    "name": "ExtrinsicFailed",
                    "fields": [
                      {
                        "name": null,
                        "type": 25,
                        "typeName": "DispatchError",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 22,
                        "typeName": "DispatchInfo",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An extrinsic failed. \\\\[error, info\\\\]"
                    ]
                  },
                  {
                    "name": "CodeUpdated",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "`:code` was updated."
                    ]
                  },
                  {
                    "name": "NewAccount",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A new \\\\[account\\\\] was created."
                    ]
                  },
                  {
                    "name": "KilledAccount",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An \\\\[account\\\\] was reaped."
                    ]
                  },
                  {
                    "name": "Remarked",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "On on-chain remark happened. \\\\[origin, remark_hash\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Event for the System pallet.",
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "frame_support",
              "weights",
              "DispatchInfo"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "weight",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of this transaction."
                    ]
                  },
                  {
                    "name": "class",
                    "type": 23,
                    "typeName": "DispatchClass",
                    "docs": [
                      "Class of this transaction."
                    ]
                  },
                  {
                    "name": "pays_fee",
                    "type": 24,
                    "typeName": "Pays",
                    "docs": [
                      "Does this transaction pay fees."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A bundle of static information collected from the `#[weight = $x]` attributes."
            ]
          },
          {
            "path": [
              "frame_support",
              "weights",
              "DispatchClass"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Normal",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "A normal dispatch."
                    ]
                  },
                  {
                    "name": "Operational",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "An operational dispatch."
                    ]
                  },
                  {
                    "name": "Mandatory",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "A mandatory dispatch. These kinds of dispatch are always included regardless of their",
                      "weight, therefore it is critical that they are separately validated to ensure that a",
                      "malicious validator cannot craft a valid but impossibly heavy block. Usually this just means",
                      "ensuring that the extrinsic can only be included once and that it is always very light.",
                      "",
                      "Do *NOT* use it for extrinsics that can be heavy.",
                      "",
                      "The only real use case for this is inherent extrinsics that are required to execute in a",
                      "block for the block to be valid, and it solves the issue in the case that the block",
                      "initialization is sufficiently heavy to mean that those inherents do not fit into the",
                      "block. Essentially, we assume that in these exceptional circumstances, it is better to",
                      "allow an overweight block to be created than to not allow any block at all to be created."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A generalized group of dispatch types.",
              "",
              "NOTE whenever upgrading the enum make sure to also update",
              "[DispatchClass::all] and [DispatchClass::non_mandatory] helper functions."
            ]
          },
          {
            "path": [
              "frame_support",
              "weights",
              "Pays"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Yes",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Transactor will pay related fees."
                    ]
                  },
                  {
                    "name": "No",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Transactor will NOT pay related fees."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Explicit enum to denote if a transaction pays fee or not."
            ]
          },
          {
            "path": [
              "sp_runtime",
              "DispatchError"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Other",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some error occurred."
                    ]
                  },
                  {
                    "name": "CannotLookup",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Failed to lookup some data."
                    ]
                  },
                  {
                    "name": "BadOrigin",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A bad origin."
                    ]
                  },
                  {
                    "name": "Module",
                    "fields": [
                      {
                        "name": "index",
                        "type": 2,
                        "typeName": "u8",
                        "docs": [
                          "Module index, matching the metadata module index."
                        ]
                      },
                      {
                        "name": "error",
                        "type": 2,
                        "typeName": "u8",
                        "docs": [
                          "Module specific error value."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A custom error in a module."
                    ]
                  },
                  {
                    "name": "ConsumerRemaining",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "At least one consumer is remaining so the account cannot be destroyed."
                    ]
                  },
                  {
                    "name": "NoProviders",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There are no providers so the account cannot be created."
                    ]
                  },
                  {
                    "name": "Token",
                    "fields": [
                      {
                        "name": null,
                        "type": 26,
                        "typeName": "TokenError",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An error to do with tokens."
                    ]
                  },
                  {
                    "name": "Arithmetic",
                    "fields": [
                      {
                        "name": null,
                        "type": 27,
                        "typeName": "ArithmeticError",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An arithmetic error."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Reason why a dispatch call failed."
            ]
          },
          {
            "path": [
              "sp_runtime",
              "TokenError"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NoFunds",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Funds are unavailable."
                    ]
                  },
                  {
                    "name": "WouldDie",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Account that must exist would die."
                    ]
                  },
                  {
                    "name": "BelowMinimum",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "Account cannot exist with the funds that would be given."
                    ]
                  },
                  {
                    "name": "CannotCreate",
                    "fields": [],
                    "index": null,
                    "discriminant": 3,
                    "docs": [
                      "Account cannot be created."
                    ]
                  },
                  {
                    "name": "UnknownAsset",
                    "fields": [],
                    "index": null,
                    "discriminant": 4,
                    "docs": [
                      "The asset in question is unknown."
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [],
                    "index": null,
                    "discriminant": 5,
                    "docs": [
                      "Funds exist but are frozen."
                    ]
                  },
                  {
                    "name": "Unsupported",
                    "fields": [],
                    "index": null,
                    "discriminant": 6,
                    "docs": [
                      "Operation is not supported by the asset."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Description of what went wrong when trying to complete an operation on a token."
            ]
          },
          {
            "path": [
              "sp_runtime",
              "ArithmeticError"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Underflow",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Underflow."
                    ]
                  },
                  {
                    "name": "Overflow",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Overflow."
                    ]
                  },
                  {
                    "name": "DivisionByZero",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "Division by zero."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Arithmetic errors."
            ]
          },
          {
            "path": [
              "pallet_utility",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BatchInterrupted",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 25,
                        "typeName": "DispatchError",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                      "well as the error. \\\\[index, error\\\\]"
                    ]
                  },
                  {
                    "name": "BatchCompleted",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Batch of dispatches completed fully with no error."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_indices",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "IndexAssigned",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A account index was assigned. \\\\[index, who\\\\]"
                    ]
                  },
                  {
                    "name": "IndexFreed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A account index has been freed up (unassigned). \\\\[index\\\\]"
                    ]
                  },
                  {
                    "name": "IndexFrozen",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A account index has been frozen to its current account ID. \\\\[index, who\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_balances",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Endowed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account was created with some free balance. \\\\[account, free_balance\\\\]"
                    ]
                  },
                  {
                    "name": "DustLost",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                      "resulting in an outright loss. \\\\[account, balance\\\\]"
                    ]
                  },
                  {
                    "name": "Transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Transfer succeeded. \\\\[from, to, value\\\\]"
                    ]
                  },
                  {
                    "name": "BalanceSet",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A balance was set by root. \\\\[who, free, reserved\\\\]"
                    ]
                  },
                  {
                    "name": "Deposit",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some amount was deposited (e.g. for transaction fees). \\\\[who, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "Reserved",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some balance was reserved (moved from free to reserved). \\\\[who, value\\\\]"
                    ]
                  },
                  {
                    "name": "Unreserved",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some balance was unreserved (moved from reserved to free). \\\\[who, value\\\\]"
                    ]
                  },
                  {
                    "name": "ReserveRepatriated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "T::Balance",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 31,
                        "typeName": "Status",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some balance was moved from the reserve of the first account to the second account.",
                      "Final argument indicates the destination balance type.",
                      "\\\\[from, to, balance, destination_status\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "frame_support",
              "traits",
              "tokens",
              "misc",
              "BalanceStatus"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Free",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Funds are free, as corresponding to `free` item in Balances."
                    ]
                  },
                  {
                    "name": "Reserved",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Funds are reserved, as corresponding to `reserved` item in Balances."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Status of funds."
            ]
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "SolutionStored",
                    "fields": [
                      {
                        "name": null,
                        "type": 33,
                        "typeName": "ElectionCompute",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A solution was stored with the given compute.",
                      "",
                      "If the solution is signed, this means that it hasn\\'t yet been processed. If the",
                      "solution is unsigned, this means that it has also been processed.",
                      "",
                      "The `bool` is `true` when a previous solution was ejected to make room for this one."
                    ]
                  },
                  {
                    "name": "ElectionFinalized",
                    "fields": [
                      {
                        "name": null,
                        "type": 35,
                        "typeName": "Option<ElectionCompute>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The election has been finalized, with `Some` of the given computation, or else if the",
                      "election failed, `None`."
                    ]
                  },
                  {
                    "name": "Rewarded",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account has been rewarded for their signed submission being finalized."
                    ]
                  },
                  {
                    "name": "Slashed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account has been slashed for submitting an invalid signed submission."
                    ]
                  },
                  {
                    "name": "SignedPhaseStarted",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The signed phase of the given round has started."
                    ]
                  },
                  {
                    "name": "UnsignedPhaseStarted",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The unsigned phase of the given round has started."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "ElectionCompute"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "OnChain",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Election was computed on-chain."
                    ]
                  },
                  {
                    "name": "Signed",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Election was computed with a signed submission."
                    ]
                  },
                  {
                    "name": "Unsigned",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "Election was computed with an unsigned submission."
                    ]
                  },
                  {
                    "name": "Emergency",
                    "fields": [],
                    "index": null,
                    "discriminant": 3,
                    "docs": [
                      "Election was computed with emergency status."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The type of `Computation` that provided this election data."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "primitive": "Bool"
            },
            "docs": []
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 33
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 33,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "EraPayout",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "EraIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The era payout has been set; the first balance is the validator-payout; the second is",
                      "the remainder from the maximum amount of reward.",
                      "\\\\[era_index, validator_payout, remainder\\\\]"
                    ]
                  },
                  {
                    "name": "Reward",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The staker has been rewarded by this amount. \\\\[stash, amount\\\\]"
                    ]
                  },
                  {
                    "name": "Slash",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "One validator (and its nominators) has been slashed by the given amount.",
                      "\\\\[validator, amount\\\\]"
                    ]
                  },
                  {
                    "name": "OldSlashingReportDiscarded",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An old slashing report from a prior era was discarded because it could",
                      "not be processed. \\\\[session_index\\\\]"
                    ]
                  },
                  {
                    "name": "StakingElection",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A new set of stakers was elected."
                    ]
                  },
                  {
                    "name": "Bonded",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account has bonded this amount. \\\\[stash, amount\\\\]",
                      "",
                      "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                      "it will not be emitted for staking rewards when they are added to stake."
                    ]
                  },
                  {
                    "name": "Unbonded",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account has unbonded this amount. \\\\[stash, amount\\\\]"
                    ]
                  },
                  {
                    "name": "Withdrawn",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                      "from the unlocking queue. \\\\[stash, amount\\\\]"
                    ]
                  },
                  {
                    "name": "Kicked",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A nominator has been kicked from a validator. \\\\[nominator, stash\\\\]"
                    ]
                  },
                  {
                    "name": "StakingElectionFailed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The election failed. No new era is planned."
                    ]
                  },
                  {
                    "name": "Chilled",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account has stopped participating as either a validator or nominator.",
                      "\\\\[stash\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_session",
              "Event"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewSession",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "SessionIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" New session has happened. Note that the argument is the \\[session_index\\], not the block",
                      "r\" number as the type might suggest."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              ""
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Proposed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "PropIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A motion has been proposed by a public account. \\\\[proposal_index, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "Tabled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "PropIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A public proposal has been tabled for referendum vote. \\\\[proposal_index, deposit, depositors\\\\]"
                    ]
                  },
                  {
                    "name": "ExternalTabled",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An external proposal has been tabled."
                    ]
                  },
                  {
                    "name": "Started",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 40,
                        "typeName": "VoteThreshold",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A referendum has begun. \\\\[ref_index, threshold\\\\]"
                    ]
                  },
                  {
                    "name": "Passed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal has been approved by referendum. \\\\[ref_index\\\\]"
                    ]
                  },
                  {
                    "name": "NotPassed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal has been rejected by referendum. \\\\[ref_index\\\\]"
                    ]
                  },
                  {
                    "name": "Cancelled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A referendum has been cancelled. \\\\[ref_index\\\\]"
                    ]
                  },
                  {
                    "name": "Executed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal has been enacted. \\\\[ref_index, is_ok\\\\]"
                    ]
                  },
                  {
                    "name": "Delegated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An account has delegated their vote to another account. \\\\[who, target\\\\]"
                    ]
                  },
                  {
                    "name": "Undelegated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An \\\\[account\\\\] has cancelled a previous delegation operation."
                    ]
                  },
                  {
                    "name": "Vetoed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An external proposal has been vetoed. \\\\[who, proposal_hash, until\\\\]"
                    ]
                  },
                  {
                    "name": "PreimageNoted",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal\\'s preimage was noted, and the deposit taken. \\\\[proposal_hash, who, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "PreimageUsed",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal preimage was removed and used (the deposit was returned).",
                      "\\\\[proposal_hash, provider, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "PreimageInvalid",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal could not be executed because its preimage was invalid.",
                      "\\\\[proposal_hash, ref_index\\\\]"
                    ]
                  },
                  {
                    "name": "PreimageMissing",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal could not be executed because its preimage was missing.",
                      "\\\\[proposal_hash, ref_index\\\\]"
                    ]
                  },
                  {
                    "name": "PreimageReaped",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A registered preimage was removed and the deposit collected by the reaper.",
                      "\\\\[proposal_hash, provider, deposit, reaper\\\\]"
                    ]
                  },
                  {
                    "name": "Unlocked",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An \\\\[account\\\\] has been unlocked successfully."
                    ]
                  },
                  {
                    "name": "Blacklisted",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proposal \\\\[hash\\\\] has been blacklisted permanently."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 0
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_democracy",
              "vote_threshold",
              "VoteThreshold"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "SuperMajorityApprove",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "A supermajority of approvals is needed to pass this vote."
                    ]
                  },
                  {
                    "name": "SuperMajorityAgainst",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "A supermajority of rejects is needed to fail this vote."
                    ]
                  },
                  {
                    "name": "SimpleMajority",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "A simple majority of approvals is needed to pass this vote."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A means of determining if a vote is past pass threshold."
            ]
          },
          {
            "path": [
              "pallet_collective",
              "RawEvent"
            ],
            "params": [
              {
                "name": "Hash",
                "type": 9
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "I",
                "type": 42
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Proposed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion (given hash) has been proposed (by given account) with a threshold (given",
                      "r\" `MemberCount`).",
                      "r\" \\[account, proposal_index, proposal_hash, threshold\\]"
                    ]
                  },
                  {
                    "name": "Voted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion (given hash) has been voted on by given account, leaving",
                      "r\" a tally (yes votes and no votes given respectively as `MemberCount`).",
                      "r\" \\[account, proposal_hash, voted, yes, no\\]"
                    ]
                  },
                  {
                    "name": "Approved",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion was approved by the required threshold.",
                      "r\" \\[proposal_hash\\]"
                    ]
                  },
                  {
                    "name": "Disapproved",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion was not approved by the required threshold.",
                      "r\" \\[proposal_hash\\]"
                    ]
                  },
                  {
                    "name": "Executed",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion was executed; result will be `Ok` if it returned without error.",
                      "r\" \\[proposal_hash, result\\]"
                    ]
                  },
                  {
                    "name": "MemberExecuted",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A single member did some action; result will be `Ok` if it returned without error.",
                      "r\" \\[proposal_hash, result\\]"
                    ]
                  },
                  {
                    "name": "Closed",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A proposal was closed because its threshold was reached or after its duration was up.",
                      "r\" \\[proposal_hash, yes, no\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              ""
            ]
          },
          {
            "path": [
              "pallet_collective",
              "Instance1"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": []
              }
            },
            "docs": [
              "r\"Module instance"
            ]
          },
          {
            "path": [
              "Result"
            ],
            "params": [
              {
                "name": "T",
                "type": 44
              },
              {
                "name": "E",
                "type": 25
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ok",
                    "fields": [
                      {
                        "name": null,
                        "type": 44,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Err",
                    "fields": [
                      {
                        "name": null,
                        "type": 25,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": []
            },
            "docs": []
          },
          {
            "path": [
              "pallet_collective",
              "RawEvent"
            ],
            "params": [
              {
                "name": "Hash",
                "type": 9
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "I",
                "type": 46
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Proposed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion (given hash) has been proposed (by given account) with a threshold (given",
                      "r\" `MemberCount`).",
                      "r\" \\[account, proposal_index, proposal_hash, threshold\\]"
                    ]
                  },
                  {
                    "name": "Voted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion (given hash) has been voted on by given account, leaving",
                      "r\" a tally (yes votes and no votes given respectively as `MemberCount`).",
                      "r\" \\[account, proposal_hash, voted, yes, no\\]"
                    ]
                  },
                  {
                    "name": "Approved",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion was approved by the required threshold.",
                      "r\" \\[proposal_hash\\]"
                    ]
                  },
                  {
                    "name": "Disapproved",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion was not approved by the required threshold.",
                      "r\" \\[proposal_hash\\]"
                    ]
                  },
                  {
                    "name": "Executed",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A motion was executed; result will be `Ok` if it returned without error.",
                      "r\" \\[proposal_hash, result\\]"
                    ]
                  },
                  {
                    "name": "MemberExecuted",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A single member did some action; result will be `Ok` if it returned without error.",
                      "r\" \\[proposal_hash, result\\]"
                    ]
                  },
                  {
                    "name": "Closed",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A proposal was closed because its threshold was reached or after its duration was up.",
                      "r\" \\[proposal_hash, yes, no\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              ""
            ]
          },
          {
            "path": [
              "pallet_collective",
              "Instance2"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": []
              }
            },
            "docs": [
              "r\"Module instance"
            ]
          },
          {
            "path": [
              "pallet_elections_phragmen",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewTerm",
                    "fields": [
                      {
                        "name": null,
                        "type": 48,
                        "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A new term with \\\\[new_members\\\\]. This indicates that enough candidates existed to run",
                      "the election, not that enough have has been elected. The inner value must be examined",
                      "for this purpose. A `NewTerm(\\\\[\\\\])` indicates that some candidates got their bond",
                      "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                      "begin with."
                    ]
                  },
                  {
                    "name": "EmptyTerm",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No (or not enough) candidates existed for this round. This is different from",
                      "`NewTerm(\\\\[\\\\])`. See the description of `NewTerm`."
                    ]
                  },
                  {
                    "name": "ElectionError",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Internal error happened while trying to perform election."
                    ]
                  },
                  {
                    "name": "MemberKicked",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A \\\\[member\\\\] has been removed. This should always be followed by either `NewTerm` or",
                      "`EmptyTerm`."
                    ]
                  },
                  {
                    "name": "Renounced",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Someone has renounced their candidacy."
                    ]
                  },
                  {
                    "name": "CandidateSlashed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A \\\\[candidate\\\\] was slashed by \\\\[amount\\\\] due to failing to obtain a seat as member or",
                      "runner-up.",
                      "",
                      "Note that old members and runners-up are also candidates."
                    ]
                  },
                  {
                    "name": "SeatHolderSlashed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "<T as frame_system::Config>::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A \\\\[seat holder\\\\] was slashed by \\\\[amount\\\\] by being forcefully removed from the set."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 49
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_membership",
              "RawEvent"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Event",
                "type": 20
              },
              {
                "name": "I",
                "type": 51
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "MemberAdded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The given member was added; see the transaction for who."
                    ]
                  },
                  {
                    "name": "MemberRemoved",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The given member was removed; see the transaction for who."
                    ]
                  },
                  {
                    "name": "MembersSwapped",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Two members were swapped; see the transaction for who."
                    ]
                  },
                  {
                    "name": "MembersReset",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The membership was reset; see the transaction for who the new set is."
                    ]
                  },
                  {
                    "name": "KeyChanged",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" One of the members' keys changed."
                    ]
                  },
                  {
                    "name": "Dummy",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "sp_std::marker::PhantomData<(AccountId, Event)>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Phantom member, never used."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              ""
            ]
          },
          {
            "path": [
              "pallet_membership",
              "Instance1"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": []
              }
            },
            "docs": [
              "r\"Module instance"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "phantom": null
            },
            "docs": []
          },
          {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewAuthorities",
                    "fields": [
                      {
                        "name": null,
                        "type": 54,
                        "typeName": "AuthorityList",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "New authority set has been applied. \\\\[authority_set\\\\]"
                    ]
                  },
                  {
                    "name": "Paused",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Current authority set has been paused."
                    ]
                  },
                  {
                    "name": "Resumed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Current authority set has been resumed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 55
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                56,
                8
              ]
            },
            "docs": []
          },
          {
            "path": [
              "sp_finality_grandpa",
              "app",
              "Public"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 57,
                    "typeName": "ed25519::Public",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
            ]
          },
          {
            "path": [
              "sp_core",
              "ed25519",
              "Public"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 1,
                    "typeName": "[u8; 32]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A public key."
            ]
          },
          {
            "path": [
              "pallet_treasury",
              "RawEvent"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "I",
                "type": 59
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Proposed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ProposalIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" New proposal. \\[proposal_index\\]"
                    ]
                  },
                  {
                    "name": "Spending",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
                    ]
                  },
                  {
                    "name": "Awarded",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
                    ]
                  },
                  {
                    "name": "Rejected",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
                    ]
                  },
                  {
                    "name": "Burnt",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Some of our funds have been burnt. \\[burn\\]"
                    ]
                  },
                  {
                    "name": "Rollover",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Spending has finished; this is the amount that rolls over until next spend.",
                      "r\" \\[budget_remaining\\]"
                    ]
                  },
                  {
                    "name": "Deposit",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Some funds have been deposited. \\[deposit\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              ""
            ]
          },
          {
            "path": [
              "pallet_treasury",
              "DefaultInstance"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": []
              }
            },
            "docs": [
              "r\"Default module instance"
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Instantiated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Contract deployed by address at the specified address. \\\\[deployer, contract\\\\]"
                    ]
                  },
                  {
                    "name": "Evicted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Contract has been evicted and is now in tombstone state. \\\\[contract\\\\]"
                    ]
                  },
                  {
                    "name": "Terminated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Contract has been terminated without leaving a tombstone.",
                      "\\\\[contract, beneficiary\\\\]",
                      "",
                      "# Params",
                      "",
                      "- `contract`: The contract that was terminated.",
                      "- `beneficiary`: The account that received the contracts remaining balance.",
                      "",
                      "# Note",
                      "",
                      "The only way for a contract to be removed without a tombstone and emitting",
                      "this event is by calling `seal_terminate`."
                    ]
                  },
                  {
                    "name": "Restored",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Restoration of a contract has been successful.",
                      "\\\\[restorer, dest, code_hash, rent_allowance\\\\]",
                      "",
                      "# Params",
                      "",
                      "- `restorer`: Account ID of the restoring contract.",
                      "- `dest`: Account ID of the restored contract.",
                      "- `code_hash`: Code hash of the restored contract.",
                      "- `rent_allowance`: Rent allowance of the restored contract."
                    ]
                  },
                  {
                    "name": "CodeStored",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Code with the specified hash has been stored. \\\\[code_hash\\\\]"
                    ]
                  },
                  {
                    "name": "ScheduleUpdated",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Triggered when the current schedule is updated.",
                      "\\\\[version\\\\]",
                      "",
                      "# Params",
                      "",
                      "- `version`: The version of the newly set schedule."
                    ]
                  },
                  {
                    "name": "ContractEmitted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A custom event emitted by the contract.",
                      "\\\\[contract, data\\\\]",
                      "",
                      "# Params",
                      "",
                      "- `contract`: The contract that emitted the event.",
                      "- `data`: Data supplied by the contract. Metadata generated during contract",
                      "          compilation is needed to decode it."
                    ]
                  },
                  {
                    "name": "CodeRemoved",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A code with the specified hash was removed.",
                      "\\\\[code_hash\\\\]",
                      "",
                      "This happens when the last contract that uses this code hash was removed or evicted."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_sudo",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Sudid",
                    "fields": [
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A sudo just took place. \\\\[result\\\\]"
                    ]
                  },
                  {
                    "name": "KeyChanged",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The \\\\[sudoer\\\\] just switched identity; the old key is supplied."
                    ]
                  },
                  {
                    "name": "SudoAsDone",
                    "fields": [
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A sudo just took place. \\\\[result\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_im_online",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "HeartbeatReceived",
                    "fields": [
                      {
                        "name": null,
                        "type": 63,
                        "typeName": "T::AuthorityId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A new heartbeat was received from `AuthorityId` \\\\[authority_id\\\\]"
                    ]
                  },
                  {
                    "name": "AllGood",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "At the end of the session, no offence was committed."
                    ]
                  },
                  {
                    "name": "SomeOffline",
                    "fields": [
                      {
                        "name": null,
                        "type": 65,
                        "typeName": "Vec<IdentificationTuple<T>>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "At the end of the session, at least one validator was found to be \\\\[offline\\\\]."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_im_online",
              "sr25519",
              "app_sr25519",
              "Public"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 64,
                    "typeName": "sr25519::Public",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
            ]
          },
          {
            "path": [
              "sp_core",
              "sr25519",
              "Public"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 1,
                    "typeName": "[u8; 32]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "An Schnorrkel/Ristretto x25519 (\\\"sr25519\\\") public key."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 66
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                67
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "Exposure"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 68,
                    "typeName": "Balance",
                    "docs": [
                      "The total balance backing this validator."
                    ]
                  },
                  {
                    "name": "own",
                    "type": 68,
                    "typeName": "Balance",
                    "docs": [
                      "The validator\\'s own stash that is exposed."
                    ]
                  },
                  {
                    "name": "others",
                    "type": 69,
                    "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
                    "docs": [
                      "The portions of nominators stashes that are exposed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A snapshot of the stake backing a single validator in the system."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "compact": {
                "type": 6
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 70
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "IndividualExposure"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The stash account of the nominator in question."
                    ]
                  },
                  {
                    "name": "value",
                    "type": 68,
                    "typeName": "Balance",
                    "docs": [
                      "Amount of funds exposed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The amount of exposure (to slashing) than an individual nominator has."
            ]
          },
          {
            "path": [
              "pallet_offences",
              "pallet",
              "Event"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Offence",
                    "fields": [
                      {
                        "name": null,
                        "type": 72,
                        "typeName": "Kind",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "OpaqueTimeSlot",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There is an offence reported of the given `kind` happened at the `session_index` and",
                      "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                      "\\\\[kind, timeslot\\\\]."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events type.",
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 16,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_identity",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "IdentitySet",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A name was set or reset (which will remove all judgements). \\\\[who\\\\]"
                    ]
                  },
                  {
                    "name": "IdentityCleared",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A name was cleared, and the given balance returned. \\\\[who, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "IdentityKilled",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A name was removed and the given balance slashed. \\\\[who, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "JudgementRequested",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A judgement was asked from a registrar. \\\\[who, registrar_index\\\\]"
                    ]
                  },
                  {
                    "name": "JudgementUnrequested",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A judgement request was retracted. \\\\[who, registrar_index\\\\]"
                    ]
                  },
                  {
                    "name": "JudgementGiven",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A judgement was given by a registrar. \\\\[target, registrar_index\\\\]"
                    ]
                  },
                  {
                    "name": "RegistrarAdded",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A registrar was added. \\\\[registrar_index\\\\]"
                    ]
                  },
                  {
                    "name": "SubIdentityAdded",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A sub-identity was added to an identity and the deposit paid. \\\\[sub, main, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "SubIdentityRemoved",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A sub-identity was removed from an identity and the deposit freed.",
                      "\\\\[sub, main, deposit\\\\]"
                    ]
                  },
                  {
                    "name": "SubIdentityRevoked",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A sub-identity was cleared, and the given deposit repatriated from the",
                      "main identity account to the sub-identity account. \\\\[sub, main, deposit\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_society",
              "RawEvent"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "I",
                "type": 75
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Founded",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The society is founded by the given identity. \\[founder\\]"
                    ]
                  },
                  {
                    "name": "Bid",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A membership bid just happened. The given account is the candidate's ID and their offer",
                      "r\" is the second. \\[candidate_id, offer\\]"
                    ]
                  },
                  {
                    "name": "Vouch",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A membership bid just happened by vouching. The given account is the candidate's ID and",
                      "r\" their offer is the second. The vouching party is the third. \\[candidate_id, offer, vouching\\]"
                    ]
                  },
                  {
                    "name": "AutoUnbid",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A \\[candidate\\] was dropped (due to an excess of bids in the system)."
                    ]
                  },
                  {
                    "name": "Unbid",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A \\[candidate\\] was dropped (by their request)."
                    ]
                  },
                  {
                    "name": "Unvouch",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A \\[candidate\\] was dropped (by request of who vouched for them)."
                    ]
                  },
                  {
                    "name": "Inducted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A group of candidates have been inducted. The batch's primary is the first value, the",
                      "r\" batch in full is the second. \\[primary, candidates\\]"
                    ]
                  },
                  {
                    "name": "SuspendedMemberJudgement",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A suspended member has been judged. \\[who, judged\\]"
                    ]
                  },
                  {
                    "name": "CandidateSuspended",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A \\[candidate\\] has been suspended"
                    ]
                  },
                  {
                    "name": "MemberSuspended",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A \\[member\\] has been suspended"
                    ]
                  },
                  {
                    "name": "Challenged",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A \\[member\\] has been challenged"
                    ]
                  },
                  {
                    "name": "Vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A vote has been placed \\[candidate, voter, vote\\]"
                    ]
                  },
                  {
                    "name": "DefenderVote",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A vote has been placed for a defending member \\[voter, vote\\]"
                    ]
                  },
                  {
                    "name": "NewMaxMembers",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A new \\[max\\] member count has been set"
                    ]
                  },
                  {
                    "name": "Unfounded",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Society is unfounded. \\[founder\\]"
                    ]
                  },
                  {
                    "name": "Deposit",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Some funds were deposited into the society account. \\[value\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              "",
              "r\" Events for this module."
            ]
          },
          {
            "path": [
              "pallet_society",
              "DefaultInstance"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": []
              }
            },
            "docs": [
              "r\"Default module instance"
            ]
          },
          {
            "path": [
              "pallet_recovery",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "RecoveryCreated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A recovery process has been set up for an \\\\[account\\\\]."
                    ]
                  },
                  {
                    "name": "RecoveryInitiated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A recovery process has been initiated for lost account by rescuer account.",
                      "\\\\[lost, rescuer\\\\]"
                    ]
                  },
                  {
                    "name": "RecoveryVouched",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A recovery process for lost account by rescuer account has been vouched for by sender.",
                      "\\\\[lost, rescuer, sender\\\\]"
                    ]
                  },
                  {
                    "name": "RecoveryClosed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A recovery process for lost account by rescuer account has been closed.",
                      "\\\\[lost, rescuer\\\\]"
                    ]
                  },
                  {
                    "name": "AccountRecovered",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Lost account has been successfully recovered by rescuer account.",
                      "\\\\[lost, rescuer\\\\]"
                    ]
                  },
                  {
                    "name": "RecoveryRemoved",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A recovery process has been removed for an \\\\[account\\\\]."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events type.",
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_vesting",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "VestingUpdated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The amount vested has been updated. This could indicate more funds are available. The",
                      "balance given is the amount which is left unvested (and thus locked).",
                      "\\\\[account, unvested\\\\]"
                    ]
                  },
                  {
                    "name": "VestingCompleted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An \\\\[account\\\\] has become fully vested. No further vesting can happen."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Scheduled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Scheduled some task. \\\\[when, index\\\\]"
                    ]
                  },
                  {
                    "name": "Canceled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Canceled some task. \\\\[when, index\\\\]"
                    ]
                  },
                  {
                    "name": "Dispatched",
                    "fields": [
                      {
                        "name": null,
                        "type": 79,
                        "typeName": "TaskAddress<T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 80,
                        "typeName": "Option<Vec<u8>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Dispatched some task. \\\\[task, id, result\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events type.",
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                4
              ]
            },
            "docs": []
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 10
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_proxy",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ProxyExecuted",
                    "fields": [
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A proxy was executed correctly, with the given \\\\[result\\\\]."
                    ]
                  },
                  {
                    "name": "AnonymousCreated",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 82,
                        "typeName": "T::ProxyType",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Anonymous account has been created by new proxy with given",
                      "disambiguation index and proxy type. \\\\[anonymous, who, proxy_type, disambiguation_index\\\\]"
                    ]
                  },
                  {
                    "name": "Announced",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "CallHashOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An announcement was placed to make a call in the future. \\\\[real, proxy, call_hash\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "node_runtime",
              "ProxyType"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Any",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": []
                  },
                  {
                    "name": "NonTransfer",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": []
                  },
                  {
                    "name": "Governance",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": []
                  },
                  {
                    "name": "Staking",
                    "fields": [],
                    "index": null,
                    "discriminant": 3,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "The type used to represent the kinds of proxying allowed."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "primitive": "U16"
            },
            "docs": []
          },
          {
            "path": [
              "pallet_multisig",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewMultisig",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 1,
                        "typeName": "CallHash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A new multisig operation has begun. \\\\[approving, multisig, call_hash\\\\]"
                    ]
                  },
                  {
                    "name": "MultisigApproval",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 85,
                        "typeName": "Timepoint<T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 1,
                        "typeName": "CallHash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A multisig operation has been approved by someone.",
                      "\\\\[approving, timepoint, multisig, call_hash\\\\]"
                    ]
                  },
                  {
                    "name": "MultisigExecuted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 85,
                        "typeName": "Timepoint<T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 1,
                        "typeName": "CallHash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 43,
                        "typeName": "DispatchResult",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A multisig operation has been executed. \\\\[approving, timepoint, multisig, call_hash\\\\]"
                    ]
                  },
                  {
                    "name": "MultisigCancelled",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 85,
                        "typeName": "Timepoint<T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 1,
                        "typeName": "CallHash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A multisig operation has been cancelled. \\\\[cancelling, timepoint, multisig, call_hash\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_multisig",
              "Timepoint"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "height",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The height of the chain at the point in time."
                    ]
                  },
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The index of the extrinsic at the point in time."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A global extrinsic index, formed as the extrinsic index within a block, together with that",
              "block\\'s height. This allows a transaction in which a multisig operation of a particular",
              "composite was created to be uniquely identified."
            ]
          },
          {
            "path": [
              "pallet_bounties",
              "RawEvent"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BountyProposed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" New bounty proposal. \\[index\\]"
                    ]
                  },
                  {
                    "name": "BountyRejected",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"
                    ]
                  },
                  {
                    "name": "BountyBecameActive",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bounty proposal is funded and became active. \\[index\\]"
                    ]
                  },
                  {
                    "name": "BountyAwarded",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"
                    ]
                  },
                  {
                    "name": "BountyClaimed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"
                    ]
                  },
                  {
                    "name": "BountyCanceled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bounty is cancelled. \\[index\\]"
                    ]
                  },
                  {
                    "name": "BountyExtended",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bounty expiry is extended. \\[index\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              ""
            ]
          },
          {
            "path": [
              "pallet_tips",
              "RawEvent"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Hash",
                "type": 9
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NewTip",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A new tip suggestion has been opened. \\[tip_hash\\]"
                    ]
                  },
                  {
                    "name": "TipClosing",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"
                    ]
                  },
                  {
                    "name": "TipClosed",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A tip suggestion has been closed. \\[tip_hash, who, payout\\]"
                    ]
                  },
                  {
                    "name": "TipRetracted",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A tip suggestion has been retracted. \\[tip_hash\\]"
                    ]
                  },
                  {
                    "name": "TipSlashed",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Events for this module.",
              ""
            ]
          },
          {
            "path": [
              "pallet_assets",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Created",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset class was created. \\\\[asset_id, creator, owner\\\\]"
                    ]
                  },
                  {
                    "name": "Issued",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some assets were issued. \\\\[asset_id, owner, total_supply\\\\]"
                    ]
                  },
                  {
                    "name": "Transferred",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some assets were transferred. \\\\[asset_id, from, to, amount\\\\]"
                    ]
                  },
                  {
                    "name": "Burned",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some assets were destroyed. \\\\[asset_id, owner, balance\\\\]"
                    ]
                  },
                  {
                    "name": "TeamChanged",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The management team changed \\\\[asset_id, issuer, admin, freezer\\\\]"
                    ]
                  },
                  {
                    "name": "OwnerChanged",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The owner changed \\\\[asset_id, owner\\\\]"
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some account `who` was frozen. \\\\[asset_id, who\\\\]"
                    ]
                  },
                  {
                    "name": "Thawed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some account `who` was thawed. \\\\[asset_id, who\\\\]"
                    ]
                  },
                  {
                    "name": "AssetFrozen",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset `asset_id` was frozen. \\\\[asset_id\\\\]"
                    ]
                  },
                  {
                    "name": "AssetThawed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset `asset_id` was thawed. \\\\[asset_id\\\\]"
                    ]
                  },
                  {
                    "name": "Destroyed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset class was destroyed."
                    ]
                  },
                  {
                    "name": "ForceCreated",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset class was force-created. \\\\[asset_id, owner\\\\]"
                    ]
                  },
                  {
                    "name": "MetadataSet",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "New metadata has been set for an asset. \\\\[asset_id, name, symbol, decimals, is_frozen\\\\]"
                    ]
                  },
                  {
                    "name": "MetadataCleared",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Metadata has been cleared for an asset. \\\\[asset_id\\\\]"
                    ]
                  },
                  {
                    "name": "ApprovedTransfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "(Additional) funds have been approved for transfer to a destination account.",
                      "\\\\[asset_id, source, delegate, amount\\\\]"
                    ]
                  },
                  {
                    "name": "ApprovalCancelled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An approval for account `delegate` was cancelled by `owner`.",
                      "\\\\[id, owner, delegate\\\\]"
                    ]
                  },
                  {
                    "name": "TransferredApproved",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An `amount` was transferred in its entirety from `owner` to `destination` by",
                      "the approved `delegate`.",
                      "\\\\[id, owner, delegate, destination\\\\]"
                    ]
                  },
                  {
                    "name": "AssetStatusChanged",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset has had its attributes changed by the `Force` origin.",
                      "\\\\[id\\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_lottery",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "LotteryStarted",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A lottery has been started!"
                    ]
                  },
                  {
                    "name": "CallsUpdated",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A new set of calls have been set!"
                    ]
                  },
                  {
                    "name": "Winner",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A winner has been chosen!"
                    ]
                  },
                  {
                    "name": "TicketBought",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 90,
                        "typeName": "CallIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A ticket has been bought!"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                2,
                2
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_gilt",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "BidPlaced",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A bid was successfully placed.",
                      "\\\\[ who, amount, duration \\\\]"
                    ]
                  },
                  {
                    "name": "BidRetracted",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A bid was successfully removed (before being accepted as a gilt).",
                      "\\\\[ who, amount, duration \\\\]"
                    ]
                  },
                  {
                    "name": "GiltIssued",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ActiveIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A bid was accepted as a gilt. The balance may not be released until expiry.",
                      "\\\\[ index, expiry, who, amount \\\\]"
                    ]
                  },
                  {
                    "name": "GiltThawed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ActiveIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An expired gilt has been thawed.",
                      "\\\\[ index, who, original_amount, additional_amount \\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_uniques",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Created",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset class was created. \\\\[ class, creator, owner \\\\]"
                    ]
                  },
                  {
                    "name": "ForceCreated",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset class was force-created. \\\\[ class, owner \\\\]"
                    ]
                  },
                  {
                    "name": "Destroyed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset `class` was destroyed. \\\\[ class \\\\]"
                    ]
                  },
                  {
                    "name": "Issued",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset `instace` was issued. \\\\[ class, instance, owner \\\\]"
                    ]
                  },
                  {
                    "name": "Transferred",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset `instace` was transferred. \\\\[ class, instance, from, to \\\\]"
                    ]
                  },
                  {
                    "name": "Burned",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset `instance` was destroyed. \\\\[ class, instance, owner \\\\]"
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset `instance` was frozen. \\\\[ class, instance \\\\]"
                    ]
                  },
                  {
                    "name": "Thawed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset `instance` was thawed. \\\\[ class, instance \\\\]"
                    ]
                  },
                  {
                    "name": "ClassFrozen",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset `class` was frozen. \\\\[ class \\\\]"
                    ]
                  },
                  {
                    "name": "ClassThawed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some asset `class` was thawed. \\\\[ class \\\\]"
                    ]
                  },
                  {
                    "name": "OwnerChanged",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The owner changed \\\\[ class, new_owner \\\\]"
                    ]
                  },
                  {
                    "name": "TeamChanged",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The management team changed \\\\[ class, issuer, admin, freezer \\\\]"
                    ]
                  },
                  {
                    "name": "ApprovedTransfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An `instance` of an asset `class` has been approved by the `owner` for transfer by a",
                      "`delegate`.",
                      "\\\\[ class, instance, owner, delegate \\\\]"
                    ]
                  },
                  {
                    "name": "ApprovalCancelled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An approval for a `delegate` account to transfer the `instance` of an asset `class` was",
                      "cancelled by its `owner`.",
                      "\\\\[ class, instance, owner, delegate \\\\]"
                    ]
                  },
                  {
                    "name": "AssetStatusChanged",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An asset `class` has had its attributes changed by the `Force` origin.",
                      "\\\\[ class \\\\]"
                    ]
                  },
                  {
                    "name": "ClassMetadataSet",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 93,
                        "typeName": "BoundedVec<u8, T::StringLimit>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "New metadata has been set for an asset class. \\\\[ class, data, is_frozen \\\\]"
                    ]
                  },
                  {
                    "name": "ClassMetadataCleared",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Metadata has been cleared for an asset class. \\\\[ class \\\\]"
                    ]
                  },
                  {
                    "name": "MetadataSet",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 93,
                        "typeName": "BoundedVec<u8, T::StringLimit>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "New metadata has been set for an asset instance.",
                      "\\\\[ class, instance, data, is_frozen \\\\]"
                    ]
                  },
                  {
                    "name": "MetadataCleared",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::InstanceId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Metadata has been cleared for an asset instance. \\\\[ class, instance \\\\]"
                    ]
                  },
                  {
                    "name": "Redeposited",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 94,
                        "typeName": "Vec<T::InstanceId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Metadata has been cleared for an asset instance. \\\\[ class, successful_instances \\\\]"
                    ]
                  },
                  {
                    "name": "AttributeSet",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 95,
                        "typeName": "Option<T::InstanceId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 96,
                        "typeName": "BoundedVec<u8, T::KeyLimit>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 97,
                        "typeName": "BoundedVec<u8, T::ValueLimit>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "New attribute metadata has been set for an asset class or instance.",
                      "\\\\[ class, maybe_instance, key, value \\\\]"
                    ]
                  },
                  {
                    "name": "AttributeCleared",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 95,
                        "typeName": "Option<T::InstanceId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 96,
                        "typeName": "BoundedVec<u8, T::KeyLimit>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Attribute metadata has been cleared for an asset class or instance.",
                      "\\\\[ class, maybe_instance, key, maybe_value \\\\]"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 10,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 4
              }
            },
            "docs": []
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 10,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 2
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 10,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "pallet_transaction_storage",
              "pallet",
              "Event"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Stored",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Stored data under specified index."
                    ]
                  },
                  {
                    "name": "Renewed",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Renewed data under specified index."
                    ]
                  },
                  {
                    "name": "ProofChecked",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Storage proof was successfully checked."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "frame_system",
              "Phase"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "ApplyExtrinsic",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Applying an extrinsic."
                    ]
                  },
                  {
                    "name": "Finalization",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Finalizing the block."
                    ]
                  },
                  {
                    "name": "Initialization",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Initializing the block."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A phase of a block\\'s execution."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 9
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 79
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "LastRuntimeUpgradeInfo"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "spec_version",
                    "type": 103,
                    "typeName": "codec::Compact<u32>",
                    "docs": []
                  },
                  {
                    "name": "spec_name",
                    "type": 104,
                    "typeName": "sp_runtime::RuntimeString",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Stores the `spec_version` and `spec_name` of when the last runtime upgrade",
              "happened."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "compact": {
                "type": 4
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "primitive": "Str"
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "fill_block",
                    "fields": [
                      {
                        "name": null,
                        "type": 106,
                        "typeName": "Perbill",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remark",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_heap_pages",
                    "fields": [
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "u64",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_code",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_code_without_checks",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_changes_trie_config",
                    "fields": [
                      {
                        "name": null,
                        "type": 16,
                        "typeName": "Option<ChangesTrieConfiguration>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_storage",
                    "fields": [
                      {
                        "name": null,
                        "type": 107,
                        "typeName": "Vec<KeyValue>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "kill_storage",
                    "fields": [
                      {
                        "name": null,
                        "type": 109,
                        "typeName": "Vec<Key>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "kill_prefix",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Key",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remark_with_event",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Perbill"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A fixed point representation of a number in the range [0, 1].",
              "",
              "\"_Parts per Billion_"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 108
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                10,
                10
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 10
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "limits",
              "BlockWeights"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "base_block",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Base weight of block execution."
                    ]
                  },
                  {
                    "name": "max_block",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Maximal total weight consumed by all kinds of extrinsics (without `reserved` space)."
                    ]
                  },
                  {
                    "name": "per_class",
                    "type": 111,
                    "typeName": "PerDispatchClass<WeightsPerClass>",
                    "docs": [
                      "Weight limits for extrinsics of given dispatch class."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Block weight limits & base values configuration.",
              "",
              "This object is responsible for defining weight limits and base weight values tracked",
              "during extrinsic execution.",
              "",
              "Each block starts with `base_block` weight being consumed right away. Next up the",
              "`on_initialize` pallet callbacks are invoked and their cost is added before any extrinsic",
              "is executed. This cost is tracked as `Mandatory` dispatch class.",
              "",
              "```text,ignore",
              "|   | `max_block`    |   |",
              "|   |                |   |",
              "|   |                |   |",
              "|   |                |   |",
              "|   |                |  #| `on_initialize`",
              "|  #| `base_block`   |  #|",
              "|NOM|                |NOM|",
              " ||\\\\_ Mandatory",
              " |\\\\__ Operational",
              " \\\\___ Normal",
              "```",
              "",
              "The remaining capacity can be used to dispatch extrinsics. Note that each dispatch class",
              "is being tracked separately, but the sum can\\'t exceed `max_block` (except for `reserved`).",
              "Below you can see a picture representing full block with 3 extrinsics (two `Operational` and",
              "one `Normal`). Each class has it\\'s own limit `max_total`, but also the sum cannot exceed",
              "`max_block` value.",
              "",
              "```text,ignore",
              "                         -- `Mandatory` limit (unlimited)",
              "| # |                 |   |",
              "| # | `Ext3`          | - - `Operational` limit",
              "|#  | `Ext2`          |-  - `Normal` limit",
              "| # | `Ext1`          | # |",
              "|  #| `on_initialize` | ##|",
              "|  #| `base_block`    |###|",
              "|NOM|                 |NOM|",
              "```",
              "",
              "It should be obvious now that it\\'s possible for one class to reach it\\'s limit (say `Normal`),",
              "while the block has still capacity to process more transactions (`max_block` not reached,",
              "`Operational` transactions can still go in). Setting `max_total` to `None` disables the",
              "per-class limit. This is generally highly recommended for `Mandatory` dispatch class, while it",
              "can be dangerous for `Normal` class and should only be done with extra care and consideration.",
              "",
              "Often it\\'s desirable for some class of transactions to be added to the block despite it being",
              "full. For instance one might want to prevent high-priority `Normal` transactions from pushing",
              "out lower-priority `Operational` transactions. In such cases you might add a `reserved` capacity",
              "for given class.",
              "",
              "```test,ignore",
              "             _",
              "  #           \\\\",
              "  #   `Ext8`   - `reserved`",
              "  #          _/",
              "| # | `Ext7                 | - - `Operational` limit",
              "|#  | `Ext6`                |   |",
              "|#  | `Ext5`                |-# - `Normal` limit",
              "|#  | `Ext4`                |## |",
              "|  #| `on_initialize`       |###|",
              "|  #| `base_block`          |###|",
              "|NOM|                       |NOM|",
              "```",
              "",
              "In the above example, `Ext4-6` fill up the block almost up to `max_block`. `Ext7` would not fit",
              "if there wasn\\'t the extra `reserved` space for `Operational` transactions. Note that `max_total`",
              "limit applies to `reserved` space as well (i.e. the sum of weights of `Ext7` & `Ext8` mustn\\'t",
              "exceed it). Setting `reserved` to `None` allows the extrinsics to always get into the block up",
              "to their `max_total` limit. If `max_total` is set to `None` as well, all extrinsics witch",
              "dispatchables of given class will always end up in the block (recommended for `Mandatory`",
              "dispatch class).",
              "",
              "As a consequence of `reserved` space, total consumed block weight might exceed `max_block`",
              "value, so this parameter should rather be thought of as \\\"target block weight\\\" than a hard limit."
            ]
          },
          {
            "path": [
              "frame_support",
              "weights",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 112
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 112,
                    "typeName": "T",
                    "docs": [
                      "Value for `Normal` extrinsics."
                    ]
                  },
                  {
                    "name": "operational",
                    "type": 112,
                    "typeName": "T",
                    "docs": [
                      "Value for `Operational` extrinsics."
                    ]
                  },
                  {
                    "name": "mandatory",
                    "type": 112,
                    "typeName": "T",
                    "docs": [
                      "Value for `Mandatory` extrinsics."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A struct holding value for each `DispatchClass`."
            ]
          },
          {
            "path": [
              "frame_system",
              "limits",
              "WeightsPerClass"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "base_extrinsic",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Base weight of single extrinsic of given class."
                    ]
                  },
                  {
                    "name": "max_extrinsic",
                    "type": 113,
                    "typeName": "Option<Weight>",
                    "docs": [
                      "Maximal weight of single extrinsic. Should NOT include `base_extrinsic` cost.",
                      "",
                      "`None` indicates that this class of extrinsics doesn\\'t have a limit."
                    ]
                  },
                  {
                    "name": "max_total",
                    "type": 113,
                    "typeName": "Option<Weight>",
                    "docs": [
                      "Block maximal total weight for all extrinsics of given class.",
                      "",
                      "`None` indicates that weight sum of this class of extrinsics is not",
                      "restricted. Use this value carefully, since it might produce heavily oversized",
                      "blocks.",
                      "",
                      "In the worst case, the total weight consumed by the class is going to be:",
                      "`MAX(max_total) + MAX(reserved)`."
                    ]
                  },
                  {
                    "name": "reserved",
                    "type": 113,
                    "typeName": "Option<Weight>",
                    "docs": [
                      "Block reserved allowance for all extrinsics of a particular class.",
                      "",
                      "Setting to `None` indicates that extrinsics of that class are allowed",
                      "to go over total block weight (but at most `max_total` for that class).",
                      "Setting to `Some(x)` guarantees that at least `x` weight of particular class",
                      "is processed in every block."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "`DispatchClass`-specific weight configuration."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 8
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 8,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "limits",
              "BlockLength"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "max",
                    "type": 115,
                    "typeName": "PerDispatchClass<u32>",
                    "docs": [
                      "Maximal total length in bytes for each extrinsic class.",
                      "",
                      "In the worst case, the total block length is going to be:",
                      "`MAX(max)`"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Block length limit configuration."
            ]
          },
          {
            "path": [
              "frame_support",
              "weights",
              "PerDispatchClass"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "normal",
                    "type": 4,
                    "typeName": "T",
                    "docs": [
                      "Value for `Normal` extrinsics."
                    ]
                  },
                  {
                    "name": "operational",
                    "type": 4,
                    "typeName": "T",
                    "docs": [
                      "Value for `Operational` extrinsics."
                    ]
                  },
                  {
                    "name": "mandatory",
                    "type": 4,
                    "typeName": "T",
                    "docs": [
                      "Value for `Mandatory` extrinsics."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A struct holding value for each `DispatchClass`."
            ]
          },
          {
            "path": [
              "frame_support",
              "weights",
              "RuntimeDbWeight"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "read",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": []
                  },
                  {
                    "name": "write",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "The weight of database operations that the runtime can invoke."
            ]
          },
          {
            "path": [
              "sp_version",
              "RuntimeVersion"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "spec_name",
                    "type": 104,
                    "typeName": "RuntimeString",
                    "docs": [
                      "Identifies the different Substrate runtimes. There\\'ll be at least polkadot and node.",
                      "A different on-chain spec_name to that of the native runtime would normally result",
                      "in node not attempting to sync or author blocks."
                    ]
                  },
                  {
                    "name": "impl_name",
                    "type": 104,
                    "typeName": "RuntimeString",
                    "docs": [
                      "Name of the implementation of the spec. This is of little consequence for the node",
                      "and serves only to differentiate code of different implementation teams. For this",
                      "codebase, it will be parity-polkadot. If there were a non-Rust implementation of the",
                      "Polkadot runtime (e.g. C++), then it would identify itself with an accordingly different",
                      "`impl_name`."
                    ]
                  },
                  {
                    "name": "authoring_version",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "`authoring_version` is the version of the authorship interface. An authoring node",
                      "will not attempt to author blocks unless this is equal to its native runtime."
                    ]
                  },
                  {
                    "name": "spec_version",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Version of the runtime specification. A full-node will not attempt to use its native",
                      "runtime in substitute for the on-chain Wasm runtime unless all of `spec_name`,",
                      "`spec_version` and `authoring_version` are the same between Wasm and native."
                    ]
                  },
                  {
                    "name": "impl_version",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Version of the implementation of the specification. Nodes are free to ignore this; it",
                      "serves only as an indication that the code is different; as long as the other two versions",
                      "are the same then while the actual code may be different, it is nonetheless required to",
                      "do the same thing.",
                      "Non-consensus-breaking optimizations are about the only changes that could be made which",
                      "would result in only the `impl_version` changing."
                    ]
                  },
                  {
                    "name": "apis",
                    "type": 118,
                    "typeName": "ApisVec",
                    "docs": [
                      "List of supported API \\\"features\\\" along with their versions."
                    ]
                  },
                  {
                    "name": "transaction_version",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "All existing dispatches are fully compatible when this number doesn\\'t change. If this",
                      "number changes, then `spec_version` must change, also.",
                      "",
                      "This number must change when an existing dispatchable (module ID, dispatch ID) is changed,",
                      "either through an alteration in its user-level semantics, a parameter added/removed/changed,",
                      "a dispatchable being removed, a module being removed, or a dispatchable/module changing its",
                      "index.",
                      "",
                      "It need *not* change when a new module is added or when a dispatchable is added."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Runtime version.",
              "This should not be thought of as classic Semver (major/minor/tiny).",
              "This triplet have different semantics and mis-interpretation could cause problems.",
              "In particular: bug fixes should result in an increment of `spec_version` and possibly `authoring_version`,",
              "absolutely not `impl_version` since they change the semantics of the runtime."
            ]
          },
          {
            "path": [
              "Cow"
            ],
            "params": [
              {
                "name": "T",
                "type": 119
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 119,
                    "typeName": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 120
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                121,
                4
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 8,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InvalidSpecName",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The name of specification does not match between the current runtime",
                      "and the new runtime."
                    ]
                  },
                  {
                    "name": "SpecVersionNeedsToIncrease",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The specification version is not allowed to decrease between the current runtime",
                      "and the new runtime."
                    ]
                  },
                  {
                    "name": "FailedToExtractRuntimeVersion",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Failed to extract the runtime version from the new runtime.",
                      "",
                      "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                    ]
                  },
                  {
                    "name": "NonDefaultComposite",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Suicide called when the account has non-default composite data."
                    ]
                  },
                  {
                    "name": "NonZeroRefCount",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There is a non-zero reference count preventing the account from being purged."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the System pallet",
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "frame_support",
              "Never"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": []
              }
            },
            "docs": [
              "A type that cannot be instantiated."
            ]
          },
          {
            "path": [
              "pallet_utility",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "batch",
                    "fields": [
                      {
                        "name": null,
                        "type": 125,
                        "typeName": "Vec<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "as_derivative",
                    "fields": [
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "batch_all",
                    "fields": [
                      {
                        "name": null,
                        "type": 125,
                        "typeName": "Vec<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 126
              }
            },
            "docs": []
          },
          {
            "path": [
              "node_runtime",
              "Call"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "System",
                    "fields": [
                      {
                        "name": null,
                        "type": 105,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 0,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Utility",
                    "fields": [
                      {
                        "name": null,
                        "type": 124,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 1,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Babe",
                    "fields": [
                      {
                        "name": null,
                        "type": 127,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 2,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Timestamp",
                    "fields": [
                      {
                        "name": null,
                        "type": 136,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 3,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Authorship",
                    "fields": [
                      {
                        "name": null,
                        "type": 138,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 4,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Indices",
                    "fields": [
                      {
                        "name": null,
                        "type": 140,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 5,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Balances",
                    "fields": [
                      {
                        "name": null,
                        "type": 141,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 6,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "ElectionProviderMultiPhase",
                    "fields": [
                      {
                        "name": null,
                        "type": 144,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 8,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Staking",
                    "fields": [
                      {
                        "name": null,
                        "type": 203,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 9,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Session",
                    "fields": [
                      {
                        "name": null,
                        "type": 210,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 10,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Democracy",
                    "fields": [
                      {
                        "name": null,
                        "type": 213,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 11,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Council",
                    "fields": [
                      {
                        "name": null,
                        "type": 217,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 12,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TechnicalCommittee",
                    "fields": [
                      {
                        "name": null,
                        "type": 219,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 13,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Elections",
                    "fields": [
                      {
                        "name": null,
                        "type": 220,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Elections, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 14,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TechnicalMembership",
                    "fields": [
                      {
                        "name": null,
                        "type": 222,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 15,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Grandpa",
                    "fields": [
                      {
                        "name": null,
                        "type": 223,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 16,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Treasury",
                    "fields": [
                      {
                        "name": null,
                        "type": 235,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 17,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Contracts",
                    "fields": [
                      {
                        "name": null,
                        "type": 236,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 18,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Sudo",
                    "fields": [
                      {
                        "name": null,
                        "type": 237,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 19,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "ImOnline",
                    "fields": [
                      {
                        "name": null,
                        "type": 238,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 20,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Identity",
                    "fields": [
                      {
                        "name": null,
                        "type": 246,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 25,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Society",
                    "fields": [
                      {
                        "name": null,
                        "type": 286,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Society, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 26,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Recovery",
                    "fields": [
                      {
                        "name": null,
                        "type": 288,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 27,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Vesting",
                    "fields": [
                      {
                        "name": null,
                        "type": 289,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 28,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Scheduler",
                    "fields": [
                      {
                        "name": null,
                        "type": 291,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 29,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Proxy",
                    "fields": [
                      {
                        "name": null,
                        "type": 293,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 30,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Multisig",
                    "fields": [
                      {
                        "name": null,
                        "type": 295,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 31,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Bounties",
                    "fields": [
                      {
                        "name": null,
                        "type": 297,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 32,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Tips",
                    "fields": [
                      {
                        "name": null,
                        "type": 298,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 33,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Assets",
                    "fields": [
                      {
                        "name": null,
                        "type": 299,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 34,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Lottery",
                    "fields": [
                      {
                        "name": null,
                        "type": 301,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Lottery, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 36,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Gilt",
                    "fields": [
                      {
                        "name": null,
                        "type": 302,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Gilt, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 37,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Uniques",
                    "fields": [
                      {
                        "name": null,
                        "type": 305,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 38,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TransactionStorage",
                    "fields": [
                      {
                        "name": null,
                        "type": 308,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionStorage, Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 39,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_babe",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "report_equivocation",
                    "fields": [
                      {
                        "name": null,
                        "type": 128,
                        "typeName": "EquivocationProof<T::Header>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 132,
                        "typeName": "T::KeyOwnerProof",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "report_equivocation_unsigned",
                    "fields": [
                      {
                        "name": null,
                        "type": 128,
                        "typeName": "EquivocationProof<T::Header>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 132,
                        "typeName": "T::KeyOwnerProof",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "plan_config_change",
                    "fields": [
                      {
                        "name": null,
                        "type": 133,
                        "typeName": "NextConfigDescriptor",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "sp_consensus_slots",
              "EquivocationProof"
            ],
            "params": [
              {
                "name": "Header",
                "type": 129
              },
              {
                "name": "Id",
                "type": 130
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "offender",
                    "type": 130,
                    "typeName": "Id",
                    "docs": [
                      "Returns the authority id of the equivocator."
                    ]
                  },
                  {
                    "name": "slot",
                    "type": 131,
                    "typeName": "Slot",
                    "docs": [
                      "The slot at which the equivocation happened."
                    ]
                  },
                  {
                    "name": "first_header",
                    "type": 129,
                    "typeName": "Header",
                    "docs": [
                      "The first header involved in the equivocation."
                    ]
                  },
                  {
                    "name": "second_header",
                    "type": 129,
                    "typeName": "Header",
                    "docs": [
                      "The second header involved in the equivocation."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Represents an equivocation proof. An equivocation happens when a validator",
              "produces more than one block on the same slot. The proof of equivocation",
              "are the given distinct headers that were signed by the validator and which",
              "include the slot number."
            ]
          },
          {
            "path": [
              "sp_runtime",
              "generic",
              "header",
              "Header"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "parent_hash",
                    "type": 9,
                    "typeName": "Hash::Output",
                    "docs": []
                  },
                  {
                    "name": "number",
                    "type": 103,
                    "typeName": "Number",
                    "docs": []
                  },
                  {
                    "name": "state_root",
                    "type": 9,
                    "typeName": "Hash::Output",
                    "docs": []
                  },
                  {
                    "name": "extrinsics_root",
                    "type": 9,
                    "typeName": "Hash::Output",
                    "docs": []
                  },
                  {
                    "name": "digest",
                    "type": 11,
                    "typeName": "Digest<Hash::Output>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Abstraction over a block header for a substrate chain."
            ]
          },
          {
            "path": [
              "sp_consensus_babe",
              "app",
              "Public"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 64,
                    "typeName": "sr25519::Public",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
            ]
          },
          {
            "path": [
              "sp_consensus_slots",
              "Slot"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 8,
                    "typeName": "u64",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Unit type wrapper that represents a slot."
            ]
          },
          {
            "path": [
              "sp_session",
              "MembershipProof"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "session",
                    "type": 4,
                    "typeName": "SessionIndex",
                    "docs": [
                      "The session index on which the specific key is a member."
                    ]
                  },
                  {
                    "name": "trie_nodes",
                    "type": 109,
                    "typeName": "Vec<Vec<u8>>",
                    "docs": [
                      "Trie nodes of a merkle proof of session membership."
                    ]
                  },
                  {
                    "name": "validator_count",
                    "type": 4,
                    "typeName": "ValidatorCount",
                    "docs": [
                      "The validator count of the session on which the specific key is a member."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Proof of membership of a specific key in a given session."
            ]
          },
          {
            "path": [
              "sp_consensus_babe",
              "digests",
              "NextConfigDescriptor"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1",
                    "fields": [
                      {
                        "name": "c",
                        "type": 134,
                        "typeName": "(u64, u64)",
                        "docs": [
                          "Value of `c` in `BabeEpochConfiguration`."
                        ]
                      },
                      {
                        "name": "allowed_slots",
                        "type": 135,
                        "typeName": "AllowedSlots",
                        "docs": [
                          "Value of `allowed_slots` in `BabeEpochConfiguration`."
                        ]
                      }
                    ],
                    "index": 1,
                    "discriminant": null,
                    "docs": [
                      "Version 1."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information about the next epoch config, if changed. This is broadcast in the first",
              "block of the epoch, and applies using the same rules as `NextEpochDescriptor`."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                8,
                8
              ]
            },
            "docs": []
          },
          {
            "path": [
              "sp_consensus_babe",
              "AllowedSlots"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "PrimarySlots",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Only allow primary slots."
                    ]
                  },
                  {
                    "name": "PrimaryAndSecondaryPlainSlots",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Allow primary and secondary plain slots."
                    ]
                  },
                  {
                    "name": "PrimaryAndSecondaryVRFSlots",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "Allow primary and secondary VRF slots."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Types of allowed slots."
            ]
          },
          {
            "path": [
              "pallet_timestamp",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set",
                    "fields": [
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Moment",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "compact": {
                "type": 8
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_authorship",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_uncles",
                    "fields": [
                      {
                        "name": null,
                        "type": 139,
                        "typeName": "Vec<T::Header>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 129
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_indices",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "claim",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "free",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "freeze",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::AccountIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_balances",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_balance",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "T::Balance",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer_keep_alive",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer_all",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "sp_runtime",
              "multiaddress",
              "MultiAddress"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "AccountIndex",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Id",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It\\'s an account ID (pubkey)."
                    ]
                  },
                  {
                    "name": "Index",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "AccountIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It\\'s an account index."
                    ]
                  },
                  {
                    "name": "Raw",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It\\'s some arbitrary raw bytes."
                    ]
                  },
                  {
                    "name": "Address32",
                    "fields": [
                      {
                        "name": null,
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It\\'s a 32 byte representation."
                    ]
                  },
                  {
                    "name": "Address20",
                    "fields": [
                      {
                        "name": null,
                        "type": 143,
                        "typeName": "[u8; 20]",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Its a 20 byte representation."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A multi-format address wrapper for on-chain accounts."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 20,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "submit_unsigned",
                    "fields": [
                      {
                        "name": null,
                        "type": 145,
                        "typeName": "RawSolution<CompactOf<T>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 198,
                        "typeName": "SolutionOrSnapshotSize",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_minimum_untrusted_score",
                    "fields": [
                      {
                        "name": null,
                        "type": 199,
                        "typeName": "Option<ElectionScore>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_emergency_election_result",
                    "fields": [
                      {
                        "name": null,
                        "type": 200,
                        "typeName": "Supports<T::AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "submit",
                    "fields": [
                      {
                        "name": null,
                        "type": 145,
                        "typeName": "RawSolution<CompactOf<T>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "RawSolution"
            ],
            "params": [
              {
                "name": "C",
                "type": 146
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "compact",
                    "type": 146,
                    "typeName": "C",
                    "docs": [
                      "Compact election edges."
                    ]
                  },
                  {
                    "name": "score",
                    "type": 197,
                    "typeName": "ElectionScore",
                    "docs": [
                      "The _claimed_ score of the solution."
                    ]
                  },
                  {
                    "name": "round",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The round at which this solution should be submitted."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A raw, unchecked solution.",
              "",
              "This is what will get submitted to the chain.",
              "",
              "Such a solution should never become effective in anyway before being checked by the",
              "`Pallet::feasibility_check`"
            ]
          },
          {
            "path": [
              "node_runtime",
              "NposCompactSolution16"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "votes1",
                    "type": 147,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes2",
                    "type": 150,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes3",
                    "type": 155,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes4",
                    "type": 158,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes5",
                    "type": 161,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes6",
                    "type": 164,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes7",
                    "type": 167,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes8",
                    "type": 170,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes9",
                    "type": 173,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes10",
                    "type": 176,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes11",
                    "type": 179,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes12",
                    "type": 182,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes13",
                    "type": 185,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes14",
                    "type": 188,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes15",
                    "type": 191,
                    "typeName": null,
                    "docs": []
                  },
                  {
                    "name": "votes16",
                    "type": 194,
                    "typeName": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 148
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "compact": {
                "type": 83
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 151
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                152,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                149,
                153
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "compact": {
                "type": 154
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_arithmetic",
              "per_things",
              "PerU16"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 83,
                    "typeName": "u16",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A fixed point representation of a number in the range [0, 1].",
              "",
              "\"_Parts per 65535_"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 156
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                157,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 2,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 159
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                160,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 3,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 162
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                163,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 4,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 165
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                166,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 5,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 168
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                169,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 6,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 171
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                172,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 7,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 174
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                175,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 8,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 177
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                178,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 9,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 180
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                181,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 10,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 183
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                184,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 11,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 186
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                187,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 12,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 189
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                190,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 13,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 192
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                193,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 14,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 195
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                103,
                196,
                149
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 15,
                "type": 152
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 3,
                "type": 6
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "SolutionOrSnapshotSize"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "voters",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The length of voters."
                    ]
                  },
                  {
                    "name": "targets",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The length of targets."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Encodes the length of a solution or a snapshot.",
              "",
              "This is stored automatically on-chain, and it contains the **size of the entire snapshot**.",
              "This is also used in dispatchables as weight witness data and should **only contain the size of",
              "the presented solution**, not the entire snapshot."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 197
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 197,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 201
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                202
              ]
            },
            "docs": []
          },
          {
            "path": [
              "sp_npos_elections",
              "Support"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 6,
                    "typeName": "ExtendedBalance",
                    "docs": [
                      "Total support."
                    ]
                  },
                  {
                    "name": "voters",
                    "type": 48,
                    "typeName": "Vec<(AccountId, ExtendedBalance)>",
                    "docs": [
                      "Support from voters."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A structure to demonstrate the election result from the perspective of the candidate, i.e. how",
              "much support each candidate is receiving.",
              "",
              "This complements the [`ElectionResult`] and is needed to run the balancing post-processing.",
              "",
              "This, at the current version, resembles the `Exposure` defined in the Staking pallet, yet they",
              "do not necessarily have to be the same."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "bond",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 204,
                        "typeName": "RewardDestination<T::AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "bond_extra",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "unbond",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "withdraw_unbonded",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "validate",
                    "fields": [
                      {
                        "name": null,
                        "type": 205,
                        "typeName": "ValidatorPrefs",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "nominate",
                    "fields": [
                      {
                        "name": null,
                        "type": 207,
                        "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "chill",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_payee",
                    "fields": [
                      {
                        "name": null,
                        "type": 204,
                        "typeName": "RewardDestination<T::AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_controller",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_validator_count",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "increase_validator_count",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "scale_validator_count",
                    "fields": [
                      {
                        "name": null,
                        "type": 208,
                        "typeName": "Percent",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_no_eras",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_new_era",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_invulnerables",
                    "fields": [
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_unstake",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_new_era_always",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_deferred_slash",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "EraIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 94,
                        "typeName": "Vec<u32>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "payout_stakers",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "EraIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "rebond",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_history_depth",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "EraIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "reap_stash",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "kick",
                    "fields": [
                      {
                        "name": null,
                        "type": 207,
                        "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_staking_limits",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 95,
                        "typeName": "Option<u32>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 95,
                        "typeName": "Option<u32>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 209,
                        "typeName": "Option<Percent>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "chill_other",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "RewardDestination"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Staked",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Pay into the stash account, increasing the amount at stake accordingly."
                    ]
                  },
                  {
                    "name": "Stash",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Pay into the stash account, not increasing the amount at stake."
                    ]
                  },
                  {
                    "name": "Controller",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Pay into the controller account."
                    ]
                  },
                  {
                    "name": "Account",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Pay into a specified account."
                    ]
                  },
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Receive no reward."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A destination account for payment."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "ValidatorPrefs"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "commission",
                    "type": 206,
                    "typeName": "Perbill",
                    "docs": [
                      "Reward that validator takes up-front; only the rest is split between themselves and",
                      "nominators."
                    ]
                  },
                  {
                    "name": "blocked",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether or not this validator is accepting more nominations. If `true`, then no nominator",
                      "who is not already nominating this validator may nominate them. By default, validators",
                      "are accepting nominations."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Preference of what happens regarding validation."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "compact": {
                "type": 106
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 142
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Percent"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 2,
                    "typeName": "u8",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A fixed point representation of a number in the range [0, 1].",
              "",
              "\"_Percent_"
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 208
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 208,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_session",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_keys",
                    "fields": [
                      {
                        "name": null,
                        "type": 211,
                        "typeName": "T::Keys",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Sets the session key(s) of the function caller to `keys`.",
                      "r\" Allows an account to set its session key prior to becoming a validator.",
                      "r\" This doesn't take effect until the next session.",
                      "r",
                      "r\" The dispatch origin of this function must be signed.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: `O(1)`",
                      "r\"   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                      "r\" - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                      "r\" - DbWrites: `origin account`, `NextKeys`",
                      "r\" - DbReads per key id: `KeyOwner`",
                      "r\" - DbWrites per key id: `KeyOwner`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "purge_keys",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Removes any session key(s) of the function caller.",
                      "r\" This doesn't take effect until the next session.",
                      "r",
                      "r\" The dispatch origin of this function must be signed.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: `O(1)` in number of key types.",
                      "r\"   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                      "r\" - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                      "r\" - DbWrites: `NextKeys`, `origin account`",
                      "r\" - DbWrites per key id: `KeyOwner`",
                      "r\" # </weight>"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "node_runtime",
              "SessionKeys"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "grandpa",
                    "type": 56,
                    "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
                    "docs": []
                  },
                  {
                    "name": "babe",
                    "type": 130,
                    "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
                    "docs": []
                  },
                  {
                    "name": "im_online",
                    "type": 63,
                    "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
                    "docs": []
                  },
                  {
                    "name": "authority_discovery",
                    "type": 212,
                    "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_authority_discovery",
              "app",
              "Public"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 64,
                    "typeName": "sr25519::Public",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "propose",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "second",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "PropIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 214,
                        "typeName": "AccountVote<BalanceOf<T>>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "emergency_cancel",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "external_propose",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "external_propose_majority",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "external_propose_default",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "fast_track",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "veto_external",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_referendum",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_queued",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "delegate",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 216,
                        "typeName": "Conviction",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "undelegate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "clear_public_proposals",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "note_preimage",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "note_preimage_operational",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "note_imminent_preimage",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "note_imminent_preimage_operational",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "reap_preimage",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "unlock",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_other_vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "enact_proposal",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "ReferendumIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "blacklist",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 95,
                        "typeName": "Option<ReferendumIndex>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_proposal",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "PropIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "vote",
              "AccountVote"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Standard",
                    "fields": [
                      {
                        "name": "vote",
                        "type": 215,
                        "typeName": "Vote",
                        "docs": []
                      },
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A standard vote, one-way (approve or reject) with a given amount of conviction."
                    ]
                  },
                  {
                    "name": "Split",
                    "fields": [
                      {
                        "name": "aye",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      },
                      {
                        "name": "nay",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A split vote with balances given for both ways, and with no conviction, useful for",
                      "parachains when voting."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A vote for a referendum of a particular account."
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "vote",
              "Vote"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 2,
                    "typeName": null,
                    "docs": [
                      "Raw vote byte, encodes aye + conviction"
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_democracy",
              "conviction",
              "Conviction"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "0.1x votes, unlocked."
                    ]
                  },
                  {
                    "name": "Locked1x",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "1x votes, locked for an enactment period following a successful vote."
                    ]
                  },
                  {
                    "name": "Locked2x",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "2x votes, locked for 2x enactment periods following a successful vote."
                    ]
                  },
                  {
                    "name": "Locked3x",
                    "fields": [],
                    "index": null,
                    "discriminant": 3,
                    "docs": [
                      "3x votes, locked for 4x..."
                    ]
                  },
                  {
                    "name": "Locked4x",
                    "fields": [],
                    "index": null,
                    "discriminant": 4,
                    "docs": [
                      "4x votes, locked for 8x..."
                    ]
                  },
                  {
                    "name": "Locked5x",
                    "fields": [],
                    "index": null,
                    "discriminant": 5,
                    "docs": [
                      "5x votes, locked for 16x..."
                    ]
                  },
                  {
                    "name": "Locked6x",
                    "fields": [],
                    "index": null,
                    "discriminant": 6,
                    "docs": [
                      "6x votes, locked for 32x..."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A value denoting the strength of conviction of a vote."
            ]
          },
          {
            "path": [
              "pallet_collective",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_members",
                    "fields": [
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 218,
                        "typeName": "Option<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Set the collective's membership.",
                      "r",
                      "r\" - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                      "r\" - `prime`: The prime member whose vote sets the default.",
                      "r\" - `old_count`: The upper bound for the previous number of members in storage.",
                      "r\"                Used for weight estimation.",
                      "r",
                      "r\" Requires root origin.",
                      "r",
                      "r\" NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                      "r\"       the weight estimations rely on it to estimate dispatchable weight.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(MP + N)` where:",
                      "r\"   - `M` old-members-count (code- and governance-bounded)",
                      "r\"   - `N` new-members-count (code- and governance-bounded)",
                      "r\"   - `P` proposals-count (code-bounded)",
                      "r\" - DB:",
                      "r\"   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                      "r\"   - 1 storage read (codec `O(P)`) for reading the proposals",
                      "r\"   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                      "r\"   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "execute",
                    "fields": [
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config<I>>::Proposal>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Dispatch a proposal from a member using the `Member` origin.",
                      "r",
                      "r\" Origin must be a member of the collective.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                      "r\" - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                      "r\" - 1 event",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "propose",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config<I>>::Proposal>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Add a new proposal to either be voted on or executed directly.",
                      "r",
                      "r\" Requires the sender to be member.",
                      "r",
                      "r\" `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                      "r\" or put up for voting.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(B + M + P1)` or `O(B + M + P2)` where:",
                      "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                      "r\"   - `M` is members-count (code- and governance-bounded)",
                      "r\"   - branching is influenced by `threshold` where:",
                      "r\"     - `P1` is proposal execution complexity (`threshold < 2`)",
                      "r\"     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                      "r\" - DB:",
                      "r\"   - 1 storage read `is_member` (codec `O(M)`)",
                      "r\"   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                      "r\"   - DB accesses influenced by `threshold`:",
                      "r\"     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                      "r\"     - OR proposal insertion (`threshold <= 2`)",
                      "r\"       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                      "r\"       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                      "r\"       - 1 storage write `ProposalOf` (codec `O(B)`)",
                      "r\"       - 1 storage write `Voting` (codec `O(M)`)",
                      "r\"   - 1 event",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Add an aye or nay vote for the sender to the given proposal.",
                      "r",
                      "r\" Requires the sender to be a member.",
                      "r",
                      "r\" Transaction fees will be waived if the member is voting on any particular proposal",
                      "r\" for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(M)` where `M` is members-count (code- and governance-bounded)",
                      "r\" - DB:",
                      "r\"   - 1 storage read `Members` (codec `O(M)`)",
                      "r\"   - 1 storage mutation `Voting` (codec `O(M)`)",
                      "r\" - 1 event",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "close",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "Weight",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Close a vote that is either approved, disapproved or whose voting period has ended.",
                      "r",
                      "r\" May be called by any signed account in order to finish voting and close the proposal.",
                      "r",
                      "r\" If called before the end of the voting period it will only close the vote if it is",
                      "r\" has enough votes to be approved or disapproved.",
                      "r",
                      "r\" If called after the end of the voting period abstentions are counted as rejections",
                      "r\" unless there is a prime member set and the prime member cast an approval.",
                      "r",
                      "r\" If the close operation completes successfully with disapproval, the transaction fee will",
                      "r\" be waived. Otherwise execution of the approved operation will be charged to the caller.",
                      "r",
                      "r\" + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                      "r\" + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                      "r\"                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(B + M + P1 + P2)` where:",
                      "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                      "r\"   - `M` is members-count (code- and governance-bounded)",
                      "r\"   - `P1` is the complexity of `proposal` preimage.",
                      "r\"   - `P2` is proposal-count (code-bounded)",
                      "r\" - DB:",
                      "r\"  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                      "r\"  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                      "r\"  - any mutations done while executing `proposal` (`P1`)",
                      "r\" - up to 3 events",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "disapprove_proposal",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                      "r",
                      "r\" Must be called by the Root origin.",
                      "r",
                      "r\" Parameters:",
                      "r\" * `proposal_hash`: The hash of the proposal that should be disapproved.",
                      "r",
                      "r\" # <weight>",
                      "r\" Complexity: O(P) where P is the number of max proposals",
                      "r\" DB Weight:",
                      "r\" * Reads: Proposals",
                      "r\" * Writes: Voting, Proposals, ProposalOf",
                      "r\" # </weight>"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_collective",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "set_members",
                    "fields": [
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 218,
                        "typeName": "Option<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Set the collective's membership.",
                      "r",
                      "r\" - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                      "r\" - `prime`: The prime member whose vote sets the default.",
                      "r\" - `old_count`: The upper bound for the previous number of members in storage.",
                      "r\"                Used for weight estimation.",
                      "r",
                      "r\" Requires root origin.",
                      "r",
                      "r\" NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                      "r\"       the weight estimations rely on it to estimate dispatchable weight.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(MP + N)` where:",
                      "r\"   - `M` old-members-count (code- and governance-bounded)",
                      "r\"   - `N` new-members-count (code- and governance-bounded)",
                      "r\"   - `P` proposals-count (code-bounded)",
                      "r\" - DB:",
                      "r\"   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                      "r\"   - 1 storage read (codec `O(P)`) for reading the proposals",
                      "r\"   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                      "r\"   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "execute",
                    "fields": [
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config<I>>::Proposal>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Dispatch a proposal from a member using the `Member` origin.",
                      "r",
                      "r\" Origin must be a member of the collective.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                      "r\" - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                      "r\" - 1 event",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "propose",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config<I>>::Proposal>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Add a new proposal to either be voted on or executed directly.",
                      "r",
                      "r\" Requires the sender to be member.",
                      "r",
                      "r\" `threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                      "r\" or put up for voting.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(B + M + P1)` or `O(B + M + P2)` where:",
                      "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                      "r\"   - `M` is members-count (code- and governance-bounded)",
                      "r\"   - branching is influenced by `threshold` where:",
                      "r\"     - `P1` is proposal execution complexity (`threshold < 2`)",
                      "r\"     - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                      "r\" - DB:",
                      "r\"   - 1 storage read `is_member` (codec `O(M)`)",
                      "r\"   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                      "r\"   - DB accesses influenced by `threshold`:",
                      "r\"     - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                      "r\"     - OR proposal insertion (`threshold <= 2`)",
                      "r\"       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                      "r\"       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                      "r\"       - 1 storage write `ProposalOf` (codec `O(B)`)",
                      "r\"       - 1 storage write `Voting` (codec `O(M)`)",
                      "r\"   - 1 event",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Add an aye or nay vote for the sender to the given proposal.",
                      "r",
                      "r\" Requires the sender to be a member.",
                      "r",
                      "r\" Transaction fees will be waived if the member is voting on any particular proposal",
                      "r\" for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(M)` where `M` is members-count (code- and governance-bounded)",
                      "r\" - DB:",
                      "r\"   - 1 storage read `Members` (codec `O(M)`)",
                      "r\"   - 1 storage mutation `Voting` (codec `O(M)`)",
                      "r\" - 1 event",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "close",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ProposalIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "Weight",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Close a vote that is either approved, disapproved or whose voting period has ended.",
                      "r",
                      "r\" May be called by any signed account in order to finish voting and close the proposal.",
                      "r",
                      "r\" If called before the end of the voting period it will only close the vote if it is",
                      "r\" has enough votes to be approved or disapproved.",
                      "r",
                      "r\" If called after the end of the voting period abstentions are counted as rejections",
                      "r\" unless there is a prime member set and the prime member cast an approval.",
                      "r",
                      "r\" If the close operation completes successfully with disapproval, the transaction fee will",
                      "r\" be waived. Otherwise execution of the approved operation will be charged to the caller.",
                      "r",
                      "r\" + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                      "r\" + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                      "r\"                   `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                      "r",
                      "r\" # <weight>",
                      "r\" ## Weight",
                      "r\" - `O(B + M + P1 + P2)` where:",
                      "r\"   - `B` is `proposal` size in bytes (length-fee-bounded)",
                      "r\"   - `M` is members-count (code- and governance-bounded)",
                      "r\"   - `P1` is the complexity of `proposal` preimage.",
                      "r\"   - `P2` is proposal-count (code-bounded)",
                      "r\" - DB:",
                      "r\"  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                      "r\"  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                      "r\"  - any mutations done while executing `proposal` (`P1`)",
                      "r\" - up to 3 events",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "disapprove_proposal",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                      "r",
                      "r\" Must be called by the Root origin.",
                      "r",
                      "r\" Parameters:",
                      "r\" * `proposal_hash`: The hash of the proposal that should be disapproved.",
                      "r",
                      "r\" # <weight>",
                      "r\" Complexity: O(P) where P is the number of max proposals",
                      "r\" DB Weight:",
                      "r\" * Reads: Proposals",
                      "r\" * Writes: Voting, Proposals, ProposalOf",
                      "r\" # </weight>"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "pallet_elections_phragmen",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_voter",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "submit_candidacy",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "renounce_candidacy",
                    "fields": [
                      {
                        "name": null,
                        "type": 221,
                        "typeName": "Renouncing",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_member",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "clean_defunct_voters",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_elections_phragmen",
              "Renouncing"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Member",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A member is renouncing."
                    ]
                  },
                  {
                    "name": "RunnerUp",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A runner-up is renouncing."
                    ]
                  },
                  {
                    "name": "Candidate",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A candidate is renouncing, while the given total number of candidates exists."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An indication that the renouncing account currently has which of the below roles."
            ]
          },
          {
            "path": [
              "pallet_membership",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "add_member",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Add a member `who` to the set.",
                      "r",
                      "r\" May only be called from `T::AddOrigin`."
                    ]
                  },
                  {
                    "name": "remove_member",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Remove a member `who` from the set.",
                      "r",
                      "r\" May only be called from `T::RemoveOrigin`."
                    ]
                  },
                  {
                    "name": "swap_member",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Swap out one member `remove` for another `add`.",
                      "r",
                      "r\" May only be called from `T::SwapOrigin`.",
                      "r",
                      "r\" Prime membership is *not* passed from `remove` to `add`, if extant."
                    ]
                  },
                  {
                    "name": "reset_members",
                    "fields": [
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Change the membership to a new set, disregarding the existing membership. Be nice and",
                      "r\" pass `members` pre-sorted.",
                      "r",
                      "r\" May only be called from `T::ResetOrigin`."
                    ]
                  },
                  {
                    "name": "change_key",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Swap out the sending member for some other key `new`.",
                      "r",
                      "r\" May only be called from `Signed` origin of a current member.",
                      "r",
                      "r\" Prime membership is passed from the origin account to `new`, if extant."
                    ]
                  },
                  {
                    "name": "set_prime",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Set the prime member. Must be a current member.",
                      "r",
                      "r\" May only be called from `T::PrimeOrigin`."
                    ]
                  },
                  {
                    "name": "clear_prime",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Remove the prime member if it exists.",
                      "r",
                      "r\" May only be called from `T::PrimeOrigin`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "report_equivocation",
                    "fields": [
                      {
                        "name": null,
                        "type": 224,
                        "typeName": "EquivocationProof<T::Hash, T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 132,
                        "typeName": "T::KeyOwnerProof",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "report_equivocation_unsigned",
                    "fields": [
                      {
                        "name": null,
                        "type": 224,
                        "typeName": "EquivocationProof<T::Hash, T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 132,
                        "typeName": "T::KeyOwnerProof",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "note_stalled",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "sp_finality_grandpa",
              "EquivocationProof"
            ],
            "params": [
              {
                "name": "H",
                "type": 9
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "set_id",
                    "type": 8,
                    "typeName": "SetId",
                    "docs": []
                  },
                  {
                    "name": "equivocation",
                    "type": 225,
                    "typeName": "Equivocation<H, N>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Proof of voter misbehavior on a given set id. Misbehavior/equivocation in",
              "GRANDPA happens when a voter votes on the same round (either at prevote or",
              "precommit stage) for different blocks. Proving is achieved by collecting the",
              "signed messages of conflicting votes."
            ]
          },
          {
            "path": [
              "sp_finality_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "H",
                "type": 9
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Prevote",
                    "fields": [
                      {
                        "name": null,
                        "type": 226,
                        "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proof of equivocation at prevote stage."
                    ]
                  },
                  {
                    "name": "Precommit",
                    "fields": [
                      {
                        "name": null,
                        "type": 232,
                        "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proof of equivocation at precommit stage."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Wrapper object for GRANDPA equivocation proofs, useful for unifying prevote",
              "and precommit equivocations under a common type."
            ]
          },
          {
            "path": [
              "finality_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "Id",
                "type": 56
              },
              {
                "name": "V",
                "type": 227
              },
              {
                "name": "S",
                "type": 228
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "round_number",
                    "type": 8,
                    "typeName": "u64",
                    "docs": [
                      "The round number equivocated in."
                    ]
                  },
                  {
                    "name": "identity",
                    "type": 56,
                    "typeName": "Id",
                    "docs": [
                      "The identity of the equivocator."
                    ]
                  },
                  {
                    "name": "first",
                    "type": 231,
                    "typeName": "(V, S)",
                    "docs": [
                      "The first vote in the equivocation."
                    ]
                  },
                  {
                    "name": "second",
                    "type": 231,
                    "typeName": "(V, S)",
                    "docs": [
                      "The second vote in the equivocation."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An equivocation (double-vote) in a given round."
            ]
          },
          {
            "path": [
              "finality_grandpa",
              "Prevote"
            ],
            "params": [
              {
                "name": "H",
                "type": 9
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "target_hash",
                    "type": 9,
                    "typeName": "H",
                    "docs": [
                      "The target block\\'s hash."
                    ]
                  },
                  {
                    "name": "target_number",
                    "type": 4,
                    "typeName": "N",
                    "docs": [
                      "The target block\\'s number."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A prevote for a block and its ancestors."
            ]
          },
          {
            "path": [
              "sp_finality_grandpa",
              "app",
              "Signature"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 229,
                    "typeName": "ed25519::Signature",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
            ]
          },
          {
            "path": [
              "sp_core",
              "ed25519",
              "Signature"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 230,
                    "typeName": "[u8; 64]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A signature (a 512-bit value)."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 64,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                227,
                228
              ]
            },
            "docs": []
          },
          {
            "path": [
              "finality_grandpa",
              "Equivocation"
            ],
            "params": [
              {
                "name": "Id",
                "type": 56
              },
              {
                "name": "V",
                "type": 233
              },
              {
                "name": "S",
                "type": 228
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "round_number",
                    "type": 8,
                    "typeName": "u64",
                    "docs": [
                      "The round number equivocated in."
                    ]
                  },
                  {
                    "name": "identity",
                    "type": 56,
                    "typeName": "Id",
                    "docs": [
                      "The identity of the equivocator."
                    ]
                  },
                  {
                    "name": "first",
                    "type": 234,
                    "typeName": "(V, S)",
                    "docs": [
                      "The first vote in the equivocation."
                    ]
                  },
                  {
                    "name": "second",
                    "type": 234,
                    "typeName": "(V, S)",
                    "docs": [
                      "The second vote in the equivocation."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An equivocation (double-vote) in a given round."
            ]
          },
          {
            "path": [
              "finality_grandpa",
              "Precommit"
            ],
            "params": [
              {
                "name": "H",
                "type": 9
              },
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "target_hash",
                    "type": 9,
                    "typeName": "H",
                    "docs": [
                      "The target block\\'s hash."
                    ]
                  },
                  {
                    "name": "target_number",
                    "type": 4,
                    "typeName": "N",
                    "docs": [
                      "The target block\\'s number"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A precommit for a block and its ancestors."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                233,
                228
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_treasury",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "propose_spend",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T, I>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Put forward a suggestion for spending. A deposit proportional to the value",
                      "r\" is reserved and slashed if the proposal is rejected. It is returned once the",
                      "r\" proposal is awarded.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: O(1)",
                      "r\" - DbReads: `ProposalCount`, `origin account`",
                      "r\" - DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "reject_proposal",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ProposalIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Reject a proposed spend. The original deposit will be slashed.",
                      "r",
                      "r\" May only be called from `T::RejectOrigin`.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: O(1)",
                      "r\" - DbReads: `Proposals`, `rejected proposer account`",
                      "r\" - DbWrites: `Proposals`, `rejected proposer account`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "approve_proposal",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ProposalIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                      "r\" and the original deposit will be returned.",
                      "r",
                      "r\" May only be called from `T::ApproveOrigin`.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: O(1).",
                      "r\" - DbReads: `Proposals`, `Approvals`",
                      "r\" - DbWrite: `Approvals`",
                      "r\" # </weight>"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "call",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "Weight",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "instantiate_with_code",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "Weight",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "instantiate",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "Weight",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "CodeHash<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "claim_surcharge",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 218,
                        "typeName": "Option<T::AccountId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_sudo",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "sudo",
                    "fields": [
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "sudo_unchecked_weight",
                    "fields": [
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "Weight",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_key",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "sudo_as",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_im_online",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "heartbeat",
                    "fields": [
                      {
                        "name": null,
                        "type": 239,
                        "typeName": "Heartbeat<T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 244,
                        "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_im_online",
              "Heartbeat"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "block_number",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "Block number at the time heartbeat is created.."
                    ]
                  },
                  {
                    "name": "network_state",
                    "type": 240,
                    "typeName": "OpaqueNetworkState",
                    "docs": [
                      "A state of local network (peer id and external addresses)"
                    ]
                  },
                  {
                    "name": "session_index",
                    "type": 4,
                    "typeName": "SessionIndex",
                    "docs": [
                      "Index of the current session."
                    ]
                  },
                  {
                    "name": "authority_index",
                    "type": 4,
                    "typeName": "AuthIndex",
                    "docs": [
                      "An index of the authority on the list of validators."
                    ]
                  },
                  {
                    "name": "validators_len",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The length of session validator set"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Heartbeat which is sent/received."
            ]
          },
          {
            "path": [
              "sp_core",
              "offchain",
              "OpaqueNetworkState"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "peer_id",
                    "type": 241,
                    "typeName": "OpaquePeerId",
                    "docs": [
                      "PeerId of the local node in SCALE encoded."
                    ]
                  },
                  {
                    "name": "external_addresses",
                    "type": 242,
                    "typeName": "Vec<OpaqueMultiaddr>",
                    "docs": [
                      "List of addresses the node knows it can be reached as."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A blob to hold information about the local node\\'s network state",
              "without committing to its format."
            ]
          },
          {
            "path": [
              "sp_core",
              "OpaquePeerId"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 10,
                    "typeName": "Vec<u8>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Simple blob to hold a `PeerId` without committing to its format."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 243
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_core",
              "offchain",
              "OpaqueMultiaddr"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 10,
                    "typeName": "Vec<u8>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Simple blob to hold a `Multiaddr` without committing to its format."
            ]
          },
          {
            "path": [
              "pallet_im_online",
              "sr25519",
              "app_sr25519",
              "Signature"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 245,
                    "typeName": "sr25519::Signature",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\" A generic `AppPublic` wrapper type over $public crypto; this has no specific App."
            ]
          },
          {
            "path": [
              "sp_core",
              "sr25519",
              "Signature"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 230,
                    "typeName": "[u8; 64]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "An Schnorrkel/Ristretto x25519 (\\\"sr25519\\\") signature.",
              "",
              "Instead of importing it for the local module, alias it to be available as a public type"
            ]
          },
          {
            "path": [
              "pallet_identity",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "add_registrar",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_identity",
                    "fields": [
                      {
                        "name": null,
                        "type": 247,
                        "typeName": "IdentityInfo<T::MaxAdditionalFields>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_subs",
                    "fields": [
                      {
                        "name": null,
                        "type": 281,
                        "typeName": "Vec<(T::AccountId, Data)>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "clear_identity",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "request_judgement",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_request",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_fee",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_account_id",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_fields",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 283,
                        "typeName": "IdentityFields",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "provide_judgement",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "RegistrarIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 285,
                        "typeName": "Judgement<BalanceOf<T>>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "kill_identity",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "add_sub",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 250,
                        "typeName": "Data",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "rename_sub",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 250,
                        "typeName": "Data",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_sub",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "quit_sub",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_identity",
              "types",
              "IdentityInfo"
            ],
            "params": [
              {
                "name": "FieldLimit",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "additional",
                    "type": 248,
                    "typeName": "BoundedVec<(Data, Data), FieldLimit>",
                    "docs": [
                      "Additional fields of the identity that are not catered for with the struct\\'s explicit",
                      "fields."
                    ]
                  },
                  {
                    "name": "display",
                    "type": 250,
                    "typeName": "Data",
                    "docs": [
                      "A reasonable display name for the controller of the account. This should be whatever it is",
                      "that it is typically known as and should not be confusable with other entities, given",
                      "reasonable context.",
                      "",
                      "Stored as UTF-8."
                    ]
                  },
                  {
                    "name": "legal",
                    "type": 250,
                    "typeName": "Data",
                    "docs": [
                      "The full legal name in the local jurisdiction of the entity. This might be a bit",
                      "long-winded.",
                      "",
                      "Stored as UTF-8."
                    ]
                  },
                  {
                    "name": "web",
                    "type": 250,
                    "typeName": "Data",
                    "docs": [
                      "A representative website held by the controller of the account.",
                      "",
                      "NOTE: `https://` is automatically prepended.",
                      "",
                      "Stored as UTF-8."
                    ]
                  },
                  {
                    "name": "riot",
                    "type": 250,
                    "typeName": "Data",
                    "docs": [
                      "The Riot/Matrix handle held by the controller of the account.",
                      "",
                      "Stored as UTF-8."
                    ]
                  },
                  {
                    "name": "email",
                    "type": 250,
                    "typeName": "Data",
                    "docs": [
                      "The email address of the controller of the account.",
                      "",
                      "Stored as UTF-8."
                    ]
                  },
                  {
                    "name": "pgp_fingerprint",
                    "type": 280,
                    "typeName": "Option<[u8; 20]>",
                    "docs": [
                      "The PGP/GPG public key of the controller of the account."
                    ]
                  },
                  {
                    "name": "image",
                    "type": 250,
                    "typeName": "Data",
                    "docs": [
                      "A graphic image representing the controller of the account. Should be a company,",
                      "organization or project logo or a headshot in the case of a human."
                    ]
                  },
                  {
                    "name": "twitter",
                    "type": 250,
                    "typeName": "Data",
                    "docs": [
                      "The Twitter identity. The leading `@` character may be elided."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information concerning the identity of the controller of an account.",
              "",
              "NOTE: This should be stored at the end of the storage item to facilitate the addition of extra",
              "fields in a backwards compatible way through a specialized `Decode` impl."
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 249
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 279,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                250,
                250
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_identity",
              "types",
              "Data"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": 0,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw0",
                    "fields": [
                      {
                        "name": null,
                        "type": 251,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 1,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw1",
                    "fields": [
                      {
                        "name": null,
                        "type": 252,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 2,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw2",
                    "fields": [
                      {
                        "name": null,
                        "type": 253,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 3,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw3",
                    "fields": [
                      {
                        "name": null,
                        "type": 254,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 4,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw4",
                    "fields": [
                      {
                        "name": null,
                        "type": 14,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 5,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw5",
                    "fields": [
                      {
                        "name": null,
                        "type": 255,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 6,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw6",
                    "fields": [
                      {
                        "name": null,
                        "type": 256,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 7,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw7",
                    "fields": [
                      {
                        "name": null,
                        "type": 257,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 8,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw8",
                    "fields": [
                      {
                        "name": null,
                        "type": 121,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 9,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw9",
                    "fields": [
                      {
                        "name": null,
                        "type": 258,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 10,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw10",
                    "fields": [
                      {
                        "name": null,
                        "type": 259,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 11,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw11",
                    "fields": [
                      {
                        "name": null,
                        "type": 260,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 12,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw12",
                    "fields": [
                      {
                        "name": null,
                        "type": 261,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 13,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw13",
                    "fields": [
                      {
                        "name": null,
                        "type": 262,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 14,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw14",
                    "fields": [
                      {
                        "name": null,
                        "type": 263,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 15,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw15",
                    "fields": [
                      {
                        "name": null,
                        "type": 264,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 16,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw16",
                    "fields": [
                      {
                        "name": null,
                        "type": 72,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 17,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw17",
                    "fields": [
                      {
                        "name": null,
                        "type": 265,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 18,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw18",
                    "fields": [
                      {
                        "name": null,
                        "type": 266,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 19,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw19",
                    "fields": [
                      {
                        "name": null,
                        "type": 267,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 20,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw20",
                    "fields": [
                      {
                        "name": null,
                        "type": 143,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 21,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw21",
                    "fields": [
                      {
                        "name": null,
                        "type": 268,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 22,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw22",
                    "fields": [
                      {
                        "name": null,
                        "type": 269,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 23,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw23",
                    "fields": [
                      {
                        "name": null,
                        "type": 270,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 24,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw24",
                    "fields": [
                      {
                        "name": null,
                        "type": 271,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 25,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw25",
                    "fields": [
                      {
                        "name": null,
                        "type": 272,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 26,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw26",
                    "fields": [
                      {
                        "name": null,
                        "type": 273,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 27,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw27",
                    "fields": [
                      {
                        "name": null,
                        "type": 274,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 28,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw28",
                    "fields": [
                      {
                        "name": null,
                        "type": 275,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 29,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw29",
                    "fields": [
                      {
                        "name": null,
                        "type": 276,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 30,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw30",
                    "fields": [
                      {
                        "name": null,
                        "type": 277,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 31,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw31",
                    "fields": [
                      {
                        "name": null,
                        "type": 278,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 32,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Raw32",
                    "fields": [
                      {
                        "name": null,
                        "type": 1,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 33,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "BlakeTwo256",
                    "fields": [
                      {
                        "name": null,
                        "type": 1,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 34,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Sha256",
                    "fields": [
                      {
                        "name": null,
                        "type": 1,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 35,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Keccak256",
                    "fields": [
                      {
                        "name": null,
                        "type": 1,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 36,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "ShaThree256",
                    "fields": [
                      {
                        "name": null,
                        "type": 1,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 37,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 0,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 1,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 2,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 3,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 5,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 6,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 7,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 9,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 10,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 11,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 12,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 13,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 14,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 15,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 17,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 18,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 19,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 21,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 22,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 23,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 24,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 25,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 26,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 27,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 28,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 29,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 30,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "array": {
                "len": 31,
                "type": 2
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 249
              }
            },
            "docs": []
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 143
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 143,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 282
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                250
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_identity",
              "types",
              "IdentityFields"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 284,
                    "typeName": "BitFlags<IdentityField>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_identity",
              "types",
              "IdentityField"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Display",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": []
                  },
                  {
                    "name": "Legal",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": []
                  },
                  {
                    "name": "Web",
                    "fields": [],
                    "index": null,
                    "discriminant": 4,
                    "docs": []
                  },
                  {
                    "name": "Riot",
                    "fields": [],
                    "index": null,
                    "discriminant": 8,
                    "docs": []
                  },
                  {
                    "name": "Email",
                    "fields": [],
                    "index": null,
                    "discriminant": 16,
                    "docs": []
                  },
                  {
                    "name": "PgpFingerprint",
                    "fields": [],
                    "index": null,
                    "discriminant": 32,
                    "docs": []
                  },
                  {
                    "name": "Image",
                    "fields": [],
                    "index": null,
                    "discriminant": 64,
                    "docs": []
                  },
                  {
                    "name": "Twitter",
                    "fields": [],
                    "index": null,
                    "discriminant": 128,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "The fields that we use to identify the owner of an account with. Each corresponds to a field",
              "in the `IdentityInfo` struct."
            ]
          },
          {
            "path": [
              "pallet_identity",
              "types",
              "Judgement"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Unknown",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The default value; no opinion is held."
                    ]
                  },
                  {
                    "name": "FeePaid",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No judgement is yet in place, but a deposit is reserved as payment for providing one."
                    ]
                  },
                  {
                    "name": "Reasonable",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The data appears to be reasonably acceptable in terms of its accuracy, however no in depth",
                      "checks (such as in-person meetings or formal KYC) have been conducted."
                    ]
                  },
                  {
                    "name": "KnownGood",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The target is known directly by the registrar and the registrar can fully attest to the",
                      "the data\\'s accuracy."
                    ]
                  },
                  {
                    "name": "OutOfDate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The data was once good but is currently out of date. There is no malicious intent in the",
                      "inaccuracy. This judgement can be removed through updating the data."
                    ]
                  },
                  {
                    "name": "LowQuality",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The data is imprecise or of sufficiently low-quality to be problematic. It is not",
                      "indicative of malicious intent. This judgement can be removed through updating the data."
                    ]
                  },
                  {
                    "name": "Erroneous",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The data is erroneous. This may be indicative of malicious intent. This cannot be removed",
                      "except by the registrar."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An attestation of a registrar over how accurate some `IdentityInfo` is in describing an account.",
              "",
              "NOTE: Registrars may pay little attention to some fields. Registrars may want to make clear",
              "which fields their attestation is relevant for by off-chain means."
            ]
          },
          {
            "path": [
              "pallet_society",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "bid",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T, I>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A user outside of the society can make a bid for entry.",
                      "r",
                      "r\" Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
                      "r\" when the bid becomes a member, or if the bid calls `unbid`.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `value`: A one time payment the bid would like to receive when joining the society.",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
                      "r\" - Storage Reads:",
                      "r\" \t- One storage read to check for suspended candidate. O(1)",
                      "r\" \t- One storage read to check for suspended member. O(1)",
                      "r\" \t- One storage read to retrieve all current bids. O(B)",
                      "r\" \t- One storage read to retrieve all current candidates. O(C)",
                      "r\" \t- One storage read to retrieve all members. O(M)",
                      "r\" - Storage Writes:",
                      "r\" \t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
                      "r\" \t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                      "r\" - Notable Computation:",
                      "r\" \t- O(B + C + log M) search to check user is not already a part of society.",
                      "r\" \t- O(log B) search to insert the new bid sorted.",
                      "r\" - External Module Operations:",
                      "r\" \t- One balance reserve operation. O(X)",
                      "r\" \t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                      "r\" - Events:",
                      "r\" \t- One event for new bid.",
                      "r\" \t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                      "r",
                      "r\" Total Complexity: O(M + B + C + logM + logB + X)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "unbid",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bidder can remove their bid for entry into society.",
                      "r\" By doing so, they will have their candidate deposit returned or",
                      "r\" they will unvouch their voucher.",
                      "r",
                      "r\" Payment: The bid deposit is unreserved if the user made a bid.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and a bidder.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: B (len of bids), X (balance unreserve)",
                      "r\" - One storage read and write to retrieve and update the bids. O(B)",
                      "r\" - Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
                      "r\" - One event.",
                      "r",
                      "r\" Total Complexity: O(B + X)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "vouch",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T, I>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T, I>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" As a member, vouch for someone to join society by placing a bid on their behalf.",
                      "r",
                      "r\" There is no deposit required to vouch for a new bid, but a member can only vouch for",
                      "r\" one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
                      "r\" the suspension judgement origin, the member will be banned from vouching again.",
                      "r",
                      "r\" As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
                      "r\" be paid as a portion of the reward the member will receive for joining the society.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and a member.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `who`: The user who you would like to vouch for.",
                      "r\" - `value`: The total reward to be paid between you and the candidate if they become",
                      "r\" a member in the society.",
                      "r\" - `tip`: Your cut of the total `value` payout when the candidate is inducted into",
                      "r\" the society. Tips larger than `value` will be saturated upon payout.",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: B (len of bids), C (len of candidates), M (len of members)",
                      "r\" - Storage Reads:",
                      "r\" \t- One storage read to retrieve all members. O(M)",
                      "r\" \t- One storage read to check member is not already vouching. O(1)",
                      "r\" \t- One storage read to check for suspended candidate. O(1)",
                      "r\" \t- One storage read to check for suspended member. O(1)",
                      "r\" \t- One storage read to retrieve all current bids. O(B)",
                      "r\" \t- One storage read to retrieve all current candidates. O(C)",
                      "r\" - Storage Writes:",
                      "r\" \t- One storage write to insert vouching status to the member. O(1)",
                      "r\" \t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization w/ read)",
                      "r\" \t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                      "r\" - Notable Computation:",
                      "r\" \t- O(log M) search to check sender is a member.",
                      "r\" \t- O(B + C + log M) search to check user is not already a part of society.",
                      "r\" \t- O(log B) search to insert the new bid sorted.",
                      "r\" - External Module Operations:",
                      "r\" \t- One balance reserve operation. O(X)",
                      "r\" \t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                      "r\" - Events:",
                      "r\" \t- One event for vouch.",
                      "r\" \t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                      "r",
                      "r\" Total Complexity: O(M + B + C + logM + logB + X)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "unvouch",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" As a vouching member, unvouch a bid. This only works while vouched user is",
                      "r\" only a bidder (and not a candidate).",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and a vouching member.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: B (len of bids)",
                      "r\" - One storage read O(1) to check the signer is a vouching member.",
                      "r\" - One storage mutate to retrieve and update the bids. O(B)",
                      "r\" - One vouching storage removal. O(1)",
                      "r\" - One event.",
                      "r",
                      "r\" Total Complexity: O(B)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" As a member, vote on a candidate.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and a member.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `candidate`: The candidate that the member would like to bid on.",
                      "r\" - `approve`: A boolean which says if the candidate should be",
                      "r\"              approved (`true`) or rejected (`false`).",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: C (len of candidates), M (len of members)",
                      "r\" - One storage read O(M) and O(log M) search to check user is a member.",
                      "r\" - One account lookup.",
                      "r\" - One storage read O(C) and O(C) search to check that user is a candidate.",
                      "r\" - One storage write to add vote to votes. O(1)",
                      "r\" - One event.",
                      "r",
                      "r\" Total Complexity: O(M + logM + C)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "defender_vote",
                    "fields": [
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" As a member, vote on the defender.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and a member.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `approve`: A boolean which says if the candidate should be",
                      "r\" approved (`true`) or rejected (`false`).",
                      "r",
                      "r\" # <weight>",
                      "r\" - Key: M (len of members)",
                      "r\" - One storage read O(M) and O(log M) search to check user is a member.",
                      "r\" - One storage write to add vote to votes. O(1)",
                      "r\" - One event.",
                      "r",
                      "r\" Total Complexity: O(M + logM)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "payout",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Transfer the first matured payout for the sender and remove it from the records.",
                      "r",
                      "r\" NOTE: This extrinsic needs to be called multiple times to claim multiple matured payouts.",
                      "r",
                      "r\" Payment: The member will receive a payment equal to their first matured",
                      "r\" payout to their free balance.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and a member with",
                      "r\" payouts remaining.",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: M (len of members), P (number of payouts for a particular member)",
                      "r\" - One storage read O(M) and O(log M) search to check signer is a member.",
                      "r\" - One storage read O(P) to get all payouts for a member.",
                      "r\" - One storage read O(1) to get the current block number.",
                      "r\" - One currency transfer call. O(X)",
                      "r\" - One storage write or removal to update the member's payouts. O(P)",
                      "r",
                      "r\" Total Complexity: O(M + logM + P + X)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "found",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Found the society.",
                      "r",
                      "r\" This is done as a discrete action in order to allow for the",
                      "r\" module to be included into a running chain and can only be done once.",
                      "r",
                      "r\" The dispatch origin for this call must be from the _FounderSetOrigin_.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `founder` - The first member and head of the newly founded society.",
                      "r\" - `max_members` - The initial max number of members for the society.",
                      "r\" - `rules` - The rules of this society concerning membership.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Two storage mutates to set `Head` and `Founder`. O(1)",
                      "r\" - One storage write to add the first member to society. O(1)",
                      "r\" - One event.",
                      "r",
                      "r\" Total Complexity: O(1)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "unfound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Annul the founding of the society.",
                      "r",
                      "r\" The dispatch origin for this call must be Signed, and the signing account must be both",
                      "r\" the `Founder` and the `Head`. This implies that it may only be done when there is one",
                      "r\" member.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Two storage reads O(1).",
                      "r\" - Four storage removals O(1).",
                      "r\" - One event.",
                      "r",
                      "r\" Total Complexity: O(1)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "judge_suspended_member",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Allow suspension judgement origin to make judgement on a suspended member.",
                      "r",
                      "r\" If a suspended member is forgiven, we simply add them back as a member, not affecting",
                      "r\" any of the existing storage items for that member.",
                      "r",
                      "r\" If a suspended member is rejected, remove all associated storage items, including",
                      "r\" their payouts, and remove any vouched bids they currently have.",
                      "r",
                      "r\" The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `who` - The suspended member to be judged.",
                      "r\" - `forgive` - A boolean representing whether the suspension judgement origin",
                      "r\"               forgives (`true`) or rejects (`false`) a suspended member.",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: B (len of bids), M (len of members)",
                      "r\" - One storage read to check `who` is a suspended member. O(1)",
                      "r\" - Up to one storage write O(M) with O(log M) binary search to add a member back to society.",
                      "r\" - Up to 3 storage removals O(1) to clean up a removed member.",
                      "r\" - Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
                      "r\" - Up to one additional event if unvouch takes place.",
                      "r\" - One storage removal. O(1)",
                      "r\" - One event for the judgement.",
                      "r",
                      "r\" Total Complexity: O(M + logM + B)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "judge_suspended_candidate",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 287,
                        "typeName": "Judgement",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Allow suspended judgement origin to make judgement on a suspended candidate.",
                      "r",
                      "r\" If the judgement is `Approve`, we add them to society as a member with the appropriate",
                      "r\" payment for joining society.",
                      "r",
                      "r\" If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
                      "r\" to the society treasury, or we ban the voucher from vouching again.",
                      "r",
                      "r\" If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
                      "r\" through the induction process again.",
                      "r",
                      "r\" The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `who` - The suspended candidate to be judged.",
                      "r\" - `judgement` - `Approve`, `Reject`, or `Rebid`.",
                      "r",
                      "r\" # <weight>",
                      "r\" Key: B (len of bids), M (len of members), X (balance action)",
                      "r\" - One storage read to check `who` is a suspended candidate.",
                      "r\" - One storage removal of the suspended candidate.",
                      "r\" - Approve Logic",
                      "r\" \t- One storage read to get the available pot to pay users with. O(1)",
                      "r\" \t- One storage write to update the available pot. O(1)",
                      "r\" \t- One storage read to get the current block number. O(1)",
                      "r\" \t- One storage read to get all members. O(M)",
                      "r\" \t- Up to one unreserve currency action.",
                      "r\" \t- Up to two new storage writes to payouts.",
                      "r\" \t- Up to one storage write with O(log M) binary search to add a member to society.",
                      "r\" - Reject Logic",
                      "r\" \t- Up to one repatriate reserved currency action. O(X)",
                      "r\" \t- Up to one storage write to ban the vouching member from vouching again.",
                      "r\" - Rebid Logic",
                      "r\" \t- Storage mutate with O(log B) binary search to place the user back into bids.",
                      "r\" - Up to one additional event if unvouch takes place.",
                      "r\" - One storage removal.",
                      "r\" - One event for the judgement.",
                      "r",
                      "r\" Total Complexity: O(M + logM + B + X)",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "set_max_members",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Allows root origin to change the maximum number of members in society.",
                      "r\" Max membership count must be greater than 1.",
                      "r",
                      "r\" The dispatch origin for this call must be from _ROOT_.",
                      "r",
                      "r\" Parameters:",
                      "r\" - `max` - The maximum number of members for the society.",
                      "r",
                      "r\" # <weight>",
                      "r\" - One storage write to update the max. O(1)",
                      "r\" - One event.",
                      "r",
                      "r\" Total Complexity: O(1)",
                      "r\" # </weight>"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "pallet_society",
              "Judgement"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Rebid",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "The suspension judgement origin takes no direct judgment",
                      "and places the candidate back into the bid pool."
                    ]
                  },
                  {
                    "name": "Reject",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "The suspension judgement origin has rejected the candidate\\'s application."
                    ]
                  },
                  {
                    "name": "Approve",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "The suspension judgement origin approves of the candidate\\'s application."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A judgement by the suspension judgement origin on a suspended candidate."
            ]
          },
          {
            "path": [
              "pallet_recovery",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "as_recovered",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_recovered",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "create_recovery",
                    "fields": [
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "initiate_recovery",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "vouch_recovery",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "claim_recovery",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "close_recovery",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_recovery",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_recovered",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_vesting",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "vest",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "vest_other",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "vested_transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 290,
                        "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_vested_transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 290,
                        "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_vesting",
              "VestingInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "locked",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Locked amount at genesis."
                    ]
                  },
                  {
                    "name": "per_block",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Amount that gets unlocked every block after `starting_block`."
                    ]
                  },
                  {
                    "name": "starting_block",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "Starting block for unlocking(vesting)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Struct to encode the vesting schedule of an individual account."
            ]
          },
          {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "schedule",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 292,
                        "typeName": "Option<schedule::Period<T::BlockNumber>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 2,
                        "typeName": "schedule::Priority",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "schedule_named",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 292,
                        "typeName": "Option<schedule::Period<T::BlockNumber>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 2,
                        "typeName": "schedule::Priority",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_named",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "schedule_after",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 292,
                        "typeName": "Option<schedule::Period<T::BlockNumber>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 2,
                        "typeName": "schedule::Priority",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "schedule_named_after",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 292,
                        "typeName": "Option<schedule::Period<T::BlockNumber>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 2,
                        "typeName": "schedule::Priority",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 79
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 79,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_proxy",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "proxy",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 294,
                        "typeName": "Option<T::ProxyType>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "add_proxy",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 82,
                        "typeName": "T::ProxyType",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_proxy",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 82,
                        "typeName": "T::ProxyType",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_proxies",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "anonymous",
                    "fields": [
                      {
                        "name": null,
                        "type": 82,
                        "typeName": "T::ProxyType",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "kill_anonymous",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 82,
                        "typeName": "T::ProxyType",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "announce",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "CallHashOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "remove_announcement",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "CallHashOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "reject_announcement",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "CallHashOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "proxy_announced",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 294,
                        "typeName": "Option<T::ProxyType>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 82
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 82,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_multisig",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "as_multi_threshold_1",
                    "fields": [
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "as_multi",
                    "fields": [
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 296,
                        "typeName": "Option<Timepoint<T::BlockNumber>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "OpaqueCall",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "Weight",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "approve_as_multi",
                    "fields": [
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 296,
                        "typeName": "Option<Timepoint<T::BlockNumber>>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "Weight",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_as_multi",
                    "fields": [
                      {
                        "name": null,
                        "type": 83,
                        "typeName": "u16",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 39,
                        "typeName": "Vec<T::AccountId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 85,
                        "typeName": "Timepoint<T::BlockNumber>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 1,
                        "typeName": "[u8; 32]",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 85
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 85,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_bounties",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "propose_bounty",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Propose a new bounty.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_.",
                      "r",
                      "r\" Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                      "r\" `DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                      "r\" or slashed when rejected.",
                      "r",
                      "r\" - `curator`: The curator account whom will manage this bounty.",
                      "r\" - `fee`: The curator fee.",
                      "r\" - `value`: The total payment amount of this bounty, curator fee included.",
                      "r\" - `description`: The description of this bounty."
                    ]
                  },
                  {
                    "name": "approve_bounty",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                      "r\" and the original deposit will be returned.",
                      "r",
                      "r\" May only be called from `T::ApproveOrigin`.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "propose_curator",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Assign a curator to a funded bounty.",
                      "r",
                      "r\" May only be called from `T::ApproveOrigin`.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "unassign_curator",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Unassign curator from a bounty.",
                      "r",
                      "r\" This function can only be called by the `RejectOrigin` a signed origin.",
                      "r",
                      "r\" If this function is called by the `RejectOrigin`, we assume that the curator is malicious",
                      "r\" or inactive. As a result, we will slash the curator when possible.",
                      "r",
                      "r\" If the origin is the curator, we take this as a sign they are unable to do their job and",
                      "r\" they willingly give up. We could slash them, but for now we allow them to recover their",
                      "r\" deposit and exit without issue. (We may want to change this if it is abused.)",
                      "r",
                      "r#\" Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows\"#",
                      "r\" anyone in the community to call out that a curator is not doing their due diligence, and",
                      "r\" we should pick a new curator. In this case the curator should also be slashed.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "accept_curator",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Accept the curator role for a bounty.",
                      "r\" A deposit will be reserved from curator and refund upon successful payout.",
                      "r",
                      "r\" May only be called from the curator.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "award_bounty",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.",
                      "r",
                      "r\" The dispatch origin for this call must be the curator of this bounty.",
                      "r",
                      "r\" - `bounty_id`: Bounty ID to award.",
                      "r\" - `beneficiary`: The beneficiary account whom will receive the payout.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "claim_bounty",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Claim the payout from an awarded bounty after payout delay.",
                      "r",
                      "r\" The dispatch origin for this call must be the beneficiary of this bounty.",
                      "r",
                      "r\" - `bounty_id`: Bounty ID to claim.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "close_bounty",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                      "r\" the curator deposit will be unreserved if possible.",
                      "r",
                      "r\" Only `T::RejectOrigin` is able to cancel a bounty.",
                      "r",
                      "r\" - `bounty_id`: Bounty ID to cancel.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "extend_bounty_expiry",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "BountyIndex",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Extend the expiry time of an active bounty.",
                      "r",
                      "r\" The dispatch origin for this call must be the curator of this bounty.",
                      "r",
                      "r\" - `bounty_id`: Bounty ID to extend.",
                      "r\" - `remark`: additional information.",
                      "r",
                      "r\" # <weight>",
                      "r\" - O(1).",
                      "r\" # </weight>"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "pallet_tips",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "report_awesome",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_.",
                      "r",
                      "r\" Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                      "r\" `DataDepositPerByte` for each byte in `reason`.",
                      "r",
                      "r\" - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                      "r\"   a UTF-8-encoded URL.",
                      "r\" - `who`: The account which should be credited for the tip.",
                      "r",
                      "r\" Emits `NewTip` if successful.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: `O(R)` where `R` length of `reason`.",
                      "r\"   - encoding and hashing of 'reason'",
                      "r\" - DbReads: `Reasons`, `Tips`",
                      "r\" - DbWrites: `Reasons`, `Tips`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "retract_tip",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                      "r",
                      "r\" If successful, the original deposit will be unreserved.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                      "r\" must have been reported by the signing account through `report_awesome` (and not",
                      "r\" through `tip_new`).",
                      "r",
                      "r\" - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                      "r\"   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                      "r",
                      "r\" Emits `TipRetracted` if successful.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: `O(1)`",
                      "r\"   - Depends on the length of `T::Hash` which is fixed.",
                      "r\" - DbReads: `Tips`, `origin account`",
                      "r\" - DbWrites: `Reasons`, `Tips`, `origin account`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "tip_new",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "T::AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Give a tip for something new; no finder's fee will be taken.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and the signing account must be a",
                      "r\" member of the `Tippers` set.",
                      "r",
                      "r\" - `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                      "r\"   a UTF-8-encoded URL.",
                      "r\" - `who`: The account which should be credited for the tip.",
                      "r\" - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                      "r\"   value of active tippers will be given to the `who`.",
                      "r",
                      "r\" Emits `NewTip` if successful.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                      "r\"   - `O(T)`: decoding `Tipper` vec of length `T`",
                      "r\"     `T` is charged as upper bound given by `ContainsLengthBound`.",
                      "r\"     The actual cost depends on the implementation of `T::Tippers`.",
                      "r\"   - `O(R)`: hashing and encoding of reason of length `R`",
                      "r\" - DbReads: `Tippers`, `Reasons`",
                      "r\" - DbWrites: `Reasons`, `Tips`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "tip",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Declare a tip value for an already-open tip.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_ and the signing account must be a",
                      "r\" member of the `Tippers` set.",
                      "r",
                      "r\" - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                      "r\"   as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                      "r\"   account ID.",
                      "r\" - `tip_value`: The amount of tip that the sender would like to give. The median tip",
                      "r\"   value of active tippers will be given to the `who`.",
                      "r",
                      "r\" Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                      "r\" has started.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: `O(T)` where `T` is the number of tippers.",
                      "r\"   decoding `Tipper` vec of length `T`, insert tip and check closing,",
                      "r\"   `T` is charged as upper bound given by `ContainsLengthBound`.",
                      "r\"   The actual cost depends on the implementation of `T::Tippers`.",
                      "r",
                      "r\"   Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                      "r\"   is weighted as if almost full i.e of length `T-1`.",
                      "r\" - DbReads: `Tippers`, `Tips`",
                      "r\" - DbWrites: `Tips`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "close_tip",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Close and payout a tip.",
                      "r",
                      "r\" The dispatch origin for this call must be _Signed_.",
                      "r",
                      "r\" The tip identified by `hash` must have finished its countdown period.",
                      "r",
                      "r\" - `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                      "r\"   as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                      "r",
                      "r\" # <weight>",
                      "r\" - Complexity: `O(T)` where `T` is the number of tippers.",
                      "r\"   decoding `Tipper` vec of length `T`.",
                      "r\"   `T` is charged as upper bound given by `ContainsLengthBound`.",
                      "r\"   The actual cost depends on the implementation of `T::Tippers`.",
                      "r\" - DbReads: `Tips`, `Tippers`, `tip finder`",
                      "r\" - DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                      "r\" # </weight>"
                    ]
                  },
                  {
                    "name": "slash_tip",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "T::Hash",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Remove and slash an already-open tip.",
                      "r",
                      "r\" May only be called from `T::RejectOrigin`.",
                      "r",
                      "r\" As a result, the finder is slashed and the deposits are lost.",
                      "r",
                      "r\" Emits `TipSlashed` if successful.",
                      "r",
                      "r\" # <weight>",
                      "r\"   `T` is charged as upper bound given by `ContainsLengthBound`.",
                      "r\"   The actual cost depends on the implementation of `T::Tippers`.",
                      "r\" # </weight>"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Dispatchable calls.",
              "",
              "Each variant of this enum maps to a dispatchable function from the associated module."
            ]
          },
          {
            "path": [
              "pallet_assets",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "create",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 8,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_create",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "destroy",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 300,
                        "typeName": "DestroyWitness",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "mint",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "burn",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer_keep_alive",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "freeze",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "thaw",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "freeze_asset",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "thaw_asset",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer_ownership",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_team",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "clear_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_set_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 2,
                        "typeName": "u8",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_clear_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_asset_status",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "approve_transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_approval",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_cancel_approval",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer_approved",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::AssetId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 137,
                        "typeName": "T::Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_assets",
              "types",
              "DestroyWitness"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "accounts",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The number of accounts holding the asset."
                    ]
                  },
                  {
                    "name": "sufficients",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The number of accounts holding the asset with a self-sufficient reference."
                    ]
                  },
                  {
                    "name": "approvals",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The number of transfer-approvals of the asset."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Witness data for the destroy transactions."
            ]
          },
          {
            "path": [
              "pallet_lottery",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "buy_ticket",
                    "fields": [
                      {
                        "name": null,
                        "type": 126,
                        "typeName": "Box<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_calls",
                    "fields": [
                      {
                        "name": null,
                        "type": 125,
                        "typeName": "Vec<<T as Config>::Call>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "start_lottery",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "stop_repeat",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_gilt",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "place_bid",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "retract_bid",
                    "fields": [
                      {
                        "name": null,
                        "type": 68,
                        "typeName": "BalanceOf<T>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_target",
                    "fields": [
                      {
                        "name": null,
                        "type": 303,
                        "typeName": "Perquintill",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "thaw",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "ActiveIndex",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "compact": {
                "type": 304
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Perquintill"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 8,
                    "typeName": "u64",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A fixed point representation of a number in the range [0, 1].",
              "",
              "\"_Parts per Quintillion_"
            ]
          },
          {
            "path": [
              "pallet_uniques",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "create",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_create",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "destroy",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 306,
                        "typeName": "DestroyWitness",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "mint",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "burn",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 307,
                        "typeName": "Option<<T::Lookup as StaticLookup>::Source>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "redeposit",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 94,
                        "typeName": "Vec<T::InstanceId>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "freeze",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "thaw",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "freeze_class",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "thaw_class",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "transfer_ownership",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_team",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "approve_transfer",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "cancel_approval",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 307,
                        "typeName": "Option<<T::Lookup as StaticLookup>::Source>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "force_asset_status",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 142,
                        "typeName": "<T::Lookup as StaticLookup>::Source",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_attribute",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 95,
                        "typeName": "Option<T::InstanceId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 96,
                        "typeName": "BoundedVec<u8, T::KeyLimit>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 97,
                        "typeName": "BoundedVec<u8, T::ValueLimit>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "clear_attribute",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 95,
                        "typeName": "Option<T::InstanceId>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 96,
                        "typeName": "BoundedVec<u8, T::KeyLimit>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 93,
                        "typeName": "BoundedVec<u8, T::StringLimit>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "clear_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::InstanceId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "set_class_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 93,
                        "typeName": "BoundedVec<u8, T::StringLimit>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "clear_class_metadata",
                    "fields": [
                      {
                        "name": null,
                        "type": 103,
                        "typeName": "T::ClassId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "pallet_uniques",
              "types",
              "DestroyWitness"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "instances",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The total number of outstanding instances of this asset class."
                    ]
                  },
                  {
                    "name": "instance_metadatas",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The total number of outstanding instance metadata of this asset class."
                    ]
                  },
                  {
                    "name": "attributes",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The total number of attributes for this asset class."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Witness data for the destroy transactions."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 142
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 142,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_transaction_storage",
              "pallet",
              "Call"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "store",
                    "fields": [
                      {
                        "name": null,
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "renew",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "T::BlockNumber",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "u32",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "check_proof",
                    "fields": [
                      {
                        "name": null,
                        "type": 309,
                        "typeName": "TransactionStorageProof",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "r\"Contains one variant per dispatchable that can be called by an extrinsic."
            ]
          },
          {
            "path": [
              "sp_transaction_storage_proof",
              "TransactionStorageProof"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "chunk",
                    "type": 10,
                    "typeName": "Vec<u8>",
                    "docs": [
                      "Data chunk that is proved to exist."
                    ]
                  },
                  {
                    "name": "proof",
                    "type": 109,
                    "typeName": "Vec<Vec<u8>>",
                    "docs": [
                      "Trie nodes that compose the proof."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Holds a chunk of data retrieved from storage along with",
              "a proof that the data was stored at that location in the trie."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 311
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                130,
                8
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 1
              }
            },
            "docs": []
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 1
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 1,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_consensus_babe",
              "BabeEpochConfiguration"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "c",
                    "type": 134,
                    "typeName": "(u64, u64)",
                    "docs": [
                      "A constant value that is used in the threshold calculation formula.",
                      "Expressed as a rational where the first member of the tuple is the",
                      "numerator and the second is the denominator. The rational should",
                      "represent a value between 0 and 1.",
                      "In the threshold formula calculation, `1 - c` represents the probability",
                      "of a slot being empty."
                    ]
                  },
                  {
                    "name": "allowed_slots",
                    "type": 135,
                    "typeName": "AllowedSlots",
                    "docs": [
                      "Whether this chain should run with secondary slots, which are assigned",
                      "in round-robin manner."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Configuration data used by the BABE consensus engine."
            ]
          },
          {
            "path": [
              "pallet_babe",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InvalidEquivocationProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An equivocation proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidKeyOwnershipProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A key ownership proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "DuplicateOffenceReport",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A given equivocation report is valid but already previously reported."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 317
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_authorship",
              "UncleEntryItem"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Hash",
                "type": 9
              },
              {
                "name": "Author",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "InclusionHeight",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Uncle",
                    "fields": [
                      {
                        "name": null,
                        "type": 9,
                        "typeName": "Hash",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 218,
                        "typeName": "Option<Author>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_authorship",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InvalidUncleParent",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The uncle parent not in the chain."
                    ]
                  },
                  {
                    "name": "UnclesAlreadySet",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Uncles already set in the block."
                    ]
                  },
                  {
                    "name": "TooManyUncles",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too many uncles."
                    ]
                  },
                  {
                    "name": "GenesisUncle",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The uncle is genesis."
                    ]
                  },
                  {
                    "name": "TooHighUncle",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The uncle is too high in chain."
                    ]
                  },
                  {
                    "name": "UncleAlreadyIncluded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The uncle is already included."
                    ]
                  },
                  {
                    "name": "OldUncle",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The uncle isn\\'t recent enough to be included."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                6,
                34
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_indices",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NotAssigned",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The index was not already assigned."
                    ]
                  },
                  {
                    "name": "NotOwner",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The index is assigned to another account."
                    ]
                  },
                  {
                    "name": "InUse",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The index was not available."
                    ]
                  },
                  {
                    "name": "NotTransfer",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The source and destination accounts are identical."
                    ]
                  },
                  {
                    "name": "Permanent",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The index is permanent and may not be freed/changed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "weak_bounded_vec",
              "WeakBoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 322
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 324,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A weakly bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "The length of the vec is not strictly bounded. Decoding a vec with more element that the bound",
              "is accepted, and some method allow to bypass the restriction with warnings."
            ]
          },
          {
            "path": [
              "pallet_balances",
              "BalanceLock"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 121,
                    "typeName": "LockIdentifier",
                    "docs": [
                      "An identifier for this lock. Only one lock may be in existence for each identifier."
                    ]
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount which the free balance may not drop below when this lock is in effect."
                    ]
                  },
                  {
                    "name": "reasons",
                    "type": 323,
                    "typeName": "Reasons",
                    "docs": [
                      "If true, then the lock remains in effect even for payment of transaction fees."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A single lock on a balance. There can be many of these on an account and they \\\"overlap\\\", so the",
              "same balance is frozen by multiple locks."
            ]
          },
          {
            "path": [
              "pallet_balances",
              "Reasons"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Fee",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Paying system transaction fees."
                    ]
                  },
                  {
                    "name": "Misc",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Any reason other than paying system transaction fees."
                    ]
                  },
                  {
                    "name": "All",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "Any reason at all."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Simplified reasons for withdrawing balance."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 322
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 326
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 327,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "pallet_balances",
              "ReserveData"
            ],
            "params": [
              {
                "name": "ReserveIdentifier",
                "type": 121
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "id",
                    "type": 121,
                    "typeName": "ReserveIdentifier",
                    "docs": [
                      "The identifier for the named reserve."
                    ]
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of the named reserve."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Store named reserved balance."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 326
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_balances",
              "Releases"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": []
                  },
                  {
                    "name": "V2_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_balances",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "VestingBalance",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Vesting balance too high to send value"
                    ]
                  },
                  {
                    "name": "LiquidityRestrictions",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Account liquidity restrictions prevent withdrawal"
                    ]
                  },
                  {
                    "name": "InsufficientBalance",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Balance too low to send value"
                    ]
                  },
                  {
                    "name": "ExistentialDeposit",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Value too low to create account due to existential deposit"
                    ]
                  },
                  {
                    "name": "KeepAlive",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Transfer/payment would kill account"
                    ]
                  },
                  {
                    "name": "ExistingVestingSchedule",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A vesting schedule already exists for this account"
                    ]
                  },
                  {
                    "name": "DeadAccount",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Beneficiary account must pre-exist"
                    ]
                  },
                  {
                    "name": "TooManyReserves",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Number of named reserves exceed MaxReserves"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "sp_arithmetic",
              "fixed_point",
              "FixedU128"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 6,
                    "typeName": "u128",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A fixed point number representation in the range.",
              "",
              "\"_Fixed Point 128 bits unsigned, range = \\\n\t\t[0.000000000000000000, 340282366920938463463.374607431768211455]_"
            ]
          },
          {
            "path": [
              "pallet_transaction_payment",
              "Releases"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1Ancient",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Original version of the pallet."
                    ]
                  },
                  {
                    "name": "V2",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "One that bumps the usage to FixedU128 from FixedI128."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Storage releases of the pallet."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 333
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "weights",
              "WeightToFeeCoefficient"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "coeff_integer",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The integral part of the coefficient."
                    ]
                  },
                  {
                    "name": "coeff_frac",
                    "type": 106,
                    "typeName": "Perbill",
                    "docs": [
                      "The fractional part of the coefficient."
                    ]
                  },
                  {
                    "name": "negative",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "True iff the coefficient should be interpreted as negative."
                    ]
                  },
                  {
                    "name": "degree",
                    "type": 2,
                    "typeName": "u8",
                    "docs": [
                      "Degree/exponent of the term."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "One coefficient and its position in the `WeightToFeePolynomial`.",
              "",
              "One term of polynomial is calculated as:",
              "",
              "```ignore",
              "coeff_integer * x^(degree) + coeff_frac * x^(degree)",
              "```",
              "",
              "The `negative` value encodes whether the term is added or substracted from the",
              "overall polynomial result."
            ]
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "Phase"
            ],
            "params": [
              {
                "name": "Bn",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Off",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Nothing, the election is not happening."
                    ]
                  },
                  {
                    "name": "Signed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Signed phase is open."
                    ]
                  },
                  {
                    "name": "Unsigned",
                    "fields": [
                      {
                        "name": null,
                        "type": 335,
                        "typeName": "(bool, Bn)",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Unsigned phase. First element is whether it is active or not, second the starting block",
                      "number.",
                      "",
                      "We do not yet check whether the unsigned phase is active or passive. The intent is for the",
                      "blockchain to be able to declare: \\\"I believe that there exists an adequate signed solution,\\",
                      "advising validators not to bother running the unsigned offchain worker.",
                      "",
                      "As validator nodes are free to edit their OCW code, they could simply ignore this advisory",
                      "and always compute their own solution. However, by default, when the unsigned phase is",
                      "passive, the offchain workers will not bother running."
                    ]
                  },
                  {
                    "name": "Emergency",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The emergency phase. This is enabled upon a failing call to `T::ElectionProvider::elect`.",
                      "After that, the only way to leave this phase is through a successful",
                      "`T::ElectionProvider::elect`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Current phase of the pallet."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                34,
                4
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "ReadySolution"
            ],
            "params": [
              {
                "name": "A",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "supports",
                    "type": 200,
                    "typeName": "Supports<A>",
                    "docs": [
                      "The final supports of the solution.",
                      "",
                      "This is target-major vector, storing each winners, total backing, and each individual",
                      "backer."
                    ]
                  },
                  {
                    "name": "score",
                    "type": 197,
                    "typeName": "ElectionScore",
                    "docs": [
                      "The score of the solution.",
                      "",
                      "This is needed to potentially challenge the solution."
                    ]
                  },
                  {
                    "name": "compute",
                    "type": 33,
                    "typeName": "ElectionCompute",
                    "docs": [
                      "How this election was computed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A checked solution, ready to be enacted."
            ]
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "RoundSnapshot"
            ],
            "params": [
              {
                "name": "A",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "voters",
                    "type": 338,
                    "typeName": "Vec<(A, VoteWeight, Vec<A>)>",
                    "docs": [
                      "All of the voters."
                    ]
                  },
                  {
                    "name": "targets",
                    "type": 39,
                    "typeName": "Vec<A>",
                    "docs": [
                      "All of the targets."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A snapshot of all the data that is needed for en entire round. They are provided by",
              "[`ElectionDataProvider`] and are kept around until the round is finished.",
              "",
              "These are stored together because they are often accessed together."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 339
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                8,
                39
              ]
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_btree_map",
              "BoundedBTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 197
              },
              {
                "name": "V",
                "type": 4
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 341,
                    "typeName": "BTreeMap<K, V>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded map based on a B-Tree.",
              "",
              "B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing",
              "the amount of work performed in a search. See [`BTreeMap`] for more details.",
              "",
              "Unlike a standard `BTreeMap`, there is an enforced upper limit to the number of items in the",
              "map. All internal operations ensure this bound is respected."
            ]
          },
          {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 197
              },
              {
                "name": "V",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 342,
                    "typeName": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 343
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                197,
                4
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "signed",
              "SignedSubmission"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "CompactSolution",
                "type": 146
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Who submitted this solution."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The deposit reserved for storing this solution."
                    ]
                  },
                  {
                    "name": "solution",
                    "type": 145,
                    "typeName": "RawSolution<CompactSolution>",
                    "docs": [
                      "The raw solution itself."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A raw, unchecked signed submission.",
              "",
              "This is just a wrapper around [`RawSolution`] and some additional info."
            ]
          },
          {
            "path": [
              "pallet_election_provider_multi_phase",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "PreDispatchEarlySubmission",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Submission was too early."
                    ]
                  },
                  {
                    "name": "PreDispatchWrongWinnerCount",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Wrong number of winners presented."
                    ]
                  },
                  {
                    "name": "PreDispatchWeakSubmission",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Submission was too weak, score-wise."
                    ]
                  },
                  {
                    "name": "SignedQueueFull",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The queue was full, and the solution was not better than any of the existing ones."
                    ]
                  },
                  {
                    "name": "SignedCannotPayDeposit",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The origin failed to pay the deposit."
                    ]
                  },
                  {
                    "name": "SignedInvalidWitness",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Witness data to dispatchable is invalid."
                    ]
                  },
                  {
                    "name": "SignedTooMuchWeight",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The signed submission consumes too much weight"
                    ]
                  },
                  {
                    "name": "OcwCallWrongEra",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "OCW submitted solution for wrong round"
                    ]
                  },
                  {
                    "name": "MissingSnapshotMetadata",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Snapshot metadata should exist but didn\\'t."
                    ]
                  },
                  {
                    "name": "InvalidSubmissionIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "`Self::insert_submission` returned an invalid index."
                    ]
                  },
                  {
                    "name": "CallNotAllowed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The call is not allowed at this point."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error of the pallet that can be returned in response to dispatches.",
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_staking",
              "StakingLedger"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "stash",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The stash account whose balance is actually locked and at stake."
                    ]
                  },
                  {
                    "name": "total",
                    "type": 68,
                    "typeName": "Balance",
                    "docs": [
                      "The total amount of the stash\\'s balance that we are currently accounting for.",
                      "It\\'s just `active` plus all the `unlocking` balances."
                    ]
                  },
                  {
                    "name": "active",
                    "type": 68,
                    "typeName": "Balance",
                    "docs": [
                      "The total amount of the stash\\'s balance that will be at stake in any forthcoming",
                      "rounds."
                    ]
                  },
                  {
                    "name": "unlocking",
                    "type": 347,
                    "typeName": "Vec<UnlockChunk<Balance>>",
                    "docs": [
                      "Any balance that is becoming free, which may eventually be transferred out",
                      "of the stash (assuming it doesn\\'t get slashed first)."
                    ]
                  },
                  {
                    "name": "claimed_rewards",
                    "type": 94,
                    "typeName": "Vec<EraIndex>",
                    "docs": [
                      "List of eras for which the stakers behind a validator have claimed rewards. Only updated",
                      "for validators."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The ledger of a (bonded) stash."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 348
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "UnlockChunk"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "value",
                    "type": 68,
                    "typeName": "Balance",
                    "docs": [
                      "Amount of funds to be unlocked."
                    ]
                  },
                  {
                    "name": "era",
                    "type": 103,
                    "typeName": "EraIndex",
                    "docs": [
                      "Era number at which point it\\'ll be unlocked."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Just a Balance/BlockNumber tuple to encode when a chunk of funds will be unlocked."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "Nominations"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "targets",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "The targets of nomination."
                    ]
                  },
                  {
                    "name": "submitted_in",
                    "type": 4,
                    "typeName": "EraIndex",
                    "docs": [
                      "The era the nominations were submitted.",
                      "",
                      "Except for initial nominations which are considered submitted at era 0."
                    ]
                  },
                  {
                    "name": "suppressed",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the nominations have been suppressed. This can happen due to slashing of the",
                      "validators, or other events that might invalidate the nomination.",
                      "",
                      "NOTE: this for future proofing and is thus far not used."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A record of the nominations made by a specific account."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "ActiveEraInfo"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "EraIndex",
                    "docs": [
                      "Index of era."
                    ]
                  },
                  {
                    "name": "start",
                    "type": 113,
                    "typeName": "Option<u64>",
                    "docs": [
                      "Moment of start expressed as millisecond from `$UNIX_EPOCH`.",
                      "",
                      "Start can be none if start hasn\\'t been set for the era yet,",
                      "Start is set on the first on_finalize of the era to guarantee usage of `Time`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information regarding the active era (era in used in session)."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "EraRewardPoints"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "total",
                    "type": 4,
                    "typeName": "RewardPoint",
                    "docs": [
                      "Total number of points. Equals the sum of reward points for each validator."
                    ]
                  },
                  {
                    "name": "individual",
                    "type": 352,
                    "typeName": "BTreeMap<AccountId, RewardPoint>",
                    "docs": [
                      "The reward points earned by a given validator."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Reward points of an era. Used to split era total payout between validators.",
              "",
              "This points will be used to reward validators and their respective nominators."
            ]
          },
          {
            "path": [
              "BTreeMap"
            ],
            "params": [
              {
                "name": "K",
                "type": 0
              },
              {
                "name": "V",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 353,
                    "typeName": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 354
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                4
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "Forcing"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "NotForcing",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Not forcing anything - just let whatever happen."
                    ]
                  },
                  {
                    "name": "ForceNew",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Force a new era, then reset to `NotForcing` as soon as it is done.",
                      "Note that this will force to trigger an election until a new era is triggered, if the",
                      "election failed, the next session end will trigger a new election again, until success."
                    ]
                  },
                  {
                    "name": "ForceNone",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "Avoid a new era indefinitely."
                    ]
                  },
                  {
                    "name": "ForceAlways",
                    "fields": [],
                    "index": null,
                    "discriminant": 3,
                    "docs": [
                      "Force a new era at the end of all sessions indefinitely."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Mode of era-forcing."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 357
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "UnappliedSlash"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "validator",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The stash ID of the offending validator."
                    ]
                  },
                  {
                    "name": "own",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The validator\\'s own slash."
                    ]
                  },
                  {
                    "name": "others",
                    "type": 48,
                    "typeName": "Vec<(AccountId, Balance)>",
                    "docs": [
                      "All other slashed stakers and amounts."
                    ]
                  },
                  {
                    "name": "reporters",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "Reporters of the offence; bounty payout recipients."
                    ]
                  },
                  {
                    "name": "payout",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of payout."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A pending slash record. The value of the slash has been computed but not applied yet,",
              "rather deferred for several eras."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                106,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "slashing",
              "SlashingSpans"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "span_index",
                    "type": 4,
                    "typeName": "SpanIndex",
                    "docs": []
                  },
                  {
                    "name": "last_start",
                    "type": 4,
                    "typeName": "EraIndex",
                    "docs": []
                  },
                  {
                    "name": "last_nonzero_slash",
                    "type": 4,
                    "typeName": "EraIndex",
                    "docs": []
                  },
                  {
                    "name": "prior",
                    "type": 94,
                    "typeName": "Vec<EraIndex>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "An encoding of all of a nominator\\'s slashing spans."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "slashing",
              "SpanRecord"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "slashed",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": []
                  },
                  {
                    "name": "paid_out",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A slashing-span record for a particular stash."
            ]
          },
          {
            "path": [
              "pallet_staking",
              "Releases"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1_0_0Ancient",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": []
                  },
                  {
                    "name": "V2_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": []
                  },
                  {
                    "name": "V3_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": []
                  },
                  {
                    "name": "V4_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 3,
                    "docs": []
                  },
                  {
                    "name": "V5_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 4,
                    "docs": []
                  },
                  {
                    "name": "V6_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 5,
                    "docs": []
                  },
                  {
                    "name": "V7_0_0",
                    "fields": [],
                    "index": null,
                    "discriminant": 6,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_staking",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NotController",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Not a controller account."
                    ]
                  },
                  {
                    "name": "NotStash",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Not a stash account."
                    ]
                  },
                  {
                    "name": "AlreadyBonded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Stash is already bonded."
                    ]
                  },
                  {
                    "name": "AlreadyPaired",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Controller is already paired."
                    ]
                  },
                  {
                    "name": "EmptyTargets",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Targets cannot be empty."
                    ]
                  },
                  {
                    "name": "DuplicateIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Duplicate index."
                    ]
                  },
                  {
                    "name": "InvalidSlashIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Slash record index out of bounds."
                    ]
                  },
                  {
                    "name": "InsufficientBond",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Can not bond with value less than minimum required."
                    ]
                  },
                  {
                    "name": "NoMoreChunks",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Can not schedule more unlock chunks."
                    ]
                  },
                  {
                    "name": "NoUnlockChunk",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Can not rebond without unlocking chunks."
                    ]
                  },
                  {
                    "name": "FundedTarget",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Attempting to target a stash that still has funds."
                    ]
                  },
                  {
                    "name": "InvalidEraToReward",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid era to reward."
                    ]
                  },
                  {
                    "name": "InvalidNumberOfNominations",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid number of nominations."
                    ]
                  },
                  {
                    "name": "NotSortedAndUnique",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Items are not sorted and unique."
                    ]
                  },
                  {
                    "name": "AlreadyClaimed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Rewards for this era have already been claimed for this validator."
                    ]
                  },
                  {
                    "name": "IncorrectHistoryDepth",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Incorrect previous history depth input provided."
                    ]
                  },
                  {
                    "name": "IncorrectSlashingSpans",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Incorrect number of slashing spans provided."
                    ]
                  },
                  {
                    "name": "BadState",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Internal state has become somehow corrupted and the operation cannot continue."
                    ]
                  },
                  {
                    "name": "TooManyTargets",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too many nomination targets supplied."
                    ]
                  },
                  {
                    "name": "BadTarget",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A nomination target was supplied that was blocked or otherwise not a validator."
                    ]
                  },
                  {
                    "name": "CannotChillOther",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The user has enough bond and thus cannot be chilled forcefully by an external person."
                    ]
                  },
                  {
                    "name": "TooManyNominators",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There are too many nominators in the system. Governance needs to adjust the staking settings",
                      "to keep things safe for the runtime."
                    ]
                  },
                  {
                    "name": "TooManyValidators",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There are too many validators in the system. Governance needs to adjust the staking settings",
                      "to keep things safe for the runtime."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 364
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                211
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                366,
                10
              ]
            },
            "docs": []
          },
          {
            "path": [
              "sp_core",
              "crypto",
              "KeyTypeId"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 14,
                    "typeName": "[u8; 4]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "An identifier for a type of cryptographic key.",
              "",
              "To avoid clashes with other modules when distributing your module publicly, register your",
              "`KeyTypeId` on the list here by making a PR.",
              "",
              "Values whose first character is `_` are reserved for private use and won\\'t conflict with any",
              "public modules."
            ]
          },
          {
            "path": [
              "pallet_session",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T,)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InvalidProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Invalid ownership proof."
                    ]
                  },
                  {
                    "name": "NoAssociatedValidatorId",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" No associated validator ID for account."
                    ]
                  },
                  {
                    "name": "DuplicatedKey",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Registered duplicate key."
                    ]
                  },
                  {
                    "name": "NoKeys",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" No keys are associated with this account."
                    ]
                  },
                  {
                    "name": "NoAccount",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Key setting account is not live, so it's impossible to associate keys."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\" Error for the session module."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 369
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                9,
                0
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                39,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_democracy",
              "PreimageStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Missing",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The preimage is imminently needed at the argument."
                    ]
                  },
                  {
                    "name": "Available",
                    "fields": [
                      {
                        "name": "data",
                        "type": 10,
                        "typeName": "Vec<u8>",
                        "docs": []
                      },
                      {
                        "name": "provider",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": "deposit",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      },
                      {
                        "name": "since",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                      },
                      {
                        "name": "expiry",
                        "type": 95,
                        "typeName": "Option<BlockNumber>",
                        "docs": [
                          "None if it\\'s not imminent."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The preimage is available."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_democracy",
              "types",
              "ReferendumInfo"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Hash",
                "type": 9
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Ongoing",
                    "fields": [
                      {
                        "name": null,
                        "type": 373,
                        "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Referendum is happening, the arg is the block number at which it will end."
                    ]
                  },
                  {
                    "name": "Finished",
                    "fields": [
                      {
                        "name": "approved",
                        "type": 34,
                        "typeName": "bool",
                        "docs": []
                      },
                      {
                        "name": "end",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Referendum finished at `end`, and has been `approved` or rejected."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Info regarding a referendum, present or past."
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "types",
              "ReferendumStatus"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Hash",
                "type": 9
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "end",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "When voting on this referendum will end."
                    ]
                  },
                  {
                    "name": "proposal_hash",
                    "type": 9,
                    "typeName": "Hash",
                    "docs": [
                      "The hash of the proposal being voted on."
                    ]
                  },
                  {
                    "name": "threshold",
                    "type": 40,
                    "typeName": "VoteThreshold",
                    "docs": [
                      "The thresholding mechanism to determine whether it passed."
                    ]
                  },
                  {
                    "name": "delay",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The delay (in blocks) to wait after a successful referendum before deploying."
                    ]
                  },
                  {
                    "name": "tally",
                    "type": 374,
                    "typeName": "Tally<Balance>",
                    "docs": [
                      "The current tally of votes in this referendum."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Info regarding an ongoing referendum."
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "types",
              "Tally"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "ayes",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The number of aye votes, expressed in terms of post-conviction lock-vote."
                    ]
                  },
                  {
                    "name": "nays",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The number of nay votes, expressed in terms of post-conviction lock-vote."
                    ]
                  },
                  {
                    "name": "turnout",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of funds currently expressing its opinion. Pre-conviction."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Info regarding an ongoing referendum."
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "vote",
              "Voting"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Direct",
                    "fields": [
                      {
                        "name": "votes",
                        "type": 376,
                        "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                        "docs": [
                          "The current votes of the account."
                        ]
                      },
                      {
                        "name": "delegations",
                        "type": 378,
                        "typeName": "Delegations<Balance>",
                        "docs": [
                          "The total amount of delegations that this account has received."
                        ]
                      },
                      {
                        "name": "prior",
                        "type": 379,
                        "typeName": "PriorLock<BlockNumber, Balance>",
                        "docs": [
                          "Any pre-existing locks from past voting/delegating activity."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The account is voting directly. `delegations` is the total amount of post-conviction voting",
                      "weight that it controls from those that have delegated to it."
                    ]
                  },
                  {
                    "name": "Delegating",
                    "fields": [
                      {
                        "name": "balance",
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      },
                      {
                        "name": "target",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": "conviction",
                        "type": 216,
                        "typeName": "Conviction",
                        "docs": []
                      },
                      {
                        "name": "delegations",
                        "type": 378,
                        "typeName": "Delegations<Balance>",
                        "docs": [
                          "The total amount of delegations that this account has received."
                        ]
                      },
                      {
                        "name": "prior",
                        "type": 379,
                        "typeName": "PriorLock<BlockNumber, Balance>",
                        "docs": [
                          "Any pre-existing locks from past voting/delegating activity."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The account is delegating `balance` of its balance to a `target` account with `conviction`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An indicator for what an account is doing; it can either be delegating or voting."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 377
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                214
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_democracy",
              "types",
              "Delegations"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "votes",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The number of votes (this is post-conviction)."
                    ]
                  },
                  {
                    "name": "capital",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of raw capital, used for the turnout."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Amount of votes and capital placed in delegation for an account."
            ]
          },
          {
            "path": [
              "pallet_democracy",
              "vote",
              "PriorLock"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 6,
                    "typeName": "Balance",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A \\\"prior\\\" lock, i.e. a lock for some now-forgotten reason."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                9,
                40
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                39
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_democracy",
              "Releases"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_democracy",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "ValueLow",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Value too low"
                    ]
                  },
                  {
                    "name": "ProposalMissing",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proposal does not exist"
                    ]
                  },
                  {
                    "name": "BadIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Unknown index"
                    ]
                  },
                  {
                    "name": "AlreadyCanceled",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot cancel the same proposal twice"
                    ]
                  },
                  {
                    "name": "DuplicateProposal",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proposal already made"
                    ]
                  },
                  {
                    "name": "ProposalBlacklisted",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proposal still blacklisted"
                    ]
                  },
                  {
                    "name": "NotSimpleMajority",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Next external proposal not simple majority"
                    ]
                  },
                  {
                    "name": "InvalidHash",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid hash"
                    ]
                  },
                  {
                    "name": "NoProposal",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No external proposal"
                    ]
                  },
                  {
                    "name": "AlreadyVetoed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Identity may not veto a proposal twice"
                    ]
                  },
                  {
                    "name": "NotDelegated",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Not delegated"
                    ]
                  },
                  {
                    "name": "DuplicatePreimage",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Preimage already noted"
                    ]
                  },
                  {
                    "name": "NotImminent",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Not imminent"
                    ]
                  },
                  {
                    "name": "TooEarly",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too early"
                    ]
                  },
                  {
                    "name": "Imminent",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Imminent"
                    ]
                  },
                  {
                    "name": "PreimageMissing",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Preimage not found"
                    ]
                  },
                  {
                    "name": "ReferendumInvalid",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Vote given for invalid referendum"
                    ]
                  },
                  {
                    "name": "PreimageInvalid",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid preimage"
                    ]
                  },
                  {
                    "name": "NoneWaiting",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No proposals waiting"
                    ]
                  },
                  {
                    "name": "NotLocked",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The target account does not have a lock."
                    ]
                  },
                  {
                    "name": "NotExpired",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The lock on the account to be unlocked has not yet expired."
                    ]
                  },
                  {
                    "name": "NotVoter",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The given account did not vote on the referendum."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The actor has no permission to conduct the action."
                    ]
                  },
                  {
                    "name": "AlreadyDelegating",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The account is already delegating."
                    ]
                  },
                  {
                    "name": "InsufficientFunds",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too high a balance was provided that the account cannot afford."
                    ]
                  },
                  {
                    "name": "NotDelegating",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The account is not currently delegating."
                    ]
                  },
                  {
                    "name": "VotesExist",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The account currently has votes attached to it and the operation cannot succeed until",
                      "these are removed, either through `unvote` or `reap_vote`."
                    ]
                  },
                  {
                    "name": "InstantNotAllowed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The instant referendum origin is currently disallowed."
                    ]
                  },
                  {
                    "name": "Nonsense",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Delegation to oneself makes no sense."
                    ]
                  },
                  {
                    "name": "WrongUpperBound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid upper bound."
                    ]
                  },
                  {
                    "name": "MaxVotesReached",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Maximum number of votes reached."
                    ]
                  },
                  {
                    "name": "InvalidWitness",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The provided witness data is wrong."
                    ]
                  },
                  {
                    "name": "TooManyProposals",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Maximum number of proposals reached."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 9
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 100,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "pallet_collective",
              "Votes"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "ProposalIndex",
                    "docs": [
                      "The proposal\\'s unique index."
                    ]
                  },
                  {
                    "name": "threshold",
                    "type": 4,
                    "typeName": "MemberCount",
                    "docs": [
                      "The number of approval votes that are needed to pass the motion."
                    ]
                  },
                  {
                    "name": "ayes",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "The current set of voters that approved it."
                    ]
                  },
                  {
                    "name": "nays",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "The current set of voters that rejected it."
                    ]
                  },
                  {
                    "name": "end",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The hard end time of this vote."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Info for keeping track of a motion being voted on."
            ]
          },
          {
            "path": [
              "pallet_collective",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NotMember",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Account is not a member"
                    ]
                  },
                  {
                    "name": "DuplicateProposal",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Duplicate proposals not allowed"
                    ]
                  },
                  {
                    "name": "ProposalMissing",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Proposal must exist"
                    ]
                  },
                  {
                    "name": "WrongIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Mismatched index"
                    ]
                  },
                  {
                    "name": "DuplicateVote",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Duplicate vote ignored"
                    ]
                  },
                  {
                    "name": "AlreadyInitialized",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Members are already initialized!"
                    ]
                  },
                  {
                    "name": "TooEarly",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The close call was made too early, before the end of the voting."
                    ]
                  },
                  {
                    "name": "TooManyProposals",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" There can only be a maximum of `MaxProposals` active proposals."
                    ]
                  },
                  {
                    "name": "WrongProposalWeight",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The given weight bound for the proposal was too low."
                    ]
                  },
                  {
                    "name": "WrongProposalLength",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The given length bound for the proposal was too low."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 9
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 100,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "pallet_collective",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NotMember",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Account is not a member"
                    ]
                  },
                  {
                    "name": "DuplicateProposal",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Duplicate proposals not allowed"
                    ]
                  },
                  {
                    "name": "ProposalMissing",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Proposal must exist"
                    ]
                  },
                  {
                    "name": "WrongIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Mismatched index"
                    ]
                  },
                  {
                    "name": "DuplicateVote",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Duplicate vote ignored"
                    ]
                  },
                  {
                    "name": "AlreadyInitialized",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Members are already initialized!"
                    ]
                  },
                  {
                    "name": "TooEarly",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The close call was made too early, before the end of the voting."
                    ]
                  },
                  {
                    "name": "TooManyProposals",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" There can only be a maximum of `MaxProposals` active proposals."
                    ]
                  },
                  {
                    "name": "WrongProposalWeight",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The given weight bound for the proposal was too low."
                    ]
                  },
                  {
                    "name": "WrongProposalLength",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The given length bound for the proposal was too low."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 390
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_elections_phragmen",
              "SeatHolder"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The holder."
                    ]
                  },
                  {
                    "name": "stake",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The total backing stake."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of deposit held on-chain.",
                      "",
                      "To be unreserved upon renouncing, or slashed upon being a loser."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A holder of a seat as either a member or a runner-up."
            ]
          },
          {
            "path": [
              "pallet_elections_phragmen",
              "Voter"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "votes",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "The members being backed."
                    ]
                  },
                  {
                    "name": "stake",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of stake placed on this vote."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of deposit reserved for this vote.",
                      "",
                      "To be unreserved upon removal."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An active voter."
            ]
          },
          {
            "path": [
              "pallet_elections_phragmen",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "UnableToVote",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot vote when no candidates or members exist."
                    ]
                  },
                  {
                    "name": "NoVotes",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Must vote for at least one candidate."
                    ]
                  },
                  {
                    "name": "TooManyVotes",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot vote more than candidates."
                    ]
                  },
                  {
                    "name": "MaximumVotesExceeded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot vote more than maximum allowed."
                    ]
                  },
                  {
                    "name": "LowBalance",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot vote with stake less than minimum balance."
                    ]
                  },
                  {
                    "name": "UnableToPayBond",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Voter can not pay voting bond."
                    ]
                  },
                  {
                    "name": "MustBeVoter",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Must be a voter."
                    ]
                  },
                  {
                    "name": "ReportSelf",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot report self."
                    ]
                  },
                  {
                    "name": "DuplicatedCandidate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Duplicated candidate submission."
                    ]
                  },
                  {
                    "name": "MemberSubmit",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Member cannot re-submit candidacy."
                    ]
                  },
                  {
                    "name": "RunnerUpSubmit",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Runner cannot re-submit candidacy."
                    ]
                  },
                  {
                    "name": "InsufficientCandidateFunds",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Candidate does not have enough funds."
                    ]
                  },
                  {
                    "name": "NotMember",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Not a member."
                    ]
                  },
                  {
                    "name": "InvalidWitnessData",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The provided count of number of candidates is incorrect."
                    ]
                  },
                  {
                    "name": "InvalidVoteCount",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The provided count of number of votes is incorrect."
                    ]
                  },
                  {
                    "name": "InvalidRenouncing",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The renouncing origin presented a wrong `Renouncing` parameter."
                    ]
                  },
                  {
                    "name": "InvalidReplacement",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Prediction regarding replacement after member removal is wrong."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_membership",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "AlreadyMember",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Already a member."
                    ]
                  },
                  {
                    "name": "NotMember",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Not a member."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\" Error for the nicks module."
            ]
          },
          {
            "path": [
              "pallet_grandpa",
              "StoredState"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Live",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The current authority set is live, and GRANDPA is enabled."
                    ]
                  },
                  {
                    "name": "PendingPause",
                    "fields": [
                      {
                        "name": "scheduled_at",
                        "type": 4,
                        "typeName": "N",
                        "docs": [
                          "Block at which the intention to pause was scheduled."
                        ]
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "N",
                        "docs": [
                          "Number of blocks after which the change will be enacted."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There is a pending pause event which will be enacted at the given block",
                      "height."
                    ]
                  },
                  {
                    "name": "Paused",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The current GRANDPA authority set is paused."
                    ]
                  },
                  {
                    "name": "PendingResume",
                    "fields": [
                      {
                        "name": "scheduled_at",
                        "type": 4,
                        "typeName": "N",
                        "docs": [
                          "Block at which the intention to resume was scheduled."
                        ]
                      },
                      {
                        "name": "delay",
                        "type": 4,
                        "typeName": "N",
                        "docs": [
                          "Number of blocks after which the change will be enacted."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There is a pending resume event which will be enacted at the given block",
                      "height."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Current state of the GRANDPA authority set. State transitions must happen in",
              "the same order of states defined below, e.g. `Paused` implies a prior",
              "`PendingPause`."
            ]
          },
          {
            "path": [
              "pallet_grandpa",
              "StoredPendingChange"
            ],
            "params": [
              {
                "name": "N",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "scheduled_at",
                    "type": 4,
                    "typeName": "N",
                    "docs": [
                      "The block number this was scheduled at."
                    ]
                  },
                  {
                    "name": "delay",
                    "type": 4,
                    "typeName": "N",
                    "docs": [
                      "The delay in blocks until it will be applied."
                    ]
                  },
                  {
                    "name": "next_authorities",
                    "type": 54,
                    "typeName": "AuthorityList",
                    "docs": [
                      "The next authority set."
                    ]
                  },
                  {
                    "name": "forced",
                    "type": 95,
                    "typeName": "Option<N>",
                    "docs": [
                      "If defined it means the change was forced and the given block number",
                      "indicates the median last finalized block when the change was signaled."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A stored pending change."
            ]
          },
          {
            "path": [
              "pallet_grandpa",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "PauseFailed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Attempt to signal GRANDPA pause when the authority set isn\\'t live",
                      "(either paused or already pending pause)."
                    ]
                  },
                  {
                    "name": "ResumeFailed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Attempt to signal GRANDPA resume when the authority set isn\\'t paused",
                      "(either live or already pending resume)."
                    ]
                  },
                  {
                    "name": "ChangePending",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Attempt to signal GRANDPA change with one already pending."
                    ]
                  },
                  {
                    "name": "TooSoon",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot signal forced change so soon after last."
                    ]
                  },
                  {
                    "name": "InvalidKeyOwnershipProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A key ownership proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "InvalidEquivocationProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An equivocation proof provided as part of an equivocation report is invalid."
                    ]
                  },
                  {
                    "name": "DuplicateOffenceReport",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A given equivocation report is valid but already previously reported."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_treasury",
              "Proposal"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "proposer",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account proposing it."
                    ]
                  },
                  {
                    "name": "value",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The (total) amount that should be paid if the proposal is accepted."
                    ]
                  },
                  {
                    "name": "beneficiary",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account to whom the payment should be made if the proposal is accepted."
                    ]
                  },
                  {
                    "name": "bond",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount held on deposit (reserved) for making this proposal."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A spending proposal."
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 4
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 94,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "sp_arithmetic",
              "per_things",
              "Permill"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A fixed point representation of a number in the range [0, 1].",
              "",
              "\"_Parts per Million_"
            ]
          },
          {
            "path": [
              "frame_support",
              "PalletId"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 121,
                    "typeName": "[u8; 8]",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A pallet identifier. These are per pallet and should be stored in a registry somewhere."
            ]
          },
          {
            "path": [
              "pallet_treasury",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InsufficientProposersBalance",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Proposer's balance is too low."
                    ]
                  },
                  {
                    "name": "InvalidIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" No proposal or bounty at that index."
                    ]
                  },
                  {
                    "name": "TooManyApprovals",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Too many approvals in the queue."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\" Error for the treasury module."
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "wasm",
              "PrefabWasmModule"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "instruction_weights_version",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "Version of the instruction weights with which the code was instrumented."
                    ]
                  },
                  {
                    "name": "initial",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "Initial memory size of a contract\\'s sandbox."
                    ]
                  },
                  {
                    "name": "maximum",
                    "type": 103,
                    "typeName": "u32",
                    "docs": [
                      "The maximum memory size of a contract\\'s sandbox."
                    ]
                  },
                  {
                    "name": "refcount",
                    "type": 137,
                    "typeName": "u64",
                    "docs": [
                      "The number of alive contracts that use this as their contract code.",
                      "",
                      "If this number drops to zero this module is removed from storage."
                    ]
                  },
                  {
                    "name": "_reserved",
                    "type": 403,
                    "typeName": "Option<()>",
                    "docs": [
                      "This field is reserved for future evolution of format.",
                      "",
                      "For now this field is serialized as `None`. In the future we are able to change the",
                      "type parameter to a new struct that contains the fields that we want to add.",
                      "That new struct would also contain a reserved field for its future extensions.",
                      "This works because in SCALE `None` is encoded independently from the type parameter",
                      "of the option."
                    ]
                  },
                  {
                    "name": "code",
                    "type": 10,
                    "typeName": "Vec<u8>",
                    "docs": [
                      "Code instrumented with the latest schedule."
                    ]
                  },
                  {
                    "name": "original_code_len",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The size of the uninstrumented code.",
                      "",
                      "We cache this value here in order to avoid the need to pull the pristine code",
                      "from storage when we only need its length for rent calculations."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A prepared wasm module ready for execution.",
              "",
              "# Note",
              "",
              "This data structure is mostly immutable once created and stored. The exceptions that",
              "can be changed by calling a contract are `refcount`, `instruction_weights_version` and `code`.",
              "`refcount` can change when a contract instantiates a new contract or self terminates.",
              "`instruction_weights_version` and `code` when a contract with an outdated instrumention is",
              "called. Therefore one must be careful when holding any in-memory representation of this",
              "type while calling into a contract as those fields can get out of date."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 44
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 44,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_contracts",
              "storage",
              "ContractInfo"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Alive",
                    "fields": [
                      {
                        "name": null,
                        "type": 405,
                        "typeName": "AliveContractInfo<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Tombstone",
                    "fields": [
                      {
                        "name": null,
                        "type": 406,
                        "typeName": "TombstoneContractInfo<T>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Information for managing an account and its sub trie abstraction.",
              "This is the required info to cache for an account"
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "storage",
              "RawAliveContractInfo"
            ],
            "params": [
              {
                "name": "CodeHash",
                "type": 9
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "trie_id",
                    "type": 10,
                    "typeName": "TrieId",
                    "docs": [
                      "Unique ID for the subtree encoded as a bytes vector."
                    ]
                  },
                  {
                    "name": "storage_size",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of bytes used by this contract.",
                      "",
                      "It is a sum of each key-value pair stored by this contract."
                    ]
                  },
                  {
                    "name": "pair_count",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of key-value pairs in storage of this contract."
                    ]
                  },
                  {
                    "name": "code_hash",
                    "type": 9,
                    "typeName": "CodeHash",
                    "docs": [
                      "The code associated with a given account."
                    ]
                  },
                  {
                    "name": "rent_allowance",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Pay rent at most up to this value."
                    ]
                  },
                  {
                    "name": "rent_paid",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of rent that was paid by the contract over its whole lifetime.",
                      "",
                      "A restored contract starts with a value of zero just like a new contract."
                    ]
                  },
                  {
                    "name": "deduct_block",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "Last block rent has been paid."
                    ]
                  },
                  {
                    "name": "last_write",
                    "type": 95,
                    "typeName": "Option<BlockNumber>",
                    "docs": [
                      "Last block child storage has been written."
                    ]
                  },
                  {
                    "name": "_reserved",
                    "type": 403,
                    "typeName": "Option<()>",
                    "docs": [
                      "This field is reserved for future evolution of format."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information for managing an account and its sub trie abstraction.",
              "This is the required info to cache for an account."
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "storage",
              "RawTombstoneContractInfo"
            ],
            "params": [
              {
                "name": "H",
                "type": 9
              },
              {
                "name": "Hasher",
                "type": 407
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 9,
                    "typeName": "H",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<Hasher>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "sp_runtime",
              "traits",
              "BlakeTwo256"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": []
              }
            },
            "docs": [
              "Blake2-256 Hash implementation."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 409
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_contracts",
              "storage",
              "DeletedContract"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "pair_count",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "trie_id",
                    "type": 10,
                    "typeName": "TrieId",
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_contracts",
              "schedule",
              "Schedule"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "limits",
                    "type": 411,
                    "typeName": "Limits",
                    "docs": [
                      "Describes the upper limits on various metrics."
                    ]
                  },
                  {
                    "name": "instruction_weights",
                    "type": 412,
                    "typeName": "InstructionWeights<T>",
                    "docs": [
                      "The weights for individual wasm instructions."
                    ]
                  },
                  {
                    "name": "host_fn_weights",
                    "type": 413,
                    "typeName": "HostFnWeights<T>",
                    "docs": [
                      "The weights for each imported function a contract is allowed to call."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Definition of the cost schedule and other parameterizations for the wasm vm.",
              "",
              "Its [`Default`] implementation is the designated way to initialize this type. It uses",
              "the benchmarked information supplied by [`Config::WeightInfo`]. All of its fields are",
              "public and can therefore be modified. For example in order to change some of the limits",
              "and set a custom instruction weight version the following code could be used:",
              "```rust",
              "use pallet_contracts::{Schedule, Limits, InstructionWeights, Config};",
              "",
              "fn create_schedule<T: Config>() -> Schedule<T> {",
              "    Schedule {",
              "        limits: Limits {",
              "\"\\t\\t        globals: 3,",
              "\"\\t\\t        parameters: 3,",
              "\"\\t\\t        memory_pages: 16,",
              "\"\\t\\t        table_size: 3,",
              "\"\\t\\t        br_table_size: 3,",
              "\"\\t\\t        .. Default::default()",
              "\"\\t        },",
              "        instruction_weights: InstructionWeights {",
              "\"\\t            version: 5,",
              "            .. Default::default()",
              "        },",
              "\"\\t        .. Default::default()",
              "    }",
              "}",
              "```",
              "",
              "# Note",
              "",
              "Please make sure to bump the [`InstructionWeights::version`] whenever substantial",
              "changes are made to its values."
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "schedule",
              "Limits"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "event_topics",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The maximum number of topics supported by an event."
                    ]
                  },
                  {
                    "name": "stack_height",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Maximum allowed stack height in number of elements.",
                      "",
                      "See <https://wiki.parity.io/WebAssembly-StackHeight> to find out",
                      "how the stack frame cost is calculated. Each element can be of one of the",
                      "wasm value types. This means the maximum size per element is 64bit."
                    ]
                  },
                  {
                    "name": "globals",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Maximum number of globals a module is allowed to declare.",
                      "",
                      "Globals are not limited through the `stack_height` as locals are. Neither does",
                      "the linear memory limit `memory_pages` applies to them."
                    ]
                  },
                  {
                    "name": "parameters",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Maximum numbers of parameters a function can have.",
                      "",
                      "Those need to be limited to prevent a potentially exploitable interaction with",
                      "the stack height instrumentation: The costs of executing the stack height",
                      "instrumentation for an indirectly called function scales linearly with the amount",
                      "of parameters of this function. Because the stack height instrumentation itself is",
                      "is not weight metered its costs must be static (via this limit) and included in",
                      "the costs of the instructions that cause them (call, call_indirect)."
                    ]
                  },
                  {
                    "name": "memory_pages",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Maximum number of memory pages allowed for a contract."
                    ]
                  },
                  {
                    "name": "table_size",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Maximum number of elements allowed in a table.",
                      "",
                      "Currently, the only type of element that is allowed in a table is funcref."
                    ]
                  },
                  {
                    "name": "br_table_size",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Maximum number of elements that can appear as immediate value to the br_table instruction."
                    ]
                  },
                  {
                    "name": "subject_len",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The maximum length of a subject in bytes used for PRNG generation."
                    ]
                  },
                  {
                    "name": "call_depth",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The maximum nesting level of the call stack."
                    ]
                  },
                  {
                    "name": "payload_len",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The maximum size of a storage value and event payload in bytes."
                    ]
                  },
                  {
                    "name": "code_len",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The maximum length of a contract code in bytes. This limit applies to the instrumented",
                      "version of the code. Therefore `instantiate_with_code` can fail even when supplying",
                      "a wasm binary below this maximum size."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Describes the upper limits on various metrics.",
              "",
              "# Note",
              "",
              "The values in this struct should never be decreased. The reason is that decreasing those",
              "values will break existing contracts which are above the new limits when a",
              "re-instrumentation is triggered."
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "schedule",
              "InstructionWeights"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "version",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Version of the instruction weights.",
                      "",
                      "# Note",
                      "",
                      "Should be incremented whenever any instruction weight is changed. The",
                      "reason is that changes to instruction weights require a re-instrumentation",
                      "in order to apply the changes to an already deployed code. The re-instrumentation",
                      "is triggered by comparing the version of the current schedule with the version the code was",
                      "instrumented with. Changes usually happen when pallet_contracts is re-benchmarked.",
                      "",
                      "Changes to other parts of the schedule should not increment the version in",
                      "order to avoid unnecessary re-instrumentations."
                    ]
                  },
                  {
                    "name": "i64const",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64load",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64store",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "select",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "r#if",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "br",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "br_if",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "br_table",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "br_table_per_entry",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "call",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "call_indirect",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "call_indirect_per_param",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "local_get",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "local_set",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "local_tee",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "global_get",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "global_set",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "memory_current",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "memory_grow",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64clz",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64ctz",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64popcnt",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64eqz",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64extendsi32",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64extendui32",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i32wrapi64",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64eq",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64ne",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64lts",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64ltu",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64gts",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64gtu",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64les",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64leu",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64ges",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64geu",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64add",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64sub",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64mul",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64divs",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64divu",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64rems",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64remu",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64and",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64or",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64xor",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64shl",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64shrs",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64shru",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64rotl",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  },
                  {
                    "name": "i64rotr",
                    "type": 4,
                    "typeName": "u32",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Describes the weight for all categories of supported wasm instructions.",
              "",
              "There there is one field for each wasm instruction that describes the weight to",
              "execute one instruction of that name. There are a few execptions:",
              "",
              "1. If there is a i64 and a i32 variant of an instruction we use the weight",
              "   of the former for both.",
              "2. The following instructions are free of charge because they merely structure the",
              "   wasm module and cannot be spammed without making the module invalid (and rejected):",
              "   End, Unreachable, Return, Else",
              "3. The following instructions cannot be benchmarked because they are removed by any",
              "   real world execution engine as a preprocessing step and therefore don\\'t yield a",
              "   meaningful benchmark result. However, in contrast to the instructions mentioned",
              "   in 2. they can be spammed. We price them with the same weight as the \\\"default\\",
              "   instruction (i64.const): Block, Loop, Nop",
              "4. We price both i64.const and drop as InstructionWeights.i64const / 2. The reason",
              "   for that is that we cannot benchmark either of them on its own but we need their",
              "   individual values to derive (by subtraction) the weight of all other instructions",
              "   that use them as supporting instructions. Supporting means mainly pushing arguments",
              "   and dropping return values in order to maintain a valid module."
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "schedule",
              "HostFnWeights"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "caller",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_caller`."
                    ]
                  },
                  {
                    "name": "address",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_address`."
                    ]
                  },
                  {
                    "name": "gas_left",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_gas_left`."
                    ]
                  },
                  {
                    "name": "balance",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_balance`."
                    ]
                  },
                  {
                    "name": "value_transferred",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_value_transferred`."
                    ]
                  },
                  {
                    "name": "minimum_balance",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_minimum_balance`."
                    ]
                  },
                  {
                    "name": "tombstone_deposit",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_tombstone_deposit`."
                    ]
                  },
                  {
                    "name": "rent_allowance",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_rent_allowance`."
                    ]
                  },
                  {
                    "name": "block_number",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_block_number`."
                    ]
                  },
                  {
                    "name": "now",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_now`."
                    ]
                  },
                  {
                    "name": "weight_to_fee",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_weight_to_fee`."
                    ]
                  },
                  {
                    "name": "gas",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `gas`."
                    ]
                  },
                  {
                    "name": "input",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_input`."
                    ]
                  },
                  {
                    "name": "input_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per input byte copied to contract memory by `seal_input`."
                    ]
                  },
                  {
                    "name": "r#return",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_return`."
                    ]
                  },
                  {
                    "name": "return_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte returned through `seal_return`."
                    ]
                  },
                  {
                    "name": "terminate",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_terminate`."
                    ]
                  },
                  {
                    "name": "restore_to",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_restore_to`."
                    ]
                  },
                  {
                    "name": "restore_to_per_delta",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per delta key supplied to `seal_restore_to`."
                    ]
                  },
                  {
                    "name": "random",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_random`."
                    ]
                  },
                  {
                    "name": "deposit_event",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_reposit_event`."
                    ]
                  },
                  {
                    "name": "deposit_event_per_topic",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per topic supplied to `seal_deposit_event`."
                    ]
                  },
                  {
                    "name": "deposit_event_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte of an event deposited through `seal_deposit_event`."
                    ]
                  },
                  {
                    "name": "debug_message",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_debug_message`."
                    ]
                  },
                  {
                    "name": "set_rent_allowance",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_set_rent_allowance`."
                    ]
                  },
                  {
                    "name": "set_storage",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_set_storage`."
                    ]
                  },
                  {
                    "name": "set_storage_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte of an item stored with `seal_set_storage`."
                    ]
                  },
                  {
                    "name": "clear_storage",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_clear_storage`."
                    ]
                  },
                  {
                    "name": "get_storage",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_get_storage`."
                    ]
                  },
                  {
                    "name": "get_storage_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte of an item received via `seal_get_storage`."
                    ]
                  },
                  {
                    "name": "transfer",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_transfer`."
                    ]
                  },
                  {
                    "name": "call",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_call`."
                    ]
                  },
                  {
                    "name": "call_transfer_surcharge",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight surcharge that is claimed if `seal_call` does a balance transfer."
                    ]
                  },
                  {
                    "name": "call_per_input_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per input byte supplied to `seal_call`."
                    ]
                  },
                  {
                    "name": "call_per_output_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per output byte received through `seal_call`."
                    ]
                  },
                  {
                    "name": "instantiate",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_instantiate`."
                    ]
                  },
                  {
                    "name": "instantiate_per_input_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per input byte supplied to `seal_instantiate`."
                    ]
                  },
                  {
                    "name": "instantiate_per_output_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per output byte received through `seal_instantiate`."
                    ]
                  },
                  {
                    "name": "instantiate_per_salt_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per salt byte supplied to `seal_instantiate`."
                    ]
                  },
                  {
                    "name": "hash_sha2_256",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_hash_sha_256`."
                    ]
                  },
                  {
                    "name": "hash_sha2_256_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte hashed by `seal_hash_sha_256`."
                    ]
                  },
                  {
                    "name": "hash_keccak_256",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_hash_keccak_256`."
                    ]
                  },
                  {
                    "name": "hash_keccak_256_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte hashed by `seal_hash_keccak_256`."
                    ]
                  },
                  {
                    "name": "hash_blake2_256",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_hash_blake2_256`."
                    ]
                  },
                  {
                    "name": "hash_blake2_256_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte hashed by `seal_hash_blake2_256`."
                    ]
                  },
                  {
                    "name": "hash_blake2_128",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight of calling `seal_hash_blake2_128`."
                    ]
                  },
                  {
                    "name": "hash_blake2_128_per_byte",
                    "type": 8,
                    "typeName": "Weight",
                    "docs": [
                      "Weight per byte hashed by `seal_hash_blake2_128`."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Describes the weight for each imported function that a contract is allowed to call."
            ]
          },
          {
            "path": [
              "pallet_contracts",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InvalidScheduleVersion",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A new schedule must have a greater version than the current one."
                    ]
                  },
                  {
                    "name": "InvalidSurchargeClaim",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An origin must be signed or inherent and auxiliary sender only provided on inherent."
                    ]
                  },
                  {
                    "name": "InvalidSourceContract",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot restore from nonexisting or tombstone contract."
                    ]
                  },
                  {
                    "name": "InvalidDestinationContract",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot restore to nonexisting or alive contract."
                    ]
                  },
                  {
                    "name": "InvalidTombstone",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Tombstones don\\'t match."
                    ]
                  },
                  {
                    "name": "InvalidContractOrigin",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An origin TrieId written in the current block."
                    ]
                  },
                  {
                    "name": "OutOfGas",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The executed contract exhausted its gas limit."
                    ]
                  },
                  {
                    "name": "OutputBufferTooSmall",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The output buffer supplied to a contract API call was too small."
                    ]
                  },
                  {
                    "name": "BelowSubsistenceThreshold",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Performing the requested transfer would have brought the contract below",
                      "the subsistence threshold. No transfer is allowed to do this in order to allow",
                      "for a tombstone to be created. Use `seal_terminate` to remove a contract without",
                      "leaving a tombstone behind."
                    ]
                  },
                  {
                    "name": "NewContractNotFunded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The newly created contract is below the subsistence threshold after executing",
                      "its contructor. No contracts are allowed to exist below that threshold."
                    ]
                  },
                  {
                    "name": "TransferFailed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Performing the requested transfer failed for a reason originating in the",
                      "chosen currency implementation of the runtime. Most probably the balance is",
                      "too low or locks are placed on it."
                    ]
                  },
                  {
                    "name": "MaxCallDepthReached",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Performing a call was denied because the calling depth reached the limit",
                      "of what is specified in the schedule."
                    ]
                  },
                  {
                    "name": "ContractNotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No contract was found at the specified address."
                    ]
                  },
                  {
                    "name": "ContractIsTombstone",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A tombstone exist at the specified address.",
                      "",
                      "Tombstone cannot be called. Anyone can use `seal_restore_to` in order to revive",
                      "the contract, though."
                    ]
                  },
                  {
                    "name": "RentNotPaid",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The called contract does not have enough balance to pay for its storage.",
                      "",
                      "The contract ran out of balance and is therefore eligible for eviction into a",
                      "tombstone. Anyone can evict the contract by submitting a `claim_surcharge`",
                      "extrinsic. Alternatively, a plain balance transfer can be used in order to",
                      "increase the contracts funds so that it can be called again."
                    ]
                  },
                  {
                    "name": "CodeTooLarge",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
                      "current schedule."
                    ]
                  },
                  {
                    "name": "CodeNotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No code could be found at the supplied code hash."
                    ]
                  },
                  {
                    "name": "OutOfBounds",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A buffer outside of sandbox memory was passed to a contract API function."
                    ]
                  },
                  {
                    "name": "DecodingFailed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Input passed to a contract API function failed to decode as expected type."
                    ]
                  },
                  {
                    "name": "ContractTrapped",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Contract trapped during execution."
                    ]
                  },
                  {
                    "name": "ValueTooLarge",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The size defined in `T::MaxValueSize` was exceeded."
                    ]
                  },
                  {
                    "name": "TerminatedWhileReentrant",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Termination of a contract is not allowed while the contract is already",
                      "on the call stack. Can be triggered by `seal_terminate` or `seal_restore_to."
                    ]
                  },
                  {
                    "name": "InputForwarded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "`seal_call` forwarded this contracts input. It therefore is no longer available."
                    ]
                  },
                  {
                    "name": "RandomSubjectTooLong",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The subject passed to `seal_random` exceeds the limit."
                    ]
                  },
                  {
                    "name": "TooManyTopics",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The amount of topics passed to `seal_deposit_events` exceeds the limit."
                    ]
                  },
                  {
                    "name": "DuplicateTopics",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The topics passed to `seal_deposit_events` contains at least one duplicate."
                    ]
                  },
                  {
                    "name": "NoChainExtension",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The chain does not provide a chain extension. Calling the chain extension results",
                      "in this error. Note that this usually  shouldn\\'t happen as deploying such contracts",
                      "is rejected."
                    ]
                  },
                  {
                    "name": "DeletionQueueFull",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Removal of a contract failed because the deletion queue is full.",
                      "",
                      "This can happen when either calling [`Pallet::claim_surcharge`] or `seal_terminate`.",
                      "The queue is filled by deleting contracts and emptied by a fixed amount each block.",
                      "Trying again during another block is the only way to resolve this issue."
                    ]
                  },
                  {
                    "name": "ContractNotEvictable",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A contract could not be evicted because it has enough balance to pay rent.",
                      "",
                      "This can be returned from [`Pallet::claim_surcharge`] because the target",
                      "contract has enough balance to pay for its rent."
                    ]
                  },
                  {
                    "name": "StorageExhausted",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A storage modification exhausted the 32bit type that holds the storage size.",
                      "",
                      "This can either happen when the accumulated storage in bytes is too large or",
                      "when number of storage items is too large."
                    ]
                  },
                  {
                    "name": "DuplicateContract",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A contract with the same AccountId already exists."
                    ]
                  },
                  {
                    "name": "TerminatedInConstructor",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A contract self destructed in its constructor.",
                      "",
                      "This can be triggered by a call to `seal_terminate` or `seal_restore_to`."
                    ]
                  },
                  {
                    "name": "DebugMessageInvalidUTF8",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The debug message specified to `seal_debug_message` does contain invalid UTF-8."
                    ]
                  },
                  {
                    "name": "ReentranceDenied",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A call tried to invoke a contract that is flagged as non-reentrant."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_sudo",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "RequireSudo",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Sender must be the Sudo account"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the Sudo pallet",
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 63
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_im_online",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InvalidKey",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Non existent public key."
                    ]
                  },
                  {
                    "name": "DuplicatedHeartbeat",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Duplicated heartbeat."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "sp_staking",
              "offence",
              "OffenceDetails"
            ],
            "params": [
              {
                "name": "Reporter",
                "type": 0
              },
              {
                "name": "Offender",
                "type": 66
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "offender",
                    "type": 66,
                    "typeName": "Offender",
                    "docs": [
                      "The offending authority id"
                    ]
                  },
                  {
                    "name": "reporters",
                    "type": 39,
                    "typeName": "Vec<Reporter>",
                    "docs": [
                      "A list of reporters of offences of this authority ID. Possibly empty where there are no",
                      "particular reporters."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A details about an offending authority for a particular kind of offence."
            ]
          },
          {
            "path": [
              "pallet_identity",
              "types",
              "Registration"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "MaxJudgements",
                "type": null
              },
              {
                "name": "MaxAdditionalFields",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "judgements",
                    "type": 420,
                    "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
                    "docs": [
                      "Judgements from the registrars on this identity. Stored ordered by `RegistrarIndex`. There",
                      "may be only a single judgement from each registrar."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Amount held on deposit for this information."
                    ]
                  },
                  {
                    "name": "info",
                    "type": 247,
                    "typeName": "IdentityInfo<MaxAdditionalFields>",
                    "docs": [
                      "Information on the identity."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information concerning the identity of the controller of an account.",
              "",
              "NOTE: This is stored separately primarily to facilitate the addition of extra fields in a",
              "backwards compatible way through a specialized `Decode` impl."
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 421
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 422,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                285
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 421
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                6,
                424
              ]
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 0
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 39,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 426
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 428,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 427
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 427,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_identity",
              "types",
              "RegistrarInfo"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "account",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account of the registrar."
                    ]
                  },
                  {
                    "name": "fee",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Amount required to be given to the registrar for them to provide judgement."
                    ]
                  },
                  {
                    "name": "fields",
                    "type": 283,
                    "typeName": "IdentityFields",
                    "docs": [
                      "Relevant fields for this registrar. Registrar judgements are limited to attestations on",
                      "these fields."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information concerning a registrar."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 426
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_identity",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TooManySubAccounts",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too many subs-accounts."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Account isn\\'t found."
                    ]
                  },
                  {
                    "name": "NotNamed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Account isn\\'t named."
                    ]
                  },
                  {
                    "name": "EmptyIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Empty index."
                    ]
                  },
                  {
                    "name": "FeeChanged",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Fee is changed."
                    ]
                  },
                  {
                    "name": "NoIdentity",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No identity found."
                    ]
                  },
                  {
                    "name": "StickyJudgement",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Sticky judgement."
                    ]
                  },
                  {
                    "name": "JudgementGiven",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Judgement given."
                    ]
                  },
                  {
                    "name": "InvalidJudgement",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid judgement."
                    ]
                  },
                  {
                    "name": "InvalidIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The index is invalid."
                    ]
                  },
                  {
                    "name": "InvalidTarget",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The target is invalid."
                    ]
                  },
                  {
                    "name": "TooManyFields",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too many additional fields."
                    ]
                  },
                  {
                    "name": "TooManyRegistrars",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Maximum amount of registrars reached. Cannot add any more."
                    ]
                  },
                  {
                    "name": "AlreadyClaimed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Account ID is already named."
                    ]
                  },
                  {
                    "name": "NotSub",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Sender is not a sub-account."
                    ]
                  },
                  {
                    "name": "NotOwned",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Sub-account isn\\'t owned by sender."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 431
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_society",
              "Bid"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The bidder/candidate trying to enter society"
                    ]
                  },
                  {
                    "name": "kind",
                    "type": 432,
                    "typeName": "BidKind<AccountId, Balance>",
                    "docs": [
                      "The kind of bid placed for this bidder/candidate. See `BidKind`."
                    ]
                  },
                  {
                    "name": "value",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The reward that the bidder has requested for successfully joining the society."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A bid for entry into society."
            ]
          },
          {
            "path": [
              "pallet_society",
              "BidKind"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Deposit",
                    "fields": [
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The CandidateDeposit was paid for this bid."
                    ]
                  },
                  {
                    "name": "Vouch",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 6,
                        "typeName": "Balance",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A member vouched for this bid. The account should be reinstated into `Members` once the",
                      "bid is successful (or if it is rescinded prior to launch)."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A vote by a member on a candidate application."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                6,
                432
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_society",
              "VouchingStatus"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Vouching",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "Member is currently vouching for a user."
                    ]
                  },
                  {
                    "name": "Banned",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "Member is banned from vouching for other members."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Status of a vouching member."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 436
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_society",
              "Vote"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Skeptic",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": [
                      "The member has been chosen to be skeptic and has not yet taken any action."
                    ]
                  },
                  {
                    "name": "Reject",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": [
                      "The member has rejected the candidate\\'s application."
                    ]
                  },
                  {
                    "name": "Approve",
                    "fields": [],
                    "index": null,
                    "discriminant": 2,
                    "docs": [
                      "The member approves of the candidate\\'s application."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A vote by a member on a candidate application."
            ]
          },
          {
            "path": [
              "pallet_society",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "BadPosition",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" An incorrect position was provided."
                    ]
                  },
                  {
                    "name": "NotMember",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" User is not a member."
                    ]
                  },
                  {
                    "name": "AlreadyMember",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" User is already a member."
                    ]
                  },
                  {
                    "name": "Suspended",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" User is suspended."
                    ]
                  },
                  {
                    "name": "NotSuspended",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" User is not suspended."
                    ]
                  },
                  {
                    "name": "NoPayout",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Nothing to payout."
                    ]
                  },
                  {
                    "name": "AlreadyFounded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Society already founded."
                    ]
                  },
                  {
                    "name": "InsufficientPot",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Not enough in pot to accept candidate."
                    ]
                  },
                  {
                    "name": "AlreadyVouching",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Member is already vouching or banned from vouching again."
                    ]
                  },
                  {
                    "name": "NotVouching",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Member is not vouching."
                    ]
                  },
                  {
                    "name": "Head",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Cannot remove the head of the chain."
                    ]
                  },
                  {
                    "name": "Founder",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Cannot remove the founder."
                    ]
                  },
                  {
                    "name": "AlreadyBid",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" User has already made a bid."
                    ]
                  },
                  {
                    "name": "AlreadyCandidate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" User is already a candidate."
                    ]
                  },
                  {
                    "name": "NotCandidate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" User is not a candidate."
                    ]
                  },
                  {
                    "name": "MaxMembers",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Too many members in the society."
                    ]
                  },
                  {
                    "name": "NotFounder",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The caller is not the founder."
                    ]
                  },
                  {
                    "name": "NotHead",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The caller is not the head."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\" Errors for this module."
            ]
          },
          {
            "path": [
              "pallet_recovery",
              "RecoveryConfig"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "delay_period",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The minimum number of blocks since the start of the recovery process before the account",
                      "can be recovered."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount held in reserve of the `depositor`,",
                      "to be returned once this configuration is removed."
                    ]
                  },
                  {
                    "name": "friends",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "The list of friends which can help recover an account. Always sorted."
                    ]
                  },
                  {
                    "name": "threshold",
                    "type": 83,
                    "typeName": "u16",
                    "docs": [
                      "The number of approving friends needed to recover an account."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Configuration for recovering an account."
            ]
          },
          {
            "path": [
              "pallet_recovery",
              "ActiveRecovery"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "created",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The block number when the recovery process started."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount held in reserve of the `depositor`,",
                      "To be returned once this recovery process is closed."
                    ]
                  },
                  {
                    "name": "friends",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "The friends which have vouched so far. Always sorted."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An active recovery process."
            ]
          },
          {
            "path": [
              "pallet_recovery",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NotAllowed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "User is not allowed to make a call on behalf of this account"
                    ]
                  },
                  {
                    "name": "ZeroThreshold",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Threshold must be greater than zero"
                    ]
                  },
                  {
                    "name": "NotEnoughFriends",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Friends list must be greater than zero and threshold"
                    ]
                  },
                  {
                    "name": "MaxFriends",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Friends list must be less than max friends"
                    ]
                  },
                  {
                    "name": "NotSorted",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Friends list must be sorted and free of duplicates"
                    ]
                  },
                  {
                    "name": "NotRecoverable",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "This account is not set up for recovery"
                    ]
                  },
                  {
                    "name": "AlreadyRecoverable",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "This account is already set up for recovery"
                    ]
                  },
                  {
                    "name": "AlreadyStarted",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A recovery process has already started for this account"
                    ]
                  },
                  {
                    "name": "NotStarted",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A recovery process has not started for this rescuer"
                    ]
                  },
                  {
                    "name": "NotFriend",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "This account is not a friend who can vouch"
                    ]
                  },
                  {
                    "name": "DelayPeriod",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The friend must wait until the delay period to vouch for this recovery"
                    ]
                  },
                  {
                    "name": "AlreadyVouched",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "This user has already vouched for this recovery"
                    ]
                  },
                  {
                    "name": "Threshold",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The threshold for recovering this account has not been met"
                    ]
                  },
                  {
                    "name": "StillActive",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There are still active recovery attempts that need to be closed"
                    ]
                  },
                  {
                    "name": "AlreadyProxy",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "This account is already set up for recovery"
                    ]
                  },
                  {
                    "name": "BadState",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Some internal state is broken."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_vesting",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NotVesting",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The account given is not vesting."
                    ]
                  },
                  {
                    "name": "ExistingVestingSchedule",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "An existing vesting schedule already exists for this account that cannot be clobbered."
                    ]
                  },
                  {
                    "name": "AmountLow",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Amount being transferred is too low to create a vesting schedule."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Error for the vesting pallet.",
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 444
              }
            },
            "docs": []
          },
          {
            "path": [
              "Option"
            ],
            "params": [
              {
                "name": "T",
                "type": 445
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Some",
                    "fields": [
                      {
                        "name": null,
                        "type": 445,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_scheduler",
              "ScheduledV2"
            ],
            "params": [
              {
                "name": "Call",
                "type": 126
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "PalletsOrigin",
                "type": 446
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "maybe_id",
                    "type": 80,
                    "typeName": "Option<Vec<u8>>",
                    "docs": [
                      "The unique identity for this task, if there is one."
                    ]
                  },
                  {
                    "name": "priority",
                    "type": 2,
                    "typeName": "schedule::Priority",
                    "docs": [
                      "This task\\'s priority."
                    ]
                  },
                  {
                    "name": "call",
                    "type": 126,
                    "typeName": "Call",
                    "docs": [
                      "The call to be dispatched."
                    ]
                  },
                  {
                    "name": "maybe_periodic",
                    "type": 292,
                    "typeName": "Option<schedule::Period<BlockNumber>>",
                    "docs": [
                      "If the call is periodic, then this points to the information concerning that."
                    ]
                  },
                  {
                    "name": "origin",
                    "type": 446,
                    "typeName": "PalletsOrigin",
                    "docs": [
                      "The origin to dispatch the call."
                    ]
                  },
                  {
                    "name": "_phantom",
                    "type": 52,
                    "typeName": "PhantomData<AccountId>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Information regarding an item to be executed in the future."
            ]
          },
          {
            "path": [
              "node_runtime",
              "OriginCaller"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "system",
                    "fields": [
                      {
                        "name": null,
                        "type": 447,
                        "typeName": "frame_system::Origin<Runtime>",
                        "docs": []
                      }
                    ],
                    "index": 0,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Council",
                    "fields": [
                      {
                        "name": null,
                        "type": 448,
                        "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                        "docs": []
                      }
                    ],
                    "index": 12,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TechnicalCommittee",
                    "fields": [
                      {
                        "name": null,
                        "type": 449,
                        "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                        "docs": []
                      }
                    ],
                    "index": 13,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Void",
                    "fields": [
                      {
                        "name": null,
                        "type": 450,
                        "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Root",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The system itself ordained this dispatch to happen: this is the highest privilege level."
                    ]
                  },
                  {
                    "name": "Signed",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It is signed by some public key and we provide the `AccountId`."
                    ]
                  },
                  {
                    "name": "None",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It is signed by nobody, can be either:",
                      "* included and agreed upon by the validators anyway,",
                      "* or unsigned transaction validated by a pallet."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Origin for the System pallet."
            ]
          },
          {
            "path": [
              "pallet_collective",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "I",
                "type": 42
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Members",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It has been condoned by a given number of members of the collective from a given total."
                    ]
                  },
                  {
                    "name": "Member",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It has been condoned by a single member of the collective."
                    ]
                  },
                  {
                    "name": "_Phantom",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "sp_std::marker::PhantomData<I>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Dummy to manage the fact we have instancing."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Origin for the collective module."
            ]
          },
          {
            "path": [
              "pallet_collective",
              "RawOrigin"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "I",
                "type": 46
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Members",
                    "fields": [
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 4,
                        "typeName": "MemberCount",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It has been condoned by a given number of members of the collective from a given total."
                    ]
                  },
                  {
                    "name": "Member",
                    "fields": [
                      {
                        "name": null,
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "It has been condoned by a single member of the collective."
                    ]
                  },
                  {
                    "name": "_Phantom",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "sp_std::marker::PhantomData<I>",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Dummy to manage the fact we have instancing."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Origin for the collective module."
            ]
          },
          {
            "path": [
              "sp_core",
              "Void"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": []
              }
            },
            "docs": [
              "The void type - it cannot exist."
            ]
          },
          {
            "path": [
              "pallet_scheduler",
              "Releases"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "V1",
                    "fields": [],
                    "index": null,
                    "discriminant": 0,
                    "docs": []
                  },
                  {
                    "name": "V2",
                    "fields": [],
                    "index": null,
                    "discriminant": 1,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_scheduler",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "FailedToSchedule",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Failed to schedule a call"
                    ]
                  },
                  {
                    "name": "NotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot find the scheduled call."
                    ]
                  },
                  {
                    "name": "TargetBlockNumberInPast",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Given target block number is in the past."
                    ]
                  },
                  {
                    "name": "RescheduleNoChange",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Reschedule failed because it does not change scheduled time."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                454,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 455
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 456,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "pallet_proxy",
              "ProxyDefinition"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "ProxyType",
                "type": 82
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "delegate",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account which may act on behalf of another."
                    ]
                  },
                  {
                    "name": "proxy_type",
                    "type": 82,
                    "typeName": "ProxyType",
                    "docs": [
                      "A value defining the subset of calls that it is allowed to make."
                    ]
                  },
                  {
                    "name": "delay",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The number of blocks that an announcement must be in place for before the corresponding call",
                      "may be dispatched. If zero, then no announcement is needed."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The parameters under which a particular account has a proxy relationship with some other",
              "account."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 455
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                458,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "frame_support",
              "storage",
              "bounded_vec",
              "BoundedVec"
            ],
            "params": [
              {
                "name": "T",
                "type": 459
              },
              {
                "name": "S",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 460,
                    "typeName": "Vec<T>",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "PhantomData<S>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "A bounded vector.",
              "",
              "It has implementations for efficient append and length decoding, as with a normal `Vec<_>`, once",
              "put into storage as a raw value, map or double-map.",
              "",
              "As the name suggests, the length of the queue is always bounded. All internal operations ensure",
              "this bound is respected."
            ]
          },
          {
            "path": [
              "pallet_proxy",
              "Announcement"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Hash",
                "type": 9
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "real",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account which made the announcement."
                    ]
                  },
                  {
                    "name": "call_hash",
                    "type": 9,
                    "typeName": "Hash",
                    "docs": [
                      "The hash of the call to be made."
                    ]
                  },
                  {
                    "name": "height",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The height at which the announcement was made."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Details surrounding a specific instance of an announcement to make a call."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 459
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_proxy",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "TooMany",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There are too many proxies registered or too many announcements pending."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proxy registration not found."
                    ]
                  },
                  {
                    "name": "NotProxy",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Sender is not a proxy of the account to be proxied."
                    ]
                  },
                  {
                    "name": "Unproxyable",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A call which is incompatible with the proxy type\\'s filter was attempted."
                    ]
                  },
                  {
                    "name": "Duplicate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Account is already a proxy."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Call may not be made by proxy because it may escalate its privileges."
                    ]
                  },
                  {
                    "name": "Unannounced",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Announcement, if made at all, was made too recently."
                    ]
                  },
                  {
                    "name": "NoSelfProxy",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Cannot add self as proxy."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_multisig",
              "Multisig"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "when",
                    "type": 85,
                    "typeName": "Timepoint<BlockNumber>",
                    "docs": [
                      "The extrinsic when the multisig operation was opened."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount held in reserve of the `depositor`, to be returned once the operation ends."
                    ]
                  },
                  {
                    "name": "depositor",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account who opened it (i.e. the first to approve it)."
                    ]
                  },
                  {
                    "name": "approvals",
                    "type": 39,
                    "typeName": "Vec<AccountId>",
                    "docs": [
                      "The approvals achieved so far, including the depositor. Always sorted."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An open multisig operation."
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                10,
                0,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_multisig",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "MinimumThreshold",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Threshold must be 2 or greater."
                    ]
                  },
                  {
                    "name": "AlreadyApproved",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Call is already approved by this signatory."
                    ]
                  },
                  {
                    "name": "NoApprovalsNeeded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Call doesn\\'t need any (more) approvals."
                    ]
                  },
                  {
                    "name": "TooFewSignatories",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There are too few signatories in the list."
                    ]
                  },
                  {
                    "name": "TooManySignatories",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There are too many signatories in the list."
                    ]
                  },
                  {
                    "name": "SignatoriesOutOfOrder",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The signatories were provided out of order; they should be ordered."
                    ]
                  },
                  {
                    "name": "SenderInSignatories",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The sender was contained in the other signatories; it shouldn\\'t be."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Multisig operation not found when attempting to cancel."
                    ]
                  },
                  {
                    "name": "NotOwner",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Only the account that originally created the multisig is able to cancel it."
                    ]
                  },
                  {
                    "name": "NoTimepoint",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No timepoint was given, yet the multisig operation is already underway."
                    ]
                  },
                  {
                    "name": "WrongTimepoint",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A different timepoint was given to the multisig operation that is underway."
                    ]
                  },
                  {
                    "name": "UnexpectedTimepoint",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A timepoint was given, yet no multisig operation is underway."
                    ]
                  },
                  {
                    "name": "MaxWeightTooLow",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The maximum weight information provided was too low."
                    ]
                  },
                  {
                    "name": "AlreadyStored",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The data to be stored is already stored."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_bounties",
              "Bounty"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "proposer",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account proposing it."
                    ]
                  },
                  {
                    "name": "value",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The (total) amount that should be paid if the bounty is rewarded."
                    ]
                  },
                  {
                    "name": "fee",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The curator fee. Included in value."
                    ]
                  },
                  {
                    "name": "curator_deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The deposit of curator."
                    ]
                  },
                  {
                    "name": "bond",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount held on deposit (reserved) for making this proposal."
                    ]
                  },
                  {
                    "name": "status",
                    "type": 466,
                    "typeName": "BountyStatus<AccountId, BlockNumber>",
                    "docs": [
                      "The status of this bounty."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A bounty proposal."
            ]
          },
          {
            "path": [
              "pallet_bounties",
              "BountyStatus"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Proposed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The bounty is proposed and waiting for approval."
                    ]
                  },
                  {
                    "name": "Approved",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The bounty is approved and waiting to become active at next spend period."
                    ]
                  },
                  {
                    "name": "Funded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The bounty is funded and waiting for curator assignment."
                    ]
                  },
                  {
                    "name": "CuratorProposed",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": [
                          "The assigned curator of this bounty."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A curator has been proposed by the `ApproveOrigin`. Waiting for acceptance from the curator."
                    ]
                  },
                  {
                    "name": "Active",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": [
                          "The curator of this bounty."
                        ]
                      },
                      {
                        "name": "update_due",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": [
                          "An update from the curator is due by this block, else they are considered inactive."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The bounty is active and waiting to be awarded."
                    ]
                  },
                  {
                    "name": "PendingPayout",
                    "fields": [
                      {
                        "name": "curator",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": [
                          "The curator of this bounty."
                        ]
                      },
                      {
                        "name": "beneficiary",
                        "type": 0,
                        "typeName": "AccountId",
                        "docs": [
                          "The beneficiary of the bounty."
                        ]
                      },
                      {
                        "name": "unlock_at",
                        "type": 4,
                        "typeName": "BlockNumber",
                        "docs": [
                          "When the bounty can be claimed."
                        ]
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The bounty is awarded and waiting to released after a delay."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "The status of a bounty proposal."
            ]
          },
          {
            "path": [
              "pallet_bounties",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T,)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InsufficientProposersBalance",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Proposer's balance is too low."
                    ]
                  },
                  {
                    "name": "InvalidIndex",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" No proposal or bounty at that index."
                    ]
                  },
                  {
                    "name": "ReasonTooBig",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The reason given is just too big."
                    ]
                  },
                  {
                    "name": "UnexpectedStatus",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The bounty status is unexpected."
                    ]
                  },
                  {
                    "name": "RequireCurator",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Require bounty curator."
                    ]
                  },
                  {
                    "name": "InvalidValue",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Invalid bounty value."
                    ]
                  },
                  {
                    "name": "InvalidFee",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" Invalid bounty fee."
                    ]
                  },
                  {
                    "name": "PendingPayout",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" A bounty payout is pending.",
                      "r\" To cancel the bounty, you must unassign and slash the curator."
                    ]
                  },
                  {
                    "name": "Premature",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The bounties cannot be claimed/closed because it's still in the countdown period."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\" Error for the treasury module."
            ]
          },
          {
            "path": [
              "pallet_tips",
              "OpenTip"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Hash",
                "type": 9
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "reason",
                    "type": 9,
                    "typeName": "Hash",
                    "docs": [
                      "The hash of the reason for the tip. The reason should be a human-readable UTF-8 encoded string. A URL would be",
                      "sensible."
                    ]
                  },
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account to be tipped."
                    ]
                  },
                  {
                    "name": "finder",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account who began this tip."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount held on deposit for this tip."
                    ]
                  },
                  {
                    "name": "closes",
                    "type": 95,
                    "typeName": "Option<BlockNumber>",
                    "docs": [
                      "The block number at which this tip will close if `Some`. If `None`, then no closing is",
                      "scheduled."
                    ]
                  },
                  {
                    "name": "tips",
                    "type": 48,
                    "typeName": "Vec<(AccountId, Balance)>",
                    "docs": [
                      "The members who have voted for this tip. Sorted by AccountId."
                    ]
                  },
                  {
                    "name": "finders_fee",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether this tip should result in the finder taking a fee."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "An open tipping \\\"motion\\\". Retains all details of a tip including information on the finder",
              "and the members who have voted."
            ]
          },
          {
            "path": [
              "pallet_tips",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "$crate::sp_std::marker::PhantomData<(T,)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "$crate::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "ReasonTooBig",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The reason given is just too big."
                    ]
                  },
                  {
                    "name": "AlreadyKnown",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The tip was already found/started."
                    ]
                  },
                  {
                    "name": "UnknownTip",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The tip hash is unknown."
                    ]
                  },
                  {
                    "name": "NotFinder",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The account attempting to retract the tip is not the finder of the tip."
                    ]
                  },
                  {
                    "name": "StillOpen",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The tip cannot be claimed/closed because there are not enough tippers yet."
                    ]
                  },
                  {
                    "name": "Premature",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "r\" The tip cannot be claimed/closed because it's still in the countdown period."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\" Error for the tips module."
            ]
          },
          {
            "path": [
              "pallet_assets",
              "types",
              "AssetDetails"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 8
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "DepositBalance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "owner",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can change `owner`, `issuer`, `freezer` and `admin` accounts."
                    ]
                  },
                  {
                    "name": "issuer",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can mint tokens."
                    ]
                  },
                  {
                    "name": "admin",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can thaw tokens, force transfers and burn tokens from any account."
                    ]
                  },
                  {
                    "name": "freezer",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can freeze tokens."
                    ]
                  },
                  {
                    "name": "supply",
                    "type": 8,
                    "typeName": "Balance",
                    "docs": [
                      "The total supply across all accounts."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance",
                    "docs": [
                      "The balance deposited for this asset. This pays for the data stored here."
                    ]
                  },
                  {
                    "name": "min_balance",
                    "type": 8,
                    "typeName": "Balance",
                    "docs": [
                      "The ED for virtual accounts."
                    ]
                  },
                  {
                    "name": "is_sufficient",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "If `true`, then any account with this asset is given a provider reference. Otherwise, it",
                      "requires a consumer reference."
                    ]
                  },
                  {
                    "name": "accounts",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of accounts."
                    ]
                  },
                  {
                    "name": "sufficients",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of accounts for which we have placed a self-sufficient reference."
                    ]
                  },
                  {
                    "name": "approvals",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of approvals."
                    ]
                  },
                  {
                    "name": "is_frozen",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the asset is frozen for non-admin transfers."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_assets",
              "types",
              "AssetBalance"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 8
              },
              {
                "name": "Extra",
                "type": 44
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "balance",
                    "type": 8,
                    "typeName": "Balance",
                    "docs": [
                      "The balance."
                    ]
                  },
                  {
                    "name": "is_frozen",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the account is frozen."
                    ]
                  },
                  {
                    "name": "sufficient",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "`true` if this balance gave the account a self-sufficient reference."
                    ]
                  },
                  {
                    "name": "extra",
                    "type": 44,
                    "typeName": "Extra",
                    "docs": [
                      "Additional \\\"sidecar\\\" data, in case some other pallet wants to use this storage item."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                0,
                0
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_assets",
              "types",
              "Approval"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 8
              },
              {
                "name": "DepositBalance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "amount",
                    "type": 8,
                    "typeName": "Balance",
                    "docs": [
                      "The amount of funds approved for the balance transfer from the owner to some delegated",
                      "target."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance",
                    "docs": [
                      "The amount reserved on the owner\\'s account to hold this item in storage."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Data concerning an approval."
            ]
          },
          {
            "path": [
              "pallet_assets",
              "types",
              "AssetMetadata"
            ],
            "params": [
              {
                "name": "DepositBalance",
                "type": 6
              },
              {
                "name": "BoundedString",
                "type": 93
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance",
                    "docs": [
                      "The balance deposited for this metadata.",
                      "",
                      "This pays for the data stored in this struct."
                    ]
                  },
                  {
                    "name": "name",
                    "type": 93,
                    "typeName": "BoundedString",
                    "docs": [
                      "The user friendly name of this asset. Limited in length by `StringLimit`."
                    ]
                  },
                  {
                    "name": "symbol",
                    "type": 93,
                    "typeName": "BoundedString",
                    "docs": [
                      "The ticker symbol for this asset. Limited in length by `StringLimit`."
                    ]
                  },
                  {
                    "name": "decimals",
                    "type": 2,
                    "typeName": "u8",
                    "docs": [
                      "The number of decimals this asset uses to represent one unit."
                    ]
                  },
                  {
                    "name": "is_frozen",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the asset metadata may be changed by a non Force origin."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_assets",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "BalanceLow",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Account balance must be greater than or equal to the transfer amount."
                    ]
                  },
                  {
                    "name": "BalanceZero",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Balance should be non-zero."
                    ]
                  },
                  {
                    "name": "NoPermission",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The signing account has no permission to do the operation."
                    ]
                  },
                  {
                    "name": "Unknown",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The given asset ID is unknown."
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The origin account is frozen."
                    ]
                  },
                  {
                    "name": "InUse",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The asset ID is already taken."
                    ]
                  },
                  {
                    "name": "BadWitness",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid witness data given."
                    ]
                  },
                  {
                    "name": "MinBalanceZero",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Minimum balance should be non-zero."
                    ]
                  },
                  {
                    "name": "NoProvider",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No provider reference exists to allow a non-zero balance of a non-self-sufficient asset."
                    ]
                  },
                  {
                    "name": "BadMetadata",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid metadata given."
                    ]
                  },
                  {
                    "name": "Unapproved",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No approval exists that would allow the transfer."
                    ]
                  },
                  {
                    "name": "WouldDie",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The source account would not survive the transfer and it needs to stay alive."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_lottery",
              "LotteryConfig"
            ],
            "params": [
              {
                "name": "BlockNumber",
                "type": 4
              },
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "price",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "Price per entry."
                    ]
                  },
                  {
                    "name": "start",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "Starting block of the lottery."
                    ]
                  },
                  {
                    "name": "length",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "Length of the lottery (start + length = end)."
                    ]
                  },
                  {
                    "name": "delay",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "Delay for choosing the winner of the lottery. (start + length + delay = payout).",
                      "Randomness in the \\\"payout\\\" block will be used to determine the winner."
                    ]
                  },
                  {
                    "name": "repeat",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether this lottery will repeat after it completes."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                478
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 90
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_lottery",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NotConfigured",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A lottery has not been configured."
                    ]
                  },
                  {
                    "name": "InProgress",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A lottery is already in progress."
                    ]
                  },
                  {
                    "name": "AlreadyEnded",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "A lottery has already ended."
                    ]
                  },
                  {
                    "name": "InvalidCall",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The call is not valid for an open lottery."
                    ]
                  },
                  {
                    "name": "AlreadyParticipating",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "You are already participating in the lottery with this call."
                    ]
                  },
                  {
                    "name": "TooManyCalls",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too many calls for a single lottery."
                    ]
                  },
                  {
                    "name": "EncodingFailed",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Failed to encode calls"
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 481
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_gilt",
              "pallet",
              "GiltBid"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount bid."
                    ]
                  },
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The owner of the bid."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "A single bid on a gilt, an item of a *queue* in `Queues`."
            ]
          },
          {
            "path": [
              "pallet_gilt",
              "pallet",
              "ActiveGiltsTotal"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "frozen",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The total amount of funds held in reserve for all active gilts."
                    ]
                  },
                  {
                    "name": "proportion",
                    "type": 304,
                    "typeName": "Perquintill",
                    "docs": [
                      "The proportion of funds that the `frozen` balance represents to total issuance."
                    ]
                  },
                  {
                    "name": "index",
                    "type": 4,
                    "typeName": "ActiveIndex",
                    "docs": [
                      "The total number of gilts issued so far."
                    ]
                  },
                  {
                    "name": "target",
                    "type": 304,
                    "typeName": "Perquintill",
                    "docs": [
                      "The target proportion of gilts within total issuance."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Overall information package on the active gilts.",
              "",
              "The way of determining the net issuance (i.e. after factoring in all maturing frozen funds)",
              "is:",
              "",
              "`issuance - frozen + proportion * issuance`",
              "",
              "where `issuance = total_issuance - IgnoredIssuance`"
            ]
          },
          {
            "path": [
              "pallet_gilt",
              "pallet",
              "ActiveGilt"
            ],
            "params": [
              {
                "name": "Balance",
                "type": 6
              },
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "BlockNumber",
                "type": 4
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "proportion",
                    "type": 304,
                    "typeName": "Perquintill",
                    "docs": [
                      "The proportion of the effective total issuance (i.e. accounting for any eventual gilt",
                      "expansion or contraction that may eventually be claimed)."
                    ]
                  },
                  {
                    "name": "amount",
                    "type": 6,
                    "typeName": "Balance",
                    "docs": [
                      "The amount reserved under this gilt."
                    ]
                  },
                  {
                    "name": "who",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The account to whom this gilt belongs."
                    ]
                  },
                  {
                    "name": "expiry",
                    "type": 4,
                    "typeName": "BlockNumber",
                    "docs": [
                      "The time after which this gilt can be redeemed for the proportional amount of balance."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information representing an active gilt."
            ]
          },
          {
            "path": [
              "pallet_gilt",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "DurationTooSmall",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The duration of the bid is less than one."
                    ]
                  },
                  {
                    "name": "DurationTooBig",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The duration is the bid is greater than the number of queues."
                    ]
                  },
                  {
                    "name": "AmountTooSmall",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The amount of the bid is less than the minimum allowed."
                    ]
                  },
                  {
                    "name": "BidTooLow",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The queue for the bid\\'s duration is full and the amount bid is too low to get in through",
                      "replacing an existing bid."
                    ]
                  },
                  {
                    "name": "Unknown",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Gilt index is unknown."
                    ]
                  },
                  {
                    "name": "NotOwner",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Not the owner of the gilt."
                    ]
                  },
                  {
                    "name": "NotExpired",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Gilt not yet at expiry date."
                    ]
                  },
                  {
                    "name": "NotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The given bid for retraction is not found."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "pallet_uniques",
              "types",
              "ClassDetails"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "DepositBalance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "owner",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can change `owner`, `issuer`, `freezer` and `admin` accounts."
                    ]
                  },
                  {
                    "name": "issuer",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can mint tokens."
                    ]
                  },
                  {
                    "name": "admin",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can thaw tokens, force transfers and burn tokens from any account."
                    ]
                  },
                  {
                    "name": "freezer",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "Can freeze tokens."
                    ]
                  },
                  {
                    "name": "total_deposit",
                    "type": 6,
                    "typeName": "DepositBalance",
                    "docs": [
                      "The total balance deposited for the all storage associated with this asset class. Used by",
                      "`destroy`."
                    ]
                  },
                  {
                    "name": "free_holding",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "If `true`, then no deposit is needed to hold instances of this class."
                    ]
                  },
                  {
                    "name": "instances",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of outstanding instances of this asset class."
                    ]
                  },
                  {
                    "name": "instance_metadatas",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of outstanding instance metadata of this asset class."
                    ]
                  },
                  {
                    "name": "attributes",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "The total number of attributes for this asset class."
                    ]
                  },
                  {
                    "name": "is_frozen",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the asset is frozen for non-admin transfers."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                0,
                4,
                4
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_uniques",
              "types",
              "InstanceDetails"
            ],
            "params": [
              {
                "name": "AccountId",
                "type": 0
              },
              {
                "name": "DepositBalance",
                "type": 6
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "owner",
                    "type": 0,
                    "typeName": "AccountId",
                    "docs": [
                      "The owner of this asset."
                    ]
                  },
                  {
                    "name": "approved",
                    "type": 218,
                    "typeName": "Option<AccountId>",
                    "docs": [
                      "The approved transferrer of this asset, if one is set."
                    ]
                  },
                  {
                    "name": "is_frozen",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the asset can be transferred or not."
                    ]
                  },
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance",
                    "docs": [
                      "The amount held in the pallet\\'s default account for this asset. Free-hold assets will have",
                      "this as zero."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "Information concerning the ownership of a single unique asset."
            ]
          },
          {
            "path": [
              "pallet_uniques",
              "types",
              "ClassMetadata"
            ],
            "params": [
              {
                "name": "DepositBalance",
                "type": 6
              },
              {
                "name": "StringLimit",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance",
                    "docs": [
                      "The balance deposited for this metadata.",
                      "",
                      "This pays for the data stored in this struct."
                    ]
                  },
                  {
                    "name": "data",
                    "type": 93,
                    "typeName": "BoundedVec<u8, StringLimit>",
                    "docs": [
                      "General information concerning this asset. Limited in length by `StringLimit`. This will",
                      "generally be either a JSON dump or the hash of some JSON which can be found on a",
                      "hash-addressable global publication system such as IPFS."
                    ]
                  },
                  {
                    "name": "is_frozen",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the asset metadata may be changed by a non Force origin."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_uniques",
              "types",
              "InstanceMetadata"
            ],
            "params": [
              {
                "name": "DepositBalance",
                "type": 6
              },
              {
                "name": "StringLimit",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "deposit",
                    "type": 6,
                    "typeName": "DepositBalance",
                    "docs": [
                      "The balance deposited for this metadata.",
                      "",
                      "This pays for the data stored in this struct."
                    ]
                  },
                  {
                    "name": "data",
                    "type": 93,
                    "typeName": "BoundedVec<u8, StringLimit>",
                    "docs": [
                      "General information concerning this asset. Limited in length by `StringLimit`. This will",
                      "generally be either a JSON dump or the hash of some JSON which can be found on a",
                      "hash-addressable global publication system such as IPFS."
                    ]
                  },
                  {
                    "name": "is_frozen",
                    "type": 34,
                    "typeName": "bool",
                    "docs": [
                      "Whether the asset metadata may be changed by a non Force origin."
                    ]
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                4,
                95,
                96
              ]
            },
            "docs": []
          },
          {
            "path": [],
            "params": [],
            "def": {
              "tuple": [
                97,
                6
              ]
            },
            "docs": []
          },
          {
            "path": [
              "pallet_uniques",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              },
              {
                "name": "I",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T, I)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "NoPermission",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The signing account has no permission to do the operation."
                    ]
                  },
                  {
                    "name": "Unknown",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The given asset ID is unknown."
                    ]
                  },
                  {
                    "name": "AlreadyExists",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The asset instance ID has already been used for an asset."
                    ]
                  },
                  {
                    "name": "WrongOwner",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The owner turned out to be different to what was expected."
                    ]
                  },
                  {
                    "name": "BadWitness",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid witness data given."
                    ]
                  },
                  {
                    "name": "InUse",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The asset ID is already taken."
                    ]
                  },
                  {
                    "name": "Frozen",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The asset instance or class is frozen."
                    ]
                  },
                  {
                    "name": "WrongDelegate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "The delegate turned out to be different to what was expected."
                    ]
                  },
                  {
                    "name": "NoDelegate",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "There is no delegate approved."
                    ]
                  },
                  {
                    "name": "Unapproved",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "No approval exists that would allow the transfer."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [],
            "params": [],
            "def": {
              "sequence": {
                "type": 494
              }
            },
            "docs": []
          },
          {
            "path": [
              "pallet_transaction_storage",
              "TransactionInfo"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": "chunk_root",
                    "type": 9,
                    "typeName": "<BlakeTwo256 as Hash>::Output",
                    "docs": [
                      "Chunk trie root."
                    ]
                  },
                  {
                    "name": "content_hash",
                    "type": 9,
                    "typeName": "<BlakeTwo256 as Hash>::Output",
                    "docs": [
                      "Plain hash of indexed data."
                    ]
                  },
                  {
                    "name": "size",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Size of indexed data in bytes."
                    ]
                  },
                  {
                    "name": "block_chunks",
                    "type": 4,
                    "typeName": "u32",
                    "docs": [
                      "Total number of chunks added in the block with this transaction. This",
                      "is used find transaction info by block chunk index using binary search."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "State data for a stored transaction."
            ]
          },
          {
            "path": [
              "pallet_transaction_storage",
              "pallet",
              "Error"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "__Ignore",
                    "fields": [
                      {
                        "name": null,
                        "type": 52,
                        "typeName": "frame_support::sp_std::marker::PhantomData<(T)>",
                        "docs": []
                      },
                      {
                        "name": null,
                        "type": 123,
                        "typeName": "frame_support::Never",
                        "docs": []
                      }
                    ],
                    "index": null,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "InsufficientFunds",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Insufficient account balance."
                    ]
                  },
                  {
                    "name": "NotConfigured",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Invalid configuration."
                    ]
                  },
                  {
                    "name": "RenewedNotFound",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Renewed extrinsic is not found."
                    ]
                  },
                  {
                    "name": "EmptyTransaction",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Attempting to store empty transaction"
                    ]
                  },
                  {
                    "name": "UnexpectedProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proof was not expected in this block."
                    ]
                  },
                  {
                    "name": "InvalidProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Proof failed verification."
                    ]
                  },
                  {
                    "name": "MissingProof",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Missing storage proof."
                    ]
                  },
                  {
                    "name": "MissingStateData",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Unable to verify proof becasue state data is missing."
                    ]
                  },
                  {
                    "name": "DoubleCheck",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Double proof check in the block."
                    ]
                  },
                  {
                    "name": "ProofNotChecked",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Storage proof was not checked in the block."
                    ]
                  },
                  {
                    "name": "TransactionTooLarge",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Transaction is too large."
                    ]
                  },
                  {
                    "name": "TooManyTransactions",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Too many transactions in the block."
                    ]
                  },
                  {
                    "name": "BadContext",
                    "fields": [],
                    "index": null,
                    "discriminant": null,
                    "docs": [
                      "Attempted to call `store` outside of block execution."
                    ]
                  }
                ]
              }
            },
            "docs": [
              "r\"\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
            ]
          },
          {
            "path": [
              "sp_runtime",
              "generic",
              "unchecked_extrinsic",
              "UncheckedExtrinsic"
            ],
            "params": [],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 10,
                    "typeName": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "UncheckedExtrinsic raw bytes, requires custom decoding routine"
            ]
          },
          {
            "path": [
              "frame_system",
              "extensions",
              "check_spec_version",
              "CheckSpecVersion"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "sp_std::marker::PhantomData<T>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Ensure the runtime version registered in the transaction is the same as at present."
            ]
          },
          {
            "path": [
              "frame_system",
              "extensions",
              "check_tx_version",
              "CheckTxVersion"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "sp_std::marker::PhantomData<T>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Ensure the transaction version registered in the transaction is the same as at present."
            ]
          },
          {
            "path": [
              "frame_system",
              "extensions",
              "check_genesis",
              "CheckGenesis"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "sp_std::marker::PhantomData<T>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Genesis hash check to provide replay protection between different networks."
            ]
          },
          {
            "path": [
              "frame_system",
              "extensions",
              "check_mortality",
              "CheckMortality"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 501,
                    "typeName": "Era",
                    "docs": []
                  },
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "sp_std::marker::PhantomData<T>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Check for transaction mortality."
            ]
          },
          {
            "path": [
              "sp_runtime",
              "generic",
              "era",
              "Era"
            ],
            "params": [],
            "def": {
              "variant": {
                "variants": [
                  {
                    "name": "Immortal",
                    "fields": [],
                    "index": 0,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal1",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 1,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal2",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 2,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal3",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 3,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal4",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 4,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal5",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 5,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal6",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 6,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal7",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 7,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal8",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 8,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal9",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 9,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal10",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 10,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal11",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 11,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal12",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 12,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal13",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 13,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal14",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 14,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal15",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 15,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal16",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 16,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal17",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 17,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal18",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 18,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal19",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 19,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal20",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 20,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal21",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 21,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal22",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 22,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal23",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 23,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal24",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 24,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal25",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 25,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal26",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 26,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal27",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 27,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal28",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 28,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal29",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 29,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal30",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 30,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal31",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 31,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal32",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 32,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal33",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 33,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal34",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 34,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal35",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 35,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal36",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 36,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal37",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 37,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal38",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 38,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal39",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 39,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal40",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 40,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal41",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 41,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal42",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 42,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal43",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 43,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal44",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 44,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal45",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 45,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal46",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 46,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal47",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 47,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal48",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 48,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal49",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 49,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal50",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 50,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal51",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 51,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal52",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 52,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal53",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 53,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal54",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 54,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal55",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 55,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal56",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 56,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal57",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 57,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal58",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 58,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal59",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 59,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal60",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 60,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal61",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 61,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal62",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 62,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal63",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 63,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal64",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 64,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal65",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 65,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal66",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 66,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal67",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 67,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal68",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 68,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal69",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 69,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal70",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 70,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal71",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 71,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal72",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 72,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal73",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 73,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal74",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 74,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal75",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 75,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal76",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 76,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal77",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 77,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal78",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 78,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal79",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 79,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal80",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 80,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal81",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 81,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal82",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 82,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal83",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 83,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal84",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 84,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal85",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 85,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal86",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 86,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal87",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 87,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal88",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 88,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal89",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 89,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal90",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 90,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal91",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 91,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal92",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 92,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal93",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 93,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal94",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 94,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal95",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 95,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal96",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 96,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal97",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 97,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal98",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 98,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal99",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 99,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal100",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 100,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal101",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 101,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal102",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 102,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal103",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 103,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal104",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 104,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal105",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 105,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal106",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 106,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal107",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 107,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal108",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 108,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal109",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 109,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal110",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 110,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal111",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 111,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal112",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 112,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal113",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 113,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal114",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 114,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal115",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 115,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal116",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 116,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal117",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 117,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal118",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 118,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal119",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 119,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal120",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 120,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal121",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 121,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal122",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 122,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal123",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 123,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal124",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 124,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal125",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 125,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal126",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 126,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal127",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 127,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal128",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 128,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal129",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 129,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal130",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 130,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal131",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 131,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal132",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 132,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal133",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 133,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal134",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 134,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal135",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 135,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal136",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 136,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal137",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 137,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal138",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 138,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal139",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 139,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal140",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 140,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal141",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 141,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal142",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 142,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal143",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 143,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal144",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 144,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal145",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 145,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal146",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 146,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal147",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 147,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal148",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 148,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal149",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 149,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal150",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 150,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal151",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 151,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal152",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 152,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal153",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 153,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal154",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 154,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal155",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 155,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal156",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 156,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal157",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 157,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal158",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 158,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal159",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 159,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal160",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 160,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal161",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 161,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal162",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 162,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal163",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 163,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal164",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 164,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal165",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 165,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal166",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 166,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal167",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 167,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal168",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 168,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal169",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 169,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal170",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 170,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal171",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 171,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal172",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 172,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal173",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 173,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal174",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 174,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal175",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 175,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal176",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 176,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal177",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 177,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal178",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 178,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal179",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 179,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal180",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 180,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal181",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 181,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal182",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 182,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal183",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 183,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal184",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 184,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal185",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 185,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal186",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 186,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal187",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 187,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal188",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 188,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal189",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 189,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal190",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 190,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal191",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 191,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal192",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 192,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal193",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 193,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal194",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 194,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal195",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 195,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal196",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 196,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal197",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 197,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal198",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 198,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal199",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 199,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal200",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 200,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal201",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 201,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal202",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 202,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal203",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 203,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal204",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 204,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal205",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 205,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal206",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 206,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal207",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 207,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal208",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 208,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal209",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 209,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal210",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 210,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal211",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 211,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal212",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 212,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal213",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 213,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal214",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 214,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal215",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 215,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal216",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 216,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal217",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 217,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal218",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 218,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal219",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 219,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal220",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 220,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal221",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 221,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal222",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 222,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal223",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 223,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal224",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 224,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal225",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 225,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal226",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 226,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal227",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 227,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal228",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 228,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal229",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 229,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal230",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 230,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal231",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 231,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal232",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 232,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal233",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 233,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal234",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 234,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal235",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 235,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal236",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 236,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal237",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 237,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal238",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 238,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal239",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 239,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal240",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 240,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal241",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 241,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal242",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 242,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal243",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 243,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal244",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 244,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal245",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 245,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal246",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 246,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal247",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 247,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal248",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 248,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal249",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 249,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal250",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 250,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal251",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 251,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal252",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 252,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal253",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 253,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal254",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 254,
                    "discriminant": null,
                    "docs": []
                  },
                  {
                    "name": "Mortal255",
                    "fields": [
                      {
                        "name": null,
                        "type": 2,
                        "typeName": null,
                        "docs": []
                      }
                    ],
                    "index": 255,
                    "discriminant": null,
                    "docs": []
                  }
                ]
              }
            },
            "docs": []
          },
          {
            "path": [
              "frame_system",
              "extensions",
              "check_nonce",
              "CheckNonce"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 103,
                    "typeName": "T::Index",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Nonce check and increment to give replay protection for transactions.",
              "",
              "Note that this does not set any priority by default. Make sure that AT LEAST one of the signed",
              "extension sets some kind of priority upon validating transactions."
            ]
          },
          {
            "path": [
              "frame_system",
              "extensions",
              "check_weight",
              "CheckWeight"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 52,
                    "typeName": "sp_std::marker::PhantomData<T>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Block resource (weight) limit check."
            ]
          },
          {
            "path": [
              "pallet_transaction_payment",
              "ChargeTransactionPayment"
            ],
            "params": [
              {
                "name": "T",
                "type": null
              }
            ],
            "def": {
              "composite": {
                "fields": [
                  {
                    "name": null,
                    "type": 68,
                    "typeName": "BalanceOf<T>",
                    "docs": []
                  }
                ]
              }
            },
            "docs": [
              "Require the transactor pay for themselves and maybe include a tip to gain additional priority",
              "in the queue."
            ]
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 3
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "type": {
                  "plain": 7
                },
                "fallback": "0x000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 9
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "plain": 11
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "plain": 18
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 9,
                    "value": 101
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "type": {
                  "plain": 102
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "type": {
                  "plain": 34
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "type": {
                  "plain": 34
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "type": {
                  "plain": 99
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 105,
            "calls": [
              {
                "name": "fill_block",
                "arguments": [
                  {
                    "name": "_ratio",
                    "type": 106
                  }
                ],
                "docs": []
              },
              {
                "name": "remark",
                "arguments": [
                  {
                    "name": "_remark",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "set_heap_pages",
                "arguments": [
                  {
                    "name": "pages",
                    "type": 8
                  }
                ],
                "docs": []
              },
              {
                "name": "set_code",
                "arguments": [
                  {
                    "name": "code",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "set_code_without_checks",
                "arguments": [
                  {
                    "name": "code",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "set_changes_trie_config",
                "arguments": [
                  {
                    "name": "changes_trie_config",
                    "type": 16
                  }
                ],
                "docs": []
              },
              {
                "name": "set_storage",
                "arguments": [
                  {
                    "name": "items",
                    "type": 107
                  }
                ],
                "docs": []
              },
              {
                "name": "kill_storage",
                "arguments": [
                  {
                    "name": "keys",
                    "type": 109
                  }
                ],
                "docs": []
              },
              {
                "name": "kill_prefix",
                "arguments": [
                  {
                    "name": "prefix",
                    "type": 10
                  },
                  {
                    "name": "_subkeys",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "remark_with_event",
                "arguments": [
                  {
                    "name": "remark",
                    "type": 10
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 21
          },
          "constants": [
            {
              "name": "BlockWeights",
              "type": 110,
              "value": "0x00f2052a0100000000204aa9d1010000405973070000000001c06e96a62e010000010098f73e5d010000010000000000000000405973070000000001c0f6e810a30100000100204aa9d1010000010088526a740000004059730700000000000000",
              "docs": []
            },
            {
              "name": "BlockLength",
              "type": 114,
              "value": "0x00003c000000500000005000",
              "docs": []
            },
            {
              "name": "BlockHashCount",
              "type": 4,
              "value": "0x60090000",
              "docs": []
            },
            {
              "name": "DbWeight",
              "type": 116,
              "value": "0x40787d010000000000e1f50500000000",
              "docs": []
            },
            {
              "name": "Version",
              "type": 117,
              "value": "0x106e6f6465387375627374726174652d6e6f64650a0000000b0100000000000034df6acb689907609b0300000037e397fc7c91f5e40100000040fe3ad401f8959a05000000d2bc9897eed08f1503000000f78b278be53f454c02000000ed99c5acb25eedf502000000cbca25e39f14238702000000687ad44ad37f03c201000000bc9d89904f5b923f0100000068b66ba122c93fa70100000037c8bb1350a9a2a80100000091d5df18b0d2cf5801000000ab3c0572291feb8b0100000002000000",
              "docs": []
            },
            {
              "name": "SS58Prefix",
              "type": 83,
              "value": "0x2a00",
              "docs": []
            }
          ],
          "error": {
            "type": 122
          },
          "index": 0
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "type": 124,
            "calls": [
              {
                "name": "batch",
                "arguments": [
                  {
                    "name": "calls",
                    "type": 125
                  }
                ],
                "docs": []
              },
              {
                "name": "as_derivative",
                "arguments": [
                  {
                    "name": "index",
                    "type": 83
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "batch_all",
                "arguments": [
                  {
                    "name": "calls",
                    "type": 125
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 28
          },
          "constants": [],
          "error": null,
          "index": 1
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "plain": 310
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "plain": 131
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "plain": 131
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "PendingEpochConfigChange",
                "modifier": "Optional",
                "type": {
                  "plain": 133
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "plain": 1
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "NextAuthorities",
                "modifier": "Default",
                "type": {
                  "plain": 310
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 312
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "plain": 313
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "AuthorVrfRandomness",
                "modifier": "Default",
                "type": {
                  "plain": 313
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "EpochStart",
                "modifier": "Default",
                "type": {
                  "plain": 79
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "Lateness",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "EpochConfig",
                "modifier": "Optional",
                "type": {
                  "plain": 314
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "NextEpochConfig",
                "modifier": "Optional",
                "type": {
                  "plain": 314
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 127,
            "calls": [
              {
                "name": "report_equivocation",
                "arguments": [
                  {
                    "name": "equivocation_proof",
                    "type": 128
                  },
                  {
                    "name": "key_owner_proof",
                    "type": 132
                  }
                ],
                "docs": []
              },
              {
                "name": "report_equivocation_unsigned",
                "arguments": [
                  {
                    "name": "equivocation_proof",
                    "type": 128
                  },
                  {
                    "name": "key_owner_proof",
                    "type": 132
                  }
                ],
                "docs": []
              },
              {
                "name": "plan_config_change",
                "arguments": [
                  {
                    "name": "config",
                    "type": 133
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": 8,
              "value": "0xc800000000000000",
              "docs": []
            },
            {
              "name": "ExpectedBlockTime",
              "type": 8,
              "value": "0xb80b000000000000",
              "docs": []
            }
          ],
          "error": {
            "type": 315
          },
          "index": 2
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "plain": 34
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 136,
            "calls": [
              {
                "name": "set",
                "arguments": [
                  {
                    "name": "now",
                    "type": 137
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": 8,
              "value": "0xdc05000000000000",
              "docs": []
            }
          ],
          "error": null,
          "index": 3
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "plain": 316
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "plain": 34
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 138,
            "calls": [
              {
                "name": "set_uncles",
                "arguments": [
                  {
                    "name": "new_uncles",
                    "type": 139
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": null,
          "constants": [],
          "error": {
            "type": 318
          },
          "index": 4
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "items": [
              {
                "name": "Accounts",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 319
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 140,
            "calls": [
              {
                "name": "claim",
                "arguments": [
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer",
                "arguments": [
                  {
                    "name": "new",
                    "type": 0
                  },
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "free",
                "arguments": [
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "force_transfer",
                "arguments": [
                  {
                    "name": "new",
                    "type": 0
                  },
                  {
                    "name": "index",
                    "type": 4
                  },
                  {
                    "name": "freeze",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "freeze",
                "arguments": [
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 29
          },
          "constants": [
            {
              "name": "Deposit",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": []
            }
          ],
          "error": {
            "type": 320
          },
          "index": 5
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 5
                  }
                },
                "fallback": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 321
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 325
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 328
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 141,
            "calls": [
              {
                "name": "transfer",
                "arguments": [
                  {
                    "name": "dest",
                    "type": 142
                  },
                  {
                    "name": "value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "set_balance",
                "arguments": [
                  {
                    "name": "who",
                    "type": 142
                  },
                  {
                    "name": "new_free",
                    "type": 68
                  },
                  {
                    "name": "new_reserved",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "force_transfer",
                "arguments": [
                  {
                    "name": "source",
                    "type": 142
                  },
                  {
                    "name": "dest",
                    "type": 142
                  },
                  {
                    "name": "value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer_keep_alive",
                "arguments": [
                  {
                    "name": "dest",
                    "type": 142
                  },
                  {
                    "name": "value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer_all",
                "arguments": [
                  {
                    "name": "dest",
                    "type": 142
                  },
                  {
                    "name": "keep_alive",
                    "type": 34
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 30
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": []
            }
          ],
          "error": {
            "type": 329
          },
          "index": 6
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "plain": 330
                },
                "fallback": "0x000064a7b3b6e00d0000000000000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 331
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "TransactionByteFee",
              "type": 6,
              "value": "0x00e40b54020000000000000000000000",
              "docs": []
            },
            {
              "name": "WeightToFee",
              "type": 332,
              "value": "0x0401000000000000000000000000000000000000000001",
              "docs": []
            }
          ],
          "error": null,
          "index": 7
        },
        {
          "name": "ElectionProviderMultiPhase",
          "storage": {
            "prefix": "ElectionProviderMultiPhase",
            "items": [
              {
                "name": "Round",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x01000000",
                "docs": []
              },
              {
                "name": "CurrentPhase",
                "modifier": "Default",
                "type": {
                  "plain": 334
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "QueuedSolution",
                "modifier": "Optional",
                "type": {
                  "plain": 336
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Snapshot",
                "modifier": "Optional",
                "type": {
                  "plain": 337
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DesiredTargets",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SnapshotMetadata",
                "modifier": "Optional",
                "type": {
                  "plain": 198
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SignedSubmissionNextIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "SignedSubmissionIndices",
                "modifier": "Default",
                "type": {
                  "plain": 340
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SignedSubmissionsMap",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 344
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000",
                "docs": []
              },
              {
                "name": "MinimumUntrustedScore",
                "modifier": "Optional",
                "type": {
                  "plain": 197
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 144,
            "calls": [
              {
                "name": "submit_unsigned",
                "arguments": [
                  {
                    "name": "solution",
                    "type": 145
                  },
                  {
                    "name": "witness",
                    "type": 198
                  }
                ],
                "docs": []
              },
              {
                "name": "set_minimum_untrusted_score",
                "arguments": [
                  {
                    "name": "maybe_next_score",
                    "type": 199
                  }
                ],
                "docs": []
              },
              {
                "name": "set_emergency_election_result",
                "arguments": [
                  {
                    "name": "supports",
                    "type": 200
                  }
                ],
                "docs": []
              },
              {
                "name": "submit",
                "arguments": [
                  {
                    "name": "solution",
                    "type": 145
                  },
                  {
                    "name": "num_signed_submissions",
                    "type": 4
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 32
          },
          "constants": [
            {
              "name": "UnsignedPhase",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "SignedPhase",
              "type": 4,
              "value": "0x32000000",
              "docs": []
            },
            {
              "name": "SolutionImprovementThreshold",
              "type": 106,
              "value": "0xa0860100",
              "docs": []
            },
            {
              "name": "OffchainRepeat",
              "type": 4,
              "value": "0x05000000",
              "docs": []
            },
            {
              "name": "SignedMaxSubmissions",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "SignedMaxWeight",
              "type": 8,
              "value": "0xc07c907c2d010000",
              "docs": []
            },
            {
              "name": "SignedRewardBase",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": []
            },
            {
              "name": "SignedDepositBase",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": []
            },
            {
              "name": "SignedDepositByte",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": []
            },
            {
              "name": "SignedDepositWeight",
              "type": 6,
              "value": "0x00000000000000000000000000000000",
              "docs": []
            }
          ],
          "error": {
            "type": 345
          },
          "index": 8
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "HistoryDepth",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x54000000",
                "docs": []
              },
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "MinNominatorBond",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "MinValidatorBond",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 346
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 204
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 205
                  }
                },
                "fallback": "0x0000",
                "docs": []
              },
              {
                "name": "CounterForValidators",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "MaxValidatorsCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 349
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "CounterForNominators",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "MaxNominatorsCount",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "CurrentEra",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ActiveEra",
                "modifier": "Optional",
                "type": {
                  "plain": 350
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ErasStartSessionIndex",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ErasStakers",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 4,
                    "key2": 0,
                    "value": 67,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x000000",
                "docs": []
              },
              {
                "name": "ErasStakersClipped",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 4,
                    "key2": 0,
                    "value": 67,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x000000",
                "docs": []
              },
              {
                "name": "ErasValidatorPrefs",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 4,
                    "key2": 0,
                    "value": 205,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x0000",
                "docs": []
              },
              {
                "name": "ErasValidatorReward",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ErasRewardPoints",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 351
                  }
                },
                "fallback": "0x0000000000",
                "docs": []
              },
              {
                "name": "ErasTotalStake",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 6
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "plain": 355
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "plain": 106
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 356
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "plain": 101
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 4,
                    "key2": 0,
                    "value": 358,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 4,
                    "key2": 0,
                    "value": 6,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 359
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 354,
                    "value": 360
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "CurrentPlannedSession",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 361
                },
                "fallback": "0x06",
                "docs": []
              },
              {
                "name": "ChillThreshold",
                "modifier": "Optional",
                "type": {
                  "plain": 208
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 203,
            "calls": [
              {
                "name": "bond",
                "arguments": [
                  {
                    "name": "controller",
                    "type": 142
                  },
                  {
                    "name": "value",
                    "type": 68
                  },
                  {
                    "name": "payee",
                    "type": 204
                  }
                ],
                "docs": []
              },
              {
                "name": "bond_extra",
                "arguments": [
                  {
                    "name": "max_additional",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "unbond",
                "arguments": [
                  {
                    "name": "value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "withdraw_unbonded",
                "arguments": [
                  {
                    "name": "num_slashing_spans",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "validate",
                "arguments": [
                  {
                    "name": "prefs",
                    "type": 205
                  }
                ],
                "docs": []
              },
              {
                "name": "nominate",
                "arguments": [
                  {
                    "name": "targets",
                    "type": 207
                  }
                ],
                "docs": []
              },
              {
                "name": "chill",
                "arguments": [],
                "docs": []
              },
              {
                "name": "set_payee",
                "arguments": [
                  {
                    "name": "payee",
                    "type": 204
                  }
                ],
                "docs": []
              },
              {
                "name": "set_controller",
                "arguments": [
                  {
                    "name": "controller",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "set_validator_count",
                "arguments": [
                  {
                    "name": "new",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "increase_validator_count",
                "arguments": [
                  {
                    "name": "additional",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "scale_validator_count",
                "arguments": [
                  {
                    "name": "factor",
                    "type": 208
                  }
                ],
                "docs": []
              },
              {
                "name": "force_no_eras",
                "arguments": [],
                "docs": []
              },
              {
                "name": "force_new_era",
                "arguments": [],
                "docs": []
              },
              {
                "name": "set_invulnerables",
                "arguments": [
                  {
                    "name": "invulnerables",
                    "type": 39
                  }
                ],
                "docs": []
              },
              {
                "name": "force_unstake",
                "arguments": [
                  {
                    "name": "stash",
                    "type": 0
                  },
                  {
                    "name": "num_slashing_spans",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "force_new_era_always",
                "arguments": [],
                "docs": []
              },
              {
                "name": "cancel_deferred_slash",
                "arguments": [
                  {
                    "name": "era",
                    "type": 4
                  },
                  {
                    "name": "slash_indices",
                    "type": 94
                  }
                ],
                "docs": []
              },
              {
                "name": "payout_stakers",
                "arguments": [
                  {
                    "name": "validator_stash",
                    "type": 0
                  },
                  {
                    "name": "era",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "rebond",
                "arguments": [
                  {
                    "name": "value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "set_history_depth",
                "arguments": [
                  {
                    "name": "new_history_depth",
                    "type": 103
                  },
                  {
                    "name": "_era_items_deleted",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "reap_stash",
                "arguments": [
                  {
                    "name": "stash",
                    "type": 0
                  },
                  {
                    "name": "num_slashing_spans",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "kick",
                "arguments": [
                  {
                    "name": "who",
                    "type": 207
                  }
                ],
                "docs": []
              },
              {
                "name": "set_staking_limits",
                "arguments": [
                  {
                    "name": "min_nominator_bond",
                    "type": 6
                  },
                  {
                    "name": "min_validator_bond",
                    "type": 6
                  },
                  {
                    "name": "max_nominator_count",
                    "type": 95
                  },
                  {
                    "name": "max_validator_count",
                    "type": 95
                  },
                  {
                    "name": "threshold",
                    "type": 209
                  }
                ],
                "docs": []
              },
              {
                "name": "chill_other",
                "arguments": [
                  {
                    "name": "controller",
                    "type": 0
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 36
          },
          "constants": [
            {
              "name": "SessionsPerEra",
              "type": 4,
              "value": "0x06000000",
              "docs": []
            },
            {
              "name": "BondingDuration",
              "type": 4,
              "value": "0xa0020000",
              "docs": []
            },
            {
              "name": "SlashDeferDuration",
              "type": 4,
              "value": "0xa8000000",
              "docs": []
            },
            {
              "name": "MaxNominatorRewardedPerValidator",
              "type": 4,
              "value": "0x00010000",
              "docs": []
            },
            {
              "name": "MaxNominations",
              "type": 4,
              "value": "0x10000000",
              "docs": []
            }
          ],
          "error": {
            "type": 362
          },
          "index": 9
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "plain": 34
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "plain": 363
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "plain": 94
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 211
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 365,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 210,
            "calls": [
              {
                "name": "set_keys",
                "arguments": [
                  {
                    "name": "keys",
                    "type": 211
                  },
                  {
                    "name": "proof",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "purge_keys",
                "arguments": [],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 37
          },
          "constants": [],
          "error": {
            "type": 367
          },
          "index": 10
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "plain": 368
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 370
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 371
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "LowestUnbaked",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 372
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "VotingOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 375
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Locks",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "plain": 34
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "plain": 380
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 381
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 34
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Optional",
                "type": {
                  "plain": 382
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 213,
            "calls": [
              {
                "name": "propose",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  },
                  {
                    "name": "value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "second",
                "arguments": [
                  {
                    "name": "proposal",
                    "type": 103
                  },
                  {
                    "name": "seconds_upper_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "vote",
                "arguments": [
                  {
                    "name": "ref_index",
                    "type": 103
                  },
                  {
                    "name": "vote",
                    "type": 214
                  }
                ],
                "docs": []
              },
              {
                "name": "emergency_cancel",
                "arguments": [
                  {
                    "name": "ref_index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "external_propose",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "external_propose_majority",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "external_propose_default",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "fast_track",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  },
                  {
                    "name": "voting_period",
                    "type": 4
                  },
                  {
                    "name": "delay",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "veto_external",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_referendum",
                "arguments": [
                  {
                    "name": "ref_index",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_queued",
                "arguments": [
                  {
                    "name": "which",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "delegate",
                "arguments": [
                  {
                    "name": "to",
                    "type": 0
                  },
                  {
                    "name": "conviction",
                    "type": 216
                  },
                  {
                    "name": "balance",
                    "type": 6
                  }
                ],
                "docs": []
              },
              {
                "name": "undelegate",
                "arguments": [],
                "docs": []
              },
              {
                "name": "clear_public_proposals",
                "arguments": [],
                "docs": []
              },
              {
                "name": "note_preimage",
                "arguments": [
                  {
                    "name": "encoded_proposal",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "note_preimage_operational",
                "arguments": [
                  {
                    "name": "encoded_proposal",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "note_imminent_preimage",
                "arguments": [
                  {
                    "name": "encoded_proposal",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "note_imminent_preimage_operational",
                "arguments": [
                  {
                    "name": "encoded_proposal",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "reap_preimage",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  },
                  {
                    "name": "proposal_len_upper_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "unlock",
                "arguments": [
                  {
                    "name": "target",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_vote",
                "arguments": [
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_other_vote",
                "arguments": [
                  {
                    "name": "target",
                    "type": 0
                  },
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "enact_proposal",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  },
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "blacklist",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  },
                  {
                    "name": "maybe_ref_index",
                    "type": 95
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_proposal",
                "arguments": [
                  {
                    "name": "prop_index",
                    "type": 103
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 38
          },
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": 4,
              "value": "0x002f0d00",
              "docs": []
            },
            {
              "name": "LaunchPeriod",
              "type": 4,
              "value": "0x004e0c00",
              "docs": []
            },
            {
              "name": "VotingPeriod",
              "type": 4,
              "value": "0x004e0c00",
              "docs": []
            },
            {
              "name": "MinimumDeposit",
              "type": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": []
            },
            {
              "name": "FastTrackVotingPeriod",
              "type": 4,
              "value": "0x80510100",
              "docs": []
            },
            {
              "name": "CooloffPeriod",
              "type": 4,
              "value": "0x004e0c00",
              "docs": []
            },
            {
              "name": "PreimageByteDeposit",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": []
            },
            {
              "name": "MaxVotes",
              "type": 4,
              "value": "0x64000000",
              "docs": []
            }
          ],
          "error": {
            "type": 383
          },
          "index": 11
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Instance1Collective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 384
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 126
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 385
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 217,
            "calls": [
              {
                "name": "set_members",
                "arguments": [
                  {
                    "name": "new_members",
                    "type": 39
                  },
                  {
                    "name": "prime",
                    "type": 218
                  },
                  {
                    "name": "old_count",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "execute",
                "arguments": [
                  {
                    "name": "proposal",
                    "type": 126
                  },
                  {
                    "name": "length_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "propose",
                "arguments": [
                  {
                    "name": "threshold",
                    "type": 103
                  },
                  {
                    "name": "proposal",
                    "type": 126
                  },
                  {
                    "name": "length_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "vote",
                "arguments": [
                  {
                    "name": "proposal",
                    "type": 9
                  },
                  {
                    "name": "index",
                    "type": 103
                  },
                  {
                    "name": "approve",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "close",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  },
                  {
                    "name": "index",
                    "type": 103
                  },
                  {
                    "name": "proposal_weight_bound",
                    "type": 137
                  },
                  {
                    "name": "length_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "disapprove_proposal",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 41
          },
          "constants": [],
          "error": {
            "type": 386
          },
          "index": 12
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "Instance2Collective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "plain": 387
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 126
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 385
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 219,
            "calls": [
              {
                "name": "set_members",
                "arguments": [
                  {
                    "name": "new_members",
                    "type": 39
                  },
                  {
                    "name": "prime",
                    "type": 218
                  },
                  {
                    "name": "old_count",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "execute",
                "arguments": [
                  {
                    "name": "proposal",
                    "type": 126
                  },
                  {
                    "name": "length_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "propose",
                "arguments": [
                  {
                    "name": "threshold",
                    "type": 103
                  },
                  {
                    "name": "proposal",
                    "type": 126
                  },
                  {
                    "name": "length_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "vote",
                "arguments": [
                  {
                    "name": "proposal",
                    "type": 9
                  },
                  {
                    "name": "index",
                    "type": 103
                  },
                  {
                    "name": "approve",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "close",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  },
                  {
                    "name": "index",
                    "type": 103
                  },
                  {
                    "name": "proposal_weight_bound",
                    "type": 137
                  },
                  {
                    "name": "length_bound",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "disapprove_proposal",
                "arguments": [
                  {
                    "name": "proposal_hash",
                    "type": 9
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 45
          },
          "constants": [],
          "error": {
            "type": 388
          },
          "index": 13
        },
        {
          "name": "Elections",
          "storage": {
            "prefix": "Elections",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 389
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "type": {
                  "plain": 389
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 48
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Voting",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 391
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 220,
            "calls": [
              {
                "name": "vote",
                "arguments": [
                  {
                    "name": "votes",
                    "type": 39
                  },
                  {
                    "name": "value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_voter",
                "arguments": [],
                "docs": []
              },
              {
                "name": "submit_candidacy",
                "arguments": [
                  {
                    "name": "candidate_count",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "renounce_candidacy",
                "arguments": [
                  {
                    "name": "renouncing",
                    "type": 221
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_member",
                "arguments": [
                  {
                    "name": "who",
                    "type": 142
                  },
                  {
                    "name": "has_replacement",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "clean_defunct_voters",
                "arguments": [
                  {
                    "name": "_num_voters",
                    "type": 4
                  },
                  {
                    "name": "_num_defunct",
                    "type": 4
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 47
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 121,
              "value": "0x706872656c656374",
              "docs": []
            },
            {
              "name": "CandidacyBond",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": []
            },
            {
              "name": "VotingBondBase",
              "type": 6,
              "value": "0x00f0436de36a01000000000000000000",
              "docs": []
            },
            {
              "name": "VotingBondFactor",
              "type": 6,
              "value": "0x0000cc7b9fae00000000000000000000",
              "docs": []
            },
            {
              "name": "DesiredMembers",
              "type": 4,
              "value": "0x0d000000",
              "docs": []
            },
            {
              "name": "DesiredRunnersUp",
              "type": 4,
              "value": "0x07000000",
              "docs": []
            },
            {
              "name": "TermDuration",
              "type": 4,
              "value": "0x80130300",
              "docs": []
            }
          ],
          "error": {
            "type": 392
          },
          "index": 14
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "Instance1Membership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Prime",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 222,
            "calls": [
              {
                "name": "add_member",
                "arguments": [
                  {
                    "name": "who",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_member",
                "arguments": [
                  {
                    "name": "who",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "swap_member",
                "arguments": [
                  {
                    "name": "remove",
                    "type": 0
                  },
                  {
                    "name": "add",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "reset_members",
                "arguments": [
                  {
                    "name": "members",
                    "type": 39
                  }
                ],
                "docs": []
              },
              {
                "name": "change_key",
                "arguments": [
                  {
                    "name": "new",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "set_prime",
                "arguments": [
                  {
                    "name": "who",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "clear_prime",
                "arguments": [],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 50
          },
          "constants": [],
          "error": {
            "type": 393
          },
          "index": 15
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "items": [
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "plain": 394
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "plain": 395
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "plain": 79
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 8,
                    "value": 4
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 223,
            "calls": [
              {
                "name": "report_equivocation",
                "arguments": [
                  {
                    "name": "equivocation_proof",
                    "type": 224
                  },
                  {
                    "name": "key_owner_proof",
                    "type": 132
                  }
                ],
                "docs": []
              },
              {
                "name": "report_equivocation_unsigned",
                "arguments": [
                  {
                    "name": "equivocation_proof",
                    "type": 224
                  },
                  {
                    "name": "key_owner_proof",
                    "type": 132
                  }
                ],
                "docs": []
              },
              {
                "name": "note_stalled",
                "arguments": [
                  {
                    "name": "delay",
                    "type": 4
                  },
                  {
                    "name": "best_finalized_block_number",
                    "type": 4
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 53
          },
          "constants": [],
          "error": {
            "type": 396
          },
          "index": 16
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 397
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "plain": 398
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 235,
            "calls": [
              {
                "name": "propose_spend",
                "arguments": [
                  {
                    "name": "value",
                    "type": 68
                  },
                  {
                    "name": "beneficiary",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "reject_proposal",
                "arguments": [
                  {
                    "name": "proposal_id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "approve_proposal",
                "arguments": [
                  {
                    "name": "proposal_id",
                    "type": 103
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 58
          },
          "constants": [
            {
              "name": "ProposalBond",
              "type": 399,
              "value": "0x50c30000",
              "docs": []
            },
            {
              "name": "ProposalBondMinimum",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": []
            },
            {
              "name": "SpendPeriod",
              "type": 4,
              "value": "0x80700000",
              "docs": []
            },
            {
              "name": "Burn",
              "type": 399,
              "value": "0x20a10700",
              "docs": []
            },
            {
              "name": "PalletId",
              "type": 400,
              "value": "0x70792f7472737279",
              "docs": []
            }
          ],
          "error": {
            "type": 401
          },
          "index": 17
        },
        {
          "name": "Contracts",
          "storage": {
            "prefix": "Contracts",
            "items": [
              {
                "name": "PristineCode",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "CodeStorage",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 402
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "AccountCounter",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "ContractInfoOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 404
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DeletionQueue",
                "modifier": "Default",
                "type": {
                  "plain": 408
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 236,
            "calls": [
              {
                "name": "call",
                "arguments": [
                  {
                    "name": "dest",
                    "type": 142
                  },
                  {
                    "name": "value",
                    "type": 68
                  },
                  {
                    "name": "gas_limit",
                    "type": 137
                  },
                  {
                    "name": "data",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "instantiate_with_code",
                "arguments": [
                  {
                    "name": "endowment",
                    "type": 68
                  },
                  {
                    "name": "gas_limit",
                    "type": 137
                  },
                  {
                    "name": "code",
                    "type": 10
                  },
                  {
                    "name": "data",
                    "type": 10
                  },
                  {
                    "name": "salt",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "instantiate",
                "arguments": [
                  {
                    "name": "endowment",
                    "type": 68
                  },
                  {
                    "name": "gas_limit",
                    "type": 137
                  },
                  {
                    "name": "code_hash",
                    "type": 9
                  },
                  {
                    "name": "data",
                    "type": 10
                  },
                  {
                    "name": "salt",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "claim_surcharge",
                "arguments": [
                  {
                    "name": "dest",
                    "type": 0
                  },
                  {
                    "name": "aux_sender",
                    "type": 218
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 60
          },
          "constants": [
            {
              "name": "Schedule",
              "type": 410,
              "value": "0x0400000000020000000100008000000010000000001000000001000020000000200000000040000000000200020000008e0f0000b04602009a8c0300a9720000767600005e380000ea5e00000753000097000000579e030088130500b60000007a170000c11100005721000099370000483a0000d0110000d8d12c08bc4300005c430000bb2e0000a942000000260000b72300009c370000ad540000de540000ca5400000354000018550000e553000011550000c053000007540000da540000a0530000e85300008d5400004a690000bd680000a56a000096670000b053000013540000055400006a5500009255000060550000f455000033550000cae32900000000007a332a00000000004041290000000000a6fb5d000000000060c02a0000000000e6d6290000000000065329000000000062002a0000000000d425290000000000b0522a00000000005cb3540000000000b41c1600000000008057640000000000000100000000000008f6380000000000710200000000000078d68a210000000098d6de2a000000007c75640900000000466d6f000000000070baac0000000000ec73de07000000007406000000000000922c190000000000fc9f1d00000000008618ee0900000000450200000000000082dc6108000000003e573102000000002704000000000000cc94430b000000009406e1100000000096fa930800000000dc010000000000009c020000000000001843c12400000000f001000000000000b80200000000000094070000000000008a9b2a0000000000561200000000000046432b0000000000ab0c000000000000c08c260000000000b005000000000000acd2260000000000b005000000000000",
              "docs": []
            },
            {
              "name": "SignedClaimHandicap",
              "type": 4,
              "value": "0x02000000",
              "docs": []
            },
            {
              "name": "TombstoneDeposit",
              "type": 6,
              "value": "0x00f0e8857a9c02000000000000000000",
              "docs": []
            },
            {
              "name": "DepositPerContract",
              "type": 6,
              "value": "0x00f0e8857a9c02000000000000000000",
              "docs": []
            },
            {
              "name": "DepositPerStorageByte",
              "type": 6,
              "value": "0x0060defb740500000000000000000000",
              "docs": []
            },
            {
              "name": "DepositPerStorageItem",
              "type": 6,
              "value": "0x00f0ab75a40d00000000000000000000",
              "docs": []
            },
            {
              "name": "RentFraction",
              "type": 106,
              "value": "0x85040000",
              "docs": []
            },
            {
              "name": "SurchargeReward",
              "type": 6,
              "value": "0x005cb2ec220000000000000000000000",
              "docs": []
            },
            {
              "name": "DeletionQueueDepth",
              "type": 4,
              "value": "0x1a040000",
              "docs": []
            },
            {
              "name": "DeletionWeightLimit",
              "type": 8,
              "value": "0x00d0ed902e000000",
              "docs": []
            }
          ],
          "error": {
            "type": 414
          },
          "index": 18
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Default",
                "type": {
                  "plain": 0
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 237,
            "calls": [
              {
                "name": "sudo",
                "arguments": [
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "sudo_unchecked_weight",
                "arguments": [
                  {
                    "name": "call",
                    "type": 126
                  },
                  {
                    "name": "_weight",
                    "type": 8
                  }
                ],
                "docs": []
              },
              {
                "name": "set_key",
                "arguments": [
                  {
                    "name": "new",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "sudo_as",
                "arguments": [
                  {
                    "name": "who",
                    "type": 142
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 61
          },
          "constants": [],
          "error": {
            "type": 415
          },
          "index": 19
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "HeartbeatAfter",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "plain": 416
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 4,
                    "key2": 4,
                    "value": 10,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 4,
                    "key2": 0,
                    "value": 4,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 238,
            "calls": [
              {
                "name": "heartbeat",
                "arguments": [
                  {
                    "name": "heartbeat",
                    "type": 239
                  },
                  {
                    "name": "_signature",
                    "type": 244
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 62
          },
          "constants": [],
          "error": {
            "type": 417
          },
          "index": 20
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 21
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 9,
                    "value": 418
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 72,
                    "key2": 10,
                    "value": 100,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 72,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "type": 71
          },
          "constants": [],
          "error": null,
          "index": 22
        },
        {
          "name": "Historical",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": {
            "type": 104
          },
          "index": 23
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": {
                  "plain": 100
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 24
        },
        {
          "name": "Identity",
          "storage": {
            "prefix": "Identity",
            "items": [
              {
                "name": "IdentityOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 419
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SuperOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 282
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SubsOf",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 423
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Registrars",
                "modifier": "Default",
                "type": {
                  "plain": 425
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 246,
            "calls": [
              {
                "name": "add_registrar",
                "arguments": [
                  {
                    "name": "account",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "set_identity",
                "arguments": [
                  {
                    "name": "info",
                    "type": 247
                  }
                ],
                "docs": []
              },
              {
                "name": "set_subs",
                "arguments": [
                  {
                    "name": "subs",
                    "type": 281
                  }
                ],
                "docs": []
              },
              {
                "name": "clear_identity",
                "arguments": [],
                "docs": []
              },
              {
                "name": "request_judgement",
                "arguments": [
                  {
                    "name": "reg_index",
                    "type": 103
                  },
                  {
                    "name": "max_fee",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_request",
                "arguments": [
                  {
                    "name": "reg_index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "set_fee",
                "arguments": [
                  {
                    "name": "index",
                    "type": 103
                  },
                  {
                    "name": "fee",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "set_account_id",
                "arguments": [
                  {
                    "name": "index",
                    "type": 103
                  },
                  {
                    "name": "new",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "set_fields",
                "arguments": [
                  {
                    "name": "index",
                    "type": 103
                  },
                  {
                    "name": "fields",
                    "type": 283
                  }
                ],
                "docs": []
              },
              {
                "name": "provide_judgement",
                "arguments": [
                  {
                    "name": "reg_index",
                    "type": 103
                  },
                  {
                    "name": "target",
                    "type": 142
                  },
                  {
                    "name": "judgement",
                    "type": 285
                  }
                ],
                "docs": []
              },
              {
                "name": "kill_identity",
                "arguments": [
                  {
                    "name": "target",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "add_sub",
                "arguments": [
                  {
                    "name": "sub",
                    "type": 142
                  },
                  {
                    "name": "data",
                    "type": 250
                  }
                ],
                "docs": []
              },
              {
                "name": "rename_sub",
                "arguments": [
                  {
                    "name": "sub",
                    "type": 142
                  },
                  {
                    "name": "data",
                    "type": 250
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_sub",
                "arguments": [
                  {
                    "name": "sub",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "quit_sub",
                "arguments": [],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 73
          },
          "constants": [
            {
              "name": "BasicDeposit",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": []
            },
            {
              "name": "FieldDeposit",
              "type": 6,
              "value": "0x00a031a95fe300000000000000000000",
              "docs": []
            },
            {
              "name": "SubAccountDeposit",
              "type": 6,
              "value": "0x0080f420e6b500000000000000000000",
              "docs": []
            },
            {
              "name": "MaxSubAccounts",
              "type": 4,
              "value": "0x64000000",
              "docs": []
            },
            {
              "name": "MaxAdditionalFields",
              "type": 4,
              "value": "0x64000000",
              "docs": []
            },
            {
              "name": "MaxRegistrars",
              "type": 4,
              "value": "0x14000000",
              "docs": []
            }
          ],
          "error": {
            "type": 429
          },
          "index": 25
        },
        {
          "name": "Society",
          "storage": {
            "prefix": "Society",
            "items": [
              {
                "name": "Founder",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Rules",
                "modifier": "Optional",
                "type": {
                  "plain": 9
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "plain": 430
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SuspendedCandidates",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 433
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Pot",
                "modifier": "Default",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Head",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "plain": 39
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "SuspendedMembers",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 34
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Bids",
                "modifier": "Default",
                "type": {
                  "plain": 430
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Vouching",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 434
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Payouts",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 435
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Strikes",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Votes",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 0,
                    "key2": 0,
                    "value": 437,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Defender",
                "modifier": "Optional",
                "type": {
                  "plain": 0
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "DefenderVotes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 437
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "MaxMembers",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 286,
            "calls": [
              {
                "name": "bid",
                "arguments": [
                  {
                    "name": "value",
                    "type": 6
                  }
                ],
                "docs": []
              },
              {
                "name": "unbid",
                "arguments": [
                  {
                    "name": "pos",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "vouch",
                "arguments": [
                  {
                    "name": "who",
                    "type": 0
                  },
                  {
                    "name": "value",
                    "type": 6
                  },
                  {
                    "name": "tip",
                    "type": 6
                  }
                ],
                "docs": []
              },
              {
                "name": "unvouch",
                "arguments": [
                  {
                    "name": "pos",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "vote",
                "arguments": [
                  {
                    "name": "candidate",
                    "type": 142
                  },
                  {
                    "name": "approve",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "defender_vote",
                "arguments": [
                  {
                    "name": "approve",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "payout",
                "arguments": [],
                "docs": []
              },
              {
                "name": "found",
                "arguments": [
                  {
                    "name": "founder",
                    "type": 0
                  },
                  {
                    "name": "max_members",
                    "type": 4
                  },
                  {
                    "name": "rules",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "unfound",
                "arguments": [],
                "docs": []
              },
              {
                "name": "judge_suspended_member",
                "arguments": [
                  {
                    "name": "who",
                    "type": 0
                  },
                  {
                    "name": "forgive",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "judge_suspended_candidate",
                "arguments": [
                  {
                    "name": "who",
                    "type": 0
                  },
                  {
                    "name": "judgement",
                    "type": 287
                  }
                ],
                "docs": []
              },
              {
                "name": "set_max_members",
                "arguments": [
                  {
                    "name": "max",
                    "type": 4
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 74
          },
          "constants": [
            {
              "name": "CandidateDeposit",
              "type": 6,
              "value": "0x0080c6a47e8d03000000000000000000",
              "docs": []
            },
            {
              "name": "WrongSideDeduction",
              "type": 6,
              "value": "0x0080f420e6b500000000000000000000",
              "docs": []
            },
            {
              "name": "MaxStrikes",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "PeriodSpend",
              "type": 6,
              "value": "0x0000c52ebca2b1000000000000000000",
              "docs": []
            },
            {
              "name": "RotationPeriod",
              "type": 4,
              "value": "0x00770100",
              "docs": []
            },
            {
              "name": "ChallengePeriod",
              "type": 4,
              "value": "0x80130300",
              "docs": []
            },
            {
              "name": "PalletId",
              "type": 400,
              "value": "0x70792f736f636965",
              "docs": []
            },
            {
              "name": "MaxCandidateIntake",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            }
          ],
          "error": {
            "type": 438
          },
          "index": 26
        },
        {
          "name": "Recovery",
          "storage": {
            "prefix": "Recovery",
            "items": [
              {
                "name": "Recoverable",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 439
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ActiveRecoveries",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 0,
                    "key2": 0,
                    "value": 440,
                    "key2Hasher": "Twox64Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 288,
            "calls": [
              {
                "name": "as_recovered",
                "arguments": [
                  {
                    "name": "account",
                    "type": 0
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "set_recovered",
                "arguments": [
                  {
                    "name": "lost",
                    "type": 0
                  },
                  {
                    "name": "rescuer",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "create_recovery",
                "arguments": [
                  {
                    "name": "friends",
                    "type": 39
                  },
                  {
                    "name": "threshold",
                    "type": 83
                  },
                  {
                    "name": "delay_period",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "initiate_recovery",
                "arguments": [
                  {
                    "name": "account",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "vouch_recovery",
                "arguments": [
                  {
                    "name": "lost",
                    "type": 0
                  },
                  {
                    "name": "rescuer",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "claim_recovery",
                "arguments": [
                  {
                    "name": "account",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "close_recovery",
                "arguments": [
                  {
                    "name": "rescuer",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_recovery",
                "arguments": [],
                "docs": []
              },
              {
                "name": "cancel_recovered",
                "arguments": [
                  {
                    "name": "account",
                    "type": 0
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 76
          },
          "constants": [
            {
              "name": "ConfigDepositBase",
              "type": 6,
              "value": "0x00406352bfc601000000000000000000",
              "docs": []
            },
            {
              "name": "FriendDepositFactor",
              "type": 6,
              "value": "0x00203d88792d00000000000000000000",
              "docs": []
            },
            {
              "name": "MaxFriends",
              "type": 83,
              "value": "0x0900",
              "docs": []
            },
            {
              "name": "RecoveryDeposit",
              "type": 6,
              "value": "0x00406352bfc601000000000000000000",
              "docs": []
            }
          ],
          "error": {
            "type": 441
          },
          "index": 27
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "items": [
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 0,
                    "value": 290
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 289,
            "calls": [
              {
                "name": "vest",
                "arguments": [],
                "docs": []
              },
              {
                "name": "vest_other",
                "arguments": [
                  {
                    "name": "target",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "vested_transfer",
                "arguments": [
                  {
                    "name": "target",
                    "type": 142
                  },
                  {
                    "name": "schedule",
                    "type": 290
                  }
                ],
                "docs": []
              },
              {
                "name": "force_vested_transfer",
                "arguments": [
                  {
                    "name": "source",
                    "type": 142
                  },
                  {
                    "name": "target",
                    "type": 142
                  },
                  {
                    "name": "schedule",
                    "type": 290
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 77
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "type": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": []
            }
          ],
          "error": {
            "type": 442
          },
          "index": 28
        },
        {
          "name": "Scheduler",
          "storage": {
            "prefix": "Scheduler",
            "items": [
              {
                "name": "Agenda",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 443
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Lookup",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 10,
                    "value": 79
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "plain": 451
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 291,
            "calls": [
              {
                "name": "schedule",
                "arguments": [
                  {
                    "name": "when",
                    "type": 4
                  },
                  {
                    "name": "maybe_periodic",
                    "type": 292
                  },
                  {
                    "name": "priority",
                    "type": 2
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel",
                "arguments": [
                  {
                    "name": "when",
                    "type": 4
                  },
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "schedule_named",
                "arguments": [
                  {
                    "name": "id",
                    "type": 10
                  },
                  {
                    "name": "when",
                    "type": 4
                  },
                  {
                    "name": "maybe_periodic",
                    "type": 292
                  },
                  {
                    "name": "priority",
                    "type": 2
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_named",
                "arguments": [
                  {
                    "name": "id",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "schedule_after",
                "arguments": [
                  {
                    "name": "after",
                    "type": 4
                  },
                  {
                    "name": "maybe_periodic",
                    "type": 292
                  },
                  {
                    "name": "priority",
                    "type": 2
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "schedule_named_after",
                "arguments": [
                  {
                    "name": "id",
                    "type": 10
                  },
                  {
                    "name": "after",
                    "type": 4
                  },
                  {
                    "name": "maybe_periodic",
                    "type": 292
                  },
                  {
                    "name": "priority",
                    "type": 2
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 78
          },
          "constants": [],
          "error": {
            "type": 452
          },
          "index": 29
        },
        {
          "name": "Proxy",
          "storage": {
            "prefix": "Proxy",
            "items": [
              {
                "name": "Proxies",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 453
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Announcements",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 457
                  }
                },
                "fallback": "0x0000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 293,
            "calls": [
              {
                "name": "proxy",
                "arguments": [
                  {
                    "name": "real",
                    "type": 0
                  },
                  {
                    "name": "force_proxy_type",
                    "type": 294
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "add_proxy",
                "arguments": [
                  {
                    "name": "delegate",
                    "type": 0
                  },
                  {
                    "name": "proxy_type",
                    "type": 82
                  },
                  {
                    "name": "delay",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_proxy",
                "arguments": [
                  {
                    "name": "delegate",
                    "type": 0
                  },
                  {
                    "name": "proxy_type",
                    "type": 82
                  },
                  {
                    "name": "delay",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_proxies",
                "arguments": [],
                "docs": []
              },
              {
                "name": "anonymous",
                "arguments": [
                  {
                    "name": "proxy_type",
                    "type": 82
                  },
                  {
                    "name": "delay",
                    "type": 4
                  },
                  {
                    "name": "index",
                    "type": 83
                  }
                ],
                "docs": []
              },
              {
                "name": "kill_anonymous",
                "arguments": [
                  {
                    "name": "spawner",
                    "type": 0
                  },
                  {
                    "name": "proxy_type",
                    "type": 82
                  },
                  {
                    "name": "index",
                    "type": 83
                  },
                  {
                    "name": "height",
                    "type": 103
                  },
                  {
                    "name": "ext_index",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "announce",
                "arguments": [
                  {
                    "name": "real",
                    "type": 0
                  },
                  {
                    "name": "call_hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "remove_announcement",
                "arguments": [
                  {
                    "name": "real",
                    "type": 0
                  },
                  {
                    "name": "call_hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "reject_announcement",
                "arguments": [
                  {
                    "name": "delegate",
                    "type": 0
                  },
                  {
                    "name": "call_hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "proxy_announced",
                "arguments": [
                  {
                    "name": "delegate",
                    "type": 0
                  },
                  {
                    "name": "real",
                    "type": 0
                  },
                  {
                    "name": "force_proxy_type",
                    "type": 294
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 81
          },
          "constants": [
            {
              "name": "ProxyDepositBase",
              "type": 6,
              "value": "0x00f09e544c3900000000000000000000",
              "docs": []
            },
            {
              "name": "ProxyDepositFactor",
              "type": 6,
              "value": "0x0060aa7714b400000000000000000000",
              "docs": []
            },
            {
              "name": "MaxProxies",
              "type": 4,
              "value": "0x20000000",
              "docs": []
            },
            {
              "name": "MaxPending",
              "type": 4,
              "value": "0x20000000",
              "docs": []
            },
            {
              "name": "AnnouncementDepositBase",
              "type": 6,
              "value": "0x00f09e544c3900000000000000000000",
              "docs": []
            },
            {
              "name": "AnnouncementDepositFactor",
              "type": 6,
              "value": "0x00c054ef286801000000000000000000",
              "docs": []
            }
          ],
          "error": {
            "type": 461
          },
          "index": 30
        },
        {
          "name": "Multisig",
          "storage": {
            "prefix": "Multisig",
            "items": [
              {
                "name": "Multisigs",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": 0,
                    "key2": 1,
                    "value": 462,
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Calls",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 1,
                    "value": 463
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 295,
            "calls": [
              {
                "name": "as_multi_threshold_1",
                "arguments": [
                  {
                    "name": "other_signatories",
                    "type": 39
                  },
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "as_multi",
                "arguments": [
                  {
                    "name": "threshold",
                    "type": 83
                  },
                  {
                    "name": "other_signatories",
                    "type": 39
                  },
                  {
                    "name": "maybe_timepoint",
                    "type": 296
                  },
                  {
                    "name": "call",
                    "type": 10
                  },
                  {
                    "name": "store_call",
                    "type": 34
                  },
                  {
                    "name": "max_weight",
                    "type": 8
                  }
                ],
                "docs": []
              },
              {
                "name": "approve_as_multi",
                "arguments": [
                  {
                    "name": "threshold",
                    "type": 83
                  },
                  {
                    "name": "other_signatories",
                    "type": 39
                  },
                  {
                    "name": "maybe_timepoint",
                    "type": 296
                  },
                  {
                    "name": "call_hash",
                    "type": 1
                  },
                  {
                    "name": "max_weight",
                    "type": 8
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_as_multi",
                "arguments": [
                  {
                    "name": "threshold",
                    "type": 83
                  },
                  {
                    "name": "other_signatories",
                    "type": 39
                  },
                  {
                    "name": "timepoint",
                    "type": 85
                  },
                  {
                    "name": "call_hash",
                    "type": 1
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 84
          },
          "constants": [
            {
              "name": "DepositBase",
              "type": 6,
              "value": "0x00f01c0adbed01000000000000000000",
              "docs": []
            },
            {
              "name": "DepositFactor",
              "type": 6,
              "value": "0x0000cc7b9fae00000000000000000000",
              "docs": []
            },
            {
              "name": "MaxSignatories",
              "type": 83,
              "value": "0x6400",
              "docs": []
            }
          ],
          "error": {
            "type": 464
          },
          "index": 31
        },
        {
          "name": "Bounties",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "BountyCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Bounties",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 465
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "BountyDescriptions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "BountyApprovals",
                "modifier": "Default",
                "type": {
                  "plain": 94
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 297,
            "calls": [
              {
                "name": "propose_bounty",
                "arguments": [
                  {
                    "name": "value",
                    "type": 68
                  },
                  {
                    "name": "description",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "approve_bounty",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "propose_curator",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  },
                  {
                    "name": "curator",
                    "type": 142
                  },
                  {
                    "name": "fee",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "unassign_curator",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "accept_curator",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "award_bounty",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  },
                  {
                    "name": "beneficiary",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "claim_bounty",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "close_bounty",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "extend_bounty_expiry",
                "arguments": [
                  {
                    "name": "bounty_id",
                    "type": 103
                  },
                  {
                    "name": "_remark",
                    "type": 10
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 86
          },
          "constants": [
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": []
            },
            {
              "name": "BountyDepositBase",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": []
            },
            {
              "name": "BountyDepositPayoutDelay",
              "type": 4,
              "value": "0x80700000",
              "docs": []
            },
            {
              "name": "BountyUpdatePeriod",
              "type": 4,
              "value": "0x00270600",
              "docs": []
            },
            {
              "name": "BountyCuratorDeposit",
              "type": 399,
              "value": "0x20a10700",
              "docs": []
            },
            {
              "name": "BountyValueMinimum",
              "type": 6,
              "value": "0x00406352bfc601000000000000000000",
              "docs": []
            },
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": []
            }
          ],
          "error": {
            "type": 467
          },
          "index": 32
        },
        {
          "name": "Tips",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "Tips",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 9,
                    "value": 468
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Reasons",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 9,
                    "value": 10
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 298,
            "calls": [
              {
                "name": "report_awesome",
                "arguments": [
                  {
                    "name": "reason",
                    "type": 10
                  },
                  {
                    "name": "who",
                    "type": 0
                  }
                ],
                "docs": []
              },
              {
                "name": "retract_tip",
                "arguments": [
                  {
                    "name": "hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "tip_new",
                "arguments": [
                  {
                    "name": "reason",
                    "type": 10
                  },
                  {
                    "name": "who",
                    "type": 0
                  },
                  {
                    "name": "tip_value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "tip",
                "arguments": [
                  {
                    "name": "hash",
                    "type": 9
                  },
                  {
                    "name": "tip_value",
                    "type": 68
                  }
                ],
                "docs": []
              },
              {
                "name": "close_tip",
                "arguments": [
                  {
                    "name": "hash",
                    "type": 9
                  }
                ],
                "docs": []
              },
              {
                "name": "slash_tip",
                "arguments": [
                  {
                    "name": "hash",
                    "type": 9
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 87
          },
          "constants": [
            {
              "name": "TipCountdown",
              "type": 4,
              "value": "0x80700000",
              "docs": []
            },
            {
              "name": "TipFindersFee",
              "type": 208,
              "value": "0x14",
              "docs": []
            },
            {
              "name": "TipReportDepositBase",
              "type": 6,
              "value": "0x00407a10f35a00000000000000000000",
              "docs": []
            },
            {
              "name": "DataDepositPerByte",
              "type": 6,
              "value": "0x0010a5d4e80000000000000000000000",
              "docs": []
            },
            {
              "name": "MaximumReasonLength",
              "type": 4,
              "value": "0x00400000",
              "docs": []
            }
          ],
          "error": {
            "type": 469
          },
          "index": 33
        },
        {
          "name": "Assets",
          "storage": {
            "prefix": "Assets",
            "items": [
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 470
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Account",
                "modifier": "Default",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": 4,
                    "key2": 0,
                    "value": 471,
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00000000000000000000",
                "docs": []
              },
              {
                "name": "Approvals",
                "modifier": "Optional",
                "type": {
                  "nMap": {
                    "key": 472,
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "value": 473
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Metadata",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 474
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 299,
            "calls": [
              {
                "name": "create",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "admin",
                    "type": 142
                  },
                  {
                    "name": "min_balance",
                    "type": 8
                  }
                ],
                "docs": []
              },
              {
                "name": "force_create",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  },
                  {
                    "name": "is_sufficient",
                    "type": 34
                  },
                  {
                    "name": "min_balance",
                    "type": 137
                  }
                ],
                "docs": []
              },
              {
                "name": "destroy",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "witness",
                    "type": 300
                  }
                ],
                "docs": []
              },
              {
                "name": "mint",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "beneficiary",
                    "type": 142
                  },
                  {
                    "name": "amount",
                    "type": 137
                  }
                ],
                "docs": []
              },
              {
                "name": "burn",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "who",
                    "type": 142
                  },
                  {
                    "name": "amount",
                    "type": 137
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "target",
                    "type": 142
                  },
                  {
                    "name": "amount",
                    "type": 137
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer_keep_alive",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "target",
                    "type": 142
                  },
                  {
                    "name": "amount",
                    "type": 137
                  }
                ],
                "docs": []
              },
              {
                "name": "force_transfer",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "source",
                    "type": 142
                  },
                  {
                    "name": "dest",
                    "type": 142
                  },
                  {
                    "name": "amount",
                    "type": 137
                  }
                ],
                "docs": []
              },
              {
                "name": "freeze",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "who",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "thaw",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "who",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "freeze_asset",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "thaw_asset",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer_ownership",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "set_team",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "issuer",
                    "type": 142
                  },
                  {
                    "name": "admin",
                    "type": 142
                  },
                  {
                    "name": "freezer",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "set_metadata",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "name",
                    "type": 10
                  },
                  {
                    "name": "symbol",
                    "type": 10
                  },
                  {
                    "name": "decimals",
                    "type": 2
                  }
                ],
                "docs": []
              },
              {
                "name": "clear_metadata",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "force_set_metadata",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "name",
                    "type": 10
                  },
                  {
                    "name": "symbol",
                    "type": 10
                  },
                  {
                    "name": "decimals",
                    "type": 2
                  },
                  {
                    "name": "is_frozen",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "force_clear_metadata",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "force_asset_status",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  },
                  {
                    "name": "issuer",
                    "type": 142
                  },
                  {
                    "name": "admin",
                    "type": 142
                  },
                  {
                    "name": "freezer",
                    "type": 142
                  },
                  {
                    "name": "min_balance",
                    "type": 137
                  },
                  {
                    "name": "is_sufficient",
                    "type": 34
                  },
                  {
                    "name": "is_frozen",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "approve_transfer",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "delegate",
                    "type": 142
                  },
                  {
                    "name": "amount",
                    "type": 137
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_approval",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "delegate",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "force_cancel_approval",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  },
                  {
                    "name": "delegate",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer_approved",
                "arguments": [
                  {
                    "name": "id",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  },
                  {
                    "name": "destination",
                    "type": 142
                  },
                  {
                    "name": "amount",
                    "type": 137
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 88
          },
          "constants": [],
          "error": {
            "type": 475
          },
          "index": 34
        },
        {
          "name": "Mmr",
          "storage": {
            "prefix": "MerkleMountainRange",
            "items": [
              {
                "name": "RootHash",
                "modifier": "Default",
                "type": {
                  "plain": 9
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "NumberOfLeaves",
                "modifier": "Default",
                "type": {
                  "plain": 8
                },
                "fallback": "0x0000000000000000",
                "docs": []
              },
              {
                "name": "Nodes",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Identity",
                    "key": 8,
                    "value": 9
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": {
            "type": 104
          },
          "index": 35
        },
        {
          "name": "Lottery",
          "storage": {
            "prefix": "Lottery",
            "items": [
              {
                "name": "LotteryIndex",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Lottery",
                "modifier": "Optional",
                "type": {
                  "plain": 476
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Participants",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 0,
                    "value": 477
                  }
                },
                "fallback": "0x0000000000",
                "docs": []
              },
              {
                "name": "TicketsCount",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "Tickets",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Twox64Concat",
                    "key": 4,
                    "value": 0
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "CallIndices",
                "modifier": "Default",
                "type": {
                  "plain": 478
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 301,
            "calls": [
              {
                "name": "buy_ticket",
                "arguments": [
                  {
                    "name": "call",
                    "type": 126
                  }
                ],
                "docs": []
              },
              {
                "name": "set_calls",
                "arguments": [
                  {
                    "name": "calls",
                    "type": 125
                  }
                ],
                "docs": []
              },
              {
                "name": "start_lottery",
                "arguments": [
                  {
                    "name": "price",
                    "type": 6
                  },
                  {
                    "name": "length",
                    "type": 4
                  },
                  {
                    "name": "delay",
                    "type": 4
                  },
                  {
                    "name": "repeat",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "stop_repeat",
                "arguments": [],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 89
          },
          "constants": [
            {
              "name": "PalletId",
              "type": 400,
              "value": "0x70792f6c6f74746f",
              "docs": []
            },
            {
              "name": "MaxCalls",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            }
          ],
          "error": {
            "type": 479
          },
          "index": 36
        },
        {
          "name": "Gilt",
          "storage": {
            "prefix": "Gilt",
            "items": [
              {
                "name": "QueueTotals",
                "modifier": "Default",
                "type": {
                  "plain": 435
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Queues",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 480
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ActiveTotal",
                "modifier": "Default",
                "type": {
                  "plain": 482
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000000000",
                "docs": []
              },
              {
                "name": "Active",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 483
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 302,
            "calls": [
              {
                "name": "place_bid",
                "arguments": [
                  {
                    "name": "amount",
                    "type": 68
                  },
                  {
                    "name": "duration",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "retract_bid",
                "arguments": [
                  {
                    "name": "amount",
                    "type": 68
                  },
                  {
                    "name": "duration",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "set_target",
                "arguments": [
                  {
                    "name": "target",
                    "type": 303
                  }
                ],
                "docs": []
              },
              {
                "name": "thaw",
                "arguments": [
                  {
                    "name": "index",
                    "type": 103
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 91
          },
          "constants": [
            {
              "name": "QueueCount",
              "type": 4,
              "value": "0x2c010000",
              "docs": []
            },
            {
              "name": "MaxQueueLen",
              "type": 4,
              "value": "0xe8030000",
              "docs": []
            },
            {
              "name": "FifoQueueLen",
              "type": 4,
              "value": "0xf4010000",
              "docs": []
            },
            {
              "name": "Period",
              "type": 4,
              "value": "0x002f0d00",
              "docs": []
            },
            {
              "name": "MinFreeze",
              "type": 6,
              "value": "0x0000c16ff28623000000000000000000",
              "docs": []
            },
            {
              "name": "IntakePeriod",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            },
            {
              "name": "MaxIntakeBids",
              "type": 4,
              "value": "0x0a000000",
              "docs": []
            }
          ],
          "error": {
            "type": 484
          },
          "index": 37
        },
        {
          "name": "Uniques",
          "storage": {
            "prefix": "Uniques",
            "items": [
              {
                "name": "Class",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 485
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Account",
                "modifier": "Optional",
                "type": {
                  "nMap": {
                    "key": 486,
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "value": 44
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Asset",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": 4,
                    "key2": 4,
                    "value": 487,
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ClassMetadataOf",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 488
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "InstanceMetadataOf",
                "modifier": "Optional",
                "type": {
                  "doubleMap": {
                    "hasher": "Blake2_128Concat",
                    "key1": 4,
                    "key2": 4,
                    "value": 489,
                    "key2Hasher": "Blake2_128Concat"
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "Attribute",
                "modifier": "Optional",
                "type": {
                  "nMap": {
                    "key": 490,
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "value": 491
                  }
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 305,
            "calls": [
              {
                "name": "create",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "admin",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "force_create",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  },
                  {
                    "name": "free_holding",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "destroy",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "witness",
                    "type": 306
                  }
                ],
                "docs": []
              },
              {
                "name": "mint",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "burn",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  },
                  {
                    "name": "check_owner",
                    "type": 307
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  },
                  {
                    "name": "dest",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "redeposit",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instances",
                    "type": 94
                  }
                ],
                "docs": []
              },
              {
                "name": "freeze",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "thaw",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "freeze_class",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "thaw_class",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "transfer_ownership",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "set_team",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "issuer",
                    "type": 142
                  },
                  {
                    "name": "admin",
                    "type": 142
                  },
                  {
                    "name": "freezer",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "approve_transfer",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  },
                  {
                    "name": "delegate",
                    "type": 142
                  }
                ],
                "docs": []
              },
              {
                "name": "cancel_approval",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  },
                  {
                    "name": "maybe_check_delegate",
                    "type": 307
                  }
                ],
                "docs": []
              },
              {
                "name": "force_asset_status",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "owner",
                    "type": 142
                  },
                  {
                    "name": "issuer",
                    "type": 142
                  },
                  {
                    "name": "admin",
                    "type": 142
                  },
                  {
                    "name": "freezer",
                    "type": 142
                  },
                  {
                    "name": "free_holding",
                    "type": 34
                  },
                  {
                    "name": "is_frozen",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "set_attribute",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "maybe_instance",
                    "type": 95
                  },
                  {
                    "name": "key",
                    "type": 96
                  },
                  {
                    "name": "value",
                    "type": 97
                  }
                ],
                "docs": []
              },
              {
                "name": "clear_attribute",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "maybe_instance",
                    "type": 95
                  },
                  {
                    "name": "key",
                    "type": 96
                  }
                ],
                "docs": []
              },
              {
                "name": "set_metadata",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  },
                  {
                    "name": "data",
                    "type": 93
                  },
                  {
                    "name": "is_frozen",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "clear_metadata",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "instance",
                    "type": 103
                  }
                ],
                "docs": []
              },
              {
                "name": "set_class_metadata",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  },
                  {
                    "name": "data",
                    "type": 93
                  },
                  {
                    "name": "is_frozen",
                    "type": 34
                  }
                ],
                "docs": []
              },
              {
                "name": "clear_class_metadata",
                "arguments": [
                  {
                    "name": "class",
                    "type": 103
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 92
          },
          "constants": [],
          "error": {
            "type": 492
          },
          "index": 38
        },
        {
          "name": "TransactionStorage",
          "storage": {
            "prefix": "TransactionStorage",
            "items": [
              {
                "name": "Transactions",
                "modifier": "Optional",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 493
                  }
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ChunkCount",
                "modifier": "Default",
                "type": {
                  "map": {
                    "hasher": "Blake2_128Concat",
                    "key": 4,
                    "value": 4
                  }
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "ByteFee",
                "modifier": "Optional",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "EntryFee",
                "modifier": "Optional",
                "type": {
                  "plain": 6
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "MaxTransactionSize",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "MaxBlockTransactions",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "StoragePeriod",
                "modifier": "Default",
                "type": {
                  "plain": 4
                },
                "fallback": "0x00000000",
                "docs": []
              },
              {
                "name": "BlockTransactions",
                "modifier": "Default",
                "type": {
                  "plain": 493
                },
                "fallback": "0x00",
                "docs": []
              },
              {
                "name": "ProofChecked",
                "modifier": "Default",
                "type": {
                  "plain": 34
                },
                "fallback": "0x00",
                "docs": []
              }
            ]
          },
          "calls": {
            "type": 308,
            "calls": [
              {
                "name": "store",
                "arguments": [
                  {
                    "name": "data",
                    "type": 10
                  }
                ],
                "docs": []
              },
              {
                "name": "renew",
                "arguments": [
                  {
                    "name": "block",
                    "type": 4
                  },
                  {
                    "name": "index",
                    "type": 4
                  }
                ],
                "docs": []
              },
              {
                "name": "check_proof",
                "arguments": [
                  {
                    "name": "proof",
                    "type": 309
                  }
                ],
                "docs": []
              }
            ]
          },
          "event": {
            "type": 98
          },
          "constants": [],
          "error": {
            "type": 495
          },
          "index": 39
        }
      ],
      "extrinsic": {
        "type": 496,
        "version": 4,
        "signedExtensions": [
          {
            "identifier": "CheckSpecVersion",
            "type": 497
          },
          {
            "identifier": "CheckTxVersion",
            "type": 498
          },
          {
            "identifier": "CheckGenesis",
            "type": 499
          },
          {
            "identifier": "CheckMortality",
            "type": 500
          },
          {
            "identifier": "CheckNonce",
            "type": 502
          },
          {
            "identifier": "CheckWeight",
            "type": 503
          },
          {
            "identifier": "ChargeTransactionPayment",
            "type": 504
          }
        ]
      }
    }
  }
}
