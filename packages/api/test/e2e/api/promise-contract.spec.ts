// Copyright 2017-2019 @polkadot/api authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

import fs from 'fs';
import path from 'path';

import { Abi } from '@polkadot/api-contract';
import testingPairs from '@polkadot/keyring/testingPairs';
import WsProvider from '@polkadot/rpc-provider/ws';
import { Address, Hash, RuntimeVersion } from '@polkadot/types';
import { KeyringPair } from '@polkadot/keyring/types';

import { ApiPromise, SubmittableResult } from '../../../src';
import { describeE2E } from '../../util';

// Backwards compatibility:
// A breaking change was introduced by substrate runtime spec version 97. https://github.com/paritytech/substrate/pull/2911/files
// The change had to be implemented in ink! which changed the structure of the Wasm files.
// That's why we need two different versions of the generated contract files.
// If the substrate version is older than this https://github.com/paritytech/substrate/pull/2911 it will only work
// with contracts generated by an ink! version prior to https://github.com/paritytech/ink/pull/129 and vice versa.
import incrementerAbi_0_96 from '../../../../api-contract/test/contracts_0_96/Incrementer.json';
import incrementerAbi_97_ from '../../../../api-contract/test/contracts_97_/Incrementer.json';
const incrementerCode_0_96 = fs.readFileSync(path.join(__dirname, '../../../../api-contract/test/contracts_0_96/incrementer-pruned.wasm')).toString('hex');
const incrementerCode_97_ = fs.readFileSync(path.join(__dirname, '../../../../api-contract/test/contracts_97_/incrementer-pruned.wasm')).toString('hex');

describeE2E({
  except: [
    'docker-polkadot-master',
    'docker-polkadot-alexander',
    'remote-polkadot-alexander',
    'remote-substrate-1.0',
    'docker-substrate-1.0',
    'docker-substrate-master'
  ]
})('Promise e2e contracts', (wsUrl: string): void => {
  let address: Address;
  let codeHash: Hash;
  const keyring = testingPairs({ type: 'sr25519' });
  let api: ApiPromise;
  let txBase: any;
  let section: string;
  let runtimeVersion: RuntimeVersion;

  beforeEach(async (done): Promise<void> => {
    api = await ApiPromise.create(new WsProvider(wsUrl));

    // Backwards compatibility:
    // srml-contract has been renamed to srml-contracts with runtime spec_version 96 https://github.com/paritytech/substrate/pull/2905
    txBase = api.tx.contracts || api.tx.contract;
    section = api.tx.contracts ? 'contracts' : 'contract';
    runtimeVersion = api.runtimeVersion;

    done();
  });

  describe('incrementer', (): void => {
    const MAX_GAS = 500000;
    let abi: Abi;

    beforeEach((): void => {
      abi = runtimeVersion.specVersion.toNumber() < 97
        ? new Abi(incrementerAbi_0_96)
        : new Abi(incrementerAbi_97_);
    });

    it('allows putCode', (done): Promise<() => void> => {
      const incrementerCode = runtimeVersion.specVersion.toNumber() < 97
        ? incrementerCode_0_96
        : incrementerCode_97_;
      return (
        txBase
          .putCode(MAX_GAS, `0x${incrementerCode}`)
          .signAndSend(keyring.eve, (result: SubmittableResult): void => {
            if (result.status.isFinalized) {
              const record = result.findRecord(section, 'CodeStored');
              if (record) {
                codeHash = record.event.data[0] as Hash;
                done();
              }
            }
          })
      );
    });

    it('allows contract create', (done): Promise<() => void> => {
      expect(codeHash).toBeDefined();

      // An instance of a contract can only be deployed once by one specific account.
      // That's why we need a random starting point for our incrementer contract to be
      // able to run this test multiple times without the need of pruning the database
      const randomStart = Math.floor(Date.now() / 1000);

      return (
        txBase
          .create(12345, MAX_GAS, codeHash, abi.deploy(randomStart))
          .signAndSend(keyring.dave, (result: SubmittableResult) => {
            // console.error('create', JSON.stringify(result));

            if (result.status.isFinalized) {
              const record = result.findRecord(section, 'Instantiated');

              if (record) {
                address = record.event.data[1] as Address;

                done();
              }
            }
          })
      );
    });

    it('allows contract call', (done): Promise<() => void> => {
      expect(address).toBeDefined();

      return (
        txBase
          .call(address, 12345, MAX_GAS, abi.messages.inc(3))
          .signAndSend(keyring.bob, (result: SubmittableResult) => {
            console.error('call', JSON.stringify(result));

            if (result.status.isFinalized && result.findRecord('system', 'ExtrinsicSuccess')) {
              done();
            }
          })
      );
    });
  });
});
