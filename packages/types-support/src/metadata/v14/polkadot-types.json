[
  {
    "id": 0,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "AccountId32"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 1,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 32,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 2,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U8"
      },
      "docs": []
    }
  },
  {
    "id": 3,
    "type": {
      "path": [
        "frame_system",
        "AccountInfo"
      ],
      "params": [
        {
          "name": "Index",
          "type": 4
        },
        {
          "name": "AccountData",
          "type": 5
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "nonce",
              "type": 4,
              "typeName": "Index",
              "docs": []
            },
            {
              "name": "consumers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "providers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "sufficients",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "data",
              "type": 5,
              "typeName": "AccountData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 4,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U32"
      },
      "docs": []
    }
  },
  {
    "id": 5,
    "type": {
      "path": [
        "pallet_balances",
        "AccountData"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "free",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "misc_frozen",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee_frozen",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 6,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U128"
      },
      "docs": []
    }
  },
  {
    "id": 7,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 8
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 8,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 8,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 8,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 8,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U64"
      },
      "docs": []
    }
  },
  {
    "id": 9,
    "type": {
      "path": [
        "primitive_types",
        "H256"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 10,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 11,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "Digest"
      ],
      "params": [
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "logs",
              "type": 12,
              "typeName": "Vec<DigestItem<Hash>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 12,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 13
        }
      },
      "docs": []
    }
  },
  {
    "id": 13,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "DigestItem"
      ],
      "params": [
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ChangesTrieRoot",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "PreRuntime",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Consensus",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Seal",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "ChangesTrieSignal",
              "fields": [
                {
                  "name": null,
                  "type": 15,
                  "typeName": "ChangesTrieSignal",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 14,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 15,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "ChangesTrieSignal"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewConfiguration",
              "fields": [
                {
                  "name": null,
                  "type": 16,
                  "typeName": "Option<ChangesTrieConfiguration>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 16,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 17
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 17,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 17,
    "type": {
      "path": [
        "sp_core",
        "changes_trie",
        "ChangesTrieConfiguration"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "digest_interval",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "digest_levels",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 18,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 19
        }
      },
      "docs": []
    }
  },
  {
    "id": 19,
    "type": {
      "path": [
        "frame_system",
        "EventRecord"
      ],
      "params": [
        {
          "name": "E",
          "type": 20
        },
        {
          "name": "T",
          "type": 9
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "phase",
              "type": 84,
              "typeName": "Phase",
              "docs": []
            },
            {
              "name": "event",
              "type": 20,
              "typeName": "E",
              "docs": []
            },
            {
              "name": "topics",
              "type": 85,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 20,
    "type": {
      "path": [
        "polkadot_runtime",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 21,
                  "typeName": "frame_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Scheduler",
              "fields": [
                {
                  "name": null,
                  "type": 28,
                  "typeName": "pallet_scheduler::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Indices",
              "fields": [
                {
                  "name": null,
                  "type": 33,
                  "typeName": "pallet_indices::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 34,
                  "typeName": "pallet_balances::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [
                {
                  "name": null,
                  "type": 36,
                  "typeName": "pallet_staking::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Offences",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": "pallet_offences::Event",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "pallet_session::Event",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "pallet_grandpa::Event",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ImOnline",
              "fields": [
                {
                  "name": null,
                  "type": 45,
                  "typeName": "pallet_im_online::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Democracy",
              "fields": [
                {
                  "name": null,
                  "type": 54,
                  "typeName": "pallet_democracy::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Council",
              "fields": [
                {
                  "name": null,
                  "type": 57,
                  "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "TechnicalCommittee",
              "fields": [
                {
                  "name": null,
                  "type": 60,
                  "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "PhragmenElection",
              "fields": [
                {
                  "name": null,
                  "type": 62,
                  "typeName": "pallet_elections_phragmen::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "TechnicalMembership",
              "fields": [
                {
                  "name": null,
                  "type": 65,
                  "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": "pallet_treasury::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Claims",
              "fields": [
                {
                  "name": null,
                  "type": 68,
                  "typeName": "claims::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "pallet_vesting::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 72,
                  "typeName": "pallet_utility::Event",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Identity",
              "fields": [
                {
                  "name": null,
                  "type": 73,
                  "typeName": "pallet_identity::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 74,
                  "typeName": "pallet_proxy::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 77,
                  "typeName": "pallet_multisig::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Bounties",
              "fields": [
                {
                  "name": null,
                  "type": 79,
                  "typeName": "pallet_bounties::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Tips",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "pallet_tips::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ElectionProviderMultiPhase",
              "fields": [
                {
                  "name": null,
                  "type": 81,
                  "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 21,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ExtrinsicSuccess",
              "fields": [
                {
                  "name": null,
                  "type": 22,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An extrinsic completed successfully. \\[info\\]"
              ]
            },
            {
              "name": "ExtrinsicFailed",
              "fields": [
                {
                  "name": null,
                  "type": 25,
                  "typeName": "DispatchError",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 22,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An extrinsic failed. \\[error, info\\]"
              ]
            },
            {
              "name": "CodeUpdated",
              "fields": [],
              "index": 2,
              "docs": [
                "`:code` was updated."
              ]
            },
            {
              "name": "NewAccount",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A new \\[account\\] was created."
              ]
            },
            {
              "name": "KilledAccount",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An \\[account\\] was reaped."
              ]
            },
            {
              "name": "Remarked",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "On on-chain remark happened. \\[origin, remark_hash\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "Event for the System pallet."
      ]
    }
  },
  {
    "id": 22,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "DispatchInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "weight",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "type": 23,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "pays_fee",
              "type": 24,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 23,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "DispatchClass"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Normal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Operational",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mandatory",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 24,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "Pays"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Yes",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "No",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 25,
    "type": {
      "path": [
        "sp_runtime",
        "DispatchError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Other",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Module",
              "fields": [
                {
                  "name": "index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "ConsumerRemaining",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "NoProviders",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Token",
              "fields": [
                {
                  "name": null,
                  "type": 26,
                  "typeName": "TokenError",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Arithmetic",
              "fields": [
                {
                  "name": null,
                  "type": 27,
                  "typeName": "ArithmeticError",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 26,
    "type": {
      "path": [
        "sp_runtime",
        "TokenError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NoFunds",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BelowMinimum",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CannotCreate",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "UnknownAsset",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 27,
    "type": {
      "path": [
        "sp_runtime",
        "ArithmeticError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Underflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DivisionByZero",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 28,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Scheduled",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Scheduled some task. \\[when, index\\]"
              ]
            },
            {
              "name": "Canceled",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Canceled some task. \\[when, index\\]"
              ]
            },
            {
              "name": "Dispatched",
              "fields": [
                {
                  "name": null,
                  "type": 29,
                  "typeName": "TaskAddress<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 30,
                  "typeName": "Option<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Dispatched some task. \\[task, id, result\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "Events type."
      ]
    }
  },
  {
    "id": 29,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 30,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 31,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 32
        },
        {
          "name": "E",
          "type": 25
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 32,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 25,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 32,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": []
      },
      "docs": []
    }
  },
  {
    "id": 33,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "IndexAssigned",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A account index was assigned. \\[index, who\\]"
              ]
            },
            {
              "name": "IndexFreed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A account index has been freed up (unassigned). \\[index\\]"
              ]
            },
            {
              "name": "IndexFrozen",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A account index has been frozen to its current account ID. \\[index, who\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 34,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Endowed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An account was created with some free balance. \\[account, free_balance\\]"
              ]
            },
            {
              "name": "DustLost",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                "resulting in an outright loss. \\[account, balance\\]"
              ]
            },
            {
              "name": "Transfer",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer succeeded. \\[from, to, value\\]"
              ]
            },
            {
              "name": "BalanceSet",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A balance was set by root. \\[who, free, reserved\\]"
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"
              ]
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Some balance was reserved (moved from free to reserved). \\[who, value\\]"
              ]
            },
            {
              "name": "Unreserved",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
              ]
            },
            {
              "name": "ReserveRepatriated",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 35,
                  "typeName": "Status",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some balance was moved from the reserve of the first account to the second account.",
                "Final argument indicates the destination balance type.",
                "\\[from, to, balance, destination_status\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 35,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "BalanceStatus"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Free",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reserved",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 36,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "EraPaid",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The era payout has been set; the first balance is the validator-payout; the second is",
                "the remainder from the maximum amount of reward.",
                "\\[era_index, validator_payout, remainder\\]"
              ]
            },
            {
              "name": "Rewarded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The nominator has been rewarded by this amount. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "One validator (and its nominators) has been slashed by the given amount.",
                "\\[validator, amount\\]"
              ]
            },
            {
              "name": "OldSlashingReportDiscarded",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An old slashing report from a prior era was discarded because it could",
                "not be processed. \\[session_index\\]"
              ]
            },
            {
              "name": "StakersElected",
              "fields": [],
              "index": 4,
              "docs": [
                "A new set of stakers was elected."
              ]
            },
            {
              "name": "Bonded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An account has bonded this amount. \\[stash, amount\\]",
                "",
                "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                "it will not be emitted for staking rewards when they are added to stake."
              ]
            },
            {
              "name": "Unbonded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An account has unbonded this amount. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                "from the unlocking queue. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Kicked",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A nominator has been kicked from a validator. \\[nominator, stash\\]"
              ]
            },
            {
              "name": "StakingElectionFailed",
              "fields": [],
              "index": 9,
              "docs": [
                "The election failed. No new era is planned."
              ]
            },
            {
              "name": "Chilled",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "An account has stopped participating as either a validator or nominator.",
                "\\[stash\\]"
              ]
            },
            {
              "name": "PayoutStarted",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 37,
    "type": {
      "path": [
        "pallet_offences",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Offence",
              "fields": [
                {
                  "name": null,
                  "type": 38,
                  "typeName": "Kind",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 10,
                  "typeName": "OpaqueTimeSlot",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "There is an offence reported of the given `kind` happened at the `session_index` and",
                "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                "\\[kind, timeslot\\]."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events type."
      ]
    }
  },
  {
    "id": 38,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 16,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 39,
    "type": {
      "path": [
        "pallet_session",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewSession",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New session has happened. Note that the argument is the \\[session_index\\], not the block",
                "number as the type might suggest."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ]
    }
  },
  {
    "id": 40,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewAuthorities",
              "fields": [
                {
                  "name": null,
                  "type": 41,
                  "typeName": "AuthorityList",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New authority set has been applied. \\[authority_set\\]"
              ]
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 1,
              "docs": [
                "Current authority set has been paused."
              ]
            },
            {
              "name": "Resumed",
              "fields": [],
              "index": 2,
              "docs": [
                "Current authority set has been resumed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 41,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 42
        }
      },
      "docs": []
    }
  },
  {
    "id": 42,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          43,
          8
        ]
      },
      "docs": []
    }
  },
  {
    "id": 43,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 44,
              "typeName": "ed25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 44,
    "type": {
      "path": [
        "sp_core",
        "ed25519",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 45,
    "type": {
      "path": [
        "pallet_im_online",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "HeartbeatReceived",
              "fields": [
                {
                  "name": null,
                  "type": 46,
                  "typeName": "T::AuthorityId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new heartbeat was received from `AuthorityId` \\[authority_id\\]"
              ]
            },
            {
              "name": "AllGood",
              "fields": [],
              "index": 1,
              "docs": [
                "At the end of the session, no offence was committed."
              ]
            },
            {
              "name": "SomeOffline",
              "fields": [
                {
                  "name": null,
                  "type": 48,
                  "typeName": "Vec<IdentificationTuple<T>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "At the end of the session, at least one validator was found to be \\[offline\\]."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 46,
    "type": {
      "path": [
        "pallet_im_online",
        "sr25519",
        "app_sr25519",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 47,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 47,
    "type": {
      "path": [
        "sp_core",
        "sr25519",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 48,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 49
        }
      },
      "docs": []
    }
  },
  {
    "id": 49,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          50
        ]
      },
      "docs": []
    }
  },
  {
    "id": 50,
    "type": {
      "path": [
        "pallet_staking",
        "Exposure"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 51,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "own",
              "type": 51,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "others",
              "type": 52,
              "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 51,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 6
        }
      },
      "docs": []
    }
  },
  {
    "id": 52,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 53
        }
      },
      "docs": []
    }
  },
  {
    "id": 53,
    "type": {
      "path": [
        "pallet_staking",
        "IndividualExposure"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 51,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 54,
    "type": {
      "path": [
        "pallet_democracy",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "PropIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A motion has been proposed by a public account. \\[proposal_index, deposit\\]"
              ]
            },
            {
              "name": "Tabled",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "PropIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A public proposal has been tabled for referendum vote. \\[proposal_index, deposit, depositors\\]"
              ]
            },
            {
              "name": "ExternalTabled",
              "fields": [],
              "index": 2,
              "docs": [
                "An external proposal has been tabled."
              ]
            },
            {
              "name": "Started",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 56,
                  "typeName": "VoteThreshold",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A referendum has begun. \\[ref_index, threshold\\]"
              ]
            },
            {
              "name": "Passed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A proposal has been approved by referendum. \\[ref_index\\]"
              ]
            },
            {
              "name": "NotPassed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A proposal has been rejected by referendum. \\[ref_index\\]"
              ]
            },
            {
              "name": "Cancelled",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A referendum has been cancelled. \\[ref_index\\]"
              ]
            },
            {
              "name": "Executed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A proposal has been enacted. \\[ref_index, result\\]"
              ]
            },
            {
              "name": "Delegated",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "An account has delegated their vote to another account. \\[who, target\\]"
              ]
            },
            {
              "name": "Undelegated",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "An \\[account\\] has cancelled a previous delegation operation."
              ]
            },
            {
              "name": "Vetoed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "An external proposal has been vetoed. \\[who, proposal_hash, until\\]"
              ]
            },
            {
              "name": "PreimageNoted",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "A proposal's preimage was noted, and the deposit taken. \\[proposal_hash, who, deposit\\]"
              ]
            },
            {
              "name": "PreimageUsed",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "A proposal preimage was removed and used (the deposit was returned).",
                "\\[proposal_hash, provider, deposit\\]"
              ]
            },
            {
              "name": "PreimageInvalid",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "A proposal could not be executed because its preimage was invalid.",
                "\\[proposal_hash, ref_index\\]"
              ]
            },
            {
              "name": "PreimageMissing",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "A proposal could not be executed because its preimage was missing.",
                "\\[proposal_hash, ref_index\\]"
              ]
            },
            {
              "name": "PreimageReaped",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "A registered preimage was removed and the deposit collected by the reaper.",
                "\\[proposal_hash, provider, deposit, reaper\\]"
              ]
            },
            {
              "name": "Unlocked",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "An \\[account\\] has been unlocked successfully."
              ]
            },
            {
              "name": "Blacklisted",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "A proposal \\[hash\\] has been blacklisted permanently."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 55,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 0
        }
      },
      "docs": []
    }
  },
  {
    "id": 56,
    "type": {
      "path": [
        "pallet_democracy",
        "vote_threshold",
        "VoteThreshold"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "SuperMajorityApprove",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SuperMajorityAgainst",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "SimpleMajority",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 57,
    "type": {
      "path": [
        "pallet_collective",
        "RawEvent"
      ],
      "params": [
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 58
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A motion (given hash) has been proposed (by given account) with a threshold (given",
                "`MemberCount`).",
                "\\[account, proposal_index, proposal_hash, threshold\\]"
              ]
            },
            {
              "name": "Voted",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A motion (given hash) has been voted on by given account, leaving",
                "a tally (yes votes and no votes given respectively as `MemberCount`).",
                "\\[account, proposal_hash, voted, yes, no\\]"
              ]
            },
            {
              "name": "Approved",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A motion was approved by the required threshold.",
                "\\[proposal_hash\\]"
              ]
            },
            {
              "name": "Disapproved",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A motion was not approved by the required threshold.",
                "\\[proposal_hash\\]"
              ]
            },
            {
              "name": "Executed",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A motion was executed; result will be `Ok` if it returned without error.",
                "\\[proposal_hash, result\\]"
              ]
            },
            {
              "name": "MemberExecuted",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A single member did some action; result will be `Ok` if it returned without error.",
                "\\[proposal_hash, result\\]"
              ]
            },
            {
              "name": "Closed",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A proposal was closed because its threshold was reached or after its duration was up.",
                "\\[proposal_hash, yes, no\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ]
    }
  },
  {
    "id": 58,
    "type": {
      "path": [
        "pallet_collective",
        "Instance1"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 59,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Bool"
      },
      "docs": []
    }
  },
  {
    "id": 60,
    "type": {
      "path": [
        "pallet_collective",
        "RawEvent"
      ],
      "params": [
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 61
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A motion (given hash) has been proposed (by given account) with a threshold (given",
                "`MemberCount`).",
                "\\[account, proposal_index, proposal_hash, threshold\\]"
              ]
            },
            {
              "name": "Voted",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A motion (given hash) has been voted on by given account, leaving",
                "a tally (yes votes and no votes given respectively as `MemberCount`).",
                "\\[account, proposal_hash, voted, yes, no\\]"
              ]
            },
            {
              "name": "Approved",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A motion was approved by the required threshold.",
                "\\[proposal_hash\\]"
              ]
            },
            {
              "name": "Disapproved",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A motion was not approved by the required threshold.",
                "\\[proposal_hash\\]"
              ]
            },
            {
              "name": "Executed",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A motion was executed; result will be `Ok` if it returned without error.",
                "\\[proposal_hash, result\\]"
              ]
            },
            {
              "name": "MemberExecuted",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A single member did some action; result will be `Ok` if it returned without error.",
                "\\[proposal_hash, result\\]"
              ]
            },
            {
              "name": "Closed",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A proposal was closed because its threshold was reached or after its duration was up.",
                "\\[proposal_hash, yes, no\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ]
    }
  },
  {
    "id": 61,
    "type": {
      "path": [
        "pallet_collective",
        "Instance2"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 62,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewTerm",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new term with \\[new_members\\]. This indicates that enough candidates existed to run",
                "the election, not that enough have has been elected. The inner value must be examined",
                "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                "begin with."
              ]
            },
            {
              "name": "EmptyTerm",
              "fields": [],
              "index": 1,
              "docs": [
                "No (or not enough) candidates existed for this round. This is different from",
                "`NewTerm(\\[\\])`. See the description of `NewTerm`."
              ]
            },
            {
              "name": "ElectionError",
              "fields": [],
              "index": 2,
              "docs": [
                "Internal error happened while trying to perform election."
              ]
            },
            {
              "name": "MemberKicked",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A \\[member\\] has been removed. This should always be followed by either `NewTerm` or",
                "`EmptyTerm`."
              ]
            },
            {
              "name": "Renounced",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Someone has renounced their candidacy."
              ]
            },
            {
              "name": "CandidateSlashed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A \\[candidate\\] was slashed by \\[amount\\] due to failing to obtain a seat as member or",
                "runner-up.",
                "",
                "Note that old members and runners-up are also candidates."
              ]
            },
            {
              "name": "SeatHolderSlashed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A \\[seat holder\\] was slashed by \\[amount\\] by being forcefully removed from the set."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 63,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 64
        }
      },
      "docs": []
    }
  },
  {
    "id": 64,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 65,
    "type": {
      "path": [
        "pallet_membership",
        "RawEvent"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Event",
          "type": 20
        },
        {
          "name": "I",
          "type": 66
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MemberAdded",
              "fields": [],
              "index": 0,
              "docs": [
                "The given member was added; see the transaction for who."
              ]
            },
            {
              "name": "MemberRemoved",
              "fields": [],
              "index": 1,
              "docs": [
                "The given member was removed; see the transaction for who."
              ]
            },
            {
              "name": "MembersSwapped",
              "fields": [],
              "index": 2,
              "docs": [
                "Two members were swapped; see the transaction for who."
              ]
            },
            {
              "name": "MembersReset",
              "fields": [],
              "index": 3,
              "docs": [
                "The membership was reset; see the transaction for who the new set is."
              ]
            },
            {
              "name": "KeyChanged",
              "fields": [],
              "index": 4,
              "docs": [
                "One of the members' keys changed."
              ]
            },
            {
              "name": "Dummy",
              "fields": [],
              "index": 5,
              "docs": [
                "Phantom member, never used."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ]
    }
  },
  {
    "id": 66,
    "type": {
      "path": [
        "pallet_membership",
        "Instance1"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 67,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New proposal. \\[proposal_index\\]"
              ]
            },
            {
              "name": "Spending",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "We have ended a spend period and will now allocate funds. \\[budget_remaining\\]"
              ]
            },
            {
              "name": "Awarded",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some funds have been allocated. \\[proposal_index, award, beneficiary\\]"
              ]
            },
            {
              "name": "Rejected",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A proposal was rejected; funds were slashed. \\[proposal_index, slashed\\]"
              ]
            },
            {
              "name": "Burnt",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some of our funds have been burnt. \\[burn\\]"
              ]
            },
            {
              "name": "Rollover",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Spending has finished; this is the amount that rolls over until next spend.",
                "\\[budget_remaining\\]"
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some funds have been deposited. \\[deposit\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 68,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Claimed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 69,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Someone claimed some DOTs. `[who, ethereum_address, amount]`"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 69,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "EthereumAddress"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 70,
              "typeName": "[u8; 20]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 70,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 20,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 71,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingUpdated",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The amount vested has been updated. This could indicate more funds are available. The",
                "balance given is the amount which is left unvested (and thus locked).",
                "\\[account, unvested\\]"
              ]
            },
            {
              "name": "VestingCompleted",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An \\[account\\] has become fully vested. No further vesting can happen."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 72,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BatchInterrupted",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 25,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                "well as the error. \\[index, error\\]"
              ]
            },
            {
              "name": "BatchCompleted",
              "fields": [],
              "index": 1,
              "docs": [
                "Batch of dispatches completed fully with no error."
              ]
            },
            {
              "name": "ItemCompleted",
              "fields": [],
              "index": 2,
              "docs": [
                "A single item within a Batch of dispatches has completed with no error."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 73,
    "type": {
      "path": [
        "pallet_identity",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "IdentitySet",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A name was set or reset (which will remove all judgements). \\[who\\]"
              ]
            },
            {
              "name": "IdentityCleared",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A name was cleared, and the given balance returned. \\[who, deposit\\]"
              ]
            },
            {
              "name": "IdentityKilled",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A name was removed and the given balance slashed. \\[who, deposit\\]"
              ]
            },
            {
              "name": "JudgementRequested",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A judgement was asked from a registrar. \\[who, registrar_index\\]"
              ]
            },
            {
              "name": "JudgementUnrequested",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A judgement request was retracted. \\[who, registrar_index\\]"
              ]
            },
            {
              "name": "JudgementGiven",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A judgement was given by a registrar. \\[target, registrar_index\\]"
              ]
            },
            {
              "name": "RegistrarAdded",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A registrar was added. \\[registrar_index\\]"
              ]
            },
            {
              "name": "SubIdentityAdded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A sub-identity was added to an identity and the deposit paid. \\[sub, main, deposit\\]"
              ]
            },
            {
              "name": "SubIdentityRemoved",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A sub-identity was removed from an identity and the deposit freed.",
                "\\[sub, main, deposit\\]"
              ]
            },
            {
              "name": "SubIdentityRevoked",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A sub-identity was cleared, and the given deposit repatriated from the",
                "main identity account to the sub-identity account. \\[sub, main, deposit\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 74,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ProxyExecuted",
              "fields": [
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A proxy was executed correctly, with the given \\[result\\]."
              ]
            },
            {
              "name": "AnonymousCreated",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 75,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 76,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Anonymous account has been created by new proxy with given",
                "disambiguation index and proxy type. \\[anonymous, who, proxy_type, disambiguation_index\\]"
              ]
            },
            {
              "name": "Announced",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An announcement was placed to make a call in the future. \\[real, proxy, call_hash\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 75,
    "type": {
      "path": [
        "polkadot_runtime",
        "ProxyType"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonTransfer",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Governance",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "IdentityJudgement",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "CancelProxy",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 76,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U16"
      },
      "docs": []
    }
  },
  {
    "id": 77,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewMultisig",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new multisig operation has begun. \\[approving, multisig, call_hash\\]"
              ]
            },
            {
              "name": "MultisigApproval",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 78,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A multisig operation has been approved by someone.",
                "\\[approving, timepoint, multisig, call_hash\\]"
              ]
            },
            {
              "name": "MultisigExecuted",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 78,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 31,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"
              ]
            },
            {
              "name": "MultisigCancelled",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 78,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 78,
    "type": {
      "path": [
        "pallet_multisig",
        "Timepoint"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "index",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 79,
    "type": {
      "path": [
        "pallet_bounties",
        "RawEvent"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BountyProposed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New bounty proposal. \\[index\\]"
              ]
            },
            {
              "name": "BountyRejected",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A bounty proposal was rejected; funds were slashed. \\[index, bond\\]"
              ]
            },
            {
              "name": "BountyBecameActive",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A bounty proposal is funded and became active. \\[index\\]"
              ]
            },
            {
              "name": "BountyAwarded",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A bounty is awarded to a beneficiary. \\[index, beneficiary\\]"
              ]
            },
            {
              "name": "BountyClaimed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A bounty is claimed by beneficiary. \\[index, payout, beneficiary\\]"
              ]
            },
            {
              "name": "BountyCanceled",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A bounty is cancelled. \\[index\\]"
              ]
            },
            {
              "name": "BountyExtended",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A bounty expiry is extended. \\[index\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ]
    }
  },
  {
    "id": 80,
    "type": {
      "path": [
        "pallet_tips",
        "RawEvent"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewTip",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new tip suggestion has been opened. \\[tip_hash\\]"
              ]
            },
            {
              "name": "TipClosing",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A tip suggestion has reached threshold and is closing. \\[tip_hash\\]"
              ]
            },
            {
              "name": "TipClosed",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A tip suggestion has been closed. \\[tip_hash, who, payout\\]"
              ]
            },
            {
              "name": "TipRetracted",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A tip suggestion has been retracted. \\[tip_hash\\]"
              ]
            },
            {
              "name": "TipSlashed",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A tip suggestion has been slashed. \\[tip_hash, finder, deposit\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "Events for this module.",
        ""
      ]
    }
  },
  {
    "id": 81,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "SolutionStored",
              "fields": [
                {
                  "name": null,
                  "type": 82,
                  "typeName": "ElectionCompute",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A solution was stored with the given compute.",
                "",
                "If the solution is signed, this means that it hasn't yet been processed. If the",
                "solution is unsigned, this means that it has also been processed.",
                "",
                "The `bool` is `true` when a previous solution was ejected to make room for this one."
              ]
            },
            {
              "name": "ElectionFinalized",
              "fields": [
                {
                  "name": null,
                  "type": 83,
                  "typeName": "Option<ElectionCompute>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The election has been finalized, with `Some` of the given computation, or else if the",
                "election failed, `None`."
              ]
            },
            {
              "name": "Rewarded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An account has been rewarded for their signed submission being finalized."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An account has been slashed for submitting an invalid signed submission."
              ]
            },
            {
              "name": "SignedPhaseStarted",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The signed phase of the given round has started."
              ]
            },
            {
              "name": "UnsignedPhaseStarted",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The unsigned phase of the given round has started."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://substrate.dev/docs/en/knowledgebase/runtime/events) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 82,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "ElectionCompute"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "OnChain",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsigned",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Emergency",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 83,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 82
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 82,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 84,
    "type": {
      "path": [
        "frame_system",
        "Phase"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ApplyExtrinsic",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finalization",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Initialization",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 85,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 9
        }
      },
      "docs": []
    }
  },
  {
    "id": 86,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 29
        }
      },
      "docs": []
    }
  },
  {
    "id": 87,
    "type": {
      "path": [
        "frame_system",
        "LastRuntimeUpgradeInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_version",
              "type": 88,
              "typeName": "codec::Compact<u32>",
              "docs": []
            },
            {
              "name": "spec_name",
              "type": 89,
              "typeName": "sp_runtime::RuntimeString",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 88,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 89,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Str"
      },
      "docs": []
    }
  },
  {
    "id": 90,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "fill_block",
              "fields": [
                {
                  "name": "ratio",
                  "type": 91,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A dispatch that will fill the block weight up to the given ratio."
              ]
            },
            {
              "name": "remark",
              "fields": [
                {
                  "name": "remark",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Make some on-chain remark.",
                "",
                "# <weight>",
                "- `O(1)`",
                "# </weight>"
              ]
            },
            {
              "name": "set_heap_pages",
              "fields": [
                {
                  "name": "pages",
                  "type": 8,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the number of pages in the WebAssembly environment's heap.",
                "",
                "# <weight>",
                "- `O(1)`",
                "- 1 storage write.",
                "- Base Weight: 1.405 µs",
                "- 1 write to HEAP_PAGES",
                "# </weight>"
              ]
            },
            {
              "name": "set_code",
              "fields": [
                {
                  "name": "code",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set the new runtime code.",
                "",
                "# <weight>",
                "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                "- 1 storage write (codec `O(C)`).",
                "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                "- 1 event.",
                "The weight of this function is dependent on the runtime, but generally this is very expensive.",
                "We will treat this as a full block.",
                "# </weight>"
              ]
            },
            {
              "name": "set_code_without_checks",
              "fields": [
                {
                  "name": "code",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Set the new runtime code without doing any checks of the given `code`.",
                "",
                "# <weight>",
                "- `O(C)` where `C` length of `code`",
                "- 1 storage write (codec `O(C)`).",
                "- 1 event.",
                "The weight of this function is dependent on the runtime. We will treat this as a full block.",
                "# </weight>"
              ]
            },
            {
              "name": "set_changes_trie_config",
              "fields": [
                {
                  "name": "changes_trie_config",
                  "type": 16,
                  "typeName": "Option<ChangesTrieConfiguration>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set the new changes trie configuration.",
                "",
                "# <weight>",
                "- `O(1)`",
                "- 1 storage write or delete (codec `O(1)`).",
                "- 1 call to `deposit_log`: Uses `append` API, so O(1)",
                "- Base Weight: 7.218 µs",
                "- DB Weight:",
                "    - Writes: Changes Trie, System Digest",
                "# </weight>"
              ]
            },
            {
              "name": "set_storage",
              "fields": [
                {
                  "name": "items",
                  "type": 92,
                  "typeName": "Vec<KeyValue>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Set some items of storage.",
                "",
                "# <weight>",
                "- `O(I)` where `I` length of `items`",
                "- `I` storage writes (`O(1)`).",
                "- Base Weight: 0.568 * i µs",
                "- Writes: Number of items",
                "# </weight>"
              ]
            },
            {
              "name": "kill_storage",
              "fields": [
                {
                  "name": "keys",
                  "type": 94,
                  "typeName": "Vec<Key>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Kill some items from storage.",
                "",
                "# <weight>",
                "- `O(IK)` where `I` length of `keys` and `K` length of one key",
                "- `I` storage deletions.",
                "- Base Weight: .378 * i µs",
                "- Writes: Number of items",
                "# </weight>"
              ]
            },
            {
              "name": "kill_prefix",
              "fields": [
                {
                  "name": "prefix",
                  "type": 10,
                  "typeName": "Key",
                  "docs": []
                },
                {
                  "name": "subkeys",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Kill all storage items with a key that starts with the given prefix.",
                "",
                "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                "the prefix we are removing to accurately calculate the weight of this function.",
                "",
                "# <weight>",
                "- `O(P)` where `P` amount of keys with prefix `prefix`",
                "- `P` storage deletions.",
                "- Base Weight: 0.834 * P µs",
                "- Writes: Number of subkeys + 1",
                "# </weight>"
              ]
            },
            {
              "name": "remark_with_event",
              "fields": [
                {
                  "name": "remark",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Make some on-chain remark and emit event.",
                "",
                "# <weight>",
                "- `O(b)` where b is the length of the remark.",
                "- 1 event.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 91,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perbill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 92,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 93
        }
      },
      "docs": []
    }
  },
  {
    "id": 93,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          10,
          10
        ]
      },
      "docs": []
    }
  },
  {
    "id": 94,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 10
        }
      },
      "docs": []
    }
  },
  {
    "id": 95,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockWeights"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_block",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_block",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "per_class",
              "type": 96,
              "typeName": "PerDispatchClass<WeightsPerClass>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 96,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 97
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 97,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 97,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 97,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 97,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "WeightsPerClass"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_extrinsic",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_extrinsic",
              "type": 98,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "max_total",
              "type": 98,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 98,
              "typeName": "Option<Weight>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 98,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 8
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 8,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 99,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockLength"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max",
              "type": 100,
              "typeName": "PerDispatchClass<u32>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 100,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 4,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 101,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "RuntimeDbWeight"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "read",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "write",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 102,
    "type": {
      "path": [
        "sp_version",
        "RuntimeVersion"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_name",
              "type": 89,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "impl_name",
              "type": 89,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "authoring_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "spec_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "impl_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "apis",
              "type": 103,
              "typeName": "ApisVec",
              "docs": []
            },
            {
              "name": "transaction_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 103,
    "type": {
      "path": [
        "Cow"
      ],
      "params": [
        {
          "name": "T",
          "type": 104
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 104,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 104,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 105
        }
      },
      "docs": []
    }
  },
  {
    "id": 105,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          106,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 106,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 107,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidSpecName",
              "fields": [],
              "index": 0,
              "docs": [
                "The name of specification does not match between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "fields": [],
              "index": 1,
              "docs": [
                "The specification version is not allowed to decrease between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to extract the runtime version from the new runtime.",
                "",
                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "fields": [],
              "index": 3,
              "docs": [
                "Suicide called when the account has non-default composite data."
              ]
            },
            {
              "name": "NonZeroRefCount",
              "fields": [],
              "index": 4,
              "docs": [
                "There is a non-zero reference count preventing the account from being purged."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the System pallet"
      ]
    }
  },
  {
    "id": 108,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 109
        }
      },
      "docs": []
    }
  },
  {
    "id": 109,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 110
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 110,
    "type": {
      "path": [
        "pallet_scheduler",
        "ScheduledV2"
      ],
      "params": [
        {
          "name": "Call",
          "type": 111
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "PalletsOrigin",
          "type": 293
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "maybe_id",
              "type": 30,
              "typeName": "Option<Vec<u8>>",
              "docs": []
            },
            {
              "name": "priority",
              "type": 2,
              "typeName": "schedule::Priority",
              "docs": []
            },
            {
              "name": "call",
              "type": 111,
              "typeName": "Call",
              "docs": []
            },
            {
              "name": "maybe_periodic",
              "type": 113,
              "typeName": "Option<schedule::Period<BlockNumber>>",
              "docs": []
            },
            {
              "name": "origin",
              "type": 293,
              "typeName": "PalletsOrigin",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 111,
    "type": {
      "path": [
        "polkadot_runtime",
        "Call"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 90,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Scheduler",
              "fields": [
                {
                  "name": null,
                  "type": 112,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Babe",
              "fields": [
                {
                  "name": null,
                  "type": 114,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Timestamp",
              "fields": [
                {
                  "name": null,
                  "type": 124,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Indices",
              "fields": [
                {
                  "name": null,
                  "type": 126,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 127,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Authorship",
              "fields": [
                {
                  "name": null,
                  "type": 130,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [
                {
                  "name": null,
                  "type": 132,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 141,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "name": null,
                  "type": 146,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ImOnline",
              "fields": [
                {
                  "name": null,
                  "type": 158,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Democracy",
              "fields": [
                {
                  "name": null,
                  "type": 166,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Council",
              "fields": [
                {
                  "name": null,
                  "type": 170,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "TechnicalCommittee",
              "fields": [
                {
                  "name": null,
                  "type": 172,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "PhragmenElection",
              "fields": [
                {
                  "name": null,
                  "type": 173,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PhragmenElection, Runtime>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "TechnicalMembership",
              "fields": [
                {
                  "name": null,
                  "type": 175,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [
                {
                  "name": null,
                  "type": 176,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Claims",
              "fields": [
                {
                  "name": null,
                  "type": 177,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 184,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 186,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Identity",
              "fields": [
                {
                  "name": null,
                  "type": 188,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 228,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 230,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Bounties",
              "fields": [
                {
                  "name": null,
                  "type": 232,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Tips",
              "fields": [
                {
                  "name": null,
                  "type": 233,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ElectionProviderMultiPhase",
              "fields": [
                {
                  "name": null,
                  "type": 234,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 112,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "schedule",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 113,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Anonymously schedule a task.",
                "",
                "# <weight>",
                "- S = Number of already scheduled calls",
                "- Base Weight: 22.29 + .126 * S µs",
                "- DB Weight:",
                "    - Read: Agenda",
                "    - Write: Agenda",
                "- Will use base weight of 25 which should be good for up to 30 scheduled calls",
                "# </weight>"
              ]
            },
            {
              "name": "cancel",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Cancel an anonymously scheduled task.",
                "",
                "# <weight>",
                "- S = Number of already scheduled calls",
                "- Base Weight: 22.15 + 2.869 * S µs",
                "- DB Weight:",
                "    - Read: Agenda",
                "    - Write: Agenda, Lookup",
                "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                "# </weight>"
              ]
            },
            {
              "name": "schedule_named",
              "fields": [
                {
                  "name": "id",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 113,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Schedule a named task.",
                "",
                "# <weight>",
                "- S = Number of already scheduled calls",
                "- Base Weight: 29.6 + .159 * S µs",
                "- DB Weight:",
                "    - Read: Agenda, Lookup",
                "    - Write: Agenda, Lookup",
                "- Will use base weight of 35 which should be good for more than 30 scheduled calls",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_named",
              "fields": [
                {
                  "name": "id",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a named scheduled task.",
                "",
                "# <weight>",
                "- S = Number of already scheduled calls",
                "- Base Weight: 24.91 + 2.907 * S µs",
                "- DB Weight:",
                "    - Read: Agenda, Lookup",
                "    - Write: Agenda, Lookup",
                "- Will use base weight of 100 which should be good for up to 30 scheduled calls",
                "# </weight>"
              ]
            },
            {
              "name": "schedule_after",
              "fields": [
                {
                  "name": "after",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 113,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Anonymously schedule a task after a delay.",
                "",
                "# <weight>",
                "Same as [`schedule`].",
                "# </weight>"
              ]
            },
            {
              "name": "schedule_named_after",
              "fields": [
                {
                  "name": "id",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "after",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 113,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Schedule a named task after a delay.",
                "",
                "# <weight>",
                "Same as [`schedule_named`](Self::schedule_named).",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 113,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 29
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 29,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 114,
    "type": {
      "path": [
        "pallet_babe",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 115,
                  "typeName": "EquivocationProof<T::Header>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 120,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report authority equivocation/misbehavior. This method will verify",
                "the equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence will",
                "be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 115,
                  "typeName": "EquivocationProof<T::Header>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 120,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report authority equivocation/misbehavior. This method will verify",
                "the equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence will",
                "be reported.",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "plan_config_change",
              "fields": [
                {
                  "name": "config",
                  "type": 121,
                  "typeName": "NextConfigDescriptor",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                "Multiple calls to this method will replace any existing planned config change that had",
                "not been enacted yet."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 115,
    "type": {
      "path": [
        "sp_consensus_slots",
        "EquivocationProof"
      ],
      "params": [
        {
          "name": "Header",
          "type": 116
        },
        {
          "name": "Id",
          "type": 118
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "offender",
              "type": 118,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "slot",
              "type": 119,
              "typeName": "Slot",
              "docs": []
            },
            {
              "name": "first_header",
              "type": 116,
              "typeName": "Header",
              "docs": []
            },
            {
              "name": "second_header",
              "type": 116,
              "typeName": "Header",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 116,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "header",
        "Header"
      ],
      "params": [
        {
          "name": "Number",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 117
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_hash",
              "type": 9,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "number",
              "type": 88,
              "typeName": "Number",
              "docs": []
            },
            {
              "name": "state_root",
              "type": 9,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "extrinsics_root",
              "type": 9,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "digest",
              "type": 11,
              "typeName": "Digest<Hash::Output>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 117,
    "type": {
      "path": [
        "sp_runtime",
        "traits",
        "BlakeTwo256"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 118,
    "type": {
      "path": [
        "sp_consensus_babe",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 47,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 119,
    "type": {
      "path": [
        "sp_consensus_slots",
        "Slot"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 8,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 120,
    "type": {
      "path": [
        "sp_session",
        "MembershipProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "session",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "trie_nodes",
              "type": 94,
              "typeName": "Vec<Vec<u8>>",
              "docs": []
            },
            {
              "name": "validator_count",
              "type": 4,
              "typeName": "ValidatorCount",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 121,
    "type": {
      "path": [
        "sp_consensus_babe",
        "digests",
        "NextConfigDescriptor"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1",
              "fields": [
                {
                  "name": "c",
                  "type": 122,
                  "typeName": "(u64, u64)",
                  "docs": []
                },
                {
                  "name": "allowed_slots",
                  "type": 123,
                  "typeName": "AllowedSlots",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 122,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          8,
          8
        ]
      },
      "docs": []
    }
  },
  {
    "id": 123,
    "type": {
      "path": [
        "sp_consensus_babe",
        "AllowedSlots"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PrimarySlots",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PrimaryAndSecondaryPlainSlots",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "PrimaryAndSecondaryVRFSlots",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 124,
    "type": {
      "path": [
        "pallet_timestamp",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set",
              "fields": [
                {
                  "name": "now",
                  "type": 125,
                  "typeName": "T::Moment",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current time.",
                "",
                "This call should be invoked exactly once per block. It will panic at the finalization",
                "phase, if this call hasn't been invoked by that time.",
                "",
                "The timestamp should be greater than the previous one by the amount specified by",
                "`MinimumPeriod`.",
                "",
                "The dispatch origin for this call must be `Inherent`.",
                "",
                "# <weight>",
                "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 125,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 8
        }
      },
      "docs": []
    }
  },
  {
    "id": 126,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "claim",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Assign an previously unassigned index.",
                "",
                "Payment: `Deposit` is reserved from the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `index`: the index to be claimed. This must not be in use.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- One reserve operation.",
                "- One event.",
                "-------------------",
                "- DB Weight: 1 Read/Write (Accounts)",
                "# </weight>"
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Assign an index already owned by the sender to another account. The balance reservation",
                "is effectively transferred to the new account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `index`: the index to be re-assigned. This must be owned by the sender.",
                "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- One transfer operation.",
                "- One event.",
                "-------------------",
                "- DB Weight:",
                "   - Reads: Indices Accounts, System Account (recipient)",
                "   - Writes: Indices Accounts, System Account (recipient)",
                "# </weight>"
              ]
            },
            {
              "name": "free",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Free up an index owned by the sender.",
                "",
                "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                "",
                "- `index`: the index to be freed. This must be owned by the sender.",
                "",
                "Emits `IndexFreed` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- One reserve operation.",
                "- One event.",
                "-------------------",
                "- DB Weight: 1 Read/Write (Accounts)",
                "# </weight>"
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                },
                {
                  "name": "freeze",
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force an index to an account. This doesn't require a deposit. If the index is already",
                "held, then any deposit is reimbursed to its current owner.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `index`: the index to be (re-)assigned.",
                "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- Up to one reserve operation.",
                "- One event.",
                "-------------------",
                "- DB Weight:",
                "   - Reads: Indices Accounts, System Account (original owner)",
                "   - Writes: Indices Accounts, System Account (original owner)",
                "# </weight>"
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Freeze an index so it will always point to the sender account. This consumes the deposit.",
                "",
                "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                "non-frozen account `index`.",
                "",
                "- `index`: the index to be frozen in place.",
                "",
                "Emits `IndexFrozen` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- Up to one slash operation.",
                "- One event.",
                "-------------------",
                "- DB Weight: 1 Read/Write (Accounts)",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 127,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "dest",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transfer some liquid free balance to another account.",
                "",
                "`transfer` will set the `FreeBalance` of the sender and receiver.",
                "It will decrease the total issuance of the system by the `TransferFee`.",
                "If the sender's account is below the existential deposit as a result",
                "of the transfer, the account will be reaped.",
                "",
                "The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                "# <weight>",
                "- Dependent on arguments but not critical, given proper implementations for",
                "  input config types. See related functions below.",
                "- It contains a limited number of reads and writes internally and no complex computation.",
                "",
                "Related functions:",
                "",
                "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                "  - Transferring balances to accounts that did not exist before will cause",
                "     `T::OnNewAccount::on_new_account` to be called.",
                "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                "    check that the transfer will not kill the origin account.",
                "---------------------------------",
                "- Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                "- DB Weight: 1 Read and 1 Write to destination account",
                "- Origin account is already in memory, so no DB operations for them.",
                "# </weight>"
              ]
            },
            {
              "name": "set_balance",
              "fields": [
                {
                  "name": "who",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "new_free",
                  "type": 51,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "new_reserved",
                  "type": 51,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the balances of a given account.",
                "",
                "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                "also decrease the total issuance of the system (`TotalIssuance`).",
                "If the new free or reserved balance is below the existential deposit,",
                "it will reset the account nonce (`frame_system::AccountNonce`).",
                "",
                "The dispatch origin for this call is `root`.",
                "",
                "# <weight>",
                "- Independent of the arguments.",
                "- Contains a limited number of reads and writes.",
                "---------------------",
                "- Base Weight:",
                "    - Creating: 27.56 µs",
                "    - Killing: 35.11 µs",
                "- DB Weight: 1 Read, 1 Write to `who`",
                "# </weight>"
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Exactly as `transfer`, except the origin must be root and the source account may be",
                "specified.",
                "# <weight>",
                "- Same as transfer, but additional read and write because the source account is",
                "  not assumed to be in the overlay.",
                "# </weight>"
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "dest",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                "origin account.",
                "",
                "99% of the time you want [`transfer`] instead.",
                "",
                "[`transfer`]: struct.Pallet.html#method.transfer",
                "# <weight>",
                "- Cheaper than transfer because account cannot be killed.",
                "- Base Weight: 51.4 µs",
                "- DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                "#</weight>"
              ]
            },
            {
              "name": "transfer_all",
              "fields": [
                {
                  "name": "dest",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Transfer the entire transferable balance from the caller account.",
                "",
                "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                "transferred by this function. To ensure that this function results in a killed account,",
                "you might need to prepare the account by removing any reference counters, storage",
                "deposits, etc...",
                "",
                "The dispatch origin of this call must be Signed.",
                "",
                "- `dest`: The recipient of the transfer.",
                "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                "  of the funds the account has, causing the sender account to be killed (false), or",
                "  transfer everything except at least the existential deposit, which will guarantee to",
                "  keep the sender account alive (true).",
                "  # <weight>",
                "- O(1). Just like transfer, but reading the user's transferable balance first.",
                "  #</weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 128,
    "type": {
      "path": [
        "sp_runtime",
        "multiaddress",
        "MultiAddress"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "AccountIndex",
          "type": 32
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Id",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 129,
                  "typeName": "AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Address32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Address20",
              "fields": [
                {
                  "name": null,
                  "type": 70,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 129,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 32
        }
      },
      "docs": []
    }
  },
  {
    "id": 130,
    "type": {
      "path": [
        "pallet_authorship",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_uncles",
              "fields": [
                {
                  "name": "new_uncles",
                  "type": 131,
                  "typeName": "Vec<T::Header>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Provide a set of uncles."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 131,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 116
        }
      },
      "docs": []
    }
  },
  {
    "id": 132,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "bond",
              "fields": [
                {
                  "name": "controller",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "payee",
                  "type": 133,
                  "typeName": "RewardDestination<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                "be the account that controls it.",
                "",
                "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash account.",
                "",
                "Emits `Bonded`.",
                "# <weight>",
                "- Independent of the arguments. Moderate complexity.",
                "- O(1).",
                "- Three extra DB entries.",
                "",
                "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                "------------------",
                "# </weight>"
              ]
            },
            {
              "name": "bond_extra",
              "fields": [
                {
                  "name": "max_additional",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                "for staking.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                "Use this if there are additional funds in your stash account that you wish to bond.",
                "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose any limitation",
                "on the amount that can be added.",
                "",
                "Emits `Bonded`.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "unbond",
              "fields": [
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                "period ends. If this leaves an amount actively bonded less than",
                "T::Currency::minimum_balance(), then it is increased to the full amount.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                "the funds out of management ready for transfer.",
                "",
                "No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                "to be called first to remove some of the chunks (if possible).",
                "",
                "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                "they should call `chill` first in order to free up their bonded funds.",
                "",
                "Emits `Unbonded`.",
                "",
                "See also [`Call::withdraw_unbonded`]."
              ]
            },
            {
              "name": "withdraw_unbonded",
              "fields": [
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Remove any unlocked chunks from the `unlocking` queue from our management.",
                "",
                "This essentially frees up that balance to be used by the stash account to do",
                "whatever it wants.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller.",
                "",
                "Emits `Withdrawn`.",
                "",
                "See also [`Call::unbond`].",
                "",
                "# <weight>",
                "Complexity O(S) where S is the number of slashing spans to remove",
                "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                "# </weight>"
              ]
            },
            {
              "name": "validate",
              "fields": [
                {
                  "name": "prefs",
                  "type": 134,
                  "typeName": "ValidatorPrefs",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Declare the desire to validate for the origin controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
              ]
            },
            {
              "name": "nominate",
              "fields": [
                {
                  "name": "targets",
                  "type": 136,
                  "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Declare the desire to nominate `targets` for the origin controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "# <weight>",
                "- The transaction's complexity is proportional to the size of `targets` (N)",
                "which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                "- Both the reads and writes follow a similar pattern.",
                "# </weight>"
              ]
            },
            {
              "name": "chill",
              "fields": [],
              "index": 6,
              "docs": [
                "Declare no desire to either validate or nominate.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains one read.",
                "- Writes are limited to the `origin` account key.",
                "# </weight>"
              ]
            },
            {
              "name": "set_payee",
              "fields": [
                {
                  "name": "payee",
                  "type": 133,
                  "typeName": "RewardDestination<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "(Re-)set the payment target for a controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains a limited number of reads.",
                "- Writes are limited to the `origin` account key.",
                "---------",
                "- Weight: O(1)",
                "- DB Weight:",
                "    - Read: Ledger",
                "    - Write: Payee",
                "# </weight>"
              ]
            },
            {
              "name": "set_controller",
              "fields": [
                {
                  "name": "controller",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "(Re-)set the controller of a stash.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains a limited number of reads.",
                "- Writes are limited to the `origin` account key.",
                "----------",
                "Weight: O(1)",
                "DB Weight:",
                "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
                "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
                "# </weight>"
              ]
            },
            {
              "name": "set_validator_count",
              "fields": [
                {
                  "name": "new",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Sets the ideal number of validators.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "Weight: O(1)",
                "Write: Validator Count",
                "# </weight>"
              ]
            },
            {
              "name": "increase_validator_count",
              "fields": [
                {
                  "name": "additional",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Increments the ideal number of validators.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "Same as [`Self::set_validator_count`].",
                "# </weight>"
              ]
            },
            {
              "name": "scale_validator_count",
              "fields": [
                {
                  "name": "factor",
                  "type": 137,
                  "typeName": "Percent",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Scale up the ideal number of validators by a factor.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "Same as [`Self::set_validator_count`].",
                "# </weight>"
              ]
            },
            {
              "name": "force_no_eras",
              "fields": [],
              "index": 12,
              "docs": [
                "Force there to be no new eras indefinitely.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "Thus the election process may be ongoing when this is called. In this case the",
                "election will continue until the next era is triggered.",
                "",
                "# <weight>",
                "- No arguments.",
                "- Weight: O(1)",
                "- Write: ForceEra",
                "# </weight>"
              ]
            },
            {
              "name": "force_new_era",
              "fields": [],
              "index": 13,
              "docs": [
                "Force there to be a new era at the end of the next session. After this, it will be",
                "reset to normal (non-forced) behaviour.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "If this is called just before a new era is triggered, the election process may not",
                "have enough blocks to get a result.",
                "",
                "# <weight>",
                "- No arguments.",
                "- Weight: O(1)",
                "- Write ForceEra",
                "# </weight>"
              ]
            },
            {
              "name": "set_invulnerables",
              "fields": [
                {
                  "name": "invulnerables",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Set the validators who cannot be slashed (if any).",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "- O(V)",
                "- Write: Invulnerables",
                "# </weight>"
              ]
            },
            {
              "name": "force_unstake",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Force a current staker to become completely unstaked, immediately.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "O(S) where S is the number of slashing spans to be removed",
                "Reads: Bonded, Slashing Spans, Account, Locks",
                "Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Account, Locks",
                "Writes Each: SpanSlash * S",
                "# </weight>"
              ]
            },
            {
              "name": "force_new_era_always",
              "fields": [],
              "index": 16,
              "docs": [
                "Force there to be a new era at the end of sessions indefinitely.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "If this is called just before a new era is triggered, the election process may not",
                "have enough blocks to get a result.",
                "",
                "# <weight>",
                "- Weight: O(1)",
                "- Write: ForceEra",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_deferred_slash",
              "fields": [
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "slash_indices",
                  "type": 138,
                  "typeName": "Vec<u32>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Cancel enactment of a deferred slash.",
                "",
                "Can be called by the `T::SlashCancelOrigin`.",
                "",
                "Parameters: era and indices of the slashes for that era to kill.",
                "",
                "# <weight>",
                "Complexity: O(U + S)",
                "with U unapplied slashes weighted with U=1000",
                "and S is the number of slash indices to be canceled.",
                "- Read: Unapplied Slashes",
                "- Write: Unapplied Slashes",
                "# </weight>"
              ]
            },
            {
              "name": "payout_stakers",
              "fields": [
                {
                  "name": "validator_stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Pay out all the stakers behind a single validator for a single era.",
                "",
                "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                "",
                "The origin of this call must be _Signed_. Any account can call this function, even if",
                "it is not one of the stakers.",
                "",
                "# <weight>",
                "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                "- Contains a limited number of reads and writes.",
                "-----------",
                "N is the Number of payouts for the validator (including the validator)",
                "Weight:",
                "- Reward Destination Staked: O(N)",
                "- Reward Destination Controller (Creating): O(N)",
                "",
                "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                "# </weight>"
              ]
            },
            {
              "name": "rebond",
              "fields": [
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Rebond a portion of the stash scheduled to be unlocked.",
                "",
                "The dispatch origin must be signed by the controller.",
                "",
                "# <weight>",
                "- Time complexity: O(L), where L is unlocking chunks",
                "- Bounded by `MAX_UNLOCKING_CHUNKS`.",
                "- Storage changes: Can't increase storage, only decrease it.",
                "# </weight>"
              ]
            },
            {
              "name": "set_history_depth",
              "fields": [
                {
                  "name": "new_history_depth",
                  "type": 88,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "era_items_deleted",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Set `HistoryDepth` value. This function will delete any history information",
                "when `HistoryDepth` is reduced.",
                "",
                "Parameters:",
                "- `new_history_depth`: The new history depth you would like to set.",
                "- `era_items_deleted`: The number of items that will be deleted by this dispatch.",
                "   This should report all the storage items that will be deleted by clearing old",
                "   era history. Needed to report an accurate weight for the dispatch. Trusted by",
                "   `Root` to report an accurate number.",
                "",
                "Origin must be root.",
                "",
                "# <weight>",
                "- E: Number of history depths removed, i.e. 10 -> 7 = 3",
                "- Weight: O(E)",
                "- DB Weight:",
                "    - Reads: Current Era, History Depth",
                "    - Writes: History Depth",
                "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake, ErasStartSessionIndex",
                "# </weight>"
              ]
            },
            {
              "name": "reap_stash",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Remove all data structure concerning a staker/stash once its balance is at the minimum.",
                "This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
                "and the target `stash` must have no funds left beyond the ED.",
                "",
                "This can be called from any origin.",
                "",
                "- `stash`: The stash account to reap. Its balance must be zero.",
                "",
                "# <weight>",
                "Complexity: O(S) where S is the number of slashing spans on the account.",
                "DB Weight:",
                "- Reads: Stash Account, Bonded, Slashing Spans, Locks",
                "- Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators, Stash Account, Locks",
                "- Writes Each: SpanSlash * S",
                "# </weight>"
              ]
            },
            {
              "name": "kick",
              "fields": [
                {
                  "name": "who",
                  "type": 136,
                  "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Remove the given nominations from the calling validator.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "- `who`: A list of nominator stash accounts who are nominating this validator which",
                "  should no longer be nominating this validator.",
                "",
                "Note: Making this call only makes sense if you first set the validator preferences to",
                "block any further nominations."
              ]
            },
            {
              "name": "set_staking_limits",
              "fields": [
                {
                  "name": "min_nominator_bond",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "min_validator_bond",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "max_nominator_count",
                  "type": 139,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "max_validator_count",
                  "type": 139,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 140,
                  "typeName": "Option<Percent>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Update the various staking limits this pallet.",
                "",
                "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                "* `max_nominator_count`: The max number of users who can be a nominator at once.",
                "  When set to `None`, no limit is enforced.",
                "* `max_validator_count`: The max number of users who can be a validator at once.",
                "  When set to `None`, no limit is enforced.",
                "",
                "Origin must be Root to call this function.",
                "",
                "NOTE: Existing nominators and validators will not be affected by this update.",
                "to kick people under the new limits, `chill_other` should be called."
              ]
            },
            {
              "name": "chill_other",
              "fields": [
                {
                  "name": "controller",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Declare a `controller` to stop participating as either a validator or nominator.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                "",
                "If the caller is the same as the controller being targeted, then no further checks are",
                "enforced, and this function behaves just like `chill`.",
                "",
                "If the caller is different than the controller being targeted, the following conditions",
                "must be met:",
                "* A `ChillThreshold` must be set and checked which defines how close to the max",
                "  nominators or validators we must reach before users can start chilling one-another.",
                "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                "  how close we are to the threshold.",
                "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                "  if this is a person that should be chilled because they have not met the threshold",
                "  bond required.",
                "",
                "This can be helpful if bond requirements are updated, and we need to remove old users",
                "who do not satisfy these requirements."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 133,
    "type": {
      "path": [
        "pallet_staking",
        "RewardDestination"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Staked",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Stash",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Controller",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Account",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 134,
    "type": {
      "path": [
        "pallet_staking",
        "ValidatorPrefs"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "commission",
              "type": 135,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "blocked",
              "type": 59,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 135,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 91
        }
      },
      "docs": []
    }
  },
  {
    "id": 136,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 128
        }
      },
      "docs": []
    }
  },
  {
    "id": 137,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Percent"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 138,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 139,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 140,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 137
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 137,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 141,
    "type": {
      "path": [
        "pallet_session",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_keys",
              "fields": [
                {
                  "name": "keys",
                  "type": 142,
                  "typeName": "T::Keys",
                  "docs": []
                },
                {
                  "name": "proof",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Sets the session key(s) of the function caller to `keys`.",
                "Allows an account to set its session key prior to becoming a validator.",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be signed.",
                "",
                "# <weight>",
                "- Complexity: `O(1)`",
                "  Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                "- DbWrites: `origin account`, `NextKeys`",
                "- DbReads per key id: `KeyOwner`",
                "- DbWrites per key id: `KeyOwner`",
                "# </weight>"
              ]
            },
            {
              "name": "purge_keys",
              "fields": [],
              "index": 1,
              "docs": [
                "Removes any session key(s) of the function caller.",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be signed.",
                "",
                "# <weight>",
                "- Complexity: `O(1)` in number of key types.",
                "  Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                "- DbWrites: `NextKeys`, `origin account`",
                "- DbWrites per key id: `KeyOwner`",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ]
    }
  },
  {
    "id": 142,
    "type": {
      "path": [
        "polkadot_runtime",
        "SessionKeys"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "grandpa",
              "type": 43,
              "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "babe",
              "type": 118,
              "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "im_online",
              "type": 46,
              "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "para_validator",
              "type": 143,
              "typeName": "<ParachainSessionKeyPlaceholder<Runtime> as $crate::\nBoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "para_assignment",
              "type": 144,
              "typeName": "<AssignmentSessionKeyPlaceholder<Runtime> as $crate::\nBoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "authority_discovery",
              "type": 145,
              "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 143,
    "type": {
      "path": [
        "polkadot_primitives",
        "v0",
        "validator_app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 47,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 144,
    "type": {
      "path": [
        "polkadot_primitives",
        "v1",
        "assignment_app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 47,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 145,
    "type": {
      "path": [
        "sp_authority_discovery",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 47,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 146,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 147,
                  "typeName": "EquivocationProof<T::Hash, T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 120,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 147,
                  "typeName": "EquivocationProof<T::Hash, T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 120,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported.",
                "",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "note_stalled",
              "fields": [
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "best_finalized_block_number",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Note that the current authority set of the GRANDPA finality gadget has",
                "stalled. This will trigger a forced authority set change at the beginning",
                "of the next session, to be enacted `delay` blocks after that. The delay",
                "should be high enough to safely assume that the block signalling the",
                "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                "will start the new authority set using the given finalized block as base.",
                "Only callable by root."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 147,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "EquivocationProof"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "set_id",
              "type": 8,
              "typeName": "SetId",
              "docs": []
            },
            {
              "name": "equivocation",
              "type": 148,
              "typeName": "Equivocation<H, N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 148,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Prevote",
              "fields": [
                {
                  "name": null,
                  "type": 149,
                  "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Precommit",
              "fields": [
                {
                  "name": null,
                  "type": 155,
                  "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 149,
    "type": {
      "path": [
        "finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "Id",
          "type": 43
        },
        {
          "name": "V",
          "type": 150
        },
        {
          "name": "S",
          "type": 151
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "round_number",
              "type": 8,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "type": 43,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "type": 154,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "type": 154,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 150,
    "type": {
      "path": [
        "finality_grandpa",
        "Prevote"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "target_hash",
              "type": 9,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 151,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "app",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 152,
              "typeName": "ed25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 152,
    "type": {
      "path": [
        "sp_core",
        "ed25519",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 153,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 153,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 64,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 154,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          150,
          151
        ]
      },
      "docs": []
    }
  },
  {
    "id": 155,
    "type": {
      "path": [
        "finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "Id",
          "type": 43
        },
        {
          "name": "V",
          "type": 156
        },
        {
          "name": "S",
          "type": 151
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "round_number",
              "type": 8,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "type": 43,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "type": 157,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "type": 157,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 156,
    "type": {
      "path": [
        "finality_grandpa",
        "Precommit"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "target_hash",
              "type": 9,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 157,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          156,
          151
        ]
      },
      "docs": []
    }
  },
  {
    "id": 158,
    "type": {
      "path": [
        "pallet_im_online",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "heartbeat",
              "fields": [
                {
                  "name": "heartbeat",
                  "type": 159,
                  "typeName": "Heartbeat<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 164,
                  "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "# <weight>",
                "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len)",
                "  and E is length of `heartbeat.network_state.external_address`",
                "  - `O(K)`: decoding of length `K`",
                "  - `O(E)`: decoding/encoding of length `E`",
                "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                "  `ReceivedHeartbeats`",
                "- DbWrites: `ReceivedHeartbeats`",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 159,
    "type": {
      "path": [
        "pallet_im_online",
        "Heartbeat"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "block_number",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "network_state",
              "type": 160,
              "typeName": "OpaqueNetworkState",
              "docs": []
            },
            {
              "name": "session_index",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "authority_index",
              "type": 4,
              "typeName": "AuthIndex",
              "docs": []
            },
            {
              "name": "validators_len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 160,
    "type": {
      "path": [
        "sp_core",
        "offchain",
        "OpaqueNetworkState"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "peer_id",
              "type": 161,
              "typeName": "OpaquePeerId",
              "docs": []
            },
            {
              "name": "external_addresses",
              "type": 162,
              "typeName": "Vec<OpaqueMultiaddr>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 161,
    "type": {
      "path": [
        "sp_core",
        "OpaquePeerId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 162,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 163
        }
      },
      "docs": []
    }
  },
  {
    "id": 163,
    "type": {
      "path": [
        "sp_core",
        "offchain",
        "OpaqueMultiaddr"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 164,
    "type": {
      "path": [
        "pallet_im_online",
        "sr25519",
        "app_sr25519",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 165,
              "typeName": "sr25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 165,
    "type": {
      "path": [
        "sp_core",
        "sr25519",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 153,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 166,
    "type": {
      "path": [
        "pallet_democracy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "propose",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Propose a sensitive action to be taken.",
                "",
                "The dispatch origin of this call must be _Signed_ and the sender must",
                "have funds to cover the deposit.",
                "",
                "- `proposal_hash`: The hash of the proposal preimage.",
                "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                "",
                "Emits `Proposed`.",
                "",
                "Weight: `O(p)`"
              ]
            },
            {
              "name": "second",
              "fields": [
                {
                  "name": "proposal",
                  "type": 88,
                  "typeName": "PropIndex",
                  "docs": []
                },
                {
                  "name": "seconds_upper_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Signals agreement with a particular proposal.",
                "",
                "The dispatch origin of this call must be _Signed_ and the sender",
                "must have funds to cover the deposit, equal to the original deposit.",
                "",
                "- `proposal`: The index of the proposal to second.",
                "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                "  proposal. Extrinsic is weighted according to this value with no refund.",
                "",
                "Weight: `O(S)` where S is the number of seconds a proposal already has."
              ]
            },
            {
              "name": "vote",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 88,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": "vote",
                  "type": 167,
                  "typeName": "AccountVote<BalanceOf<T>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                "otherwise it is a vote to keep the status quo.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `ref_index`: The index of the referendum to vote for.",
                "- `vote`: The vote configuration.",
                "",
                "Weight: `O(R)` where R is the number of referendums the voter has voted on."
              ]
            },
            {
              "name": "emergency_cancel",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                "referendum.",
                "",
                "The dispatch origin of this call must be `CancellationOrigin`.",
                "",
                "-`ref_index`: The index of the referendum to cancel.",
                "",
                "Weight: `O(1)`."
              ]
            },
            {
              "name": "external_propose",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Schedule a referendum to be tabled once it is legal to schedule an external",
                "referendum.",
                "",
                "The dispatch origin of this call must be `ExternalOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal.",
                "",
                "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                "  Decoding vec of length V. Charged as maximum"
              ]
            },
            {
              "name": "external_propose_majority",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                "an external referendum.",
                "",
                "The dispatch of this call must be `ExternalMajorityOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal.",
                "",
                "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                "pre-scheduled `external_propose` call.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "external_propose_default",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                "schedule an external referendum.",
                "",
                "The dispatch of this call must be `ExternalDefaultOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal.",
                "",
                "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                "pre-scheduled `external_propose` call.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "fast_track",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "voting_period",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                "immediately. If there is no externally-proposed referendum currently, or if there is one",
                "but it is not a majority-carries referendum then it fails.",
                "",
                "The dispatch of this call must be `FastTrackOrigin`.",
                "",
                "- `proposal_hash`: The hash of the current external proposal.",
                "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                "  `FastTrackVotingPeriod` if too low.",
                "- `delay`: The number of block after voting has ended in approval and this should be",
                "  enacted. This doesn't have a minimum amount.",
                "",
                "Emits `Started`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "veto_external",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Veto and blacklist the external proposal hash.",
                "",
                "The dispatch origin of this call must be `VetoOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                "",
                "Emits `Vetoed`.",
                "",
                "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
              ]
            },
            {
              "name": "cancel_referendum",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 88,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Remove a referendum.",
                "",
                "The dispatch origin of this call must be _Root_.",
                "",
                "- `ref_index`: The index of the referendum to cancel.",
                "",
                "# Weight: `O(1)`."
              ]
            },
            {
              "name": "cancel_queued",
              "fields": [
                {
                  "name": "which",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Cancel a proposal queued for enactment.",
                "",
                "The dispatch origin of this call must be _Root_.",
                "",
                "- `which`: The index of the referendum to cancel.",
                "",
                "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
              ]
            },
            {
              "name": "delegate",
              "fields": [
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "type": 169,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Delegate the voting power (with some given conviction) of the sending account.",
                "",
                "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                "time appropriate for the conviction's lock period.",
                "",
                "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                "  - be delegating already; or",
                "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                "    through `reap_vote` or `unvote`).",
                "",
                "- `to`: The account whose voting the `target` account's voting power will follow.",
                "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                "  account is undelegated, the funds will be locked for the corresponding period.",
                "- `balance`: The amount of the account's balance to be used in delegating. This must",
                "  not be more than the account's current balance.",
                "",
                "Emits `Delegated`.",
                "",
                "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                "  voted on. Weight is charged as if maximum votes."
              ]
            },
            {
              "name": "undelegate",
              "fields": [],
              "index": 12,
              "docs": [
                "Undelegate the voting power of the sending account.",
                "",
                "Tokens may be unlocked following once an amount of time consistent with the lock period",
                "of the conviction with which the delegation was issued.",
                "",
                "The dispatch origin of this call must be _Signed_ and the signing account must be",
                "currently delegating.",
                "",
                "Emits `Undelegated`.",
                "",
                "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                "  voted on. Weight is charged as if maximum votes."
              ]
            },
            {
              "name": "clear_public_proposals",
              "fields": [],
              "index": 13,
              "docs": [
                "Clears all public proposals.",
                "",
                "The dispatch origin of this call must be _Root_.",
                "",
                "Weight: `O(1)`."
              ]
            },
            {
              "name": "note_preimage",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                "in the dispatch queue but does require a deposit, returned once enacted.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `encoded_proposal`: The preimage of a proposal.",
                "",
                "Emits `PreimageNoted`.",
                "",
                "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
              ]
            },
            {
              "name": "note_preimage_operational",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
              ]
            },
            {
              "name": "note_imminent_preimage",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Register the preimage for an upcoming proposal. This requires the proposal to be",
                "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                "the preimage has not been uploaded before and matches some imminent proposal,",
                "no fee is paid.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `encoded_proposal`: The preimage of a proposal.",
                "",
                "Emits `PreimageNoted`.",
                "",
                "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
              ]
            },
            {
              "name": "note_imminent_preimage_operational",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
              ]
            },
            {
              "name": "reap_preimage",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "proposal_len_upper_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Remove an expired proposal preimage and collect the deposit.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `proposal_hash`: The preimage hash of a proposal.",
                "- `proposal_length_upper_bound`: an upper bound on length of the proposal.",
                "  Extrinsic is weighted according to this value with no refund.",
                "",
                "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                "noted, if it's the same account doing it. If it's a different account, then it'll only",
                "work an additional `EnactmentPeriod` later.",
                "",
                "Emits `PreimageReaped`.",
                "",
                "Weight: `O(D)` where D is length of proposal."
              ]
            },
            {
              "name": "unlock",
              "fields": [
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Unlock tokens that have an expired lock.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `target`: The account to remove the lock on.",
                "",
                "Weight: `O(R)` with R number of vote of target."
              ]
            },
            {
              "name": "remove_vote",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Remove a vote for a referendum.",
                "",
                "If:",
                "- the referendum was cancelled, or",
                "- the referendum is ongoing, or",
                "- the referendum has ended such that",
                "  - the vote of the account was in opposition to the result; or",
                "  - there was no conviction to the account's vote; or",
                "  - the account made a split vote",
                "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                "funds being available.",
                "",
                "If, however, the referendum has ended and:",
                "- it finished corresponding to the vote of the account, and",
                "- the account made a standard vote with conviction, and",
                "- the lock period of the conviction is not over",
                "...then the lock will be aggregated into the overall account's lock, which may involve",
                "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                "of both the amount locked and the time is it locked for).",
                "",
                "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                "registered for referendum `index`.",
                "",
                "- `index`: The index of referendum of the vote to be removed.",
                "",
                "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                "  Weight is calculated for the maximum number of vote."
              ]
            },
            {
              "name": "remove_other_vote",
              "fields": [
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Remove a vote for a referendum.",
                "",
                "If the `target` is equal to the signer, then this function is exactly equivalent to",
                "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                "either because the referendum was cancelled, because the voter lost the referendum or",
                "because the conviction period is over.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `target`: The account of the vote to be removed; this account must have voted for",
                "  referendum `index`.",
                "- `index`: The index of referendum of the vote to be removed.",
                "",
                "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                "  Weight is calculated for the maximum number of vote."
              ]
            },
            {
              "name": "enact_proposal",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Enact a proposal from a referendum. For now we just make the weight be the maximum."
              ]
            },
            {
              "name": "blacklist",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "maybe_ref_index",
                  "type": 139,
                  "typeName": "Option<ReferendumIndex>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Permanently place a proposal into the blacklist. This prevents it from ever being",
                "proposed again.",
                "",
                "If called on a queued public or external proposal, then this will result in it being",
                "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                "then it will be cancelled.",
                "",
                "The dispatch origin of this call must be `BlacklistOrigin`.",
                "",
                "- `proposal_hash`: The proposal hash to blacklist permanently.",
                "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                "cancelled.",
                "",
                "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                "  reasonable value)."
              ]
            },
            {
              "name": "cancel_proposal",
              "fields": [
                {
                  "name": "prop_index",
                  "type": 88,
                  "typeName": "PropIndex",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Remove a proposal.",
                "",
                "The dispatch origin of this call must be `CancelProposalOrigin`.",
                "",
                "- `prop_index`: The index of the proposal to cancel.",
                "",
                "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 167,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "AccountVote"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Standard",
              "fields": [
                {
                  "name": "vote",
                  "type": 168,
                  "typeName": "Vote",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Split",
              "fields": [
                {
                  "name": "aye",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "nay",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 168,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "Vote"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 2,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 169,
    "type": {
      "path": [
        "pallet_democracy",
        "conviction",
        "Conviction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Locked1x",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Locked2x",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Locked3x",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Locked4x",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Locked5x",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Locked6x",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 170,
    "type": {
      "path": [
        "pallet_collective",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_members",
              "fields": [
                {
                  "name": "new_members",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "prime",
                  "type": 171,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "old_count",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the collective's membership.",
                "",
                "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                "- `prime`: The prime member whose vote sets the default.",
                "- `old_count`: The upper bound for the previous number of members in storage.",
                "               Used for weight estimation.",
                "",
                "Requires root origin.",
                "",
                "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                "      the weight estimations rely on it to estimate dispatchable weight.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(MP + N)` where:",
                "  - `M` old-members-count (code- and governance-bounded)",
                "  - `N` new-members-count (code- and governance-bounded)",
                "  - `P` proposals-count (code-bounded)",
                "- DB:",
                "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                "  - 1 storage read (codec `O(P)`) for reading the proposals",
                "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                "# </weight>"
              ]
            },
            {
              "name": "execute",
              "fields": [
                {
                  "name": "proposal",
                  "type": 111,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Dispatch a proposal from a member using the `Member` origin.",
                "",
                "Origin must be a member of the collective.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "propose",
              "fields": [
                {
                  "name": "threshold",
                  "type": 88,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "type": 111,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Add a new proposal to either be voted on or executed directly.",
                "",
                "Requires the sender to be member.",
                "",
                "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                "or put up for voting.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - branching is influenced by `threshold` where:",
                "    - `P1` is proposal execution complexity (`threshold < 2`)",
                "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                "- DB:",
                "  - 1 storage read `is_member` (codec `O(M)`)",
                "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "  - DB accesses influenced by `threshold`:",
                "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                "    - OR proposal insertion (`threshold <= 2`)",
                "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                "      - 1 storage write `Voting` (codec `O(M)`)",
                "  - 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "vote",
              "fields": [
                {
                  "name": "proposal",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 88,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "approve",
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Add an aye or nay vote for the sender to the given proposal.",
                "",
                "Requires the sender to be a member.",
                "",
                "Transaction fees will be waived if the member is voting on any particular proposal",
                "for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                "# <weight>",
                "## Weight",
                "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                "- DB:",
                "  - 1 storage read `Members` (codec `O(M)`)",
                "  - 1 storage mutation `Voting` (codec `O(M)`)",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "close",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 88,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "proposal_weight_bound",
                  "type": 125,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Close a vote that is either approved, disapproved or whose voting period has ended.",
                "",
                "May be called by any signed account in order to finish voting and close the proposal.",
                "",
                "If called before the end of the voting period it will only close the vote if it is",
                "has enough votes to be approved or disapproved.",
                "",
                "If called after the end of the voting period abstentions are counted as rejections",
                "unless there is a prime member set and the prime member cast an approval.",
                "",
                "If the close operation completes successfully with disapproval, the transaction fee will",
                "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                "",
                "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "                  `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1 + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - `P1` is the complexity of `proposal` preimage.",
                "  - `P2` is proposal-count (code-bounded)",
                "- DB:",
                " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                " - any mutations done while executing `proposal` (`P1`)",
                "- up to 3 events",
                "# </weight>"
              ]
            },
            {
              "name": "disapprove_proposal",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                "",
                "Must be called by the Root origin.",
                "",
                "Parameters:",
                "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                "",
                "# <weight>",
                "Complexity: O(P) where P is the number of max proposals",
                "DB Weight:",
                "* Reads: Proposals",
                "* Writes: Voting, Proposals, ProposalOf",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ]
    }
  },
  {
    "id": 171,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 172,
    "type": {
      "path": [
        "pallet_collective",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_members",
              "fields": [
                {
                  "name": "new_members",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "prime",
                  "type": 171,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "old_count",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the collective's membership.",
                "",
                "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                "- `prime`: The prime member whose vote sets the default.",
                "- `old_count`: The upper bound for the previous number of members in storage.",
                "               Used for weight estimation.",
                "",
                "Requires root origin.",
                "",
                "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                "      the weight estimations rely on it to estimate dispatchable weight.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(MP + N)` where:",
                "  - `M` old-members-count (code- and governance-bounded)",
                "  - `N` new-members-count (code- and governance-bounded)",
                "  - `P` proposals-count (code-bounded)",
                "- DB:",
                "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                "  - 1 storage read (codec `O(P)`) for reading the proposals",
                "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                "# </weight>"
              ]
            },
            {
              "name": "execute",
              "fields": [
                {
                  "name": "proposal",
                  "type": 111,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Dispatch a proposal from a member using the `Member` origin.",
                "",
                "Origin must be a member of the collective.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "propose",
              "fields": [
                {
                  "name": "threshold",
                  "type": 88,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "type": 111,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Add a new proposal to either be voted on or executed directly.",
                "",
                "Requires the sender to be member.",
                "",
                "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                "or put up for voting.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - branching is influenced by `threshold` where:",
                "    - `P1` is proposal execution complexity (`threshold < 2`)",
                "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                "- DB:",
                "  - 1 storage read `is_member` (codec `O(M)`)",
                "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "  - DB accesses influenced by `threshold`:",
                "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                "    - OR proposal insertion (`threshold <= 2`)",
                "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                "      - 1 storage write `Voting` (codec `O(M)`)",
                "  - 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "vote",
              "fields": [
                {
                  "name": "proposal",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 88,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "approve",
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Add an aye or nay vote for the sender to the given proposal.",
                "",
                "Requires the sender to be a member.",
                "",
                "Transaction fees will be waived if the member is voting on any particular proposal",
                "for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                "# <weight>",
                "## Weight",
                "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                "- DB:",
                "  - 1 storage read `Members` (codec `O(M)`)",
                "  - 1 storage mutation `Voting` (codec `O(M)`)",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "close",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 88,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "proposal_weight_bound",
                  "type": 125,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Close a vote that is either approved, disapproved or whose voting period has ended.",
                "",
                "May be called by any signed account in order to finish voting and close the proposal.",
                "",
                "If called before the end of the voting period it will only close the vote if it is",
                "has enough votes to be approved or disapproved.",
                "",
                "If called after the end of the voting period abstentions are counted as rejections",
                "unless there is a prime member set and the prime member cast an approval.",
                "",
                "If the close operation completes successfully with disapproval, the transaction fee will",
                "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                "",
                "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "                  `storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1 + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - `P1` is the complexity of `proposal` preimage.",
                "  - `P2` is proposal-count (code-bounded)",
                "- DB:",
                " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                " - any mutations done while executing `proposal` (`P1`)",
                "- up to 3 events",
                "# </weight>"
              ]
            },
            {
              "name": "disapprove_proposal",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                "",
                "Must be called by the Root origin.",
                "",
                "Parameters:",
                "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                "",
                "# <weight>",
                "Complexity: O(P) where P is the number of max proposals",
                "DB Weight:",
                "* Reads: Proposals",
                "* Writes: Voting, Proposals, ProposalOf",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ]
    }
  },
  {
    "id": 173,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "vote",
              "fields": [
                {
                  "name": "votes",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Vote for a set of candidates for the upcoming round of election. This can be called to",
                "set the initial votes, or update already existing votes.",
                "",
                "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                "reserved. The deposit is based on the number of votes and can be updated over time.",
                "",
                "The `votes` should:",
                "  - not be empty.",
                "  - be less than the number of possible candidates. Note that all current members and",
                "    runners-up are also automatically candidates for the next round.",
                "",
                "If `value` is more than `who`'s total balance, then the maximum of the two is used.",
                "",
                "The dispatch origin of this call must be signed.",
                "",
                "### Warning",
                "",
                "It is the responsibility of the caller to **NOT** place all of their balance into the",
                "lock and keep some for further operations.",
                "",
                "# <weight>",
                "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                "# </weight>"
              ]
            },
            {
              "name": "remove_voter",
              "fields": [],
              "index": 1,
              "docs": [
                "Remove `origin` as a voter.",
                "",
                "This removes the lock and returns the deposit.",
                "",
                "The dispatch origin of this call must be signed and be a voter."
              ]
            },
            {
              "name": "submit_candidacy",
              "fields": [
                {
                  "name": "candidate_count",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                "",
                "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                "or leave the system while their deposit is slashed.",
                "",
                "The dispatch origin of this call must be signed.",
                "",
                "### Warning",
                "",
                "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                "",
                "# <weight>",
                "The number of current candidates must be provided as witness data.",
                "# </weight>"
              ]
            },
            {
              "name": "renounce_candidacy",
              "fields": [
                {
                  "name": "renouncing",
                  "type": 174,
                  "typeName": "Renouncing",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Renounce one's intention to be a candidate for the next election round. 3 potential",
                "outcomes exist:",
                "",
                "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                "  unreserved, returned and origin is removed as a candidate.",
                "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                "  origin is removed as a runner-up.",
                "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                "  removed as a member, consequently not being a candidate for the next round anymore.",
                "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists,",
                "  they are immediately used. If the prime is renouncing, then no prime will exist until",
                "  the next round.",
                "",
                "The dispatch origin of this call must be signed, and have one of the above roles.",
                "",
                "# <weight>",
                "The type of renouncing must be provided as witness data.",
                "# </weight>"
              ]
            },
            {
              "name": "remove_member",
              "fields": [
                {
                  "name": "who",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "has_replacement",
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Remove a particular member from the set. This is effective immediately and the bond of",
                "the outgoing member is slashed.",
                "",
                "If a runner-up is available, then the best runner-up will be removed and replaces the",
                "outgoing member. Otherwise, a new phragmen election is started.",
                "",
                "The dispatch origin of this call must be root.",
                "",
                "Note that this does not affect the designated block number of the next election.",
                "",
                "# <weight>",
                "If we have a replacement, we use a small weight. Else, since this is a root call and",
                "will go into phragmen, we assume full block for now.",
                "# </weight>"
              ]
            },
            {
              "name": "clean_defunct_voters",
              "fields": [
                {
                  "name": "num_voters",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "num_defunct",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                "deposit of the removed voters are returned.",
                "",
                "This is an root function to be used only for cleaning the state.",
                "",
                "The dispatch origin of this call must be root.",
                "",
                "# <weight>",
                "The total number of voters and those that are defunct must be provided as witness data.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 174,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "Renouncing"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Member",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "RunnerUp",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Candidate",
              "fields": [
                {
                  "name": null,
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 175,
    "type": {
      "path": [
        "pallet_membership",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "add_member",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Add a member `who` to the set.",
                "",
                "May only be called from `T::AddOrigin`."
              ]
            },
            {
              "name": "remove_member",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Remove a member `who` from the set.",
                "",
                "May only be called from `T::RemoveOrigin`."
              ]
            },
            {
              "name": "swap_member",
              "fields": [
                {
                  "name": "remove",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "add",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Swap out one member `remove` for another `add`.",
                "",
                "May only be called from `T::SwapOrigin`.",
                "",
                "Prime membership is *not* passed from `remove` to `add`, if extant."
              ]
            },
            {
              "name": "reset_members",
              "fields": [
                {
                  "name": "members",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Change the membership to a new set, disregarding the existing membership. Be nice and",
                "pass `members` pre-sorted.",
                "",
                "May only be called from `T::ResetOrigin`."
              ]
            },
            {
              "name": "change_key",
              "fields": [
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Swap out the sending member for some other key `new`.",
                "",
                "May only be called from `Signed` origin of a current member.",
                "",
                "Prime membership is passed from the origin account to `new`, if extant."
              ]
            },
            {
              "name": "set_prime",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set the prime member. Must be a current member.",
                "",
                "May only be called from `T::PrimeOrigin`."
              ]
            },
            {
              "name": "clear_prime",
              "fields": [],
              "index": 6,
              "docs": [
                "Remove the prime member if it exists.",
                "",
                "May only be called from `T::PrimeOrigin`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ]
    }
  },
  {
    "id": 176,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "propose_spend",
              "fields": [
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Put forward a suggestion for spending. A deposit proportional to the value",
                "is reserved and slashed if the proposal is rejected. It is returned once the",
                "proposal is awarded.",
                "",
                "# <weight>",
                "- Complexity: O(1)",
                "- DbReads: `ProposalCount`, `origin account`",
                "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                "# </weight>"
              ]
            },
            {
              "name": "reject_proposal",
              "fields": [
                {
                  "name": "proposal_id",
                  "type": 88,
                  "typeName": "ProposalIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Reject a proposed spend. The original deposit will be slashed.",
                "",
                "May only be called from `T::RejectOrigin`.",
                "",
                "# <weight>",
                "- Complexity: O(1)",
                "- DbReads: `Proposals`, `rejected proposer account`",
                "- DbWrites: `Proposals`, `rejected proposer account`",
                "# </weight>"
              ]
            },
            {
              "name": "approve_proposal",
              "fields": [
                {
                  "name": "proposal_id",
                  "type": 88,
                  "typeName": "ProposalIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                "and the original deposit will be returned.",
                "",
                "May only be called from `T::ApproveOrigin`.",
                "",
                "# <weight>",
                "- Complexity: O(1).",
                "- DbReads: `Proposals`, `Approvals`",
                "- DbWrite: `Approvals`",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 177,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "claim",
              "fields": [
                {
                  "name": "dest",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "ethereum_signature",
                  "type": 178,
                  "typeName": "EcdsaSignature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Make a claim to collect your DOTs.",
                "",
                "The dispatch origin for this call must be _None_.",
                "",
                "Unsigned Validation:",
                "A call to claim is deemed valid if the signature provided matches",
                "the expected signed message of:",
                "",
                "> Ethereum Signed Message:",
                "> (configured prefix string)(address)",
                "",
                "and `address` matches the `dest` account.",
                "",
                "Parameters:",
                "- `dest`: The destination account to payout the claim.",
                "- `ethereum_signature`: The signature of an ethereum signed message",
                "   matching the format described above.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "Weight includes logic to validate unsigned `claim` call.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "mint_claim",
              "fields": [
                {
                  "name": "who",
                  "type": 69,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "vesting_schedule",
                  "type": 180,
                  "typeName": "Option<(BalanceOf<T>, BalanceOf<T>, T::BlockNumber)>",
                  "docs": []
                },
                {
                  "name": "statement",
                  "type": 182,
                  "typeName": "Option<StatementKind>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Mint a new claim to collect DOTs.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "Parameters:",
                "- `who`: The Ethereum address allowed to collect this claim.",
                "- `value`: The number of DOTs that will be claimed.",
                "- `vesting_schedule`: An optional vesting schedule for these DOTs.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "We assume worst case that both vesting and statement is being inserted.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "claim_attest",
              "fields": [
                {
                  "name": "dest",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "ethereum_signature",
                  "type": 178,
                  "typeName": "EcdsaSignature",
                  "docs": []
                },
                {
                  "name": "statement",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Make a claim to collect your DOTs by signing a statement.",
                "",
                "The dispatch origin for this call must be _None_.",
                "",
                "Unsigned Validation:",
                "A call to `claim_attest` is deemed valid if the signature provided matches",
                "the expected signed message of:",
                "",
                "> Ethereum Signed Message:",
                "> (configured prefix string)(address)(statement)",
                "",
                "and `address` matches the `dest` account; the `statement` must match that which is",
                "expected according to your purchase arrangement.",
                "",
                "Parameters:",
                "- `dest`: The destination account to payout the claim.",
                "- `ethereum_signature`: The signature of an ethereum signed message",
                "   matching the format described above.",
                "- `statement`: The identity of the statement which is being attested to in the signature.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "Weight includes logic to validate unsigned `claim_attest` call.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "attest",
              "fields": [
                {
                  "name": "statement",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Attest to a statement, needed to finalize the claims process.",
                "",
                "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a `SignedExtension`.",
                "",
                "Unsigned Validation:",
                "A call to attest is deemed valid if the sender has a `Preclaim` registered",
                "and provides a `statement` which is expected for the account.",
                "",
                "Parameters:",
                "- `statement`: The identity of the statement which is being attested to in the signature.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "Weight includes logic to do pre-validation on `attest` call.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "move_claim",
              "fields": [
                {
                  "name": "old",
                  "type": 69,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 69,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": "maybe_preclaim",
                  "type": 171,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 178,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "EcdsaSignature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 179,
              "typeName": "[u8; 65]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 179,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 65,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 180,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 181
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 181,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 181,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          6,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 182,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 183
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 183,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 183,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "StatementKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Regular",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Saft",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 184,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "vest",
              "fields": [],
              "index": 0,
              "docs": [
                "Unlock any vested funds of the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 2 Reads, 2 Writes",
                "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                "# </weight>"
              ]
            },
            {
              "name": "vest_other",
              "fields": [
                {
                  "name": "target",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Unlock any vested funds of a `target` account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 3 Reads, 3 Writes",
                "    - Reads: Vesting Storage, Balances Locks, Target Account",
                "    - Writes: Vesting Storage, Balances Locks, Target Account",
                "# </weight>"
              ]
            },
            {
              "name": "vested_transfer",
              "fields": [
                {
                  "name": "target",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 185,
                  "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Create a vested transfer.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account that should be transferred the vested funds.",
                "- `amount`: The amount of funds to transfer and will be vested.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 3 Reads, 3 Writes",
                "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                "# </weight>"
              ]
            },
            {
              "name": "force_vested_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 185,
                  "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force a vested transfer.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `source`: The account whose funds should be transferred.",
                "- `target`: The account that should be transferred the vested funds.",
                "- `amount`: The amount of funds to transfer and will be vested.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 4 Reads, 4 Writes",
                "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 185,
    "type": {
      "path": [
        "pallet_vesting",
        "VestingInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "locked",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "per_block",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "starting_block",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 186,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "batch",
              "fields": [
                {
                  "name": "calls",
                  "type": 187,
                  "typeName": "Vec<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Send a batch of dispatch calls.",
                "",
                "May be called from any origin.",
                "",
                "- `calls`: The calls to be dispatched from the same origin.",
                "",
                "If origin is root then call are dispatch without checking origin filter. (This includes",
                "bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "# <weight>",
                "- Complexity: O(C) where C is the number of calls to be batched.",
                "# </weight>",
                "",
                "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                "event is deposited. If a call failed and the batch was interrupted, then the",
                "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                "event is deposited."
              ]
            },
            {
              "name": "as_derivative",
              "fields": [
                {
                  "name": "index",
                  "type": 76,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Send a call through an indexed pseudonym of the sender.",
                "",
                "Filter from origin are passed along. The call will be dispatched with an origin which",
                "use the same filter as the origin of this call.",
                "",
                "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                "because you expect `proxy` to have been used prior in the call stack and you do not want",
                "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                "in the Multisig pallet instead.",
                "",
                "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                "",
                "The dispatch origin for this call must be _Signed_."
              ]
            },
            {
              "name": "batch_all",
              "fields": [
                {
                  "name": "calls",
                  "type": 187,
                  "typeName": "Vec<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Send a batch of dispatch calls and atomically execute them.",
                "The whole transaction will rollback and fail if any of the calls failed.",
                "",
                "May be called from any origin.",
                "",
                "- `calls`: The calls to be dispatched from the same origin.",
                "",
                "If origin is root then call are dispatch without checking origin filter. (This includes",
                "bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "# <weight>",
                "- Complexity: O(C) where C is the number of calls to be batched.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 187,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 111
        }
      },
      "docs": []
    }
  },
  {
    "id": 188,
    "type": {
      "path": [
        "pallet_identity",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "add_registrar",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Add a registrar to the system.",
                "",
                "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                "",
                "- `account`: the account of the registrar.",
                "",
                "Emits `RegistrarAdded` if successful.",
                "",
                "# <weight>",
                "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                "- One storage mutation (codec `O(R)`).",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "set_identity",
              "fields": [
                {
                  "name": "info",
                  "type": 189,
                  "typeName": "IdentityInfo<T::MaxAdditionalFields>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set an account's identity information and reserve the appropriate deposit.",
                "",
                "If the account already has identity information, the deposit is taken as part payment",
                "for the new deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `info`: The identity information.",
                "",
                "Emits `IdentitySet` if successful.",
                "",
                "# <weight>",
                "- `O(X + X' + R)`",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                "  - where `R` judgements-count (registrar-count-bounded)",
                "- One balance reserve operation.",
                "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "set_subs",
              "fields": [
                {
                  "name": "subs",
                  "type": 223,
                  "typeName": "Vec<(T::AccountId, Data)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the sub-accounts of the sender.",
                "",
                "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "identity.",
                "",
                "- `subs`: The identity's (new) sub-accounts.",
                "",
                "# <weight>",
                "- `O(P + S)`",
                "  - where `P` old-subs-count (hard- and deposit-bounded).",
                "  - where `S` subs-count (hard- and deposit-bounded).",
                "- At most one balance operations.",
                "- DB:",
                "  - `P + S` storage mutations (codec complexity `O(1)`)",
                "  - One storage read (codec complexity `O(P)`).",
                "  - One storage write (codec complexity `O(S)`).",
                "  - One storage-exists (`IdentityOf::contains_key`).",
                "# </weight>"
              ]
            },
            {
              "name": "clear_identity",
              "fields": [],
              "index": 3,
              "docs": [
                "Clear an account's identity info and all sub-accounts and return all deposits.",
                "",
                "Payment: All reserved balances on the account are returned.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "identity.",
                "",
                "Emits `IdentityCleared` if successful.",
                "",
                "# <weight>",
                "- `O(R + S + X)`",
                "  - where `R` registrar-count (governance-bounded).",
                "  - where `S` subs-count (hard- and deposit-bounded).",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                "- One balance-unreserve operation.",
                "- `2` storage reads and `S + 2` storage deletions.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "request_judgement",
              "fields": [
                {
                  "name": "reg_index",
                  "type": 88,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "max_fee",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Request a judgement from a registrar.",
                "",
                "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                "given.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                "registered identity.",
                "",
                "- `reg_index`: The index of the registrar whose judgement is requested.",
                "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                "",
                "```nocompile",
                "Self::registrars().get(reg_index).unwrap().fee",
                "```",
                "",
                "Emits `JudgementRequested` if successful.",
                "",
                "# <weight>",
                "- `O(R + X)`.",
                "- One balance-reserve operation.",
                "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_request",
              "fields": [
                {
                  "name": "reg_index",
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Cancel a previous request.",
                "",
                "Payment: A previously reserved deposit is returned on success.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                "registered identity.",
                "",
                "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                "",
                "Emits `JudgementUnrequested` if successful.",
                "",
                "# <weight>",
                "- `O(R + X)`.",
                "- One balance-reserve operation.",
                "- One storage mutation `O(R + X)`.",
                "- One event",
                "# </weight>"
              ]
            },
            {
              "name": "set_fee",
              "fields": [
                {
                  "name": "index",
                  "type": 88,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Set the fee required for a judgement to be requested from a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `fee`: the new fee.",
                "",
                "# <weight>",
                "- `O(R)`.",
                "- One storage mutation `O(R)`.",
                "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                "# </weight>"
              ]
            },
            {
              "name": "set_account_id",
              "fields": [
                {
                  "name": "index",
                  "type": 88,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Change the account associated with a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `new`: the new account ID.",
                "",
                "# <weight>",
                "- `O(R)`.",
                "- One storage mutation `O(R)`.",
                "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                "# </weight>"
              ]
            },
            {
              "name": "set_fields",
              "fields": [
                {
                  "name": "index",
                  "type": 88,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "fields",
                  "type": 225,
                  "typeName": "IdentityFields",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the field information for a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `fields`: the fields that the registrar concerns themselves with.",
                "",
                "# <weight>",
                "- `O(R)`.",
                "- One storage mutation `O(R)`.",
                "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                "# </weight>"
              ]
            },
            {
              "name": "provide_judgement",
              "fields": [
                {
                  "name": "reg_index",
                  "type": 88,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "judgement",
                  "type": 227,
                  "typeName": "Judgement<BalanceOf<T>>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Provide a judgement for an account's identity.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `reg_index`.",
                "",
                "- `reg_index`: the index of the registrar whose judgement is being made.",
                "- `target`: the account whose identity the judgement is upon. This must be an account",
                "  with a registered identity.",
                "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                "",
                "Emits `JudgementGiven` if successful.",
                "",
                "# <weight>",
                "- `O(R + X)`.",
                "- One balance-transfer operation.",
                "- Up to one account-lookup operation.",
                "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "kill_identity",
              "fields": [
                {
                  "name": "target",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Remove an account's identity and sub-account information and slash the deposits.",
                "",
                "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                "`Slash`. Verification request deposits are not returned; they should be cancelled",
                "manually using `cancel_request`.",
                "",
                "The dispatch origin for this call must match `T::ForceOrigin`.",
                "",
                "- `target`: the account whose identity the judgement is upon. This must be an account",
                "  with a registered identity.",
                "",
                "Emits `IdentityKilled` if successful.",
                "",
                "# <weight>",
                "- `O(R + S + X)`.",
                "- One balance-reserve operation.",
                "- `S + 2` storage mutations.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "add_sub",
              "fields": [
                {
                  "name": "sub",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 192,
                  "typeName": "Data",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Add the given account to the sender's subs.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "rename_sub",
              "fields": [
                {
                  "name": "sub",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 192,
                  "typeName": "Data",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Alter the associated name of the given sub-account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "remove_sub",
              "fields": [
                {
                  "name": "sub",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Remove the given account from the sender's subs.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "quit_sub",
              "fields": [],
              "index": 14,
              "docs": [
                "Remove the sender as a sub-account.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender (*not* the original depositor).",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "super-identity.",
                "",
                "NOTE: This should not normally be used, but is provided in the case that the non-",
                "controller of an account is maliciously registered as a sub-account."
              ]
            }
          ]
        }
      },
      "docs": [
        "Identity pallet declaration."
      ]
    }
  },
  {
    "id": 189,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "IdentityInfo"
      ],
      "params": [
        {
          "name": "FieldLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "additional",
              "type": 190,
              "typeName": "BoundedVec<(Data, Data), FieldLimit>",
              "docs": []
            },
            {
              "name": "display",
              "type": 192,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "legal",
              "type": 192,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "web",
              "type": 192,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "riot",
              "type": 192,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "email",
              "type": 192,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "pgp_fingerprint",
              "type": 222,
              "typeName": "Option<[u8; 20]>",
              "docs": []
            },
            {
              "name": "image",
              "type": 192,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "twitter",
              "type": 192,
              "typeName": "Data",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 190,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 191
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 221,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 191,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          192,
          192
        ]
      },
      "docs": []
    }
  },
  {
    "id": 192,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "Data"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Raw0",
              "fields": [
                {
                  "name": null,
                  "type": 193,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw1",
              "fields": [
                {
                  "name": null,
                  "type": 194,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Raw2",
              "fields": [
                {
                  "name": null,
                  "type": 195,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Raw3",
              "fields": [
                {
                  "name": null,
                  "type": 196,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Raw4",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Raw5",
              "fields": [
                {
                  "name": null,
                  "type": 197,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Raw6",
              "fields": [
                {
                  "name": null,
                  "type": 198,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Raw7",
              "fields": [
                {
                  "name": null,
                  "type": 199,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Raw8",
              "fields": [
                {
                  "name": null,
                  "type": 106,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Raw9",
              "fields": [
                {
                  "name": null,
                  "type": 200,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Raw10",
              "fields": [
                {
                  "name": null,
                  "type": 201,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Raw11",
              "fields": [
                {
                  "name": null,
                  "type": 202,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Raw12",
              "fields": [
                {
                  "name": null,
                  "type": 203,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Raw13",
              "fields": [
                {
                  "name": null,
                  "type": 204,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Raw14",
              "fields": [
                {
                  "name": null,
                  "type": 205,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Raw15",
              "fields": [
                {
                  "name": null,
                  "type": 206,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Raw16",
              "fields": [
                {
                  "name": null,
                  "type": 38,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Raw17",
              "fields": [
                {
                  "name": null,
                  "type": 207,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Raw18",
              "fields": [
                {
                  "name": null,
                  "type": 208,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Raw19",
              "fields": [
                {
                  "name": null,
                  "type": 209,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Raw20",
              "fields": [
                {
                  "name": null,
                  "type": 70,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Raw21",
              "fields": [
                {
                  "name": null,
                  "type": 210,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Raw22",
              "fields": [
                {
                  "name": null,
                  "type": 211,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Raw23",
              "fields": [
                {
                  "name": null,
                  "type": 212,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Raw24",
              "fields": [
                {
                  "name": null,
                  "type": 213,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Raw25",
              "fields": [
                {
                  "name": null,
                  "type": 214,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Raw26",
              "fields": [
                {
                  "name": null,
                  "type": 215,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Raw27",
              "fields": [
                {
                  "name": null,
                  "type": 216,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Raw28",
              "fields": [
                {
                  "name": null,
                  "type": 217,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Raw29",
              "fields": [
                {
                  "name": null,
                  "type": 218,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Raw30",
              "fields": [
                {
                  "name": null,
                  "type": 219,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Raw31",
              "fields": [
                {
                  "name": null,
                  "type": 220,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Raw32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "BlakeTwo256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Sha256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Keccak256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "ShaThree256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 193,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 0,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 194,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 1,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 195,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 196,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 197,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 5,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 198,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 6,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 199,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 7,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 200,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 9,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 201,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 10,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 202,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 11,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 203,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 12,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 204,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 13,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 205,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 14,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 206,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 15,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 207,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 17,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 208,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 18,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 209,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 19,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 210,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 21,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 211,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 22,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 212,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 23,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 213,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 24,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 214,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 25,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 215,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 26,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 216,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 27,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 217,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 28,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 218,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 29,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 219,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 30,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 220,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 31,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 221,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 191
        }
      },
      "docs": []
    }
  },
  {
    "id": 222,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 70
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 70,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 223,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 224
        }
      },
      "docs": []
    }
  },
  {
    "id": 224,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          192
        ]
      },
      "docs": []
    }
  },
  {
    "id": 225,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "BitFlags"
      ],
      "params": [
        {
          "name": "T",
          "type": 226
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 8,
              "typeName": "IdentityField",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 226,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "IdentityField"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Display",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Legal",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Web",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Riot",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Email",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "PgpFingerprint",
              "fields": [],
              "index": 32,
              "docs": []
            },
            {
              "name": "Image",
              "fields": [],
              "index": 64,
              "docs": []
            },
            {
              "name": "Twitter",
              "fields": [],
              "index": 128,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 227,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "Judgement"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unknown",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "FeePaid",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Reasonable",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "KnownGood",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "OutOfDate",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "LowQuality",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Erroneous",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 228,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "proxy",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 229,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorised for through",
                "`add_proxy`.",
                "",
                "Removes any corresponding announcement(s).",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "add_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 75,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register a proxy account for the sender that is able to make calls on its behalf.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to make a proxy.",
                "- `proxy_type`: The permissions allowed for this proxy account.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "remove_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 75,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Unregister a proxy account for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "remove_proxies",
              "fields": [],
              "index": 3,
              "docs": [
                "Unregister all proxy accounts for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "anonymous",
              "fields": [
                {
                  "name": "proxy_type",
                  "type": 75,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 76,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                "initialize it with a proxy of `proxy_type` for `origin` sender.",
                "",
                "Requires a `Signed` origin.",
                "",
                "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                "new account. This will almost always be the most permissive `ProxyType` possible to",
                "allow for maximum flexibility.",
                "- `index`: A disambiguation index, in case this is called multiple times in the same",
                "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                "want to use `0`.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero.",
                "",
                "Fails with `Duplicate` if this has already been called in this transaction, from the",
                "same sender, with the same parameters.",
                "",
                "Fails if there are insufficient funds to pay for deposit.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>",
                "TODO: Might be over counting 1 read"
              ]
            },
            {
              "name": "kill_anonymous",
              "fields": [
                {
                  "name": "spawner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 75,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 76,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "height",
                  "type": 88,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "ext_index",
                  "type": 88,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Removes a previously spawned anonymous proxy.",
                "",
                "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                "inaccessible.",
                "",
                "Requires a `Signed` origin, and the sender account must have been created by a call to",
                "`anonymous` with corresponding parameters.",
                "",
                "- `spawner`: The account that originally called `anonymous` to create this account.",
                "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                "- `height`: The height of the chain when the call to `anonymous` was processed.",
                "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                "",
                "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                "account whose `anonymous` call has corresponding parameters.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "announce",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Publish the hash of a proxy-call that will be made in the future.",
                "",
                "This must be called some number of blocks before the corresponding `proxy` is attempted",
                "if the delay associated with the proxy relationship is greater than zero.",
                "",
                "No more than `MaxPending` announcements may be made at any one time.",
                "",
                "This will take a deposit of `AnnouncementDepositFactor` as well as",
                "`AnnouncementDepositBase` if there are no other pending announcements.",
                "",
                "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            },
            {
              "name": "remove_announcement",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Remove a given announcement.",
                "",
                "May be called by a proxy account to remove a call they previously announced and return",
                "the deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            },
            {
              "name": "reject_announcement",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Remove the given announcement of a delegate.",
                "",
                "May be called by a target (proxied) account to remove a call that one of their delegates",
                "(`delegate`) has announced they want to execute. The deposit is returned.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `delegate`: The account that previously announced the call.",
                "- `call_hash`: The hash of the call to be made.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            },
            {
              "name": "proxy_announced",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 229,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorized for through",
                "`add_proxy`.",
                "",
                "Removes any corresponding announcement(s).",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 229,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 75
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 75,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 230,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "as_multi_threshold_1",
              "fields": [
                {
                  "name": "other_signatories",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 111,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Immediately dispatch a multi-signature call using a single approval from the caller.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `other_signatories`: The accounts (other than the sender) who are part of the",
                "multi-signature, but do not participate in the approval process.",
                "- `call`: The call to be executed.",
                "",
                "Result is equivalent to the dispatched result.",
                "",
                "# <weight>",
                "O(Z + C) where Z is the length of the call and C its execution weight.",
                "-------------------------------",
                "- DB Weight: None",
                "- Plus Call Weight",
                "# </weight>"
              ]
            },
            {
              "name": "as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 76,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 231,
                  "typeName": "Option<Timepoint<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 10,
                  "typeName": "OpaqueCall",
                  "docs": []
                },
                {
                  "name": "store_call",
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "If there are enough, then dispatch the call.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call`: The call to be executed.",
                "",
                "NOTE: Unless this is the final approval, you will generally want to use",
                "`approve_as_multi` instead, since it only requires a hash of the call.",
                "",
                "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                "on success, result is `Ok` and the result from the interior call, if it was executed,",
                "may be found in the deposited `MultisigExecuted` event.",
                "",
                "# <weight>",
                "- `O(S + Z + Call)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- The weight of the `call`.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                "  deposit taken for its lifetime of",
                "  `DepositBase + threshold * DepositFactor`.",
                "-------------------------------",
                "- DB Weight:",
                "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                "- Plus Call Weight",
                "# </weight>"
              ]
            },
            {
              "name": "approve_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 76,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 231,
                  "typeName": "Option<Timepoint<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                "",
                "# <weight>",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                "  deposit taken for its lifetime of",
                "  `DepositBase + threshold * DepositFactor`.",
                "----------------------------------",
                "- DB Weight:",
                "    - Read: Multisig Storage, [Caller Account]",
                "    - Write: Multisig Storage, [Caller Account]",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 76,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 55,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 78,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                "for this operation will be unreserved on success.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                "transaction for this dispatch.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "# <weight>",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- One event.",
                "- I/O: 1 read `O(S)`, one remove.",
                "- Storage: removes one item.",
                "----------------------------------",
                "- DB Weight:",
                "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 231,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 78
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 78,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 232,
    "type": {
      "path": [
        "pallet_bounties",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "propose_bounty",
              "fields": [
                {
                  "name": "value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "description",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Propose a new bounty.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                "or slashed when rejected.",
                "",
                "- `curator`: The curator account whom will manage this bounty.",
                "- `fee`: The curator fee.",
                "- `value`: The total payment amount of this bounty, curator fee included.",
                "- `description`: The description of this bounty."
              ]
            },
            {
              "name": "approve_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                "and the original deposit will be returned.",
                "",
                "May only be called from `T::ApproveOrigin`.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "propose_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "curator",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Assign a curator to a funded bounty.",
                "",
                "May only be called from `T::ApproveOrigin`.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "unassign_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Unassign curator from a bounty.",
                "",
                "This function can only be called by the `RejectOrigin` a signed origin.",
                "",
                "If this function is called by the `RejectOrigin`, we assume that the curator is malicious",
                "or inactive. As a result, we will slash the curator when possible.",
                "",
                "If the origin is the curator, we take this as a sign they are unable to do their job and",
                "they willingly give up. We could slash them, but for now we allow them to recover their",
                "deposit and exit without issue. (We may want to change this if it is abused.)",
                "",
                "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                "anyone in the community to call out that a curator is not doing their due diligence, and",
                "we should pick a new curator. In this case the curator should also be slashed.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "accept_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Accept the curator role for a bounty.",
                "A deposit will be reserved from curator and refund upon successful payout.",
                "",
                "May only be called from the curator.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "award_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 128,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds after a delay.",
                "",
                "The dispatch origin for this call must be the curator of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to award.",
                "- `beneficiary`: The beneficiary account whom will receive the payout.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "claim_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Claim the payout from an awarded bounty after payout delay.",
                "",
                "The dispatch origin for this call must be the beneficiary of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to claim.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "close_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                "the curator deposit will be unreserved if possible.",
                "",
                "Only `T::RejectOrigin` is able to cancel a bounty.",
                "",
                "- `bounty_id`: Bounty ID to cancel.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "extend_bounty_expiry",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 88,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "_remark",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Extend the expiry time of an active bounty.",
                "",
                "The dispatch origin for this call must be the curator of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to extend.",
                "- `remark`: additional information.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ]
    }
  },
  {
    "id": 233,
    "type": {
      "path": [
        "pallet_tips",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_awesome",
              "fields": [
                {
                  "name": "reason",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                "`DataDepositPerByte` for each byte in `reason`.",
                "",
                "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "  a UTF-8-encoded URL.",
                "- `who`: The account which should be credited for the tip.",
                "",
                "Emits `NewTip` if successful.",
                "",
                "# <weight>",
                "- Complexity: `O(R)` where `R` length of `reason`.",
                "  - encoding and hashing of 'reason'",
                "- DbReads: `Reasons`, `Tips`",
                "- DbWrites: `Reasons`, `Tips`",
                "# </weight>"
              ]
            },
            {
              "name": "retract_tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                "",
                "If successful, the original deposit will be unreserved.",
                "",
                "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                "must have been reported by the signing account through `report_awesome` (and not",
                "through `tip_new`).",
                "",
                "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "",
                "Emits `TipRetracted` if successful.",
                "",
                "# <weight>",
                "- Complexity: `O(1)`",
                "  - Depends on the length of `T::Hash` which is fixed.",
                "- DbReads: `Tips`, `origin account`",
                "- DbWrites: `Reasons`, `Tips`, `origin account`",
                "# </weight>"
              ]
            },
            {
              "name": "tip_new",
              "fields": [
                {
                  "name": "reason",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "tip_value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Give a tip for something new; no finder's fee will be taken.",
                "",
                "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                "member of the `Tippers` set.",
                "",
                "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "  a UTF-8-encoded URL.",
                "- `who`: The account which should be credited for the tip.",
                "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "  value of active tippers will be given to the `who`.",
                "",
                "Emits `NewTip` if successful.",
                "",
                "# <weight>",
                "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                "  - `O(T)`: decoding `Tipper` vec of length `T`",
                "    `T` is charged as upper bound given by `ContainsLengthBound`.",
                "    The actual cost depends on the implementation of `T::Tippers`.",
                "  - `O(R)`: hashing and encoding of reason of length `R`",
                "- DbReads: `Tippers`, `Reasons`",
                "- DbWrites: `Reasons`, `Tips`",
                "# </weight>"
              ]
            },
            {
              "name": "tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "tip_value",
                  "type": 51,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Declare a tip value for an already-open tip.",
                "",
                "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                "member of the `Tippers` set.",
                "",
                "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                "  account ID.",
                "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "  value of active tippers will be given to the `who`.",
                "",
                "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                "has started.",
                "",
                "# <weight>",
                "- Complexity: `O(T)` where `T` is the number of tippers.",
                "  decoding `Tipper` vec of length `T`, insert tip and check closing,",
                "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                "  The actual cost depends on the implementation of `T::Tippers`.",
                "",
                "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                "  is weighted as if almost full i.e of length `T-1`.",
                "- DbReads: `Tippers`, `Tips`",
                "- DbWrites: `Tips`",
                "# </weight>"
              ]
            },
            {
              "name": "close_tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Close and payout a tip.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "The tip identified by `hash` must have finished its countdown period.",
                "",
                "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "",
                "# <weight>",
                "- Complexity: `O(T)` where `T` is the number of tippers.",
                "  decoding `Tipper` vec of length `T`.",
                "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                "  The actual cost depends on the implementation of `T::Tippers`.",
                "- DbReads: `Tips`, `Tippers`, `tip finder`",
                "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                "# </weight>"
              ]
            },
            {
              "name": "slash_tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Remove and slash an already-open tip.",
                "",
                "May only be called from `T::RejectOrigin`.",
                "",
                "As a result, the finder is slashed and the deposits are lost.",
                "",
                "Emits `TipSlashed` if successful.",
                "",
                "# <weight>",
                "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                "  The actual cost depends on the implementation of `T::Tippers`.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Dispatchable calls.",
        "",
        "Each variant of this enum maps to a dispatchable function from the associated module."
      ]
    }
  },
  {
    "id": 234,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "submit_unsigned",
              "fields": [
                {
                  "name": "solution",
                  "type": 235,
                  "typeName": "RawSolution<CompactOf<T>>",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 288,
                  "typeName": "SolutionOrSnapshotSize",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Submit a solution for the unsigned phase.",
                "",
                "The dispatch origin fo this call must be __none__.",
                "",
                "This submission is checked on the fly. Moreover, this unsigned solution is only",
                "validated when submitted to the pool from the **local** node. Effectively, this means",
                "that only active validators can submit this transaction when authoring a block (similar",
                "to an inherent).",
                "",
                "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                "panic if the solution submitted by the validator is invalid in any way, effectively",
                "putting their authoring reward at risk.",
                "",
                "No deposit or reward is associated with this submission."
              ]
            },
            {
              "name": "set_minimum_untrusted_score",
              "fields": [
                {
                  "name": "maybe_next_score",
                  "type": 289,
                  "typeName": "Option<ElectionScore>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set a new value for `MinimumUntrustedScore`.",
                "",
                "Dispatch origin must be aligned with `T::ForceOrigin`.",
                "",
                "This check can be turned off by setting the value to `None`."
              ]
            },
            {
              "name": "set_emergency_election_result",
              "fields": [
                {
                  "name": "supports",
                  "type": 290,
                  "typeName": "Supports<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                "call to `ElectionProvider::elect`.",
                "",
                "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                "",
                "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                "feasibility check itself can in principle cause the election process to fail (due to",
                "memory/weight constrains)."
              ]
            },
            {
              "name": "submit",
              "fields": [
                {
                  "name": "solution",
                  "type": 235,
                  "typeName": "RawSolution<CompactOf<T>>",
                  "docs": []
                },
                {
                  "name": "num_signed_submissions",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Submit a solution for the signed phase.",
                "",
                "The dispatch origin fo this call must be __signed__.",
                "",
                "The solution is potentially queued, based on the claimed score and processed at the end",
                "of the signed phase.",
                "",
                "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                "might be rewarded, slashed, or get all or a part of the deposit back.",
                "",
                "# <weight>",
                "Queue size must be provided as witness data.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 235,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "RawSolution"
      ],
      "params": [
        {
          "name": "C",
          "type": 236
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "compact",
              "type": 236,
              "typeName": "C",
              "docs": []
            },
            {
              "name": "score",
              "type": 287,
              "typeName": "ElectionScore",
              "docs": []
            },
            {
              "name": "round",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 236,
    "type": {
      "path": [
        "polkadot_runtime",
        "NposCompactSolution16"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes1",
              "type": 237,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes2",
              "type": 240,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes3",
              "type": 245,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes4",
              "type": 248,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes5",
              "type": 251,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes6",
              "type": 254,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes7",
              "type": 257,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes8",
              "type": 260,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes9",
              "type": 263,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes10",
              "type": 266,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes11",
              "type": 269,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes12",
              "type": 272,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes13",
              "type": 275,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes14",
              "type": 278,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes15",
              "type": 281,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes16",
              "type": 284,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 237,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 238
        }
      },
      "docs": []
    }
  },
  {
    "id": 238,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 239,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 76
        }
      },
      "docs": []
    }
  },
  {
    "id": 240,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 241
        }
      },
      "docs": []
    }
  },
  {
    "id": 241,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          242,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 242,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          239,
          243
        ]
      },
      "docs": []
    }
  },
  {
    "id": 243,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 244
        }
      },
      "docs": []
    }
  },
  {
    "id": 244,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "PerU16"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 76,
              "typeName": "u16",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 245,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 246
        }
      },
      "docs": []
    }
  },
  {
    "id": 246,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          247,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 247,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 248,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 249
        }
      },
      "docs": []
    }
  },
  {
    "id": 249,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          250,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 250,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 251,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 252
        }
      },
      "docs": []
    }
  },
  {
    "id": 252,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          253,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 253,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 254,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 255
        }
      },
      "docs": []
    }
  },
  {
    "id": 255,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          256,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 256,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 5,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 257,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 258
        }
      },
      "docs": []
    }
  },
  {
    "id": 258,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          259,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 259,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 6,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 260,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 261
        }
      },
      "docs": []
    }
  },
  {
    "id": 261,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          262,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 262,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 7,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 263,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 264
        }
      },
      "docs": []
    }
  },
  {
    "id": 264,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          265,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 265,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 266,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 267
        }
      },
      "docs": []
    }
  },
  {
    "id": 267,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          268,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 268,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 9,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 269,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 270
        }
      },
      "docs": []
    }
  },
  {
    "id": 270,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          271,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 271,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 10,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 272,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 273
        }
      },
      "docs": []
    }
  },
  {
    "id": 273,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          274,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 274,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 11,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 275,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 276
        }
      },
      "docs": []
    }
  },
  {
    "id": 276,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          277,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 277,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 12,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 278,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 279
        }
      },
      "docs": []
    }
  },
  {
    "id": 279,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          280,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 280,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 13,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 281,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 282
        }
      },
      "docs": []
    }
  },
  {
    "id": 282,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          283,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 283,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 14,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 284,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 285
        }
      },
      "docs": []
    }
  },
  {
    "id": 285,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          88,
          286,
          239
        ]
      },
      "docs": []
    }
  },
  {
    "id": 286,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 15,
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 287,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 6
        }
      },
      "docs": []
    }
  },
  {
    "id": 288,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "SolutionOrSnapshotSize"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "voters",
              "type": 88,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "targets",
              "type": 88,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 289,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 287
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 287,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 290,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 291
        }
      },
      "docs": []
    }
  },
  {
    "id": 291,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          292
        ]
      },
      "docs": []
    }
  },
  {
    "id": 292,
    "type": {
      "path": [
        "sp_npos_elections",
        "Support"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 6,
              "typeName": "ExtendedBalance",
              "docs": []
            },
            {
              "name": "voters",
              "type": 63,
              "typeName": "Vec<(AccountId, ExtendedBalance)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 293,
    "type": {
      "path": [
        "polkadot_runtime",
        "OriginCaller"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "system",
              "fields": [
                {
                  "name": null,
                  "type": 294,
                  "typeName": "frame_system::Origin<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Council",
              "fields": [
                {
                  "name": null,
                  "type": 295,
                  "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "TechnicalCommittee",
              "fields": [
                {
                  "name": null,
                  "type": 296,
                  "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Void",
              "fields": [
                {
                  "name": null,
                  "type": 297,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 294,
    "type": {
      "path": [
        "frame_system",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Root",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 295,
    "type": {
      "path": [
        "pallet_collective",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 58
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Members",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Member",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "_Phantom",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 296,
    "type": {
      "path": [
        "pallet_collective",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": 61
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Members",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Member",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "_Phantom",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 297,
    "type": {
      "path": [
        "sp_core",
        "Void"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 298,
    "type": {
      "path": [
        "pallet_scheduler",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 299,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "FailedToSchedule",
              "fields": [],
              "index": 0,
              "docs": [
                "Failed to schedule a call"
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Cannot find the scheduled call."
              ]
            },
            {
              "name": "TargetBlockNumberInPast",
              "fields": [],
              "index": 2,
              "docs": [
                "Given target block number is in the past."
              ]
            },
            {
              "name": "RescheduleNoChange",
              "fields": [],
              "index": 3,
              "docs": [
                "Reschedule failed because it does not change scheduled time."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 300,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 301
        }
      },
      "docs": []
    }
  },
  {
    "id": 301,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          118,
          8
        ]
      },
      "docs": []
    }
  },
  {
    "id": 302,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 1
        }
      },
      "docs": []
    }
  },
  {
    "id": 303,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 1
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 304,
    "type": {
      "path": [
        "sp_consensus_babe",
        "BabeEpochConfiguration"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "c",
              "type": 122,
              "typeName": "(u64, u64)",
              "docs": []
            },
            {
              "name": "allowed_slots",
              "type": 123,
              "typeName": "AllowedSlots",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 305,
    "type": {
      "path": [
        "pallet_babe",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 0,
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 1,
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 2,
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 306,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          6,
          59
        ]
      },
      "docs": []
    }
  },
  {
    "id": 307,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotAssigned",
              "fields": [],
              "index": 0,
              "docs": [
                "The index was not already assigned."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 1,
              "docs": [
                "The index is assigned to another account."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 2,
              "docs": [
                "The index was not available."
              ]
            },
            {
              "name": "NotTransfer",
              "fields": [],
              "index": 3,
              "docs": [
                "The source and destination accounts are identical."
              ]
            },
            {
              "name": "Permanent",
              "fields": [],
              "index": 4,
              "docs": [
                "The index is permanent and may not be freed/changed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 308,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 309
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 311,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 309,
    "type": {
      "path": [
        "pallet_balances",
        "BalanceLock"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 106,
              "typeName": "LockIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reasons",
              "type": 310,
              "typeName": "Reasons",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 310,
    "type": {
      "path": [
        "pallet_balances",
        "Reasons"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fee",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Misc",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "All",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 311,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 309
        }
      },
      "docs": []
    }
  },
  {
    "id": 312,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 313
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 314,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 313,
    "type": {
      "path": [
        "pallet_balances",
        "ReserveData"
      ],
      "params": [
        {
          "name": "ReserveIdentifier",
          "type": 106
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 106,
              "typeName": "ReserveIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 314,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 313
        }
      },
      "docs": []
    }
  },
  {
    "id": 315,
    "type": {
      "path": [
        "pallet_balances",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1_0_0",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2_0_0",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 316,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Vesting balance too high to send value"
              ]
            },
            {
              "name": "LiquidityRestrictions",
              "fields": [],
              "index": 1,
              "docs": [
                "Account liquidity restrictions prevent withdrawal"
              ]
            },
            {
              "name": "InsufficientBalance",
              "fields": [],
              "index": 2,
              "docs": [
                "Balance too low to send value"
              ]
            },
            {
              "name": "ExistentialDeposit",
              "fields": [],
              "index": 3,
              "docs": [
                "Value too low to create account due to existential deposit"
              ]
            },
            {
              "name": "KeepAlive",
              "fields": [],
              "index": 4,
              "docs": [
                "Transfer/payment would kill account"
              ]
            },
            {
              "name": "ExistingVestingSchedule",
              "fields": [],
              "index": 5,
              "docs": [
                "A vesting schedule already exists for this account"
              ]
            },
            {
              "name": "DeadAccount",
              "fields": [],
              "index": 6,
              "docs": [
                "Beneficiary account must pre-exist"
              ]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 7,
              "docs": [
                "Number of named reserves exceed MaxReserves"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 317,
    "type": {
      "path": [
        "sp_arithmetic",
        "fixed_point",
        "FixedU128"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 318,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 319,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 320
        }
      },
      "docs": []
    }
  },
  {
    "id": 320,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "WeightToFeeCoefficient"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "coeff_integer",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "coeff_frac",
              "type": 91,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "negative",
              "type": 59,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "degree",
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 321,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 322
        }
      },
      "docs": []
    }
  },
  {
    "id": 322,
    "type": {
      "path": [
        "pallet_authorship",
        "UncleEntryItem"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Author",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InclusionHeight",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Uncle",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 171,
                  "typeName": "Option<Author>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 323,
    "type": {
      "path": [
        "pallet_authorship",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidUncleParent",
              "fields": [],
              "index": 0,
              "docs": [
                "The uncle parent not in the chain."
              ]
            },
            {
              "name": "UnclesAlreadySet",
              "fields": [],
              "index": 1,
              "docs": [
                "Uncles already set in the block."
              ]
            },
            {
              "name": "TooManyUncles",
              "fields": [],
              "index": 2,
              "docs": [
                "Too many uncles."
              ]
            },
            {
              "name": "GenesisUncle",
              "fields": [],
              "index": 3,
              "docs": [
                "The uncle is genesis."
              ]
            },
            {
              "name": "TooHighUncle",
              "fields": [],
              "index": 4,
              "docs": [
                "The uncle is too high in chain."
              ]
            },
            {
              "name": "UncleAlreadyIncluded",
              "fields": [],
              "index": 5,
              "docs": [
                "The uncle is already included."
              ]
            },
            {
              "name": "OldUncle",
              "fields": [],
              "index": 6,
              "docs": [
                "The uncle isn't recent enough to be included."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 324,
    "type": {
      "path": [
        "pallet_staking",
        "StakingLedger"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "stash",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "total",
              "type": 51,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "active",
              "type": 51,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "unlocking",
              "type": 325,
              "typeName": "Vec<UnlockChunk<Balance>>",
              "docs": []
            },
            {
              "name": "claimed_rewards",
              "type": 138,
              "typeName": "Vec<EraIndex>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 325,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 326
        }
      },
      "docs": []
    }
  },
  {
    "id": 326,
    "type": {
      "path": [
        "pallet_staking",
        "UnlockChunk"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 51,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "era",
              "type": 88,
              "typeName": "EraIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 327,
    "type": {
      "path": [
        "pallet_staking",
        "Nominations"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "targets",
              "type": 55,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "submitted_in",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "suppressed",
              "type": 59,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 328,
    "type": {
      "path": [
        "pallet_staking",
        "ActiveEraInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "start",
              "type": 98,
              "typeName": "Option<u64>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 329,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 330,
    "type": {
      "path": [
        "pallet_staking",
        "EraRewardPoints"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 4,
              "typeName": "RewardPoint",
              "docs": []
            },
            {
              "name": "individual",
              "type": 331,
              "typeName": "BTreeMap<AccountId, RewardPoint>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 331,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 0
        },
        {
          "name": "V",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 332,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 332,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 333
        }
      },
      "docs": []
    }
  },
  {
    "id": 333,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 334,
    "type": {
      "path": [
        "pallet_staking",
        "Forcing"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotForcing",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "ForceNew",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "ForceNone",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "ForceAlways",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 335,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 336
        }
      },
      "docs": []
    }
  },
  {
    "id": 336,
    "type": {
      "path": [
        "pallet_staking",
        "UnappliedSlash"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "validator",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "own",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "others",
              "type": 63,
              "typeName": "Vec<(AccountId, Balance)>",
              "docs": []
            },
            {
              "name": "reporters",
              "type": 55,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "payout",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 337,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          91,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 338,
    "type": {
      "path": [
        "pallet_staking",
        "slashing",
        "SlashingSpans"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "span_index",
              "type": 4,
              "typeName": "SpanIndex",
              "docs": []
            },
            {
              "name": "last_start",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "last_nonzero_slash",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "prior",
              "type": 138,
              "typeName": "Vec<EraIndex>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 339,
    "type": {
      "path": [
        "pallet_staking",
        "slashing",
        "SpanRecord"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "slashed",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "paid_out",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 340,
    "type": {
      "path": [
        "pallet_staking",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1_0_0Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2_0_0",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3_0_0",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "V4_0_0",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "V5_0_0",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "V6_0_0",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "V7_0_0",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 341,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotController",
              "fields": [],
              "index": 0,
              "docs": [
                "Not a controller account."
              ]
            },
            {
              "name": "NotStash",
              "fields": [],
              "index": 1,
              "docs": [
                "Not a stash account."
              ]
            },
            {
              "name": "AlreadyBonded",
              "fields": [],
              "index": 2,
              "docs": [
                "Stash is already bonded."
              ]
            },
            {
              "name": "AlreadyPaired",
              "fields": [],
              "index": 3,
              "docs": [
                "Controller is already paired."
              ]
            },
            {
              "name": "EmptyTargets",
              "fields": [],
              "index": 4,
              "docs": [
                "Targets cannot be empty."
              ]
            },
            {
              "name": "DuplicateIndex",
              "fields": [],
              "index": 5,
              "docs": [
                "Duplicate index."
              ]
            },
            {
              "name": "InvalidSlashIndex",
              "fields": [],
              "index": 6,
              "docs": [
                "Slash record index out of bounds."
              ]
            },
            {
              "name": "InsufficientBond",
              "fields": [],
              "index": 7,
              "docs": [
                "Can not bond with value less than minimum required."
              ]
            },
            {
              "name": "NoMoreChunks",
              "fields": [],
              "index": 8,
              "docs": [
                "Can not schedule more unlock chunks."
              ]
            },
            {
              "name": "NoUnlockChunk",
              "fields": [],
              "index": 9,
              "docs": [
                "Can not rebond without unlocking chunks."
              ]
            },
            {
              "name": "FundedTarget",
              "fields": [],
              "index": 10,
              "docs": [
                "Attempting to target a stash that still has funds."
              ]
            },
            {
              "name": "InvalidEraToReward",
              "fields": [],
              "index": 11,
              "docs": [
                "Invalid era to reward."
              ]
            },
            {
              "name": "InvalidNumberOfNominations",
              "fields": [],
              "index": 12,
              "docs": [
                "Invalid number of nominations."
              ]
            },
            {
              "name": "NotSortedAndUnique",
              "fields": [],
              "index": 13,
              "docs": [
                "Items are not sorted and unique."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "fields": [],
              "index": 14,
              "docs": [
                "Rewards for this era have already been claimed for this validator."
              ]
            },
            {
              "name": "IncorrectHistoryDepth",
              "fields": [],
              "index": 15,
              "docs": [
                "Incorrect previous history depth input provided."
              ]
            },
            {
              "name": "IncorrectSlashingSpans",
              "fields": [],
              "index": 16,
              "docs": [
                "Incorrect number of slashing spans provided."
              ]
            },
            {
              "name": "BadState",
              "fields": [],
              "index": 17,
              "docs": [
                "Internal state has become somehow corrupted and the operation cannot continue."
              ]
            },
            {
              "name": "TooManyTargets",
              "fields": [],
              "index": 18,
              "docs": [
                "Too many nomination targets supplied."
              ]
            },
            {
              "name": "BadTarget",
              "fields": [],
              "index": 19,
              "docs": [
                "A nomination target was supplied that was blocked or otherwise not a validator."
              ]
            },
            {
              "name": "CannotChillOther",
              "fields": [],
              "index": 20,
              "docs": [
                "The user has enough bond and thus cannot be chilled forcefully by an external person."
              ]
            },
            {
              "name": "TooManyNominators",
              "fields": [],
              "index": 21,
              "docs": [
                "There are too many nominators in the system. Governance needs to adjust the staking settings",
                "to keep things safe for the runtime."
              ]
            },
            {
              "name": "TooManyValidators",
              "fields": [],
              "index": 22,
              "docs": [
                "There are too many validators in the system. Governance needs to adjust the staking settings",
                "to keep things safe for the runtime."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 342,
    "type": {
      "path": [
        "sp_staking",
        "offence",
        "OffenceDetails"
      ],
      "params": [
        {
          "name": "Reporter",
          "type": 0
        },
        {
          "name": "Offender",
          "type": 49
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "offender",
              "type": 49,
              "typeName": "Offender",
              "docs": []
            },
            {
              "name": "reporters",
              "type": 55,
              "typeName": "Vec<Reporter>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 343,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          38,
          10
        ]
      },
      "docs": []
    }
  },
  {
    "id": 344,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 345
        }
      },
      "docs": []
    }
  },
  {
    "id": 345,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          142
        ]
      },
      "docs": []
    }
  },
  {
    "id": 346,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          347,
          10
        ]
      },
      "docs": []
    }
  },
  {
    "id": 347,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "KeyTypeId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "[u8; 4]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 348,
    "type": {
      "path": [
        "pallet_session",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidProof",
              "fields": [],
              "index": 0,
              "docs": [
                "Invalid ownership proof."
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "fields": [],
              "index": 1,
              "docs": [
                "No associated validator ID for account."
              ]
            },
            {
              "name": "DuplicatedKey",
              "fields": [],
              "index": 2,
              "docs": [
                "Registered duplicate key."
              ]
            },
            {
              "name": "NoKeys",
              "fields": [],
              "index": 3,
              "docs": [
                "No keys are associated with this account."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 4,
              "docs": [
                "Key setting account is not live, so it's impossible to associate keys."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the session module."
      ]
    }
  },
  {
    "id": 349,
    "type": {
      "path": [
        "pallet_grandpa",
        "StoredState"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Live",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PendingPause",
              "fields": [
                {
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "PendingResume",
              "fields": [
                {
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 350,
    "type": {
      "path": [
        "pallet_grandpa",
        "StoredPendingChange"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "scheduled_at",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "next_authorities",
              "type": 41,
              "typeName": "AuthorityList",
              "docs": []
            },
            {
              "name": "forced",
              "type": 139,
              "typeName": "Option<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 351,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PauseFailed",
              "fields": [],
              "index": 0,
              "docs": [
                "Attempt to signal GRANDPA pause when the authority set isn't live",
                "(either paused or already pending pause)."
              ]
            },
            {
              "name": "ResumeFailed",
              "fields": [],
              "index": 1,
              "docs": [
                "Attempt to signal GRANDPA resume when the authority set isn't paused",
                "(either live or already pending resume)."
              ]
            },
            {
              "name": "ChangePending",
              "fields": [],
              "index": 2,
              "docs": [
                "Attempt to signal GRANDPA change with one already pending."
              ]
            },
            {
              "name": "TooSoon",
              "fields": [],
              "index": 3,
              "docs": [
                "Cannot signal forced change so soon after last."
              ]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 4,
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 5,
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 6,
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 352,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 46
        }
      },
      "docs": []
    }
  },
  {
    "id": 353,
    "type": {
      "path": [
        "pallet_im_online",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidKey",
              "fields": [],
              "index": 0,
              "docs": [
                "Non existent public key."
              ]
            },
            {
              "name": "DuplicatedHeartbeat",
              "fields": [],
              "index": 1,
              "docs": [
                "Duplicated heartbeat."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 354,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 355
        }
      },
      "docs": []
    }
  },
  {
    "id": 355,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          9,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 356,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          55,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 357,
    "type": {
      "path": [
        "pallet_democracy",
        "PreimageStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Missing",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Available",
              "fields": [
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "provider",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "since",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "expiry",
                  "type": 139,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 358,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "ReferendumInfo"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ongoing",
              "fields": [
                {
                  "name": null,
                  "type": 359,
                  "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finished",
              "fields": [
                {
                  "name": "approved",
                  "type": 59,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 359,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "ReferendumStatus"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "end",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "proposal_hash",
              "type": 9,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "threshold",
              "type": 56,
              "typeName": "VoteThreshold",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "tally",
              "type": 360,
              "typeName": "Tally<Balance>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 360,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "Tally"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ayes",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "nays",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "turnout",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 361,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "Voting"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Direct",
              "fields": [
                {
                  "name": "votes",
                  "type": 362,
                  "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "type": 364,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "type": 365,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Delegating",
              "fields": [
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "type": 169,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "type": 364,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "type": 365,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 362,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 363
        }
      },
      "docs": []
    }
  },
  {
    "id": 363,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          167
        ]
      },
      "docs": []
    }
  },
  {
    "id": 364,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "Delegations"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "capital",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 365,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "PriorLock"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": null,
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 366,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          9,
          56
        ]
      },
      "docs": []
    }
  },
  {
    "id": 367,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          55
        ]
      },
      "docs": []
    }
  },
  {
    "id": 368,
    "type": {
      "path": [
        "pallet_democracy",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 369,
    "type": {
      "path": [
        "pallet_democracy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ValueLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Value too low"
              ]
            },
            {
              "name": "ProposalMissing",
              "fields": [],
              "index": 1,
              "docs": [
                "Proposal does not exist"
              ]
            },
            {
              "name": "BadIndex",
              "fields": [],
              "index": 2,
              "docs": [
                "Unknown index"
              ]
            },
            {
              "name": "AlreadyCanceled",
              "fields": [],
              "index": 3,
              "docs": [
                "Cannot cancel the same proposal twice"
              ]
            },
            {
              "name": "DuplicateProposal",
              "fields": [],
              "index": 4,
              "docs": [
                "Proposal already made"
              ]
            },
            {
              "name": "ProposalBlacklisted",
              "fields": [],
              "index": 5,
              "docs": [
                "Proposal still blacklisted"
              ]
            },
            {
              "name": "NotSimpleMajority",
              "fields": [],
              "index": 6,
              "docs": [
                "Next external proposal not simple majority"
              ]
            },
            {
              "name": "InvalidHash",
              "fields": [],
              "index": 7,
              "docs": [
                "Invalid hash"
              ]
            },
            {
              "name": "NoProposal",
              "fields": [],
              "index": 8,
              "docs": [
                "No external proposal"
              ]
            },
            {
              "name": "AlreadyVetoed",
              "fields": [],
              "index": 9,
              "docs": [
                "Identity may not veto a proposal twice"
              ]
            },
            {
              "name": "NotDelegated",
              "fields": [],
              "index": 10,
              "docs": [
                "Not delegated"
              ]
            },
            {
              "name": "DuplicatePreimage",
              "fields": [],
              "index": 11,
              "docs": [
                "Preimage already noted"
              ]
            },
            {
              "name": "NotImminent",
              "fields": [],
              "index": 12,
              "docs": [
                "Not imminent"
              ]
            },
            {
              "name": "TooEarly",
              "fields": [],
              "index": 13,
              "docs": [
                "Too early"
              ]
            },
            {
              "name": "Imminent",
              "fields": [],
              "index": 14,
              "docs": [
                "Imminent"
              ]
            },
            {
              "name": "PreimageMissing",
              "fields": [],
              "index": 15,
              "docs": [
                "Preimage not found"
              ]
            },
            {
              "name": "ReferendumInvalid",
              "fields": [],
              "index": 16,
              "docs": [
                "Vote given for invalid referendum"
              ]
            },
            {
              "name": "PreimageInvalid",
              "fields": [],
              "index": 17,
              "docs": [
                "Invalid preimage"
              ]
            },
            {
              "name": "NoneWaiting",
              "fields": [],
              "index": 18,
              "docs": [
                "No proposals waiting"
              ]
            },
            {
              "name": "NotLocked",
              "fields": [],
              "index": 19,
              "docs": [
                "The target account does not have a lock."
              ]
            },
            {
              "name": "NotExpired",
              "fields": [],
              "index": 20,
              "docs": [
                "The lock on the account to be unlocked has not yet expired."
              ]
            },
            {
              "name": "NotVoter",
              "fields": [],
              "index": 21,
              "docs": [
                "The given account did not vote on the referendum."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 22,
              "docs": [
                "The actor has no permission to conduct the action."
              ]
            },
            {
              "name": "AlreadyDelegating",
              "fields": [],
              "index": 23,
              "docs": [
                "The account is already delegating."
              ]
            },
            {
              "name": "InsufficientFunds",
              "fields": [],
              "index": 24,
              "docs": [
                "Too high a balance was provided that the account cannot afford."
              ]
            },
            {
              "name": "NotDelegating",
              "fields": [],
              "index": 25,
              "docs": [
                "The account is not currently delegating."
              ]
            },
            {
              "name": "VotesExist",
              "fields": [],
              "index": 26,
              "docs": [
                "The account currently has votes attached to it and the operation cannot succeed until",
                "these are removed, either through `unvote` or `reap_vote`."
              ]
            },
            {
              "name": "InstantNotAllowed",
              "fields": [],
              "index": 27,
              "docs": [
                "The instant referendum origin is currently disallowed."
              ]
            },
            {
              "name": "Nonsense",
              "fields": [],
              "index": 28,
              "docs": [
                "Delegation to oneself makes no sense."
              ]
            },
            {
              "name": "WrongUpperBound",
              "fields": [],
              "index": 29,
              "docs": [
                "Invalid upper bound."
              ]
            },
            {
              "name": "MaxVotesReached",
              "fields": [],
              "index": 30,
              "docs": [
                "Maximum number of votes reached."
              ]
            },
            {
              "name": "InvalidWitness",
              "fields": [],
              "index": 31,
              "docs": [
                "The provided witness data is wrong."
              ]
            },
            {
              "name": "TooManyProposals",
              "fields": [],
              "index": 32,
              "docs": [
                "Maximum number of proposals reached."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 370,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 9
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 85,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 371,
    "type": {
      "path": [
        "pallet_collective",
        "Votes"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 4,
              "typeName": "ProposalIndex",
              "docs": []
            },
            {
              "name": "threshold",
              "type": 4,
              "typeName": "MemberCount",
              "docs": []
            },
            {
              "name": "ayes",
              "type": 55,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "nays",
              "type": 55,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "end",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 372,
    "type": {
      "path": [
        "pallet_collective",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotMember",
              "fields": [],
              "index": 0,
              "docs": [
                "Account is not a member"
              ]
            },
            {
              "name": "DuplicateProposal",
              "fields": [],
              "index": 1,
              "docs": [
                "Duplicate proposals not allowed"
              ]
            },
            {
              "name": "ProposalMissing",
              "fields": [],
              "index": 2,
              "docs": [
                "Proposal must exist"
              ]
            },
            {
              "name": "WrongIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Mismatched index"
              ]
            },
            {
              "name": "DuplicateVote",
              "fields": [],
              "index": 4,
              "docs": [
                "Duplicate vote ignored"
              ]
            },
            {
              "name": "AlreadyInitialized",
              "fields": [],
              "index": 5,
              "docs": [
                "Members are already initialized!"
              ]
            },
            {
              "name": "TooEarly",
              "fields": [],
              "index": 6,
              "docs": [
                "The close call was made too early, before the end of the voting."
              ]
            },
            {
              "name": "TooManyProposals",
              "fields": [],
              "index": 7,
              "docs": [
                "There can only be a maximum of `MaxProposals` active proposals."
              ]
            },
            {
              "name": "WrongProposalWeight",
              "fields": [],
              "index": 8,
              "docs": [
                "The given weight bound for the proposal was too low."
              ]
            },
            {
              "name": "WrongProposalLength",
              "fields": [],
              "index": 9,
              "docs": [
                "The given length bound for the proposal was too low."
              ]
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 373,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 9
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 85,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 374,
    "type": {
      "path": [
        "pallet_collective",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotMember",
              "fields": [],
              "index": 0,
              "docs": [
                "Account is not a member"
              ]
            },
            {
              "name": "DuplicateProposal",
              "fields": [],
              "index": 1,
              "docs": [
                "Duplicate proposals not allowed"
              ]
            },
            {
              "name": "ProposalMissing",
              "fields": [],
              "index": 2,
              "docs": [
                "Proposal must exist"
              ]
            },
            {
              "name": "WrongIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Mismatched index"
              ]
            },
            {
              "name": "DuplicateVote",
              "fields": [],
              "index": 4,
              "docs": [
                "Duplicate vote ignored"
              ]
            },
            {
              "name": "AlreadyInitialized",
              "fields": [],
              "index": 5,
              "docs": [
                "Members are already initialized!"
              ]
            },
            {
              "name": "TooEarly",
              "fields": [],
              "index": 6,
              "docs": [
                "The close call was made too early, before the end of the voting."
              ]
            },
            {
              "name": "TooManyProposals",
              "fields": [],
              "index": 7,
              "docs": [
                "There can only be a maximum of `MaxProposals` active proposals."
              ]
            },
            {
              "name": "WrongProposalWeight",
              "fields": [],
              "index": 8,
              "docs": [
                "The given weight bound for the proposal was too low."
              ]
            },
            {
              "name": "WrongProposalLength",
              "fields": [],
              "index": 9,
              "docs": [
                "The given length bound for the proposal was too low."
              ]
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 375,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 376
        }
      },
      "docs": []
    }
  },
  {
    "id": 376,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "SeatHolder"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "stake",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 377,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "Voter"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes",
              "type": 55,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "stake",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 378,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "UnableToVote",
              "fields": [],
              "index": 0,
              "docs": [
                "Cannot vote when no candidates or members exist."
              ]
            },
            {
              "name": "NoVotes",
              "fields": [],
              "index": 1,
              "docs": [
                "Must vote for at least one candidate."
              ]
            },
            {
              "name": "TooManyVotes",
              "fields": [],
              "index": 2,
              "docs": [
                "Cannot vote more than candidates."
              ]
            },
            {
              "name": "MaximumVotesExceeded",
              "fields": [],
              "index": 3,
              "docs": [
                "Cannot vote more than maximum allowed."
              ]
            },
            {
              "name": "LowBalance",
              "fields": [],
              "index": 4,
              "docs": [
                "Cannot vote with stake less than minimum balance."
              ]
            },
            {
              "name": "UnableToPayBond",
              "fields": [],
              "index": 5,
              "docs": [
                "Voter can not pay voting bond."
              ]
            },
            {
              "name": "MustBeVoter",
              "fields": [],
              "index": 6,
              "docs": [
                "Must be a voter."
              ]
            },
            {
              "name": "ReportSelf",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot report self."
              ]
            },
            {
              "name": "DuplicatedCandidate",
              "fields": [],
              "index": 8,
              "docs": [
                "Duplicated candidate submission."
              ]
            },
            {
              "name": "MemberSubmit",
              "fields": [],
              "index": 9,
              "docs": [
                "Member cannot re-submit candidacy."
              ]
            },
            {
              "name": "RunnerUpSubmit",
              "fields": [],
              "index": 10,
              "docs": [
                "Runner cannot re-submit candidacy."
              ]
            },
            {
              "name": "InsufficientCandidateFunds",
              "fields": [],
              "index": 11,
              "docs": [
                "Candidate does not have enough funds."
              ]
            },
            {
              "name": "NotMember",
              "fields": [],
              "index": 12,
              "docs": [
                "Not a member."
              ]
            },
            {
              "name": "InvalidWitnessData",
              "fields": [],
              "index": 13,
              "docs": [
                "The provided count of number of candidates is incorrect."
              ]
            },
            {
              "name": "InvalidVoteCount",
              "fields": [],
              "index": 14,
              "docs": [
                "The provided count of number of votes is incorrect."
              ]
            },
            {
              "name": "InvalidRenouncing",
              "fields": [],
              "index": 15,
              "docs": [
                "The renouncing origin presented a wrong `Renouncing` parameter."
              ]
            },
            {
              "name": "InvalidReplacement",
              "fields": [],
              "index": 16,
              "docs": [
                "Prediction regarding replacement after member removal is wrong."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 379,
    "type": {
      "path": [
        "pallet_membership",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AlreadyMember",
              "fields": [],
              "index": 0,
              "docs": [
                "Already a member."
              ]
            },
            {
              "name": "NotMember",
              "fields": [],
              "index": 1,
              "docs": [
                "Not a member."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the nicks module."
      ]
    }
  },
  {
    "id": 380,
    "type": {
      "path": [
        "pallet_treasury",
        "Proposal"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "beneficiary",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "bond",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 381,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 138,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 382,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Permill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 383,
    "type": {
      "path": [
        "frame_support",
        "PalletId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 106,
              "typeName": "[u8; 8]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 384,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InsufficientProposersBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Proposer's balance is too low."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 1,
              "docs": [
                "No proposal or bounty at that index."
              ]
            },
            {
              "name": "TooManyApprovals",
              "fields": [],
              "index": 2,
              "docs": [
                "Too many approvals in the queue."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the treasury pallet."
      ]
    }
  },
  {
    "id": 385,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidEthereumSignature",
              "fields": [],
              "index": 0,
              "docs": [
                "Invalid Ethereum signature."
              ]
            },
            {
              "name": "SignerHasNoClaim",
              "fields": [],
              "index": 1,
              "docs": [
                "Ethereum address has no claim."
              ]
            },
            {
              "name": "SenderHasNoClaim",
              "fields": [],
              "index": 2,
              "docs": [
                "Account ID sending transaction has no claim."
              ]
            },
            {
              "name": "PotUnderflow",
              "fields": [],
              "index": 3,
              "docs": [
                "There's not enough in the pot to pay out some unvested amount. Generally implies a logic",
                "error."
              ]
            },
            {
              "name": "InvalidStatement",
              "fields": [],
              "index": 4,
              "docs": [
                "A needed statement was not included."
              ]
            },
            {
              "name": "VestedBalanceExists",
              "fields": [],
              "index": 5,
              "docs": [
                "The account already has a vested balance."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 386,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotVesting",
              "fields": [],
              "index": 0,
              "docs": [
                "The account given is not vesting."
              ]
            },
            {
              "name": "ExistingVestingSchedule",
              "fields": [],
              "index": 1,
              "docs": [
                "An existing vesting schedule already exists for this account that cannot be clobbered."
              ]
            },
            {
              "name": "AmountLow",
              "fields": [],
              "index": 2,
              "docs": [
                "Amount being transferred is too low to create a vesting schedule."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the vesting pallet."
      ]
    }
  },
  {
    "id": 387,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "Registration"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "MaxJudgements",
          "type": null
        },
        {
          "name": "MaxAdditionalFields",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "judgements",
              "type": 388,
              "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "info",
              "type": 189,
              "typeName": "IdentityInfo<MaxAdditionalFields>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 388,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 389
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 390,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 389,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          227
        ]
      },
      "docs": []
    }
  },
  {
    "id": 390,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 389
        }
      },
      "docs": []
    }
  },
  {
    "id": 391,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          392
        ]
      },
      "docs": []
    }
  },
  {
    "id": 392,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 55,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 393,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 394
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 396,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 394,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 395
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 395,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 395,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "RegistrarInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fields",
              "type": 225,
              "typeName": "IdentityFields",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 396,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 394
        }
      },
      "docs": []
    }
  },
  {
    "id": 397,
    "type": {
      "path": [
        "pallet_identity",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooManySubAccounts",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many subs-accounts."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Account isn't found."
              ]
            },
            {
              "name": "NotNamed",
              "fields": [],
              "index": 2,
              "docs": [
                "Account isn't named."
              ]
            },
            {
              "name": "EmptyIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Empty index."
              ]
            },
            {
              "name": "FeeChanged",
              "fields": [],
              "index": 4,
              "docs": [
                "Fee is changed."
              ]
            },
            {
              "name": "NoIdentity",
              "fields": [],
              "index": 5,
              "docs": [
                "No identity found."
              ]
            },
            {
              "name": "StickyJudgement",
              "fields": [],
              "index": 6,
              "docs": [
                "Sticky judgement."
              ]
            },
            {
              "name": "JudgementGiven",
              "fields": [],
              "index": 7,
              "docs": [
                "Judgement given."
              ]
            },
            {
              "name": "InvalidJudgement",
              "fields": [],
              "index": 8,
              "docs": [
                "Invalid judgement."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 9,
              "docs": [
                "The index is invalid."
              ]
            },
            {
              "name": "InvalidTarget",
              "fields": [],
              "index": 10,
              "docs": [
                "The target is invalid."
              ]
            },
            {
              "name": "TooManyFields",
              "fields": [],
              "index": 11,
              "docs": [
                "Too many additional fields."
              ]
            },
            {
              "name": "TooManyRegistrars",
              "fields": [],
              "index": 12,
              "docs": [
                "Maximum amount of registrars reached. Cannot add any more."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "fields": [],
              "index": 13,
              "docs": [
                "Account ID is already named."
              ]
            },
            {
              "name": "NotSub",
              "fields": [],
              "index": 14,
              "docs": [
                "Sender is not a sub-account."
              ]
            },
            {
              "name": "NotOwned",
              "fields": [],
              "index": 15,
              "docs": [
                "Sub-account isn't owned by sender."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 398,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          399,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 399,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 400
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 401,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 400,
    "type": {
      "path": [
        "pallet_proxy",
        "ProxyDefinition"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "ProxyType",
          "type": 75
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "delegate",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "proxy_type",
              "type": 75,
              "typeName": "ProxyType",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 401,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 400
        }
      },
      "docs": []
    }
  },
  {
    "id": 402,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          403,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 403,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 404
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 405,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 404,
    "type": {
      "path": [
        "pallet_proxy",
        "Announcement"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "real",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "call_hash",
              "type": 9,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 405,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 404
        }
      },
      "docs": []
    }
  },
  {
    "id": 406,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooMany",
              "fields": [],
              "index": 0,
              "docs": [
                "There are too many proxies registered or too many announcements pending."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Proxy registration not found."
              ]
            },
            {
              "name": "NotProxy",
              "fields": [],
              "index": 2,
              "docs": [
                "Sender is not a proxy of the account to be proxied."
              ]
            },
            {
              "name": "Unproxyable",
              "fields": [],
              "index": 3,
              "docs": [
                "A call which is incompatible with the proxy type's filter was attempted."
              ]
            },
            {
              "name": "Duplicate",
              "fields": [],
              "index": 4,
              "docs": [
                "Account is already a proxy."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 5,
              "docs": [
                "Call may not be made by proxy because it may escalate its privileges."
              ]
            },
            {
              "name": "Unannounced",
              "fields": [],
              "index": 6,
              "docs": [
                "Announcement, if made at all, was made too recently."
              ]
            },
            {
              "name": "NoSelfProxy",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot add self as proxy."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 407,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          1
        ]
      },
      "docs": []
    }
  },
  {
    "id": 408,
    "type": {
      "path": [
        "pallet_multisig",
        "Multisig"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "when",
              "type": 78,
              "typeName": "Timepoint<BlockNumber>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "depositor",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 55,
              "typeName": "Vec<AccountId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 409,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          10,
          0,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 410,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MinimumThreshold",
              "fields": [],
              "index": 0,
              "docs": [
                "Threshold must be 2 or greater."
              ]
            },
            {
              "name": "AlreadyApproved",
              "fields": [],
              "index": 1,
              "docs": [
                "Call is already approved by this signatory."
              ]
            },
            {
              "name": "NoApprovalsNeeded",
              "fields": [],
              "index": 2,
              "docs": [
                "Call doesn't need any (more) approvals."
              ]
            },
            {
              "name": "TooFewSignatories",
              "fields": [],
              "index": 3,
              "docs": [
                "There are too few signatories in the list."
              ]
            },
            {
              "name": "TooManySignatories",
              "fields": [],
              "index": 4,
              "docs": [
                "There are too many signatories in the list."
              ]
            },
            {
              "name": "SignatoriesOutOfOrder",
              "fields": [],
              "index": 5,
              "docs": [
                "The signatories were provided out of order; they should be ordered."
              ]
            },
            {
              "name": "SenderInSignatories",
              "fields": [],
              "index": 6,
              "docs": [
                "The sender was contained in the other signatories; it shouldn't be."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "Multisig operation not found when attempting to cancel."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 8,
              "docs": [
                "Only the account that originally created the multisig is able to cancel it."
              ]
            },
            {
              "name": "NoTimepoint",
              "fields": [],
              "index": 9,
              "docs": [
                "No timepoint was given, yet the multisig operation is already underway."
              ]
            },
            {
              "name": "WrongTimepoint",
              "fields": [],
              "index": 10,
              "docs": [
                "A different timepoint was given to the multisig operation that is underway."
              ]
            },
            {
              "name": "UnexpectedTimepoint",
              "fields": [],
              "index": 11,
              "docs": [
                "A timepoint was given, yet no multisig operation is underway."
              ]
            },
            {
              "name": "MaxWeightTooLow",
              "fields": [],
              "index": 12,
              "docs": [
                "The maximum weight information provided was too low."
              ]
            },
            {
              "name": "AlreadyStored",
              "fields": [],
              "index": 13,
              "docs": [
                "The data to be stored is already stored."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://substrate.dev/docs/en/knowledgebase/runtime/errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 411,
    "type": {
      "path": [
        "pallet_bounties",
        "Bounty"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "curator_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "bond",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "status",
              "type": 412,
              "typeName": "BountyStatus<AccountId, BlockNumber>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 412,
    "type": {
      "path": [
        "pallet_bounties",
        "BountyStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Approved",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Funded",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CuratorProposed",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Active",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "update_due",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "PendingPayout",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "unlock_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 413,
    "type": {
      "path": [
        "pallet_bounties",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InsufficientProposersBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Proposer's balance is too low."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 1,
              "docs": [
                "No proposal or bounty at that index."
              ]
            },
            {
              "name": "ReasonTooBig",
              "fields": [],
              "index": 2,
              "docs": [
                "The reason given is just too big."
              ]
            },
            {
              "name": "UnexpectedStatus",
              "fields": [],
              "index": 3,
              "docs": [
                "The bounty status is unexpected."
              ]
            },
            {
              "name": "RequireCurator",
              "fields": [],
              "index": 4,
              "docs": [
                "Require bounty curator."
              ]
            },
            {
              "name": "InvalidValue",
              "fields": [],
              "index": 5,
              "docs": [
                "Invalid bounty value."
              ]
            },
            {
              "name": "InvalidFee",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid bounty fee."
              ]
            },
            {
              "name": "PendingPayout",
              "fields": [],
              "index": 7,
              "docs": [
                "A bounty payout is pending.",
                "To cancel the bounty, you must unassign and slash the curator."
              ]
            },
            {
              "name": "Premature",
              "fields": [],
              "index": 8,
              "docs": [
                "The bounties cannot be claimed/closed because it's still in the countdown period."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the treasury module."
      ]
    }
  },
  {
    "id": 414,
    "type": {
      "path": [
        "pallet_tips",
        "OpenTip"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "reason",
              "type": 9,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "finder",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "closes",
              "type": 139,
              "typeName": "Option<BlockNumber>",
              "docs": []
            },
            {
              "name": "tips",
              "type": 63,
              "typeName": "Vec<(AccountId, Balance)>",
              "docs": []
            },
            {
              "name": "finders_fee",
              "type": 59,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 415,
    "type": {
      "path": [
        "pallet_tips",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ReasonTooBig",
              "fields": [],
              "index": 0,
              "docs": [
                "The reason given is just too big."
              ]
            },
            {
              "name": "AlreadyKnown",
              "fields": [],
              "index": 1,
              "docs": [
                "The tip was already found/started."
              ]
            },
            {
              "name": "UnknownTip",
              "fields": [],
              "index": 2,
              "docs": [
                "The tip hash is unknown."
              ]
            },
            {
              "name": "NotFinder",
              "fields": [],
              "index": 3,
              "docs": [
                "The account attempting to retract the tip is not the finder of the tip."
              ]
            },
            {
              "name": "StillOpen",
              "fields": [],
              "index": 4,
              "docs": [
                "The tip cannot be claimed/closed because there are not enough tippers yet."
              ]
            },
            {
              "name": "Premature",
              "fields": [],
              "index": 5,
              "docs": [
                "The tip cannot be claimed/closed because it's still in the countdown period."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the tips module."
      ]
    }
  },
  {
    "id": 416,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "Phase"
      ],
      "params": [
        {
          "name": "Bn",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Off",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsigned",
              "fields": [
                {
                  "name": null,
                  "type": 417,
                  "typeName": "(bool, Bn)",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Emergency",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 417,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 418,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "ReadySolution"
      ],
      "params": [
        {
          "name": "A",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "supports",
              "type": 290,
              "typeName": "Supports<A>",
              "docs": []
            },
            {
              "name": "score",
              "type": 287,
              "typeName": "ElectionScore",
              "docs": []
            },
            {
              "name": "compute",
              "type": 82,
              "typeName": "ElectionCompute",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 419,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "RoundSnapshot"
      ],
      "params": [
        {
          "name": "A",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "voters",
              "type": 420,
              "typeName": "Vec<(A, VoteWeight, Vec<A>)>",
              "docs": []
            },
            {
              "name": "targets",
              "type": 55,
              "typeName": "Vec<A>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 420,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 421
        }
      },
      "docs": []
    }
  },
  {
    "id": 421,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          8,
          55
        ]
      },
      "docs": []
    }
  },
  {
    "id": 422,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_btree_map",
        "BoundedBTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 287
        },
        {
          "name": "V",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 423,
              "typeName": "BTreeMap<K, V>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 423,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 287
        },
        {
          "name": "V",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 424,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 424,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 425
        }
      },
      "docs": []
    }
  },
  {
    "id": 425,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          287,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 426,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "signed",
        "SignedSubmission"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "CompactSolution",
          "type": 236
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "solution",
              "type": 235,
              "typeName": "RawSolution<CompactSolution>",
              "docs": []
            },
            {
              "name": "reward",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 427,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PreDispatchEarlySubmission",
              "fields": [],
              "index": 0,
              "docs": [
                "Submission was too early."
              ]
            },
            {
              "name": "PreDispatchWrongWinnerCount",
              "fields": [],
              "index": 1,
              "docs": [
                "Wrong number of winners presented."
              ]
            },
            {
              "name": "PreDispatchWeakSubmission",
              "fields": [],
              "index": 2,
              "docs": [
                "Submission was too weak, score-wise."
              ]
            },
            {
              "name": "SignedQueueFull",
              "fields": [],
              "index": 3,
              "docs": [
                "The queue was full, and the solution was not better than any of the existing ones."
              ]
            },
            {
              "name": "SignedCannotPayDeposit",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin failed to pay the deposit."
              ]
            },
            {
              "name": "SignedInvalidWitness",
              "fields": [],
              "index": 5,
              "docs": [
                "Witness data to dispatchable is invalid."
              ]
            },
            {
              "name": "SignedTooMuchWeight",
              "fields": [],
              "index": 6,
              "docs": [
                "The signed submission consumes too much weight"
              ]
            },
            {
              "name": "OcwCallWrongEra",
              "fields": [],
              "index": 7,
              "docs": [
                "OCW submitted solution for wrong round"
              ]
            },
            {
              "name": "MissingSnapshotMetadata",
              "fields": [],
              "index": 8,
              "docs": [
                "Snapshot metadata should exist but didn't."
              ]
            },
            {
              "name": "InvalidSubmissionIndex",
              "fields": [],
              "index": 9,
              "docs": [
                "`Self::insert_submission` returned an invalid index."
              ]
            },
            {
              "name": "CallNotAllowed",
              "fields": [],
              "index": 10,
              "docs": [
                "The call is not allowed at this point."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error of the pallet that can be returned in response to dispatches."
      ]
    }
  },
  {
    "id": 428,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "unchecked_extrinsic",
        "UncheckedExtrinsic"
      ],
      "params": [
        {
          "name": "Address",
          "type": 128
        },
        {
          "name": "Call",
          "type": 111
        },
        {
          "name": "Signature",
          "type": 429
        },
        {
          "name": "Extra",
          "type": 431
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 429,
    "type": {
      "path": [
        "sp_runtime",
        "MultiSignature"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ed25519",
              "fields": [
                {
                  "name": null,
                  "type": 152,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sr25519",
              "fields": [
                {
                  "name": null,
                  "type": 165,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ecdsa",
              "fields": [
                {
                  "name": null,
                  "type": 430,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 430,
    "type": {
      "path": [
        "sp_core",
        "ecdsa",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 179,
              "typeName": "[u8; 65]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 431,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          432,
          433,
          434,
          435,
          437,
          438,
          439,
          440
        ]
      },
      "docs": []
    }
  },
  {
    "id": 432,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_spec_version",
        "CheckSpecVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 433,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_tx_version",
        "CheckTxVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 434,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_genesis",
        "CheckGenesis"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 435,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_mortality",
        "CheckMortality"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 436,
              "typeName": "Era",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 436,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "era",
        "Era"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Immortal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Mortal1",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mortal2",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Mortal3",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Mortal4",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Mortal5",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Mortal6",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Mortal7",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Mortal8",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Mortal9",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Mortal10",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Mortal11",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Mortal12",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Mortal13",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Mortal14",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Mortal15",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Mortal16",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Mortal17",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Mortal18",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Mortal19",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Mortal20",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Mortal21",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Mortal22",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Mortal23",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Mortal24",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Mortal25",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Mortal26",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Mortal27",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Mortal28",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Mortal29",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Mortal30",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Mortal31",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Mortal32",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Mortal33",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Mortal34",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Mortal35",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Mortal36",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Mortal37",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "Mortal38",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Mortal39",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Mortal40",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Mortal41",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Mortal42",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Mortal43",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "Mortal44",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "Mortal45",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 45,
              "docs": []
            },
            {
              "name": "Mortal46",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "Mortal47",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            },
            {
              "name": "Mortal48",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 48,
              "docs": []
            },
            {
              "name": "Mortal49",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 49,
              "docs": []
            },
            {
              "name": "Mortal50",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Mortal51",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Mortal52",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "Mortal53",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "Mortal54",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Mortal55",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "Mortal56",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Mortal57",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 57,
              "docs": []
            },
            {
              "name": "Mortal58",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 58,
              "docs": []
            },
            {
              "name": "Mortal59",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 59,
              "docs": []
            },
            {
              "name": "Mortal60",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Mortal61",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "Mortal62",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "Mortal63",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Mortal64",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Mortal65",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 65,
              "docs": []
            },
            {
              "name": "Mortal66",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 66,
              "docs": []
            },
            {
              "name": "Mortal67",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 67,
              "docs": []
            },
            {
              "name": "Mortal68",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 68,
              "docs": []
            },
            {
              "name": "Mortal69",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 69,
              "docs": []
            },
            {
              "name": "Mortal70",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Mortal71",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Mortal72",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Mortal73",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Mortal74",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "Mortal75",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 75,
              "docs": []
            },
            {
              "name": "Mortal76",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 76,
              "docs": []
            },
            {
              "name": "Mortal77",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 77,
              "docs": []
            },
            {
              "name": "Mortal78",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 78,
              "docs": []
            },
            {
              "name": "Mortal79",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 79,
              "docs": []
            },
            {
              "name": "Mortal80",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 80,
              "docs": []
            },
            {
              "name": "Mortal81",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 81,
              "docs": []
            },
            {
              "name": "Mortal82",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 82,
              "docs": []
            },
            {
              "name": "Mortal83",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 83,
              "docs": []
            },
            {
              "name": "Mortal84",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 84,
              "docs": []
            },
            {
              "name": "Mortal85",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 85,
              "docs": []
            },
            {
              "name": "Mortal86",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 86,
              "docs": []
            },
            {
              "name": "Mortal87",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 87,
              "docs": []
            },
            {
              "name": "Mortal88",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 88,
              "docs": []
            },
            {
              "name": "Mortal89",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 89,
              "docs": []
            },
            {
              "name": "Mortal90",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 90,
              "docs": []
            },
            {
              "name": "Mortal91",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 91,
              "docs": []
            },
            {
              "name": "Mortal92",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 92,
              "docs": []
            },
            {
              "name": "Mortal93",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 93,
              "docs": []
            },
            {
              "name": "Mortal94",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 94,
              "docs": []
            },
            {
              "name": "Mortal95",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 95,
              "docs": []
            },
            {
              "name": "Mortal96",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 96,
              "docs": []
            },
            {
              "name": "Mortal97",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 97,
              "docs": []
            },
            {
              "name": "Mortal98",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "Mortal99",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "Mortal100",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "Mortal101",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Mortal102",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 102,
              "docs": []
            },
            {
              "name": "Mortal103",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 103,
              "docs": []
            },
            {
              "name": "Mortal104",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 104,
              "docs": []
            },
            {
              "name": "Mortal105",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 105,
              "docs": []
            },
            {
              "name": "Mortal106",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 106,
              "docs": []
            },
            {
              "name": "Mortal107",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 107,
              "docs": []
            },
            {
              "name": "Mortal108",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 108,
              "docs": []
            },
            {
              "name": "Mortal109",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 109,
              "docs": []
            },
            {
              "name": "Mortal110",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 110,
              "docs": []
            },
            {
              "name": "Mortal111",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 111,
              "docs": []
            },
            {
              "name": "Mortal112",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 112,
              "docs": []
            },
            {
              "name": "Mortal113",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 113,
              "docs": []
            },
            {
              "name": "Mortal114",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 114,
              "docs": []
            },
            {
              "name": "Mortal115",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 115,
              "docs": []
            },
            {
              "name": "Mortal116",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 116,
              "docs": []
            },
            {
              "name": "Mortal117",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 117,
              "docs": []
            },
            {
              "name": "Mortal118",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 118,
              "docs": []
            },
            {
              "name": "Mortal119",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 119,
              "docs": []
            },
            {
              "name": "Mortal120",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 120,
              "docs": []
            },
            {
              "name": "Mortal121",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 121,
              "docs": []
            },
            {
              "name": "Mortal122",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 122,
              "docs": []
            },
            {
              "name": "Mortal123",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 123,
              "docs": []
            },
            {
              "name": "Mortal124",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 124,
              "docs": []
            },
            {
              "name": "Mortal125",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 125,
              "docs": []
            },
            {
              "name": "Mortal126",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 126,
              "docs": []
            },
            {
              "name": "Mortal127",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 127,
              "docs": []
            },
            {
              "name": "Mortal128",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 128,
              "docs": []
            },
            {
              "name": "Mortal129",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 129,
              "docs": []
            },
            {
              "name": "Mortal130",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 130,
              "docs": []
            },
            {
              "name": "Mortal131",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 131,
              "docs": []
            },
            {
              "name": "Mortal132",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 132,
              "docs": []
            },
            {
              "name": "Mortal133",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 133,
              "docs": []
            },
            {
              "name": "Mortal134",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 134,
              "docs": []
            },
            {
              "name": "Mortal135",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 135,
              "docs": []
            },
            {
              "name": "Mortal136",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 136,
              "docs": []
            },
            {
              "name": "Mortal137",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 137,
              "docs": []
            },
            {
              "name": "Mortal138",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 138,
              "docs": []
            },
            {
              "name": "Mortal139",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 139,
              "docs": []
            },
            {
              "name": "Mortal140",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 140,
              "docs": []
            },
            {
              "name": "Mortal141",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 141,
              "docs": []
            },
            {
              "name": "Mortal142",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 142,
              "docs": []
            },
            {
              "name": "Mortal143",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 143,
              "docs": []
            },
            {
              "name": "Mortal144",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 144,
              "docs": []
            },
            {
              "name": "Mortal145",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 145,
              "docs": []
            },
            {
              "name": "Mortal146",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 146,
              "docs": []
            },
            {
              "name": "Mortal147",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 147,
              "docs": []
            },
            {
              "name": "Mortal148",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 148,
              "docs": []
            },
            {
              "name": "Mortal149",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 149,
              "docs": []
            },
            {
              "name": "Mortal150",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 150,
              "docs": []
            },
            {
              "name": "Mortal151",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 151,
              "docs": []
            },
            {
              "name": "Mortal152",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 152,
              "docs": []
            },
            {
              "name": "Mortal153",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 153,
              "docs": []
            },
            {
              "name": "Mortal154",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 154,
              "docs": []
            },
            {
              "name": "Mortal155",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 155,
              "docs": []
            },
            {
              "name": "Mortal156",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 156,
              "docs": []
            },
            {
              "name": "Mortal157",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 157,
              "docs": []
            },
            {
              "name": "Mortal158",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 158,
              "docs": []
            },
            {
              "name": "Mortal159",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 159,
              "docs": []
            },
            {
              "name": "Mortal160",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 160,
              "docs": []
            },
            {
              "name": "Mortal161",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 161,
              "docs": []
            },
            {
              "name": "Mortal162",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 162,
              "docs": []
            },
            {
              "name": "Mortal163",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 163,
              "docs": []
            },
            {
              "name": "Mortal164",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 164,
              "docs": []
            },
            {
              "name": "Mortal165",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 165,
              "docs": []
            },
            {
              "name": "Mortal166",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 166,
              "docs": []
            },
            {
              "name": "Mortal167",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 167,
              "docs": []
            },
            {
              "name": "Mortal168",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 168,
              "docs": []
            },
            {
              "name": "Mortal169",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 169,
              "docs": []
            },
            {
              "name": "Mortal170",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 170,
              "docs": []
            },
            {
              "name": "Mortal171",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 171,
              "docs": []
            },
            {
              "name": "Mortal172",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 172,
              "docs": []
            },
            {
              "name": "Mortal173",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 173,
              "docs": []
            },
            {
              "name": "Mortal174",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 174,
              "docs": []
            },
            {
              "name": "Mortal175",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 175,
              "docs": []
            },
            {
              "name": "Mortal176",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 176,
              "docs": []
            },
            {
              "name": "Mortal177",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 177,
              "docs": []
            },
            {
              "name": "Mortal178",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 178,
              "docs": []
            },
            {
              "name": "Mortal179",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 179,
              "docs": []
            },
            {
              "name": "Mortal180",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 180,
              "docs": []
            },
            {
              "name": "Mortal181",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 181,
              "docs": []
            },
            {
              "name": "Mortal182",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 182,
              "docs": []
            },
            {
              "name": "Mortal183",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 183,
              "docs": []
            },
            {
              "name": "Mortal184",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 184,
              "docs": []
            },
            {
              "name": "Mortal185",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 185,
              "docs": []
            },
            {
              "name": "Mortal186",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 186,
              "docs": []
            },
            {
              "name": "Mortal187",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 187,
              "docs": []
            },
            {
              "name": "Mortal188",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 188,
              "docs": []
            },
            {
              "name": "Mortal189",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 189,
              "docs": []
            },
            {
              "name": "Mortal190",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 190,
              "docs": []
            },
            {
              "name": "Mortal191",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 191,
              "docs": []
            },
            {
              "name": "Mortal192",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 192,
              "docs": []
            },
            {
              "name": "Mortal193",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 193,
              "docs": []
            },
            {
              "name": "Mortal194",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 194,
              "docs": []
            },
            {
              "name": "Mortal195",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 195,
              "docs": []
            },
            {
              "name": "Mortal196",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 196,
              "docs": []
            },
            {
              "name": "Mortal197",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 197,
              "docs": []
            },
            {
              "name": "Mortal198",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 198,
              "docs": []
            },
            {
              "name": "Mortal199",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 199,
              "docs": []
            },
            {
              "name": "Mortal200",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            },
            {
              "name": "Mortal201",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 201,
              "docs": []
            },
            {
              "name": "Mortal202",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 202,
              "docs": []
            },
            {
              "name": "Mortal203",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 203,
              "docs": []
            },
            {
              "name": "Mortal204",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 204,
              "docs": []
            },
            {
              "name": "Mortal205",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 205,
              "docs": []
            },
            {
              "name": "Mortal206",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 206,
              "docs": []
            },
            {
              "name": "Mortal207",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 207,
              "docs": []
            },
            {
              "name": "Mortal208",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 208,
              "docs": []
            },
            {
              "name": "Mortal209",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 209,
              "docs": []
            },
            {
              "name": "Mortal210",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 210,
              "docs": []
            },
            {
              "name": "Mortal211",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 211,
              "docs": []
            },
            {
              "name": "Mortal212",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 212,
              "docs": []
            },
            {
              "name": "Mortal213",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 213,
              "docs": []
            },
            {
              "name": "Mortal214",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 214,
              "docs": []
            },
            {
              "name": "Mortal215",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 215,
              "docs": []
            },
            {
              "name": "Mortal216",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 216,
              "docs": []
            },
            {
              "name": "Mortal217",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 217,
              "docs": []
            },
            {
              "name": "Mortal218",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 218,
              "docs": []
            },
            {
              "name": "Mortal219",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 219,
              "docs": []
            },
            {
              "name": "Mortal220",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 220,
              "docs": []
            },
            {
              "name": "Mortal221",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 221,
              "docs": []
            },
            {
              "name": "Mortal222",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 222,
              "docs": []
            },
            {
              "name": "Mortal223",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 223,
              "docs": []
            },
            {
              "name": "Mortal224",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 224,
              "docs": []
            },
            {
              "name": "Mortal225",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 225,
              "docs": []
            },
            {
              "name": "Mortal226",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 226,
              "docs": []
            },
            {
              "name": "Mortal227",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 227,
              "docs": []
            },
            {
              "name": "Mortal228",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 228,
              "docs": []
            },
            {
              "name": "Mortal229",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 229,
              "docs": []
            },
            {
              "name": "Mortal230",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 230,
              "docs": []
            },
            {
              "name": "Mortal231",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 231,
              "docs": []
            },
            {
              "name": "Mortal232",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 232,
              "docs": []
            },
            {
              "name": "Mortal233",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 233,
              "docs": []
            },
            {
              "name": "Mortal234",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 234,
              "docs": []
            },
            {
              "name": "Mortal235",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 235,
              "docs": []
            },
            {
              "name": "Mortal236",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 236,
              "docs": []
            },
            {
              "name": "Mortal237",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 237,
              "docs": []
            },
            {
              "name": "Mortal238",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 238,
              "docs": []
            },
            {
              "name": "Mortal239",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 239,
              "docs": []
            },
            {
              "name": "Mortal240",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 240,
              "docs": []
            },
            {
              "name": "Mortal241",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 241,
              "docs": []
            },
            {
              "name": "Mortal242",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 242,
              "docs": []
            },
            {
              "name": "Mortal243",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 243,
              "docs": []
            },
            {
              "name": "Mortal244",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 244,
              "docs": []
            },
            {
              "name": "Mortal245",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 245,
              "docs": []
            },
            {
              "name": "Mortal246",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 246,
              "docs": []
            },
            {
              "name": "Mortal247",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 247,
              "docs": []
            },
            {
              "name": "Mortal248",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 248,
              "docs": []
            },
            {
              "name": "Mortal249",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 249,
              "docs": []
            },
            {
              "name": "Mortal250",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 250,
              "docs": []
            },
            {
              "name": "Mortal251",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 251,
              "docs": []
            },
            {
              "name": "Mortal252",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 252,
              "docs": []
            },
            {
              "name": "Mortal253",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 253,
              "docs": []
            },
            {
              "name": "Mortal254",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 254,
              "docs": []
            },
            {
              "name": "Mortal255",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 255,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 437,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_nonce",
        "CheckNonce"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 88,
              "typeName": "T::Index",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 438,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_weight",
        "CheckWeight"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 439,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "ChargeTransactionPayment"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 51,
              "typeName": "BalanceOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 440,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "PrevalidateAttests"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  }
]