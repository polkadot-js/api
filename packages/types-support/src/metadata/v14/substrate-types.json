[
  {
    "id": 0,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "AccountId32"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 1,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 32,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 2,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U8"
      },
      "docs": []
    }
  },
  {
    "id": 3,
    "type": {
      "path": [
        "frame_system",
        "AccountInfo"
      ],
      "params": [
        {
          "name": "Index",
          "type": 4
        },
        {
          "name": "AccountData",
          "type": 5
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "nonce",
              "type": 4,
              "typeName": "Index",
              "docs": []
            },
            {
              "name": "consumers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "providers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "sufficients",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "data",
              "type": 5,
              "typeName": "AccountData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 4,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U32"
      },
      "docs": []
    }
  },
  {
    "id": 5,
    "type": {
      "path": [
        "pallet_balances",
        "AccountData"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "free",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "misc_frozen",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee_frozen",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 6,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U128"
      },
      "docs": []
    }
  },
  {
    "id": 7,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 8
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 8,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 8,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 8,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 8,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U64"
      },
      "docs": []
    }
  },
  {
    "id": 9,
    "type": {
      "path": [
        "primitive_types",
        "H256"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 10,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 11,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "Digest"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "logs",
              "type": 12,
              "typeName": "Vec<DigestItem>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 12,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 13
        }
      },
      "docs": []
    }
  },
  {
    "id": 13,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "DigestItem"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PreRuntime",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Consensus",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Seal",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "RuntimeEnvironmentUpdated",
              "fields": [],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 14,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 15,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 16
        }
      },
      "docs": []
    }
  },
  {
    "id": 16,
    "type": {
      "path": [
        "frame_system",
        "EventRecord"
      ],
      "params": [
        {
          "name": "E",
          "type": 17
        },
        {
          "name": "T",
          "type": 9
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "phase",
              "type": 97,
              "typeName": "Phase",
              "docs": []
            },
            {
              "name": "event",
              "type": 17,
              "typeName": "E",
              "docs": []
            },
            {
              "name": "topics",
              "type": 98,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 17,
    "type": {
      "path": [
        "node_runtime",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "frame_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 25,
                  "typeName": "pallet_utility::Event",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Indices",
              "fields": [
                {
                  "name": null,
                  "type": 28,
                  "typeName": "pallet_indices::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 29,
                  "typeName": "pallet_balances::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "ElectionProviderMultiPhase",
              "fields": [
                {
                  "name": null,
                  "type": 31,
                  "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [
                {
                  "name": null,
                  "type": 35,
                  "typeName": "pallet_staking::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 36,
                  "typeName": "pallet_session::Event",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Democracy",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": "pallet_democracy::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Council",
              "fields": [
                {
                  "name": null,
                  "type": 42,
                  "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance1>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "TechnicalCommittee",
              "fields": [
                {
                  "name": null,
                  "type": 43,
                  "typeName": "pallet_collective::Event<Runtime, pallet_collective::Instance2>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Elections",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "pallet_elections_phragmen::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "TechnicalMembership",
              "fields": [
                {
                  "name": null,
                  "type": 47,
                  "typeName": "pallet_membership::Event<Runtime, pallet_membership::Instance1>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "name": null,
                  "type": 48,
                  "typeName": "pallet_grandpa::Event",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [
                {
                  "name": null,
                  "type": 53,
                  "typeName": "pallet_treasury::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Contracts",
              "fields": [
                {
                  "name": null,
                  "type": 54,
                  "typeName": "pallet_contracts::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Sudo",
              "fields": [
                {
                  "name": null,
                  "type": 55,
                  "typeName": "pallet_sudo::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "ImOnline",
              "fields": [
                {
                  "name": null,
                  "type": 57,
                  "typeName": "pallet_im_online::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Offences",
              "fields": [
                {
                  "name": null,
                  "type": 66,
                  "typeName": "pallet_offences::Event",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Identity",
              "fields": [
                {
                  "name": null,
                  "type": 68,
                  "typeName": "pallet_identity::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Society",
              "fields": [
                {
                  "name": null,
                  "type": 69,
                  "typeName": "pallet_society::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Recovery",
              "fields": [
                {
                  "name": null,
                  "type": 70,
                  "typeName": "pallet_recovery::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "pallet_vesting::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Scheduler",
              "fields": [
                {
                  "name": null,
                  "type": 72,
                  "typeName": "pallet_scheduler::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Preimage",
              "fields": [
                {
                  "name": null,
                  "type": 76,
                  "typeName": "pallet_preimage::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 77,
                  "typeName": "pallet_proxy::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "pallet_multisig::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Bounties",
              "fields": [
                {
                  "name": null,
                  "type": 82,
                  "typeName": "pallet_bounties::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Tips",
              "fields": [
                {
                  "name": null,
                  "type": 83,
                  "typeName": "pallet_tips::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "pallet_assets::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Lottery",
              "fields": [
                {
                  "name": null,
                  "type": 85,
                  "typeName": "pallet_lottery::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Gilt",
              "fields": [
                {
                  "name": null,
                  "type": 87,
                  "typeName": "pallet_gilt::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Uniques",
              "fields": [
                {
                  "name": null,
                  "type": 88,
                  "typeName": "pallet_uniques::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "TransactionStorage",
              "fields": [
                {
                  "name": null,
                  "type": 94,
                  "typeName": "pallet_transaction_storage::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "BagsList",
              "fields": [
                {
                  "name": null,
                  "type": 95,
                  "typeName": "pallet_bags_list::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "ChildBounties",
              "fields": [
                {
                  "name": null,
                  "type": 96,
                  "typeName": "pallet_child_bounties::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 18,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ExtrinsicSuccess",
              "fields": [
                {
                  "name": "dispatch_info",
                  "type": 19,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An extrinsic completed successfully."
              ]
            },
            {
              "name": "ExtrinsicFailed",
              "fields": [
                {
                  "name": "dispatch_error",
                  "type": 22,
                  "typeName": "DispatchError",
                  "docs": []
                },
                {
                  "name": "dispatch_info",
                  "type": 19,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An extrinsic failed."
              ]
            },
            {
              "name": "CodeUpdated",
              "fields": [],
              "index": 2,
              "docs": [
                "`:code` was updated."
              ]
            },
            {
              "name": "NewAccount",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A new account was created."
              ]
            },
            {
              "name": "KilledAccount",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An account was reaped."
              ]
            },
            {
              "name": "Remarked",
              "fields": [
                {
                  "name": "sender",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "On on-chain remark happened."
              ]
            }
          ]
        }
      },
      "docs": [
        "Event for the System pallet."
      ]
    }
  },
  {
    "id": 19,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "DispatchInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "weight",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "type": 20,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "pays_fee",
              "type": 21,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 20,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "DispatchClass"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Normal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Operational",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mandatory",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 21,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "Pays"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Yes",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "No",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 22,
    "type": {
      "path": [
        "sp_runtime",
        "DispatchError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Other",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Module",
              "fields": [
                {
                  "name": "index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "ConsumerRemaining",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "NoProviders",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "TooManyConsumers",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Token",
              "fields": [
                {
                  "name": null,
                  "type": 23,
                  "typeName": "TokenError",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Arithmetic",
              "fields": [
                {
                  "name": null,
                  "type": 24,
                  "typeName": "ArithmeticError",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 23,
    "type": {
      "path": [
        "sp_runtime",
        "TokenError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NoFunds",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BelowMinimum",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CannotCreate",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "UnknownAsset",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 24,
    "type": {
      "path": [
        "sp_runtime",
        "ArithmeticError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Underflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DivisionByZero",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 25,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BatchInterrupted",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 22,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                "well as the error."
              ]
            },
            {
              "name": "BatchCompleted",
              "fields": [],
              "index": 1,
              "docs": [
                "Batch of dispatches completed fully with no error."
              ]
            },
            {
              "name": "ItemCompleted",
              "fields": [],
              "index": 2,
              "docs": [
                "A single item within a Batch of dispatches has completed with no error."
              ]
            },
            {
              "name": "DispatchedAs",
              "fields": [
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A call was dispatched."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 26,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 27
        },
        {
          "name": "E",
          "type": 22
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 27,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 22,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 27,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": []
      },
      "docs": []
    }
  },
  {
    "id": 28,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "IndexAssigned",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A account index was assigned."
              ]
            },
            {
              "name": "IndexFreed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A account index has been freed up (unassigned)."
              ]
            },
            {
              "name": "IndexFrozen",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A account index has been frozen to its current account ID."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 29,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Endowed",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An account was created with some free balance."
              ]
            },
            {
              "name": "DustLost",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                "resulting in an outright loss."
              ]
            },
            {
              "name": "Transfer",
              "fields": [
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer succeeded."
              ]
            },
            {
              "name": "BalanceSet",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "reserved",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A balance was set by root."
              ]
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some balance was reserved (moved from free to reserved)."
              ]
            },
            {
              "name": "Unreserved",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Some balance was unreserved (moved from reserved to free)."
              ]
            },
            {
              "name": "ReserveRepatriated",
              "fields": [
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "destination_status",
                  "type": 30,
                  "typeName": "Status",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some balance was moved from the reserve of the first account to the second account.",
                "Final argument indicates the destination balance type."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some amount was deposited (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Withdraw",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some amount was withdrawn from the account (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some amount was removed from the account (e.g. for misbehavior)."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 30,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "BalanceStatus"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Free",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reserved",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 31,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "SolutionStored",
              "fields": [
                {
                  "name": "election_compute",
                  "type": 32,
                  "typeName": "ElectionCompute",
                  "docs": []
                },
                {
                  "name": "prev_ejected",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A solution was stored with the given compute.",
                "",
                "If the solution is signed, this means that it hasn't yet been processed. If the",
                "solution is unsigned, this means that it has also been processed.",
                "",
                "The `bool` is `true` when a previous solution was ejected to make room for this one."
              ]
            },
            {
              "name": "ElectionFinalized",
              "fields": [
                {
                  "name": "election_compute",
                  "type": 34,
                  "typeName": "Option<ElectionCompute>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The election has been finalized, with `Some` of the given computation, or else if the",
                "election failed, `None`."
              ]
            },
            {
              "name": "Rewarded",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An account has been rewarded for their signed submission being finalized."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An account has been slashed for submitting an invalid signed submission."
              ]
            },
            {
              "name": "SignedPhaseStarted",
              "fields": [
                {
                  "name": "round",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The signed phase of the given round has started."
              ]
            },
            {
              "name": "UnsignedPhaseStarted",
              "fields": [
                {
                  "name": "round",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The unsigned phase of the given round has started."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 32,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "ElectionCompute"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "OnChain",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsigned",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Fallback",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Emergency",
              "fields": [],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 33,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Bool"
      },
      "docs": []
    }
  },
  {
    "id": 34,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 32
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 32,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 35,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "EraPaid",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The era payout has been set; the first balance is the validator-payout; the second is",
                "the remainder from the maximum amount of reward.",
                "\\[era_index, validator_payout, remainder\\]"
              ]
            },
            {
              "name": "Rewarded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The nominator has been rewarded by this amount. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "One validator (and its nominators) has been slashed by the given amount.",
                "\\[validator, amount\\]"
              ]
            },
            {
              "name": "OldSlashingReportDiscarded",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An old slashing report from a prior era was discarded because it could",
                "not be processed. \\[session_index\\]"
              ]
            },
            {
              "name": "StakersElected",
              "fields": [],
              "index": 4,
              "docs": [
                "A new set of stakers was elected."
              ]
            },
            {
              "name": "Bonded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An account has bonded this amount. \\[stash, amount\\]",
                "",
                "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                "it will not be emitted for staking rewards when they are added to stake."
              ]
            },
            {
              "name": "Unbonded",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An account has unbonded this amount. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                "from the unlocking queue. \\[stash, amount\\]"
              ]
            },
            {
              "name": "Kicked",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A nominator has been kicked from a validator. \\[nominator, stash\\]"
              ]
            },
            {
              "name": "StakingElectionFailed",
              "fields": [],
              "index": 9,
              "docs": [
                "The election failed. No new era is planned."
              ]
            },
            {
              "name": "Chilled",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "An account has stopped participating as either a validator or nominator.",
                "\\[stash\\]"
              ]
            },
            {
              "name": "PayoutStarted",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 36,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewSession",
              "fields": [
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New session has happened. Note that the argument is the session index, not the",
                "block number as the type might suggest."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 37,
    "type": {
      "path": [
        "pallet_democracy",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "PropIndex",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A motion has been proposed by a public account."
              ]
            },
            {
              "name": "Tabled",
              "fields": [
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "PropIndex",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "depositors",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A public proposal has been tabled for referendum vote."
              ]
            },
            {
              "name": "ExternalTabled",
              "fields": [],
              "index": 2,
              "docs": [
                "An external proposal has been tabled."
              ]
            },
            {
              "name": "Started",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 39,
                  "typeName": "VoteThreshold",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A referendum has begun."
              ]
            },
            {
              "name": "Passed",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A proposal has been approved by referendum."
              ]
            },
            {
              "name": "NotPassed",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A proposal has been rejected by referendum."
              ]
            },
            {
              "name": "Cancelled",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A referendum has been cancelled."
              ]
            },
            {
              "name": "Executed",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A proposal has been enacted."
              ]
            },
            {
              "name": "Delegated",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "An account has delegated their vote to another account."
              ]
            },
            {
              "name": "Undelegated",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "An account has cancelled a previous delegation operation."
              ]
            },
            {
              "name": "Vetoed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "until",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "An external proposal has been vetoed."
              ]
            },
            {
              "name": "PreimageNoted",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "A proposal's preimage was noted, and the deposit taken."
              ]
            },
            {
              "name": "PreimageUsed",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "provider",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "A proposal preimage was removed and used (the deposit was returned)."
              ]
            },
            {
              "name": "PreimageInvalid",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "A proposal could not be executed because its preimage was invalid."
              ]
            },
            {
              "name": "PreimageMissing",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "A proposal could not be executed because its preimage was missing."
              ]
            },
            {
              "name": "PreimageReaped",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "provider",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "reaper",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "A registered preimage was removed and the deposit collected by the reaper."
              ]
            },
            {
              "name": "Blacklisted",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "A proposal_hash has been blacklisted permanently."
              ]
            },
            {
              "name": "Voted",
              "fields": [
                {
                  "name": "voter",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": "vote",
                  "type": 40,
                  "typeName": "AccountVote<BalanceOf<T>>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "An account has voted in a referendum"
              ]
            },
            {
              "name": "Seconded",
              "fields": [
                {
                  "name": "seconder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "prop_index",
                  "type": 4,
                  "typeName": "PropIndex",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "An account has secconded a proposal"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 38,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 0
        }
      },
      "docs": []
    }
  },
  {
    "id": 39,
    "type": {
      "path": [
        "pallet_democracy",
        "vote_threshold",
        "VoteThreshold"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "SuperMajorityApprove",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SuperMajorityAgainst",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "SimpleMajority",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 40,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "AccountVote"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Standard",
              "fields": [
                {
                  "name": "vote",
                  "type": 41,
                  "typeName": "Vote",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Split",
              "fields": [
                {
                  "name": "aye",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "nay",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 41,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "Vote"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 2,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 42,
    "type": {
      "path": [
        "pallet_collective",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A motion (given hash) has been proposed (by given account) with a threshold (given",
                "`MemberCount`)."
              ]
            },
            {
              "name": "Voted",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "voted",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "yes",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "no",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A motion (given hash) has been voted on by given account, leaving",
                "a tally (yes votes and no votes given respectively as `MemberCount`)."
              ]
            },
            {
              "name": "Approved",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A motion was approved by the required threshold."
              ]
            },
            {
              "name": "Disapproved",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A motion was not approved by the required threshold."
              ]
            },
            {
              "name": "Executed",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A motion was executed; result will be `Ok` if it returned without error."
              ]
            },
            {
              "name": "MemberExecuted",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A single member did some action; result will be `Ok` if it returned without error."
              ]
            },
            {
              "name": "Closed",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "yes",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "no",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A proposal was closed because its threshold was reached or after its duration was up."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 43,
    "type": {
      "path": [
        "pallet_collective",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A motion (given hash) has been proposed (by given account) with a threshold (given",
                "`MemberCount`)."
              ]
            },
            {
              "name": "Voted",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "voted",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "yes",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "no",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A motion (given hash) has been voted on by given account, leaving",
                "a tally (yes votes and no votes given respectively as `MemberCount`)."
              ]
            },
            {
              "name": "Approved",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A motion was approved by the required threshold."
              ]
            },
            {
              "name": "Disapproved",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A motion was not approved by the required threshold."
              ]
            },
            {
              "name": "Executed",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A motion was executed; result will be `Ok` if it returned without error."
              ]
            },
            {
              "name": "MemberExecuted",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A single member did some action; result will be `Ok` if it returned without error."
              ]
            },
            {
              "name": "Closed",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "yes",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "no",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A proposal was closed because its threshold was reached or after its duration was up."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 44,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewTerm",
              "fields": [
                {
                  "name": "new_members",
                  "type": 45,
                  "typeName": "Vec<(<T as frame_system::Config>::AccountId, BalanceOf<T>)>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new term with new_members. This indicates that enough candidates existed to run",
                "the election, not that enough have has been elected. The inner value must be examined",
                "for this purpose. A `NewTerm(\\[\\])` indicates that some candidates got their bond",
                "slashed and none were elected, whilst `EmptyTerm` means that no candidates existed to",
                "begin with."
              ]
            },
            {
              "name": "EmptyTerm",
              "fields": [],
              "index": 1,
              "docs": [
                "No (or not enough) candidates existed for this round. This is different from",
                "`NewTerm(\\[\\])`. See the description of `NewTerm`."
              ]
            },
            {
              "name": "ElectionError",
              "fields": [],
              "index": 2,
              "docs": [
                "Internal error happened while trying to perform election."
              ]
            },
            {
              "name": "MemberKicked",
              "fields": [
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A member has been removed. This should always be followed by either `NewTerm` or",
                "`EmptyTerm`."
              ]
            },
            {
              "name": "Renounced",
              "fields": [
                {
                  "name": "candidate",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Someone has renounced their candidacy."
              ]
            },
            {
              "name": "CandidateSlashed",
              "fields": [
                {
                  "name": "candidate",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A candidate was slashed by amount due to failing to obtain a seat as member or",
                "runner-up.",
                "",
                "Note that old members and runners-up are also candidates."
              ]
            },
            {
              "name": "SeatHolderSlashed",
              "fields": [
                {
                  "name": "seat_holder",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A seat holder was slashed by amount by being forcefully removed from the set."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 45,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 46
        }
      },
      "docs": []
    }
  },
  {
    "id": 46,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 47,
    "type": {
      "path": [
        "pallet_membership",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MemberAdded",
              "fields": [],
              "index": 0,
              "docs": [
                "The given member was added; see the transaction for who."
              ]
            },
            {
              "name": "MemberRemoved",
              "fields": [],
              "index": 1,
              "docs": [
                "The given member was removed; see the transaction for who."
              ]
            },
            {
              "name": "MembersSwapped",
              "fields": [],
              "index": 2,
              "docs": [
                "Two members were swapped; see the transaction for who."
              ]
            },
            {
              "name": "MembersReset",
              "fields": [],
              "index": 3,
              "docs": [
                "The membership was reset; see the transaction for who the new set is."
              ]
            },
            {
              "name": "KeyChanged",
              "fields": [],
              "index": 4,
              "docs": [
                "One of the members' keys changed."
              ]
            },
            {
              "name": "Dummy",
              "fields": [],
              "index": 5,
              "docs": [
                "Phantom member, never used."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 48,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewAuthorities",
              "fields": [
                {
                  "name": "authority_set",
                  "type": 49,
                  "typeName": "AuthorityList",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New authority set has been applied."
              ]
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 1,
              "docs": [
                "Current authority set has been paused."
              ]
            },
            {
              "name": "Resumed",
              "fields": [],
              "index": 2,
              "docs": [
                "Current authority set has been resumed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 49,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 50
        }
      },
      "docs": []
    }
  },
  {
    "id": 50,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          51,
          8
        ]
      },
      "docs": []
    }
  },
  {
    "id": 51,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 52,
              "typeName": "ed25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 52,
    "type": {
      "path": [
        "sp_core",
        "ed25519",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 53,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New proposal."
              ]
            },
            {
              "name": "Spending",
              "fields": [
                {
                  "name": "budget_remaining",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "We have ended a spend period and will now allocate funds."
              ]
            },
            {
              "name": "Awarded",
              "fields": [
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "award",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some funds have been allocated."
              ]
            },
            {
              "name": "Rejected",
              "fields": [
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "slashed",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A proposal was rejected; funds were slashed."
              ]
            },
            {
              "name": "Burnt",
              "fields": [
                {
                  "name": "burnt_funds",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some of our funds have been burnt."
              ]
            },
            {
              "name": "Rollover",
              "fields": [
                {
                  "name": "rollover_balance",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Spending has finished; this is the amount that rolls over until next spend."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some funds have been deposited."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 54,
    "type": {
      "path": [
        "pallet_contracts",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Instantiated",
              "fields": [
                {
                  "name": "deployer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "contract",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Contract deployed by address at the specified address."
              ]
            },
            {
              "name": "Terminated",
              "fields": [
                {
                  "name": "contract",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The contract that was terminated."
                  ]
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that received the contracts remaining balance"
                  ]
                }
              ],
              "index": 1,
              "docs": [
                "Contract has been removed.",
                "",
                "# Note",
                "",
                "The only way for a contract to be removed and emitting this event is by calling",
                "`seal_terminate`."
              ]
            },
            {
              "name": "CodeStored",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Code with the specified hash has been stored."
              ]
            },
            {
              "name": "ContractEmitted",
              "fields": [
                {
                  "name": "contract",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The contract that emitted the event."
                  ]
                },
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": [
                    "Data supplied by the contract. Metadata generated during contract compilation",
                    "is needed to decode it."
                  ]
                }
              ],
              "index": 3,
              "docs": [
                "A custom event emitted by the contract."
              ]
            },
            {
              "name": "CodeRemoved",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A code with the specified hash was removed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 55,
    "type": {
      "path": [
        "pallet_sudo",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Sudid",
              "fields": [
                {
                  "name": "sudo_result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A sudo just took place. \\[result\\]"
              ]
            },
            {
              "name": "KeyChanged",
              "fields": [
                {
                  "name": "old_sudoer",
                  "type": 56,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
              ]
            },
            {
              "name": "SudoAsDone",
              "fields": [
                {
                  "name": "sudo_result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A sudo just took place. \\[result\\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 56,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 57,
    "type": {
      "path": [
        "pallet_im_online",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "HeartbeatReceived",
              "fields": [
                {
                  "name": "authority_id",
                  "type": 58,
                  "typeName": "T::AuthorityId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new heartbeat was received from `AuthorityId`."
              ]
            },
            {
              "name": "AllGood",
              "fields": [],
              "index": 1,
              "docs": [
                "At the end of the session, no offence was committed."
              ]
            },
            {
              "name": "SomeOffline",
              "fields": [
                {
                  "name": "offline",
                  "type": 60,
                  "typeName": "Vec<IdentificationTuple<T>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "At the end of the session, at least one validator was found to be offline."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 58,
    "type": {
      "path": [
        "pallet_im_online",
        "sr25519",
        "app_sr25519",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 59,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 59,
    "type": {
      "path": [
        "sp_core",
        "sr25519",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 60,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 61
        }
      },
      "docs": []
    }
  },
  {
    "id": 61,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          62
        ]
      },
      "docs": []
    }
  },
  {
    "id": 62,
    "type": {
      "path": [
        "pallet_staking",
        "Exposure"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "own",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "others",
              "type": 64,
              "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 63,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 6
        }
      },
      "docs": []
    }
  },
  {
    "id": 64,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 65
        }
      },
      "docs": []
    }
  },
  {
    "id": 65,
    "type": {
      "path": [
        "pallet_staking",
        "IndividualExposure"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 66,
    "type": {
      "path": [
        "pallet_offences",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Offence",
              "fields": [
                {
                  "name": "kind",
                  "type": 67,
                  "typeName": "Kind",
                  "docs": []
                },
                {
                  "name": "timeslot",
                  "type": 10,
                  "typeName": "OpaqueTimeSlot",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "There is an offence reported of the given `kind` happened at the `session_index` and",
                "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                "\\[kind, timeslot\\]."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events type."
      ]
    }
  },
  {
    "id": 67,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 16,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 68,
    "type": {
      "path": [
        "pallet_identity",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "IdentitySet",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A name was set or reset (which will remove all judgements)."
              ]
            },
            {
              "name": "IdentityCleared",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A name was cleared, and the given balance returned."
              ]
            },
            {
              "name": "IdentityKilled",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A name was removed and the given balance slashed."
              ]
            },
            {
              "name": "JudgementRequested",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "registrar_index",
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A judgement was asked from a registrar."
              ]
            },
            {
              "name": "JudgementUnrequested",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "registrar_index",
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A judgement request was retracted."
              ]
            },
            {
              "name": "JudgementGiven",
              "fields": [
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "registrar_index",
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A judgement was given by a registrar."
              ]
            },
            {
              "name": "RegistrarAdded",
              "fields": [
                {
                  "name": "registrar_index",
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A registrar was added."
              ]
            },
            {
              "name": "SubIdentityAdded",
              "fields": [
                {
                  "name": "sub",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "main",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A sub-identity was added to an identity and the deposit paid."
              ]
            },
            {
              "name": "SubIdentityRemoved",
              "fields": [
                {
                  "name": "sub",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "main",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A sub-identity was removed from an identity and the deposit freed."
              ]
            },
            {
              "name": "SubIdentityRevoked",
              "fields": [
                {
                  "name": "sub",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "main",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A sub-identity was cleared, and the given deposit repatriated from the",
                "main identity account to the sub-identity account."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 69,
    "type": {
      "path": [
        "pallet_society",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Founded",
              "fields": [
                {
                  "name": "founder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The society is founded by the given identity."
              ]
            },
            {
              "name": "Bid",
              "fields": [
                {
                  "name": "candidate_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "offer",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A membership bid just happened. The given account is the candidate's ID and their offer",
                "is the second."
              ]
            },
            {
              "name": "Vouch",
              "fields": [
                {
                  "name": "candidate_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "offer",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "vouching",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A membership bid just happened by vouching. The given account is the candidate's ID and",
                "their offer is the second. The vouching party is the third."
              ]
            },
            {
              "name": "AutoUnbid",
              "fields": [
                {
                  "name": "candidate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A candidate was dropped (due to an excess of bids in the system)."
              ]
            },
            {
              "name": "Unbid",
              "fields": [
                {
                  "name": "candidate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A candidate was dropped (by their request)."
              ]
            },
            {
              "name": "Unvouch",
              "fields": [
                {
                  "name": "candidate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A candidate was dropped (by request of who vouched for them)."
              ]
            },
            {
              "name": "Inducted",
              "fields": [
                {
                  "name": "primary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "candidates",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A group of candidates have been inducted. The batch's primary is the first value, the",
                "batch in full is the second."
              ]
            },
            {
              "name": "SuspendedMemberJudgement",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "judged",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A suspended member has been judged."
              ]
            },
            {
              "name": "CandidateSuspended",
              "fields": [
                {
                  "name": "candidate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A candidate has been suspended"
              ]
            },
            {
              "name": "MemberSuspended",
              "fields": [
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A member has been suspended"
              ]
            },
            {
              "name": "Challenged",
              "fields": [
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "A member has been challenged"
              ]
            },
            {
              "name": "Vote",
              "fields": [
                {
                  "name": "candidate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "voter",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "vote",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "A vote has been placed"
              ]
            },
            {
              "name": "DefenderVote",
              "fields": [
                {
                  "name": "voter",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "vote",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "A vote has been placed for a defending member"
              ]
            },
            {
              "name": "NewMaxMembers",
              "fields": [
                {
                  "name": "max",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "A new \\[max\\] member count has been set"
              ]
            },
            {
              "name": "Unfounded",
              "fields": [
                {
                  "name": "founder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Society is unfounded."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Some funds were deposited into the society account."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 70,
    "type": {
      "path": [
        "pallet_recovery",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "RecoveryCreated",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A recovery process has been set up for an account."
              ]
            },
            {
              "name": "RecoveryInitiated",
              "fields": [
                {
                  "name": "lost_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "rescuer_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A recovery process has been initiated for lost account by rescuer account."
              ]
            },
            {
              "name": "RecoveryVouched",
              "fields": [
                {
                  "name": "lost_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "rescuer_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A recovery process for lost account by rescuer account has been vouched for by sender."
              ]
            },
            {
              "name": "RecoveryClosed",
              "fields": [
                {
                  "name": "lost_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "rescuer_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A recovery process for lost account by rescuer account has been closed."
              ]
            },
            {
              "name": "AccountRecovered",
              "fields": [
                {
                  "name": "lost_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "rescuer_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Lost account has been successfully recovered by rescuer account."
              ]
            },
            {
              "name": "RecoveryRemoved",
              "fields": [
                {
                  "name": "lost_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A recovery process has been removed for an account."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events type."
      ]
    }
  },
  {
    "id": 71,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingUpdated",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "unvested",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The amount vested has been updated. This could indicate a change in funds available.",
                "The balance given is the amount which is left unvested (and thus locked)."
              ]
            },
            {
              "name": "VestingCompleted",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An \\[account\\] has become fully vested."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 72,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Scheduled",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Scheduled some task."
              ]
            },
            {
              "name": "Canceled",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Canceled some task."
              ]
            },
            {
              "name": "Dispatched",
              "fields": [
                {
                  "name": "task",
                  "type": 73,
                  "typeName": "TaskAddress<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 74,
                  "typeName": "Option<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Dispatched some task."
              ]
            },
            {
              "name": "CallLookupFailed",
              "fields": [
                {
                  "name": "task",
                  "type": 73,
                  "typeName": "TaskAddress<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 74,
                  "typeName": "Option<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 75,
                  "typeName": "LookupError",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "The call for the provided hash was not found so the task has been aborted."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events type."
      ]
    }
  },
  {
    "id": 73,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 74,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 75,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "schedule",
        "LookupError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unknown",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "BadFormat",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 76,
    "type": {
      "path": [
        "pallet_preimage",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noted",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A preimage has been noted."
              ]
            },
            {
              "name": "Requested",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A preimage has been requested."
              ]
            },
            {
              "name": "Cleared",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A preimage has ben cleared."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 77,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ProxyExecuted",
              "fields": [
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A proxy was executed correctly, with the given."
              ]
            },
            {
              "name": "AnonymousCreated",
              "fields": [
                {
                  "name": "anonymous",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 78,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "disambiguation_index",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Anonymous account has been created by new proxy with given",
                "disambiguation index and proxy type."
              ]
            },
            {
              "name": "Announced",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An announcement was placed to make a call in the future."
              ]
            },
            {
              "name": "ProxyAdded",
              "fields": [
                {
                  "name": "delegator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegatee",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 78,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A proxy was added."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 78,
    "type": {
      "path": [
        "node_runtime",
        "ProxyType"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonTransfer",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Governance",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 79,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U16"
      },
      "docs": []
    }
  },
  {
    "id": 80,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewMultisig",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new multisig operation has begun."
              ]
            },
            {
              "name": "MultisigApproval",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 81,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A multisig operation has been approved by someone."
              ]
            },
            {
              "name": "MultisigExecuted",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 81,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 26,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A multisig operation has been executed."
              ]
            },
            {
              "name": "MultisigCancelled",
              "fields": [
                {
                  "name": "cancelling",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 81,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A multisig operation has been cancelled."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 81,
    "type": {
      "path": [
        "pallet_multisig",
        "Timepoint"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "index",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 82,
    "type": {
      "path": [
        "pallet_bounties",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BountyProposed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New bounty proposal."
              ]
            },
            {
              "name": "BountyRejected",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "bond",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A bounty proposal was rejected; funds were slashed."
              ]
            },
            {
              "name": "BountyBecameActive",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A bounty proposal is funded and became active."
              ]
            },
            {
              "name": "BountyAwarded",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A bounty is awarded to a beneficiary."
              ]
            },
            {
              "name": "BountyClaimed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "payout",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A bounty is claimed by beneficiary."
              ]
            },
            {
              "name": "BountyCanceled",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A bounty is cancelled."
              ]
            },
            {
              "name": "BountyExtended",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A bounty expiry is extended."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 83,
    "type": {
      "path": [
        "pallet_tips",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewTip",
              "fields": [
                {
                  "name": "tip_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new tip suggestion has been opened."
              ]
            },
            {
              "name": "TipClosing",
              "fields": [
                {
                  "name": "tip_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A tip suggestion has reached threshold and is closing."
              ]
            },
            {
              "name": "TipClosed",
              "fields": [
                {
                  "name": "tip_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "payout",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A tip suggestion has been closed."
              ]
            },
            {
              "name": "TipRetracted",
              "fields": [
                {
                  "name": "tip_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A tip suggestion has been retracted."
              ]
            },
            {
              "name": "TipSlashed",
              "fields": [
                {
                  "name": "tip_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "finder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A tip suggestion has been slashed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 84,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Some asset class was created."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "total_supply",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some assets were issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some assets were transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Some assets were destroyed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some account `who` was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some account `who` was thawed."
              ]
            },
            {
              "name": "AssetFrozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some asset `asset_id` was frozen."
              ]
            },
            {
              "name": "AssetThawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some asset `asset_id` was thawed."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "An asset class was destroyed."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Some asset class was force-created."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "New metadata has been set for an asset."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Metadata has been cleared for an asset."
              ]
            },
            {
              "name": "ApprovedTransfer",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "(Additional) funds have been approved for transfer to a destination account."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "An approval for account `delegate` was cancelled by `owner`."
              ]
            },
            {
              "name": "TransferredApproved",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "An `amount` was transferred in its entirety from `owner` to `destination` by",
                "the approved `delegate`."
              ]
            },
            {
              "name": "AssetStatusChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "An asset has had its attributes changed by the `Force` origin."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 85,
    "type": {
      "path": [
        "pallet_lottery",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "LotteryStarted",
              "fields": [],
              "index": 0,
              "docs": [
                "A lottery has been started!"
              ]
            },
            {
              "name": "CallsUpdated",
              "fields": [],
              "index": 1,
              "docs": [
                "A new set of calls have been set!"
              ]
            },
            {
              "name": "Winner",
              "fields": [
                {
                  "name": "winner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "lottery_balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A winner has been chosen!"
              ]
            },
            {
              "name": "TicketBought",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 86,
                  "typeName": "CallIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A ticket has been bought!"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 86,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          2,
          2
        ]
      },
      "docs": []
    }
  },
  {
    "id": 87,
    "type": {
      "path": [
        "pallet_gilt",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BidPlaced",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "duration",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A bid was successfully placed."
              ]
            },
            {
              "name": "BidRetracted",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "duration",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A bid was successfully removed (before being accepted as a gilt)."
              ]
            },
            {
              "name": "GiltIssued",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ActiveIndex",
                  "docs": []
                },
                {
                  "name": "expiry",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A bid was accepted as a gilt. The balance may not be released until expiry."
              ]
            },
            {
              "name": "GiltThawed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ActiveIndex",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "original_amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "additional_amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An expired gilt has been thawed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 88,
    "type": {
      "path": [
        "pallet_uniques",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An asset class was created."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An asset class was force-created."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An asset `class` was destroyed."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An asset `instance` was issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An asset `instance` was transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An asset `instance` was destroyed."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some asset `instance` was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some asset `instance` was thawed."
              ]
            },
            {
              "name": "ClassFrozen",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some asset `class` was frozen."
              ]
            },
            {
              "name": "ClassThawed",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some asset `class` was thawed."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "new_owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "ApprovedTransfer",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An `instance` of an asset `class` has been approved by the `owner` for transfer by a",
                "`delegate`."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "An approval for a `delegate` account to transfer the `instance` of an asset `class` was",
                "cancelled by its `owner`."
              ]
            },
            {
              "name": "AssetStatusChanged",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "An asset `class` has had its attributes changed by the `Force` origin."
              ]
            },
            {
              "name": "ClassMetadataSet",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 89,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "New metadata has been set for an asset class."
              ]
            },
            {
              "name": "ClassMetadataCleared",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Metadata has been cleared for an asset class."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 89,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "New metadata has been set for an asset instance."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 4,
                  "typeName": "T::InstanceId",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Metadata has been cleared for an asset instance."
              ]
            },
            {
              "name": "Redeposited",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "successful_instances",
                  "type": 90,
                  "typeName": "Vec<T::InstanceId>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Metadata has been cleared for an asset instance."
              ]
            },
            {
              "name": "AttributeSet",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "maybe_instance",
                  "type": 91,
                  "typeName": "Option<T::InstanceId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 92,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 93,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "New attribute metadata has been set for an asset class or instance."
              ]
            },
            {
              "name": "AttributeCleared",
              "fields": [
                {
                  "name": "class",
                  "type": 4,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "maybe_instance",
                  "type": 91,
                  "typeName": "Option<T::InstanceId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 92,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Attribute metadata has been cleared for an asset class or instance."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 89,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 90,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 91,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 92,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 93,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 94,
    "type": {
      "path": [
        "pallet_transaction_storage",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Stored",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Stored data under specified index."
              ]
            },
            {
              "name": "Renewed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Renewed data under specified index."
              ]
            },
            {
              "name": "ProofChecked",
              "fields": [],
              "index": 2,
              "docs": [
                "Storage proof was successfully checked."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 95,
    "type": {
      "path": [
        "pallet_bags_list",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Rebagged",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 8,
                  "typeName": "VoteWeight",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 8,
                  "typeName": "VoteWeight",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Moved an account from one bag to another."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 96,
    "type": {
      "path": [
        "pallet_child_bounties",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Added",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A child-bounty is added."
              ]
            },
            {
              "name": "Awarded",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A child-bounty is awarded to a beneficiary."
              ]
            },
            {
              "name": "Claimed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "payout",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A child-bounty is claimed by beneficiary."
              ]
            },
            {
              "name": "Canceled",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A child-bounty is cancelled."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 97,
    "type": {
      "path": [
        "frame_system",
        "Phase"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ApplyExtrinsic",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finalization",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Initialization",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 98,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 9
        }
      },
      "docs": []
    }
  },
  {
    "id": 99,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 73
        }
      },
      "docs": []
    }
  },
  {
    "id": 100,
    "type": {
      "path": [
        "frame_system",
        "LastRuntimeUpgradeInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_version",
              "type": 101,
              "typeName": "codec::Compact<u32>",
              "docs": []
            },
            {
              "name": "spec_name",
              "type": 102,
              "typeName": "sp_runtime::RuntimeString",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 101,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 102,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Str"
      },
      "docs": []
    }
  },
  {
    "id": 103,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "fill_block",
              "fields": [
                {
                  "name": "ratio",
                  "type": 104,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A dispatch that will fill the block weight up to the given ratio."
              ]
            },
            {
              "name": "remark",
              "fields": [
                {
                  "name": "remark",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Make some on-chain remark.",
                "",
                "# <weight>",
                "- `O(1)`",
                "# </weight>"
              ]
            },
            {
              "name": "set_heap_pages",
              "fields": [
                {
                  "name": "pages",
                  "type": 8,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the number of pages in the WebAssembly environment's heap."
              ]
            },
            {
              "name": "set_code",
              "fields": [
                {
                  "name": "code",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set the new runtime code.",
                "",
                "# <weight>",
                "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is",
                "  expensive).",
                "- 1 storage write (codec `O(C)`).",
                "- 1 digest item.",
                "- 1 event.",
                "The weight of this function is dependent on the runtime, but generally this is very",
                "expensive. We will treat this as a full block.",
                "# </weight>"
              ]
            },
            {
              "name": "set_code_without_checks",
              "fields": [
                {
                  "name": "code",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Set the new runtime code without doing any checks of the given `code`.",
                "",
                "# <weight>",
                "- `O(C)` where `C` length of `code`",
                "- 1 storage write (codec `O(C)`).",
                "- 1 digest item.",
                "- 1 event.",
                "The weight of this function is dependent on the runtime. We will treat this as a full",
                "block. # </weight>"
              ]
            },
            {
              "name": "set_storage",
              "fields": [
                {
                  "name": "items",
                  "type": 105,
                  "typeName": "Vec<KeyValue>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set some items of storage."
              ]
            },
            {
              "name": "kill_storage",
              "fields": [
                {
                  "name": "keys",
                  "type": 107,
                  "typeName": "Vec<Key>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Kill some items from storage."
              ]
            },
            {
              "name": "kill_prefix",
              "fields": [
                {
                  "name": "prefix",
                  "type": 10,
                  "typeName": "Key",
                  "docs": []
                },
                {
                  "name": "subkeys",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Kill all storage items with a key that starts with the given prefix.",
                "",
                "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                "the prefix we are removing to accurately calculate the weight of this function."
              ]
            },
            {
              "name": "remark_with_event",
              "fields": [
                {
                  "name": "remark",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Make some on-chain remark and emit event.",
                "",
                "# <weight>",
                "- `O(b)` where b is the length of the remark.",
                "- 1 event.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 104,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perbill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 105,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 106
        }
      },
      "docs": []
    }
  },
  {
    "id": 106,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          10,
          10
        ]
      },
      "docs": []
    }
  },
  {
    "id": 107,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 10
        }
      },
      "docs": []
    }
  },
  {
    "id": 108,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockWeights"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_block",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_block",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "per_class",
              "type": 109,
              "typeName": "PerDispatchClass<WeightsPerClass>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 109,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 110
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 110,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 110,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 110,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 110,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "WeightsPerClass"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_extrinsic",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_extrinsic",
              "type": 111,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "max_total",
              "type": 111,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 111,
              "typeName": "Option<Weight>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 111,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 8
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 8,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 112,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockLength"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max",
              "type": 113,
              "typeName": "PerDispatchClass<u32>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 113,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 4,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 114,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "RuntimeDbWeight"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "read",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "write",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 115,
    "type": {
      "path": [
        "sp_version",
        "RuntimeVersion"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_name",
              "type": 102,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "impl_name",
              "type": 102,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "authoring_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "spec_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "impl_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "apis",
              "type": 116,
              "typeName": "ApisVec",
              "docs": []
            },
            {
              "name": "transaction_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "state_version",
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 116,
    "type": {
      "path": [
        "Cow"
      ],
      "params": [
        {
          "name": "T",
          "type": 117
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 117,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 117,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 118
        }
      },
      "docs": []
    }
  },
  {
    "id": 118,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          119,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 119,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 120,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidSpecName",
              "fields": [],
              "index": 0,
              "docs": [
                "The name of specification does not match between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "fields": [],
              "index": 1,
              "docs": [
                "The specification version is not allowed to decrease between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to extract the runtime version from the new runtime.",
                "",
                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "fields": [],
              "index": 3,
              "docs": [
                "Suicide called when the account has non-default composite data."
              ]
            },
            {
              "name": "NonZeroRefCount",
              "fields": [],
              "index": 4,
              "docs": [
                "There is a non-zero reference count preventing the account from being purged."
              ]
            },
            {
              "name": "CallFiltered",
              "fields": [],
              "index": 5,
              "docs": [
                "The origin filter prevent the call to be dispatched."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the System pallet"
      ]
    }
  },
  {
    "id": 121,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "batch",
              "fields": [
                {
                  "name": "calls",
                  "type": 122,
                  "typeName": "Vec<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Send a batch of dispatch calls.",
                "",
                "May be called from any origin.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then call are dispatch without checking origin filter. (This includes",
                "bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "# <weight>",
                "- Complexity: O(C) where C is the number of calls to be batched.",
                "# </weight>",
                "",
                "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                "event is deposited. If a call failed and the batch was interrupted, then the",
                "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                "event is deposited."
              ]
            },
            {
              "name": "as_derivative",
              "fields": [
                {
                  "name": "index",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Send a call through an indexed pseudonym of the sender.",
                "",
                "Filter from origin are passed along. The call will be dispatched with an origin which",
                "use the same filter as the origin of this call.",
                "",
                "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                "because you expect `proxy` to have been used prior in the call stack and you do not want",
                "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                "in the Multisig pallet instead.",
                "",
                "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                "",
                "The dispatch origin for this call must be _Signed_."
              ]
            },
            {
              "name": "batch_all",
              "fields": [
                {
                  "name": "calls",
                  "type": 122,
                  "typeName": "Vec<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Send a batch of dispatch calls and atomically execute them.",
                "The whole transaction will rollback and fail if any of the calls failed.",
                "",
                "May be called from any origin.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then call are dispatch without checking origin filter. (This includes",
                "bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "# <weight>",
                "- Complexity: O(C) where C is the number of calls to be batched.",
                "# </weight>"
              ]
            },
            {
              "name": "dispatch_as",
              "fields": [
                {
                  "name": "as_origin",
                  "type": 311,
                  "typeName": "Box<T::PalletsOrigin>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Dispatches a function call with a provided origin.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "# <weight>",
                "- O(1).",
                "- Limited storage reads.",
                "- One DB write (event).",
                "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as().",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 122,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 123
        }
      },
      "docs": []
    }
  },
  {
    "id": 123,
    "type": {
      "path": [
        "node_runtime",
        "Call"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 121,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Babe",
              "fields": [
                {
                  "name": null,
                  "type": 124,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Timestamp",
              "fields": [
                {
                  "name": null,
                  "type": 134,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Authorship",
              "fields": [
                {
                  "name": null,
                  "type": 136,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Authorship, Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Indices",
              "fields": [
                {
                  "name": null,
                  "type": 138,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 139,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "ElectionProviderMultiPhase",
              "fields": [
                {
                  "name": null,
                  "type": 142,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [
                {
                  "name": null,
                  "type": 201,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 208,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Democracy",
              "fields": [
                {
                  "name": null,
                  "type": 211,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Democracy, Runtime>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Council",
              "fields": [
                {
                  "name": null,
                  "type": 213,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Council, Runtime>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "TechnicalCommittee",
              "fields": [
                {
                  "name": null,
                  "type": 214,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalCommittee, Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Elections",
              "fields": [
                {
                  "name": null,
                  "type": 215,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Elections, Runtime>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "TechnicalMembership",
              "fields": [
                {
                  "name": null,
                  "type": 217,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TechnicalMembership, Runtime>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "name": null,
                  "type": 218,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [
                {
                  "name": null,
                  "type": 230,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Contracts",
              "fields": [
                {
                  "name": null,
                  "type": 231,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Contracts, Runtime>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Sudo",
              "fields": [
                {
                  "name": null,
                  "type": 233,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "ImOnline",
              "fields": [
                {
                  "name": null,
                  "type": 234,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ImOnline, Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Identity",
              "fields": [
                {
                  "name": null,
                  "type": 242,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Identity, Runtime>",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Society",
              "fields": [
                {
                  "name": null,
                  "type": 282,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Society, Runtime>",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Recovery",
              "fields": [
                {
                  "name": null,
                  "type": 284,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Recovery, Runtime>",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 285,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Scheduler",
              "fields": [
                {
                  "name": null,
                  "type": 287,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Preimage",
              "fields": [
                {
                  "name": null,
                  "type": 290,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 291,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 293,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Bounties",
              "fields": [
                {
                  "name": null,
                  "type": 296,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Tips",
              "fields": [
                {
                  "name": null,
                  "type": 297,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tips, Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 298,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Lottery",
              "fields": [
                {
                  "name": null,
                  "type": 300,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Lottery, Runtime>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Gilt",
              "fields": [
                {
                  "name": null,
                  "type": 301,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Gilt, Runtime>",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Uniques",
              "fields": [
                {
                  "name": null,
                  "type": 304,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "TransactionStorage",
              "fields": [
                {
                  "name": null,
                  "type": 307,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<TransactionStorage, Runtime>",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "BagsList",
              "fields": [
                {
                  "name": null,
                  "type": 309,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<BagsList, Runtime>",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "ChildBounties",
              "fields": [
                {
                  "name": null,
                  "type": 310,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 124,
    "type": {
      "path": [
        "pallet_babe",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 125,
                  "typeName": "Box<EquivocationProof<T::Header>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 130,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report authority equivocation/misbehavior. This method will verify",
                "the equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence will",
                "be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 125,
                  "typeName": "Box<EquivocationProof<T::Header>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 130,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report authority equivocation/misbehavior. This method will verify",
                "the equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence will",
                "be reported.",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "plan_config_change",
              "fields": [
                {
                  "name": "config",
                  "type": 131,
                  "typeName": "NextConfigDescriptor",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                "Multiple calls to this method will replace any existing planned config change that had",
                "not been enacted yet."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 125,
    "type": {
      "path": [
        "sp_consensus_slots",
        "EquivocationProof"
      ],
      "params": [
        {
          "name": "Header",
          "type": 126
        },
        {
          "name": "Id",
          "type": 128
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "offender",
              "type": 128,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "slot",
              "type": 129,
              "typeName": "Slot",
              "docs": []
            },
            {
              "name": "first_header",
              "type": 126,
              "typeName": "Header",
              "docs": []
            },
            {
              "name": "second_header",
              "type": 126,
              "typeName": "Header",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 126,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "header",
        "Header"
      ],
      "params": [
        {
          "name": "Number",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 127
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_hash",
              "type": 9,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "number",
              "type": 101,
              "typeName": "Number",
              "docs": []
            },
            {
              "name": "state_root",
              "type": 9,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "extrinsics_root",
              "type": 9,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "digest",
              "type": 11,
              "typeName": "Digest",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 127,
    "type": {
      "path": [
        "sp_runtime",
        "traits",
        "BlakeTwo256"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 128,
    "type": {
      "path": [
        "sp_consensus_babe",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 59,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 129,
    "type": {
      "path": [
        "sp_consensus_slots",
        "Slot"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 8,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 130,
    "type": {
      "path": [
        "sp_session",
        "MembershipProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "session",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "trie_nodes",
              "type": 107,
              "typeName": "Vec<Vec<u8>>",
              "docs": []
            },
            {
              "name": "validator_count",
              "type": 4,
              "typeName": "ValidatorCount",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 131,
    "type": {
      "path": [
        "sp_consensus_babe",
        "digests",
        "NextConfigDescriptor"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1",
              "fields": [
                {
                  "name": "c",
                  "type": 132,
                  "typeName": "(u64, u64)",
                  "docs": []
                },
                {
                  "name": "allowed_slots",
                  "type": 133,
                  "typeName": "AllowedSlots",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 132,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          8,
          8
        ]
      },
      "docs": []
    }
  },
  {
    "id": 133,
    "type": {
      "path": [
        "sp_consensus_babe",
        "AllowedSlots"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PrimarySlots",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PrimaryAndSecondaryPlainSlots",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "PrimaryAndSecondaryVRFSlots",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 134,
    "type": {
      "path": [
        "pallet_timestamp",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set",
              "fields": [
                {
                  "name": "now",
                  "type": 135,
                  "typeName": "T::Moment",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current time.",
                "",
                "This call should be invoked exactly once per block. It will panic at the finalization",
                "phase, if this call hasn't been invoked by that time.",
                "",
                "The timestamp should be greater than the previous one by the amount specified by",
                "`MinimumPeriod`.",
                "",
                "The dispatch origin for this call must be `Inherent`.",
                "",
                "# <weight>",
                "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                "  `on_finalize`)",
                "- 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 135,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 8
        }
      },
      "docs": []
    }
  },
  {
    "id": 136,
    "type": {
      "path": [
        "pallet_authorship",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_uncles",
              "fields": [
                {
                  "name": "new_uncles",
                  "type": 137,
                  "typeName": "Vec<T::Header>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Provide a set of uncles."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 137,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 126
        }
      },
      "docs": []
    }
  },
  {
    "id": 138,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "claim",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Assign an previously unassigned index.",
                "",
                "Payment: `Deposit` is reserved from the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `index`: the index to be claimed. This must not be in use.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- One reserve operation.",
                "- One event.",
                "-------------------",
                "- DB Weight: 1 Read/Write (Accounts)",
                "# </weight>"
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Assign an index already owned by the sender to another account. The balance reservation",
                "is effectively transferred to the new account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `index`: the index to be re-assigned. This must be owned by the sender.",
                "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- One transfer operation.",
                "- One event.",
                "-------------------",
                "- DB Weight:",
                "   - Reads: Indices Accounts, System Account (recipient)",
                "   - Writes: Indices Accounts, System Account (recipient)",
                "# </weight>"
              ]
            },
            {
              "name": "free",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Free up an index owned by the sender.",
                "",
                "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                "",
                "- `index`: the index to be freed. This must be owned by the sender.",
                "",
                "Emits `IndexFreed` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- One reserve operation.",
                "- One event.",
                "-------------------",
                "- DB Weight: 1 Read/Write (Accounts)",
                "# </weight>"
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                },
                {
                  "name": "freeze",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force an index to an account. This doesn't require a deposit. If the index is already",
                "held, then any deposit is reimbursed to its current owner.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `index`: the index to be (re-)assigned.",
                "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- Up to one reserve operation.",
                "- One event.",
                "-------------------",
                "- DB Weight:",
                "   - Reads: Indices Accounts, System Account (original owner)",
                "   - Writes: Indices Accounts, System Account (original owner)",
                "# </weight>"
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Freeze an index so it will always point to the sender account. This consumes the",
                "deposit.",
                "",
                "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                "non-frozen account `index`.",
                "",
                "- `index`: the index to be frozen in place.",
                "",
                "Emits `IndexFrozen` if successful.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- One storage mutation (codec `O(1)`).",
                "- Up to one slash operation.",
                "- One event.",
                "-------------------",
                "- DB Weight: 1 Read/Write (Accounts)",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 139,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "dest",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transfer some liquid free balance to another account.",
                "",
                "`transfer` will set the `FreeBalance` of the sender and receiver.",
                "If the sender's account is below the existential deposit as a result",
                "of the transfer, the account will be reaped.",
                "",
                "The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                "# <weight>",
                "- Dependent on arguments but not critical, given proper implementations for input config",
                "  types. See related functions below.",
                "- It contains a limited number of reads and writes internally and no complex",
                "  computation.",
                "",
                "Related functions:",
                "",
                "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                "  - Transferring balances to accounts that did not exist before will cause",
                "    `T::OnNewAccount::on_new_account` to be called.",
                "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                "    that the transfer will not kill the origin account.",
                "---------------------------------",
                "- Origin account is already in memory, so no DB operations for them.",
                "# </weight>"
              ]
            },
            {
              "name": "set_balance",
              "fields": [
                {
                  "name": "who",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "new_free",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "new_reserved",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the balances of a given account.",
                "",
                "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                "If the new free or reserved balance is below the existential deposit,",
                "it will reset the account nonce (`frame_system::AccountNonce`).",
                "",
                "The dispatch origin for this call is `root`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Exactly as `transfer`, except the origin must be root and the source account may be",
                "specified.",
                "# <weight>",
                "- Same as transfer, but additional read and write because the source account is not",
                "  assumed to be in the overlay.",
                "# </weight>"
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "dest",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                "origin account.",
                "",
                "99% of the time you want [`transfer`] instead.",
                "",
                "[`transfer`]: struct.Pallet.html#method.transfer"
              ]
            },
            {
              "name": "transfer_all",
              "fields": [
                {
                  "name": "dest",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Transfer the entire transferable balance from the caller account.",
                "",
                "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                "transferred by this function. To ensure that this function results in a killed account,",
                "you might need to prepare the account by removing any reference counters, storage",
                "deposits, etc...",
                "",
                "The dispatch origin of this call must be Signed.",
                "",
                "- `dest`: The recipient of the transfer.",
                "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                "  of the funds the account has, causing the sender account to be killed (false), or",
                "  transfer everything except at least the existential deposit, which will guarantee to",
                "  keep the sender account alive (true). # <weight>",
                "- O(1). Just like transfer, but reading the user's transferable balance first.",
                "  #</weight>"
              ]
            },
            {
              "name": "force_unreserve",
              "fields": [
                {
                  "name": "who",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Unreserve some balance from a user by force.",
                "",
                "Can only be called by ROOT."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 140,
    "type": {
      "path": [
        "sp_runtime",
        "multiaddress",
        "MultiAddress"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "AccountIndex",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Id",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 101,
                  "typeName": "AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Address32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Address20",
              "fields": [
                {
                  "name": null,
                  "type": 141,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 141,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 20,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 142,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "submit_unsigned",
              "fields": [
                {
                  "name": "raw_solution",
                  "type": 143,
                  "typeName": "Box<RawSolution<SolutionOf<T>>>",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 196,
                  "typeName": "SolutionOrSnapshotSize",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Submit a solution for the unsigned phase.",
                "",
                "The dispatch origin fo this call must be __none__.",
                "",
                "This submission is checked on the fly. Moreover, this unsigned solution is only",
                "validated when submitted to the pool from the **local** node. Effectively, this means",
                "that only active validators can submit this transaction when authoring a block (similar",
                "to an inherent).",
                "",
                "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                "panic if the solution submitted by the validator is invalid in any way, effectively",
                "putting their authoring reward at risk.",
                "",
                "No deposit or reward is associated with this submission."
              ]
            },
            {
              "name": "set_minimum_untrusted_score",
              "fields": [
                {
                  "name": "maybe_next_score",
                  "type": 197,
                  "typeName": "Option<ElectionScore>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set a new value for `MinimumUntrustedScore`.",
                "",
                "Dispatch origin must be aligned with `T::ForceOrigin`.",
                "",
                "This check can be turned off by setting the value to `None`."
              ]
            },
            {
              "name": "set_emergency_election_result",
              "fields": [
                {
                  "name": "supports",
                  "type": 198,
                  "typeName": "Supports<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                "call to `ElectionProvider::elect`.",
                "",
                "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                "",
                "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                "feasibility check itself can in principle cause the election process to fail (due to",
                "memory/weight constrains)."
              ]
            },
            {
              "name": "submit",
              "fields": [
                {
                  "name": "raw_solution",
                  "type": 143,
                  "typeName": "Box<RawSolution<SolutionOf<T>>>",
                  "docs": []
                },
                {
                  "name": "num_signed_submissions",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Submit a solution for the signed phase.",
                "",
                "The dispatch origin fo this call must be __signed__.",
                "",
                "The solution is potentially queued, based on the claimed score and processed at the end",
                "of the signed phase.",
                "",
                "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                "might be rewarded, slashed, or get all or a part of the deposit back.",
                "",
                "# <weight>",
                "Queue size must be provided as witness data.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 143,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "RawSolution"
      ],
      "params": [
        {
          "name": "S",
          "type": 144
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "solution",
              "type": 144,
              "typeName": "S",
              "docs": []
            },
            {
              "name": "score",
              "type": 195,
              "typeName": "ElectionScore",
              "docs": []
            },
            {
              "name": "round",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 144,
    "type": {
      "path": [
        "node_runtime",
        "NposSolution16"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes1",
              "type": 145,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes2",
              "type": 148,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes3",
              "type": 153,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes4",
              "type": 156,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes5",
              "type": 159,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes6",
              "type": 162,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes7",
              "type": 165,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes8",
              "type": 168,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes9",
              "type": 171,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes10",
              "type": 174,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes11",
              "type": 177,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes12",
              "type": 180,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes13",
              "type": 183,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes14",
              "type": 186,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes15",
              "type": 189,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes16",
              "type": 192,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 145,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 146
        }
      },
      "docs": []
    }
  },
  {
    "id": 146,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 147,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 79
        }
      },
      "docs": []
    }
  },
  {
    "id": 148,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 149
        }
      },
      "docs": []
    }
  },
  {
    "id": 149,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          150,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 150,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          147,
          151
        ]
      },
      "docs": []
    }
  },
  {
    "id": 151,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 152
        }
      },
      "docs": []
    }
  },
  {
    "id": 152,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "PerU16"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 79,
              "typeName": "u16",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 153,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 154
        }
      },
      "docs": []
    }
  },
  {
    "id": 154,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          155,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 155,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 156,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 157
        }
      },
      "docs": []
    }
  },
  {
    "id": 157,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          158,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 158,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 159,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 160
        }
      },
      "docs": []
    }
  },
  {
    "id": 160,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          161,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 161,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 162,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 163
        }
      },
      "docs": []
    }
  },
  {
    "id": 163,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          164,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 164,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 5,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 165,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 166
        }
      },
      "docs": []
    }
  },
  {
    "id": 166,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          167,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 167,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 6,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 168,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 169
        }
      },
      "docs": []
    }
  },
  {
    "id": 169,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          170,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 170,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 7,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 171,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 172
        }
      },
      "docs": []
    }
  },
  {
    "id": 172,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          173,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 173,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 174,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 175
        }
      },
      "docs": []
    }
  },
  {
    "id": 175,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          176,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 176,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 9,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 177,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 178
        }
      },
      "docs": []
    }
  },
  {
    "id": 178,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          179,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 179,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 10,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 180,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 181
        }
      },
      "docs": []
    }
  },
  {
    "id": 181,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          182,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 182,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 11,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 183,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 184
        }
      },
      "docs": []
    }
  },
  {
    "id": 184,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          185,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 185,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 12,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 186,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 187
        }
      },
      "docs": []
    }
  },
  {
    "id": 187,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          188,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 188,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 13,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 189,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 190
        }
      },
      "docs": []
    }
  },
  {
    "id": 190,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          191,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 191,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 14,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 192,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 193
        }
      },
      "docs": []
    }
  },
  {
    "id": 193,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          101,
          194,
          147
        ]
      },
      "docs": []
    }
  },
  {
    "id": 194,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 15,
          "type": 150
        }
      },
      "docs": []
    }
  },
  {
    "id": 195,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 6
        }
      },
      "docs": []
    }
  },
  {
    "id": 196,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "SolutionOrSnapshotSize"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "voters",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "targets",
              "type": 101,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 197,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 195
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 195,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 198,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 199
        }
      },
      "docs": []
    }
  },
  {
    "id": 199,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          200
        ]
      },
      "docs": []
    }
  },
  {
    "id": 200,
    "type": {
      "path": [
        "sp_npos_elections",
        "Support"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 6,
              "typeName": "ExtendedBalance",
              "docs": []
            },
            {
              "name": "voters",
              "type": 45,
              "typeName": "Vec<(AccountId, ExtendedBalance)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 201,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "bond",
              "fields": [
                {
                  "name": "controller",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "payee",
                  "type": 202,
                  "typeName": "RewardDestination<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                "be the account that controls it.",
                "",
                "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash account.",
                "",
                "Emits `Bonded`.",
                "# <weight>",
                "- Independent of the arguments. Moderate complexity.",
                "- O(1).",
                "- Three extra DB entries.",
                "",
                "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                "unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                "------------------",
                "# </weight>"
              ]
            },
            {
              "name": "bond_extra",
              "fields": [
                {
                  "name": "max_additional",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                "for staking.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                "Use this if there are additional funds in your stash account that you wish to bond.",
                "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                "any limitation on the amount that can be added.",
                "",
                "Emits `Bonded`.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "unbond",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                "period ends. If this leaves an amount actively bonded less than",
                "T::Currency::minimum_balance(), then it is increased to the full amount.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                "the funds out of management ready for transfer.",
                "",
                "No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                "can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                "to be called first to remove some of the chunks (if possible).",
                "",
                "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                "they should call `chill` first in order to free up their bonded funds.",
                "",
                "Emits `Unbonded`.",
                "",
                "See also [`Call::withdraw_unbonded`]."
              ]
            },
            {
              "name": "withdraw_unbonded",
              "fields": [
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Remove any unlocked chunks from the `unlocking` queue from our management.",
                "",
                "This essentially frees up that balance to be used by the stash account to do",
                "whatever it wants.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller.",
                "",
                "Emits `Withdrawn`.",
                "",
                "See also [`Call::unbond`].",
                "",
                "# <weight>",
                "Complexity O(S) where S is the number of slashing spans to remove",
                "NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                "# </weight>"
              ]
            },
            {
              "name": "validate",
              "fields": [
                {
                  "name": "prefs",
                  "type": 203,
                  "typeName": "ValidatorPrefs",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Declare the desire to validate for the origin controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
              ]
            },
            {
              "name": "nominate",
              "fields": [
                {
                  "name": "targets",
                  "type": 205,
                  "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Declare the desire to nominate `targets` for the origin controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "# <weight>",
                "- The transaction's complexity is proportional to the size of `targets` (N)",
                "which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                "- Both the reads and writes follow a similar pattern.",
                "# </weight>"
              ]
            },
            {
              "name": "chill",
              "fields": [],
              "index": 6,
              "docs": [
                "Declare no desire to either validate or nominate.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains one read.",
                "- Writes are limited to the `origin` account key.",
                "# </weight>"
              ]
            },
            {
              "name": "set_payee",
              "fields": [
                {
                  "name": "payee",
                  "type": 202,
                  "typeName": "RewardDestination<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "(Re-)set the payment target for a controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains a limited number of reads.",
                "- Writes are limited to the `origin` account key.",
                "---------",
                "- Weight: O(1)",
                "- DB Weight:",
                "    - Read: Ledger",
                "    - Write: Payee",
                "# </weight>"
              ]
            },
            {
              "name": "set_controller",
              "fields": [
                {
                  "name": "controller",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "(Re-)set the controller of a stash.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                "# <weight>",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains a limited number of reads.",
                "- Writes are limited to the `origin` account key.",
                "----------",
                "Weight: O(1)",
                "DB Weight:",
                "- Read: Bonded, Ledger New Controller, Ledger Old Controller",
                "- Write: Bonded, Ledger New Controller, Ledger Old Controller",
                "# </weight>"
              ]
            },
            {
              "name": "set_validator_count",
              "fields": [
                {
                  "name": "new",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Sets the ideal number of validators.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "Weight: O(1)",
                "Write: Validator Count",
                "# </weight>"
              ]
            },
            {
              "name": "increase_validator_count",
              "fields": [
                {
                  "name": "additional",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Increments the ideal number of validators.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "Same as [`Self::set_validator_count`].",
                "# </weight>"
              ]
            },
            {
              "name": "scale_validator_count",
              "fields": [
                {
                  "name": "factor",
                  "type": 206,
                  "typeName": "Percent",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Scale up the ideal number of validators by a factor.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "Same as [`Self::set_validator_count`].",
                "# </weight>"
              ]
            },
            {
              "name": "force_no_eras",
              "fields": [],
              "index": 12,
              "docs": [
                "Force there to be no new eras indefinitely.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "Thus the election process may be ongoing when this is called. In this case the",
                "election will continue until the next era is triggered.",
                "",
                "# <weight>",
                "- No arguments.",
                "- Weight: O(1)",
                "- Write: ForceEra",
                "# </weight>"
              ]
            },
            {
              "name": "force_new_era",
              "fields": [],
              "index": 13,
              "docs": [
                "Force there to be a new era at the end of the next session. After this, it will be",
                "reset to normal (non-forced) behaviour.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "If this is called just before a new era is triggered, the election process may not",
                "have enough blocks to get a result.",
                "",
                "# <weight>",
                "- No arguments.",
                "- Weight: O(1)",
                "- Write ForceEra",
                "# </weight>"
              ]
            },
            {
              "name": "set_invulnerables",
              "fields": [
                {
                  "name": "invulnerables",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Set the validators who cannot be slashed (if any).",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "- O(V)",
                "- Write: Invulnerables",
                "# </weight>"
              ]
            },
            {
              "name": "force_unstake",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Force a current staker to become completely unstaked, immediately.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# <weight>",
                "O(S) where S is the number of slashing spans to be removed",
                "Reads: Bonded, Slashing Spans, Account, Locks",
                "Writes: Bonded, Slashing Spans (if S > 0), Ledger, Payee, Validators, Nominators,",
                "Account, Locks Writes Each: SpanSlash * S",
                "# </weight>"
              ]
            },
            {
              "name": "force_new_era_always",
              "fields": [],
              "index": 16,
              "docs": [
                "Force there to be a new era at the end of sessions indefinitely.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "If this is called just before a new era is triggered, the election process may not",
                "have enough blocks to get a result.",
                "",
                "# <weight>",
                "- Weight: O(1)",
                "- Write: ForceEra",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_deferred_slash",
              "fields": [
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "slash_indices",
                  "type": 90,
                  "typeName": "Vec<u32>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Cancel enactment of a deferred slash.",
                "",
                "Can be called by the `T::SlashCancelOrigin`.",
                "",
                "Parameters: era and indices of the slashes for that era to kill.",
                "",
                "# <weight>",
                "Complexity: O(U + S)",
                "with U unapplied slashes weighted with U=1000",
                "and S is the number of slash indices to be canceled.",
                "- Read: Unapplied Slashes",
                "- Write: Unapplied Slashes",
                "# </weight>"
              ]
            },
            {
              "name": "payout_stakers",
              "fields": [
                {
                  "name": "validator_stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Pay out all the stakers behind a single validator for a single era.",
                "",
                "- `validator_stash` is the stash account of the validator. Their nominators, up to",
                "  `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                "",
                "The origin of this call must be _Signed_. Any account can call this function, even if",
                "it is not one of the stakers.",
                "",
                "# <weight>",
                "- Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                "- Contains a limited number of reads and writes.",
                "-----------",
                "N is the Number of payouts for the validator (including the validator)",
                "Weight:",
                "- Reward Destination Staked: O(N)",
                "- Reward Destination Controller (Creating): O(N)",
                "",
                "  NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                "  Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                "# </weight>"
              ]
            },
            {
              "name": "rebond",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Rebond a portion of the stash scheduled to be unlocked.",
                "",
                "The dispatch origin must be signed by the controller.",
                "",
                "# <weight>",
                "- Time complexity: O(L), where L is unlocking chunks",
                "- Bounded by `MAX_UNLOCKING_CHUNKS`.",
                "- Storage changes: Can't increase storage, only decrease it.",
                "# </weight>"
              ]
            },
            {
              "name": "set_history_depth",
              "fields": [
                {
                  "name": "new_history_depth",
                  "type": 101,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "era_items_deleted",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Set `HistoryDepth` value. This function will delete any history information",
                "when `HistoryDepth` is reduced.",
                "",
                "Parameters:",
                "- `new_history_depth`: The new history depth you would like to set.",
                "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This",
                "  should report all the storage items that will be deleted by clearing old era history.",
                "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an",
                "  accurate number.",
                "",
                "Origin must be root.",
                "",
                "# <weight>",
                "- E: Number of history depths removed, i.e. 10 -> 7 = 3",
                "- Weight: O(E)",
                "- DB Weight:",
                "    - Reads: Current Era, History Depth",
                "    - Writes: History Depth",
                "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,",
                "      ErasStartSessionIndex",
                "# </weight>"
              ]
            },
            {
              "name": "reap_stash",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Remove all data structures concerning a staker/stash once it is at a state where it can",
                "be considered `dust` in the staking system. The requirements are:",
                "",
                "1. the `total_balance` of the stash is below existential deposit.",
                "2. or, the `ledger.total` of the stash is below existential deposit.",
                "",
                "The former can happen in cases like a slash; the latter when a fully unbonded account",
                "is still receiving staking rewards in `RewardDestination::Staked`.",
                "",
                "It can be called by anyone, as long as `stash` meets the above requirements.",
                "",
                "Refunds the transaction fees upon successful execution."
              ]
            },
            {
              "name": "kick",
              "fields": [
                {
                  "name": "who",
                  "type": 205,
                  "typeName": "Vec<<T::Lookup as StaticLookup>::Source>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Remove the given nominations from the calling validator.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "- `who`: A list of nominator stash accounts who are nominating this validator which",
                "  should no longer be nominating this validator.",
                "",
                "Note: Making this call only makes sense if you first set the validator preferences to",
                "block any further nominations."
              ]
            },
            {
              "name": "set_staking_configs",
              "fields": [
                {
                  "name": "min_nominator_bond",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "min_validator_bond",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "max_nominator_count",
                  "type": 91,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "max_validator_count",
                  "type": 91,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "chill_threshold",
                  "type": 207,
                  "typeName": "Option<Percent>",
                  "docs": []
                },
                {
                  "name": "min_commission",
                  "type": 104,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Update the various staking configurations .",
                "",
                "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                "  set to `None`, no limit is enforced.",
                "* `max_validator_count`: The max number of users who can be a validator at once. When",
                "  set to `None`, no limit is enforced.",
                "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                "  should be filled in order for the `chill_other` transaction to work.",
                "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                "  This is checked only upon calling `validate`. Existing validators are not affected.",
                "",
                "Origin must be Root to call this function.",
                "",
                "NOTE: Existing nominators and validators will not be affected by this update.",
                "to kick people under the new limits, `chill_other` should be called."
              ]
            },
            {
              "name": "chill_other",
              "fields": [
                {
                  "name": "controller",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Declare a `controller` to stop participating as either a validator or nominator.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                "",
                "If the caller is the same as the controller being targeted, then no further checks are",
                "enforced, and this function behaves just like `chill`.",
                "",
                "If the caller is different than the controller being targeted, the following conditions",
                "must be met:",
                "* A `ChillThreshold` must be set and checked which defines how close to the max",
                "  nominators or validators we must reach before users can start chilling one-another.",
                "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                "  how close we are to the threshold.",
                "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                "  if this is a person that should be chilled because they have not met the threshold",
                "  bond required.",
                "",
                "This can be helpful if bond requirements are updated, and we need to remove old users",
                "who do not satisfy these requirements."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 202,
    "type": {
      "path": [
        "pallet_staking",
        "RewardDestination"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Staked",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Stash",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Controller",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Account",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 203,
    "type": {
      "path": [
        "pallet_staking",
        "ValidatorPrefs"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "commission",
              "type": 204,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "blocked",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 204,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 104
        }
      },
      "docs": []
    }
  },
  {
    "id": 205,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 140
        }
      },
      "docs": []
    }
  },
  {
    "id": 206,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Percent"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 207,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 206
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 206,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 208,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_keys",
              "fields": [
                {
                  "name": "keys",
                  "type": 209,
                  "typeName": "T::Keys",
                  "docs": []
                },
                {
                  "name": "proof",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Sets the session key(s) of the function caller to `keys`.",
                "Allows an account to set its session key prior to becoming a validator.",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be signed.",
                "",
                "# <weight>",
                "- Complexity: `O(1)`. Actual cost depends on the number of length of",
                "  `T::Keys::key_ids()` which is fixed.",
                "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                "- DbWrites: `origin account`, `NextKeys`",
                "- DbReads per key id: `KeyOwner`",
                "- DbWrites per key id: `KeyOwner`",
                "# </weight>"
              ]
            },
            {
              "name": "purge_keys",
              "fields": [],
              "index": 1,
              "docs": [
                "Removes any session key(s) of the function caller.",
                "",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be Signed and the account must be either be",
                "convertible to a validator ID using the chain's typical addressing system (this usually",
                "means being a controller account) or directly convertible into a validator ID (which",
                "usually means being a stash account).",
                "",
                "# <weight>",
                "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length",
                "  of `T::Keys::key_ids()` which is fixed.",
                "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                "- DbWrites: `NextKeys`, `origin account`",
                "- DbWrites per key id: `KeyOwner`",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 209,
    "type": {
      "path": [
        "node_runtime",
        "SessionKeys"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "grandpa",
              "type": 51,
              "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "babe",
              "type": 128,
              "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "im_online",
              "type": 58,
              "typeName": "<ImOnline as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "authority_discovery",
              "type": 210,
              "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 210,
    "type": {
      "path": [
        "sp_authority_discovery",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 59,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 211,
    "type": {
      "path": [
        "pallet_democracy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "propose",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Propose a sensitive action to be taken.",
                "",
                "The dispatch origin of this call must be _Signed_ and the sender must",
                "have funds to cover the deposit.",
                "",
                "- `proposal_hash`: The hash of the proposal preimage.",
                "- `value`: The amount of deposit (must be at least `MinimumDeposit`).",
                "",
                "Emits `Proposed`.",
                "",
                "Weight: `O(p)`"
              ]
            },
            {
              "name": "second",
              "fields": [
                {
                  "name": "proposal",
                  "type": 101,
                  "typeName": "PropIndex",
                  "docs": []
                },
                {
                  "name": "seconds_upper_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Signals agreement with a particular proposal.",
                "",
                "The dispatch origin of this call must be _Signed_ and the sender",
                "must have funds to cover the deposit, equal to the original deposit.",
                "",
                "- `proposal`: The index of the proposal to second.",
                "- `seconds_upper_bound`: an upper bound on the current number of seconds on this",
                "  proposal. Extrinsic is weighted according to this value with no refund.",
                "",
                "Weight: `O(S)` where S is the number of seconds a proposal already has."
              ]
            },
            {
              "name": "vote",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 101,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": "vote",
                  "type": 40,
                  "typeName": "AccountVote<BalanceOf<T>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                "otherwise it is a vote to keep the status quo.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `ref_index`: The index of the referendum to vote for.",
                "- `vote`: The vote configuration.",
                "",
                "Weight: `O(R)` where R is the number of referendums the voter has voted on."
              ]
            },
            {
              "name": "emergency_cancel",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                "referendum.",
                "",
                "The dispatch origin of this call must be `CancellationOrigin`.",
                "",
                "-`ref_index`: The index of the referendum to cancel.",
                "",
                "Weight: `O(1)`."
              ]
            },
            {
              "name": "external_propose",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Schedule a referendum to be tabled once it is legal to schedule an external",
                "referendum.",
                "",
                "The dispatch origin of this call must be `ExternalOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal.",
                "",
                "Weight: `O(V)` with V number of vetoers in the blacklist of proposal.",
                "  Decoding vec of length V. Charged as maximum"
              ]
            },
            {
              "name": "external_propose_majority",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                "an external referendum.",
                "",
                "The dispatch of this call must be `ExternalMajorityOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal.",
                "",
                "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                "pre-scheduled `external_propose` call.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "external_propose_default",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                "schedule an external referendum.",
                "",
                "The dispatch of this call must be `ExternalDefaultOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal.",
                "",
                "Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                "pre-scheduled `external_propose` call.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "fast_track",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "voting_period",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Schedule the currently externally-proposed majority-carries referendum to be tabled",
                "immediately. If there is no externally-proposed referendum currently, or if there is one",
                "but it is not a majority-carries referendum then it fails.",
                "",
                "The dispatch of this call must be `FastTrackOrigin`.",
                "",
                "- `proposal_hash`: The hash of the current external proposal.",
                "- `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                "  `FastTrackVotingPeriod` if too low.",
                "- `delay`: The number of block after voting has ended in approval and this should be",
                "  enacted. This doesn't have a minimum amount.",
                "",
                "Emits `Started`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "veto_external",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Veto and blacklist the external proposal hash.",
                "",
                "The dispatch origin of this call must be `VetoOrigin`.",
                "",
                "- `proposal_hash`: The preimage hash of the proposal to veto and blacklist.",
                "",
                "Emits `Vetoed`.",
                "",
                "Weight: `O(V + log(V))` where V is number of `existing vetoers`"
              ]
            },
            {
              "name": "cancel_referendum",
              "fields": [
                {
                  "name": "ref_index",
                  "type": 101,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Remove a referendum.",
                "",
                "The dispatch origin of this call must be _Root_.",
                "",
                "- `ref_index`: The index of the referendum to cancel.",
                "",
                "# Weight: `O(1)`."
              ]
            },
            {
              "name": "cancel_queued",
              "fields": [
                {
                  "name": "which",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Cancel a proposal queued for enactment.",
                "",
                "The dispatch origin of this call must be _Root_.",
                "",
                "- `which`: The index of the referendum to cancel.",
                "",
                "Weight: `O(D)` where `D` is the items in the dispatch queue. Weighted as `D = 10`."
              ]
            },
            {
              "name": "delegate",
              "fields": [
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "type": 212,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Delegate the voting power (with some given conviction) of the sending account.",
                "",
                "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                "time appropriate for the conviction's lock period.",
                "",
                "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                "  - be delegating already; or",
                "  - have no voting activity (if there is, then it will need to be removed/consolidated",
                "    through `reap_vote` or `unvote`).",
                "",
                "- `to`: The account whose voting the `target` account's voting power will follow.",
                "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                "  account is undelegated, the funds will be locked for the corresponding period.",
                "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                "  be more than the account's current balance.",
                "",
                "Emits `Delegated`.",
                "",
                "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                "  voted on. Weight is charged as if maximum votes."
              ]
            },
            {
              "name": "undelegate",
              "fields": [],
              "index": 12,
              "docs": [
                "Undelegate the voting power of the sending account.",
                "",
                "Tokens may be unlocked following once an amount of time consistent with the lock period",
                "of the conviction with which the delegation was issued.",
                "",
                "The dispatch origin of this call must be _Signed_ and the signing account must be",
                "currently delegating.",
                "",
                "Emits `Undelegated`.",
                "",
                "Weight: `O(R)` where R is the number of referendums the voter delegating to has",
                "  voted on. Weight is charged as if maximum votes."
              ]
            },
            {
              "name": "clear_public_proposals",
              "fields": [],
              "index": 13,
              "docs": [
                "Clears all public proposals.",
                "",
                "The dispatch origin of this call must be _Root_.",
                "",
                "Weight: `O(1)`."
              ]
            },
            {
              "name": "note_preimage",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                "in the dispatch queue but does require a deposit, returned once enacted.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `encoded_proposal`: The preimage of a proposal.",
                "",
                "Emits `PreimageNoted`.",
                "",
                "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
              ]
            },
            {
              "name": "note_preimage_operational",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Same as `note_preimage` but origin is `OperationalPreimageOrigin`."
              ]
            },
            {
              "name": "note_imminent_preimage",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Register the preimage for an upcoming proposal. This requires the proposal to be",
                "in the dispatch queue. No deposit is needed. When this call is successful, i.e.",
                "the preimage has not been uploaded before and matches some imminent proposal,",
                "no fee is paid.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `encoded_proposal`: The preimage of a proposal.",
                "",
                "Emits `PreimageNoted`.",
                "",
                "Weight: `O(E)` with E size of `encoded_proposal` (protected by a required deposit)."
              ]
            },
            {
              "name": "note_imminent_preimage_operational",
              "fields": [
                {
                  "name": "encoded_proposal",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Same as `note_imminent_preimage` but origin is `OperationalPreimageOrigin`."
              ]
            },
            {
              "name": "reap_preimage",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "proposal_len_upper_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Remove an expired proposal preimage and collect the deposit.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `proposal_hash`: The preimage hash of a proposal.",
                "- `proposal_length_upper_bound`: an upper bound on length of the proposal. Extrinsic is",
                "  weighted according to this value with no refund.",
                "",
                "This will only work after `VotingPeriod` blocks from the time that the preimage was",
                "noted, if it's the same account doing it. If it's a different account, then it'll only",
                "work an additional `EnactmentPeriod` later.",
                "",
                "Emits `PreimageReaped`.",
                "",
                "Weight: `O(D)` where D is length of proposal."
              ]
            },
            {
              "name": "unlock",
              "fields": [
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Unlock tokens that have an expired lock.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `target`: The account to remove the lock on.",
                "",
                "Weight: `O(R)` with R number of vote of target."
              ]
            },
            {
              "name": "remove_vote",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Remove a vote for a referendum.",
                "",
                "If:",
                "- the referendum was cancelled, or",
                "- the referendum is ongoing, or",
                "- the referendum has ended such that",
                "  - the vote of the account was in opposition to the result; or",
                "  - there was no conviction to the account's vote; or",
                "  - the account made a split vote",
                "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                "funds being available.",
                "",
                "If, however, the referendum has ended and:",
                "- it finished corresponding to the vote of the account, and",
                "- the account made a standard vote with conviction, and",
                "- the lock period of the conviction is not over",
                "...then the lock will be aggregated into the overall account's lock, which may involve",
                "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                "of both the amount locked and the time is it locked for).",
                "",
                "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                "registered for referendum `index`.",
                "",
                "- `index`: The index of referendum of the vote to be removed.",
                "",
                "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                "  Weight is calculated for the maximum number of vote."
              ]
            },
            {
              "name": "remove_other_vote",
              "fields": [
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Remove a vote for a referendum.",
                "",
                "If the `target` is equal to the signer, then this function is exactly equivalent to",
                "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                "either because the referendum was cancelled, because the voter lost the referendum or",
                "because the conviction period is over.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `target`: The account of the vote to be removed; this account must have voted for",
                "  referendum `index`.",
                "- `index`: The index of referendum of the vote to be removed.",
                "",
                "Weight: `O(R + log R)` where R is the number of referenda that `target` has voted on.",
                "  Weight is calculated for the maximum number of vote."
              ]
            },
            {
              "name": "enact_proposal",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Enact a proposal from a referendum. For now we just make the weight be the maximum."
              ]
            },
            {
              "name": "blacklist",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "maybe_ref_index",
                  "type": 91,
                  "typeName": "Option<ReferendumIndex>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Permanently place a proposal into the blacklist. This prevents it from ever being",
                "proposed again.",
                "",
                "If called on a queued public or external proposal, then this will result in it being",
                "removed. If the `ref_index` supplied is an active referendum with the proposal hash,",
                "then it will be cancelled.",
                "",
                "The dispatch origin of this call must be `BlacklistOrigin`.",
                "",
                "- `proposal_hash`: The proposal hash to blacklist permanently.",
                "- `ref_index`: An ongoing referendum whose hash is `proposal_hash`, which will be",
                "cancelled.",
                "",
                "Weight: `O(p)` (though as this is an high-privilege dispatch, we assume it has a",
                "  reasonable value)."
              ]
            },
            {
              "name": "cancel_proposal",
              "fields": [
                {
                  "name": "prop_index",
                  "type": 101,
                  "typeName": "PropIndex",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Remove a proposal.",
                "",
                "The dispatch origin of this call must be `CancelProposalOrigin`.",
                "",
                "- `prop_index`: The index of the proposal to cancel.",
                "",
                "Weight: `O(p)` where `p = PublicProps::<T>::decode_len()`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 212,
    "type": {
      "path": [
        "pallet_democracy",
        "conviction",
        "Conviction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Locked1x",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Locked2x",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Locked3x",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Locked4x",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Locked5x",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Locked6x",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 213,
    "type": {
      "path": [
        "pallet_collective",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_members",
              "fields": [
                {
                  "name": "new_members",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "prime",
                  "type": 56,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "old_count",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the collective's membership.",
                "",
                "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                "- `prime`: The prime member whose vote sets the default.",
                "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                "  weight estimation.",
                "",
                "Requires root origin.",
                "",
                "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                "      the weight estimations rely on it to estimate dispatchable weight.",
                "",
                "# WARNING:",
                "",
                "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                "implementation of the trait [`ChangeMembers`].",
                "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                "with other logic managing the member set.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(MP + N)` where:",
                "  - `M` old-members-count (code- and governance-bounded)",
                "  - `N` new-members-count (code- and governance-bounded)",
                "  - `P` proposals-count (code-bounded)",
                "- DB:",
                "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                "    members",
                "  - 1 storage read (codec `O(P)`) for reading the proposals",
                "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                "# </weight>"
              ]
            },
            {
              "name": "execute",
              "fields": [
                {
                  "name": "proposal",
                  "type": 123,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Dispatch a proposal from a member using the `Member` origin.",
                "",
                "Origin must be a member of the collective.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                "  `proposal`",
                "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "propose",
              "fields": [
                {
                  "name": "threshold",
                  "type": 101,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "type": 123,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Add a new proposal to either be voted on or executed directly.",
                "",
                "Requires the sender to be member.",
                "",
                "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                "or put up for voting.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - branching is influenced by `threshold` where:",
                "    - `P1` is proposal execution complexity (`threshold < 2`)",
                "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                "- DB:",
                "  - 1 storage read `is_member` (codec `O(M)`)",
                "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "  - DB accesses influenced by `threshold`:",
                "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                "    - OR proposal insertion (`threshold <= 2`)",
                "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                "      - 1 storage write `Voting` (codec `O(M)`)",
                "  - 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "vote",
              "fields": [
                {
                  "name": "proposal",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "approve",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Add an aye or nay vote for the sender to the given proposal.",
                "",
                "Requires the sender to be a member.",
                "",
                "Transaction fees will be waived if the member is voting on any particular proposal",
                "for the first time and the call is successful. Subsequent vote changes will charge a",
                "fee.",
                "# <weight>",
                "## Weight",
                "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                "- DB:",
                "  - 1 storage read `Members` (codec `O(M)`)",
                "  - 1 storage mutation `Voting` (codec `O(M)`)",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "close",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "proposal_weight_bound",
                  "type": 135,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Close a vote that is either approved, disapproved or whose voting period has ended.",
                "",
                "May be called by any signed account in order to finish voting and close the proposal.",
                "",
                "If called before the end of the voting period it will only close the vote if it is",
                "has enough votes to be approved or disapproved.",
                "",
                "If called after the end of the voting period abstentions are counted as rejections",
                "unless there is a prime member set and the prime member cast an approval.",
                "",
                "If the close operation completes successfully with disapproval, the transaction fee will",
                "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                "",
                "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                "proposal.",
                "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1 + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - `P1` is the complexity of `proposal` preimage.",
                "  - `P2` is proposal-count (code-bounded)",
                "- DB:",
                " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                "   `O(P2)`)",
                " - any mutations done while executing `proposal` (`P1`)",
                "- up to 3 events",
                "# </weight>"
              ]
            },
            {
              "name": "disapprove_proposal",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                "state.",
                "",
                "Must be called by the Root origin.",
                "",
                "Parameters:",
                "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                "",
                "# <weight>",
                "Complexity: O(P) where P is the number of max proposals",
                "DB Weight:",
                "* Reads: Proposals",
                "* Writes: Voting, Proposals, ProposalOf",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 214,
    "type": {
      "path": [
        "pallet_collective",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_members",
              "fields": [
                {
                  "name": "new_members",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "prime",
                  "type": 56,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "old_count",
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the collective's membership.",
                "",
                "- `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                "- `prime`: The prime member whose vote sets the default.",
                "- `old_count`: The upper bound for the previous number of members in storage. Used for",
                "  weight estimation.",
                "",
                "Requires root origin.",
                "",
                "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                "      the weight estimations rely on it to estimate dispatchable weight.",
                "",
                "# WARNING:",
                "",
                "The `pallet-collective` can also be managed by logic outside of the pallet through the",
                "implementation of the trait [`ChangeMembers`].",
                "Any call to `set_members` must be careful that the member set doesn't get out of sync",
                "with other logic managing the member set.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(MP + N)` where:",
                "  - `M` old-members-count (code- and governance-bounded)",
                "  - `N` new-members-count (code- and governance-bounded)",
                "  - `P` proposals-count (code-bounded)",
                "- DB:",
                "  - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the",
                "    members",
                "  - 1 storage read (codec `O(P)`) for reading the proposals",
                "  - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                "  - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                "# </weight>"
              ]
            },
            {
              "name": "execute",
              "fields": [
                {
                  "name": "proposal",
                  "type": 123,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Dispatch a proposal from a member using the `Member` origin.",
                "",
                "Origin must be a member of the collective.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching",
                "  `proposal`",
                "- DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "propose",
              "fields": [
                {
                  "name": "threshold",
                  "type": 101,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "type": 123,
                  "typeName": "Box<<T as Config<I>>::Proposal>",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Add a new proposal to either be voted on or executed directly.",
                "",
                "Requires the sender to be member.",
                "",
                "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)",
                "or put up for voting.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1)` or `O(B + M + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - branching is influenced by `threshold` where:",
                "    - `P1` is proposal execution complexity (`threshold < 2`)",
                "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)",
                "- DB:",
                "  - 1 storage read `is_member` (codec `O(M)`)",
                "  - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                "  - DB accesses influenced by `threshold`:",
                "    - EITHER storage accesses done by `proposal` (`threshold < 2`)",
                "    - OR proposal insertion (`threshold <= 2`)",
                "      - 1 storage mutation `Proposals` (codec `O(P2)`)",
                "      - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                "      - 1 storage write `ProposalOf` (codec `O(B)`)",
                "      - 1 storage write `Voting` (codec `O(M)`)",
                "  - 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "vote",
              "fields": [
                {
                  "name": "proposal",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "approve",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Add an aye or nay vote for the sender to the given proposal.",
                "",
                "Requires the sender to be a member.",
                "",
                "Transaction fees will be waived if the member is voting on any particular proposal",
                "for the first time and the call is successful. Subsequent vote changes will charge a",
                "fee.",
                "# <weight>",
                "## Weight",
                "- `O(M)` where `M` is members-count (code- and governance-bounded)",
                "- DB:",
                "  - 1 storage read `Members` (codec `O(M)`)",
                "  - 1 storage mutation `Voting` (codec `O(M)`)",
                "- 1 event",
                "# </weight>"
              ]
            },
            {
              "name": "close",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "proposal_weight_bound",
                  "type": 135,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "length_bound",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Close a vote that is either approved, disapproved or whose voting period has ended.",
                "",
                "May be called by any signed account in order to finish voting and close the proposal.",
                "",
                "If called before the end of the voting period it will only close the vote if it is",
                "has enough votes to be approved or disapproved.",
                "",
                "If called after the end of the voting period abstentions are counted as rejections",
                "unless there is a prime member set and the prime member cast an approval.",
                "",
                "If the close operation completes successfully with disapproval, the transaction fee will",
                "be waived. Otherwise execution of the approved operation will be charged to the caller.",
                "",
                "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed",
                "proposal.",
                "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length.",
                "",
                "# <weight>",
                "## Weight",
                "- `O(B + M + P1 + P2)` where:",
                "  - `B` is `proposal` size in bytes (length-fee-bounded)",
                "  - `M` is members-count (code- and governance-bounded)",
                "  - `P1` is the complexity of `proposal` preimage.",
                "  - `P2` is proposal-count (code-bounded)",
                "- DB:",
                " - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                " - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec",
                "   `O(P2)`)",
                " - any mutations done while executing `proposal` (`P1`)",
                "- up to 3 events",
                "# </weight>"
              ]
            },
            {
              "name": "disapprove_proposal",
              "fields": [
                {
                  "name": "proposal_hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Disapprove a proposal, close, and remove it from the system, regardless of its current",
                "state.",
                "",
                "Must be called by the Root origin.",
                "",
                "Parameters:",
                "* `proposal_hash`: The hash of the proposal that should be disapproved.",
                "",
                "# <weight>",
                "Complexity: O(P) where P is the number of max proposals",
                "DB Weight:",
                "* Reads: Proposals",
                "* Writes: Voting, Proposals, ProposalOf",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 215,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "vote",
              "fields": [
                {
                  "name": "votes",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Vote for a set of candidates for the upcoming round of election. This can be called to",
                "set the initial votes, or update already existing votes.",
                "",
                "Upon initial voting, `value` units of `who`'s balance is locked and a deposit amount is",
                "reserved. The deposit is based on the number of votes and can be updated over time.",
                "",
                "The `votes` should:",
                "  - not be empty.",
                "  - be less than the number of possible candidates. Note that all current members and",
                "    runners-up are also automatically candidates for the next round.",
                "",
                "If `value` is more than `who`'s total balance, then the maximum of the two is used.",
                "",
                "The dispatch origin of this call must be signed.",
                "",
                "### Warning",
                "",
                "It is the responsibility of the caller to **NOT** place all of their balance into the",
                "lock and keep some for further operations.",
                "",
                "# <weight>",
                "We assume the maximum weight among all 3 cases: vote_equal, vote_more and vote_less.",
                "# </weight>"
              ]
            },
            {
              "name": "remove_voter",
              "fields": [],
              "index": 1,
              "docs": [
                "Remove `origin` as a voter.",
                "",
                "This removes the lock and returns the deposit.",
                "",
                "The dispatch origin of this call must be signed and be a voter."
              ]
            },
            {
              "name": "submit_candidacy",
              "fields": [
                {
                  "name": "candidate_count",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Submit oneself for candidacy. A fixed amount of deposit is recorded.",
                "",
                "All candidates are wiped at the end of the term. They either become a member/runner-up,",
                "or leave the system while their deposit is slashed.",
                "",
                "The dispatch origin of this call must be signed.",
                "",
                "### Warning",
                "",
                "Even if a candidate ends up being a member, they must call [`Call::renounce_candidacy`]",
                "to get their deposit back. Losing the spot in an election will always lead to a slash.",
                "",
                "# <weight>",
                "The number of current candidates must be provided as witness data.",
                "# </weight>"
              ]
            },
            {
              "name": "renounce_candidacy",
              "fields": [
                {
                  "name": "renouncing",
                  "type": 216,
                  "typeName": "Renouncing",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Renounce one's intention to be a candidate for the next election round. 3 potential",
                "outcomes exist:",
                "",
                "- `origin` is a candidate and not elected in any set. In this case, the deposit is",
                "  unreserved, returned and origin is removed as a candidate.",
                "- `origin` is a current runner-up. In this case, the deposit is unreserved, returned and",
                "  origin is removed as a runner-up.",
                "- `origin` is a current member. In this case, the deposit is unreserved and origin is",
                "  removed as a member, consequently not being a candidate for the next round anymore.",
                "  Similar to [`remove_member`](Self::remove_member), if replacement runners exists, they",
                "  are immediately used. If the prime is renouncing, then no prime will exist until the",
                "  next round.",
                "",
                "The dispatch origin of this call must be signed, and have one of the above roles.",
                "",
                "# <weight>",
                "The type of renouncing must be provided as witness data.",
                "# </weight>"
              ]
            },
            {
              "name": "remove_member",
              "fields": [
                {
                  "name": "who",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "has_replacement",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Remove a particular member from the set. This is effective immediately and the bond of",
                "the outgoing member is slashed.",
                "",
                "If a runner-up is available, then the best runner-up will be removed and replaces the",
                "outgoing member. Otherwise, a new phragmen election is started.",
                "",
                "The dispatch origin of this call must be root.",
                "",
                "Note that this does not affect the designated block number of the next election.",
                "",
                "# <weight>",
                "If we have a replacement, we use a small weight. Else, since this is a root call and",
                "will go into phragmen, we assume full block for now.",
                "# </weight>"
              ]
            },
            {
              "name": "clean_defunct_voters",
              "fields": [
                {
                  "name": "num_voters",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "num_defunct",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Clean all voters who are defunct (i.e. they do not serve any purpose at all). The",
                "deposit of the removed voters are returned.",
                "",
                "This is an root function to be used only for cleaning the state.",
                "",
                "The dispatch origin of this call must be root.",
                "",
                "# <weight>",
                "The total number of voters and those that are defunct must be provided as witness data.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 216,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "Renouncing"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Member",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "RunnerUp",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Candidate",
              "fields": [
                {
                  "name": null,
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 217,
    "type": {
      "path": [
        "pallet_membership",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "add_member",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Add a member `who` to the set.",
                "",
                "May only be called from `T::AddOrigin`."
              ]
            },
            {
              "name": "remove_member",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Remove a member `who` from the set.",
                "",
                "May only be called from `T::RemoveOrigin`."
              ]
            },
            {
              "name": "swap_member",
              "fields": [
                {
                  "name": "remove",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "add",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Swap out one member `remove` for another `add`.",
                "",
                "May only be called from `T::SwapOrigin`.",
                "",
                "Prime membership is *not* passed from `remove` to `add`, if extant."
              ]
            },
            {
              "name": "reset_members",
              "fields": [
                {
                  "name": "members",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Change the membership to a new set, disregarding the existing membership. Be nice and",
                "pass `members` pre-sorted.",
                "",
                "May only be called from `T::ResetOrigin`."
              ]
            },
            {
              "name": "change_key",
              "fields": [
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Swap out the sending member for some other key `new`.",
                "",
                "May only be called from `Signed` origin of a current member.",
                "",
                "Prime membership is passed from the origin account to `new`, if extant."
              ]
            },
            {
              "name": "set_prime",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set the prime member. Must be a current member.",
                "",
                "May only be called from `T::PrimeOrigin`."
              ]
            },
            {
              "name": "clear_prime",
              "fields": [],
              "index": 6,
              "docs": [
                "Remove the prime member if it exists.",
                "",
                "May only be called from `T::PrimeOrigin`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 218,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 219,
                  "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 130,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 219,
                  "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 130,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported.",
                "",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "note_stalled",
              "fields": [
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "best_finalized_block_number",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Note that the current authority set of the GRANDPA finality gadget has",
                "stalled. This will trigger a forced authority set change at the beginning",
                "of the next session, to be enacted `delay` blocks after that. The delay",
                "should be high enough to safely assume that the block signalling the",
                "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                "will start the new authority set using the given finalized block as base.",
                "Only callable by root."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 219,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "EquivocationProof"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "set_id",
              "type": 8,
              "typeName": "SetId",
              "docs": []
            },
            {
              "name": "equivocation",
              "type": 220,
              "typeName": "Equivocation<H, N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 220,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Prevote",
              "fields": [
                {
                  "name": null,
                  "type": 221,
                  "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Precommit",
              "fields": [
                {
                  "name": null,
                  "type": 227,
                  "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 221,
    "type": {
      "path": [
        "finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "Id",
          "type": 51
        },
        {
          "name": "V",
          "type": 222
        },
        {
          "name": "S",
          "type": 223
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "round_number",
              "type": 8,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "type": 51,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "type": 226,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "type": 226,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 222,
    "type": {
      "path": [
        "finality_grandpa",
        "Prevote"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "target_hash",
              "type": 9,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 223,
    "type": {
      "path": [
        "sp_finality_grandpa",
        "app",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 224,
              "typeName": "ed25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 224,
    "type": {
      "path": [
        "sp_core",
        "ed25519",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 225,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 225,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 64,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 226,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          222,
          223
        ]
      },
      "docs": []
    }
  },
  {
    "id": 227,
    "type": {
      "path": [
        "finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "Id",
          "type": 51
        },
        {
          "name": "V",
          "type": 228
        },
        {
          "name": "S",
          "type": 223
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "round_number",
              "type": 8,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "type": 51,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "type": 229,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "type": 229,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 228,
    "type": {
      "path": [
        "finality_grandpa",
        "Precommit"
      ],
      "params": [
        {
          "name": "H",
          "type": 9
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "target_hash",
              "type": 9,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 229,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          228,
          223
        ]
      },
      "docs": []
    }
  },
  {
    "id": 230,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "propose_spend",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Put forward a suggestion for spending. A deposit proportional to the value",
                "is reserved and slashed if the proposal is rejected. It is returned once the",
                "proposal is awarded.",
                "",
                "# <weight>",
                "- Complexity: O(1)",
                "- DbReads: `ProposalCount`, `origin account`",
                "- DbWrites: `ProposalCount`, `Proposals`, `origin account`",
                "# </weight>"
              ]
            },
            {
              "name": "reject_proposal",
              "fields": [
                {
                  "name": "proposal_id",
                  "type": 101,
                  "typeName": "ProposalIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Reject a proposed spend. The original deposit will be slashed.",
                "",
                "May only be called from `T::RejectOrigin`.",
                "",
                "# <weight>",
                "- Complexity: O(1)",
                "- DbReads: `Proposals`, `rejected proposer account`",
                "- DbWrites: `Proposals`, `rejected proposer account`",
                "# </weight>"
              ]
            },
            {
              "name": "approve_proposal",
              "fields": [
                {
                  "name": "proposal_id",
                  "type": 101,
                  "typeName": "ProposalIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                "and the original deposit will be returned.",
                "",
                "May only be called from `T::ApproveOrigin`.",
                "",
                "# <weight>",
                "- Complexity: O(1).",
                "- DbReads: `Proposals`, `Approvals`",
                "- DbWrite: `Approvals`",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 231,
    "type": {
      "path": [
        "pallet_contracts",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "call",
              "fields": [
                {
                  "name": "dest",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "type": 135,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "type": 232,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Makes a call to an account, optionally transferring some balance.",
                "",
                "# Parameters",
                "",
                "* `dest`: Address of the contract to call.",
                "* `value`: The balance to transfer from the `origin` to `dest`.",
                "* `gas_limit`: The gas limit enforced when executing the constructor.",
                "* `storage_deposit_limit`: The maximum amount of balance that can be charged from the",
                "  caller to pay for the storage consumed.",
                "* `data`: The input data to pass to the contract.",
                "",
                "* If the account is a smart-contract account, the associated code will be",
                "executed and any value will be transferred.",
                "* If the account is a regular account, any value will be transferred.",
                "* If no account exists and the call value is not less than `existential_deposit`,",
                "a regular account will be created and any value will be transferred."
              ]
            },
            {
              "name": "instantiate_with_code",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "type": 135,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "type": 232,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "code",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "salt",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Instantiates a new contract from the supplied `code` optionally transferring",
                "some balance.",
                "",
                "This dispatchable has the same effect as calling [`Self::upload_code`] +",
                "[`Self::instantiate`]. Bundling them together provides efficiency gains. Please",
                "also check the documentation of [`Self::upload_code`].",
                "",
                "# Parameters",
                "",
                "* `value`: The balance to transfer from the `origin` to the newly created contract.",
                "* `gas_limit`: The gas limit enforced when executing the constructor.",
                "* `storage_deposit_limit`: The maximum amount of balance that can be charged/reserved",
                "  from the caller to pay for the storage consumed.",
                "* `code`: The contract code to deploy in raw bytes.",
                "* `data`: The input data to pass to the contract constructor.",
                "* `salt`: Used for the address derivation. See [`Pallet::contract_address`].",
                "",
                "Instantiation is executed as follows:",
                "",
                "- The supplied `code` is instrumented, deployed, and a `code_hash` is created for that",
                "  code.",
                "- If the `code_hash` already exists on the chain the underlying `code` will be shared.",
                "- The destination address is computed based on the sender, code_hash and the salt.",
                "- The smart-contract account is created at the computed address.",
                "- The `value` is transferred to the new account.",
                "- The `deploy` function is executed in the context of the newly-created account."
              ]
            },
            {
              "name": "instantiate",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "gas_limit",
                  "type": 135,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "type": 232,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                },
                {
                  "name": "code_hash",
                  "type": 9,
                  "typeName": "CodeHash<T>",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "salt",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Instantiates a contract from a previously deployed wasm binary.",
                "",
                "This function is identical to [`Self::instantiate_with_code`] but without the",
                "code deployment step. Instead, the `code_hash` of an on-chain deployed wasm binary",
                "must be supplied."
              ]
            },
            {
              "name": "upload_code",
              "fields": [
                {
                  "name": "code",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "storage_deposit_limit",
                  "type": 232,
                  "typeName": "Option<<BalanceOf<T> as codec::HasCompact>::Type>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Upload new `code` without instantiating a contract from it.",
                "",
                "If the code does not already exist a deposit is reserved from the caller",
                "and unreserved only when [`Self::remove_code`] is called. The size of the reserve",
                "depends on the instrumented size of the the supplied `code`.",
                "",
                "If the code already exists in storage it will still return `Ok` and upgrades",
                "the in storage version to the current",
                "[`InstructionWeights::version`](InstructionWeights).",
                "",
                "# Note",
                "",
                "Anyone can instantiate a contract from any uploaded code and thus prevent its removal.",
                "To avoid this situation a constructor could employ access control so that it can",
                "only be instantiated by permissioned entities. The same is true when uploading",
                "through [`Self::instantiate_with_code`]."
              ]
            },
            {
              "name": "remove_code",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 9,
                  "typeName": "CodeHash<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Remove the code stored under `code_hash` and refund the deposit to its owner.",
                "",
                "A code can only be removed by its original uploader (its owner) and only if it is",
                "not used by any contract."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 232,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 63
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 233,
    "type": {
      "path": [
        "pallet_sudo",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "sudo",
              "fields": [
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "# <weight>",
                "- O(1).",
                "- Limited storage reads.",
                "- One DB write (event).",
                "- Weight of derivative `call` execution + 10,000.",
                "# </weight>"
              ]
            },
            {
              "name": "sudo_unchecked_weight",
              "fields": [
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                },
                {
                  "name": "weight",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "This function does not check the weight of the call, and instead allows the",
                "Sudo user to specify the weight of the call.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "# <weight>",
                "- O(1).",
                "- The weight of this call is defined by the caller.",
                "# </weight>"
              ]
            },
            {
              "name": "set_key",
              "fields": [
                {
                  "name": "new",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                "key.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "# <weight>",
                "- O(1).",
                "- Limited storage reads.",
                "- One DB change.",
                "# </weight>"
              ]
            },
            {
              "name": "sudo_as",
              "fields": [
                {
                  "name": "who",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                "a given account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "# <weight>",
                "- O(1).",
                "- Limited storage reads.",
                "- One DB write (event).",
                "- Weight of derivative `call` execution + 10,000.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 234,
    "type": {
      "path": [
        "pallet_im_online",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "heartbeat",
              "fields": [
                {
                  "name": "heartbeat",
                  "type": 235,
                  "typeName": "Heartbeat<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 240,
                  "typeName": "<T::AuthorityId as RuntimeAppPublic>::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "# <weight>",
                "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is",
                "  length of `heartbeat.network_state.external_address`",
                "  - `O(K)`: decoding of length `K`",
                "  - `O(E)`: decoding/encoding of length `E`",
                "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                "  `ReceivedHeartbeats`",
                "- DbWrites: `ReceivedHeartbeats`",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 235,
    "type": {
      "path": [
        "pallet_im_online",
        "Heartbeat"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "block_number",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "network_state",
              "type": 236,
              "typeName": "OpaqueNetworkState",
              "docs": []
            },
            {
              "name": "session_index",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "authority_index",
              "type": 4,
              "typeName": "AuthIndex",
              "docs": []
            },
            {
              "name": "validators_len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 236,
    "type": {
      "path": [
        "sp_core",
        "offchain",
        "OpaqueNetworkState"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "peer_id",
              "type": 237,
              "typeName": "OpaquePeerId",
              "docs": []
            },
            {
              "name": "external_addresses",
              "type": 238,
              "typeName": "Vec<OpaqueMultiaddr>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 237,
    "type": {
      "path": [
        "sp_core",
        "OpaquePeerId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 238,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 239
        }
      },
      "docs": []
    }
  },
  {
    "id": 239,
    "type": {
      "path": [
        "sp_core",
        "offchain",
        "OpaqueMultiaddr"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 240,
    "type": {
      "path": [
        "pallet_im_online",
        "sr25519",
        "app_sr25519",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 241,
              "typeName": "sr25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 241,
    "type": {
      "path": [
        "sp_core",
        "sr25519",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 225,
              "typeName": "[u8; 64]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 242,
    "type": {
      "path": [
        "pallet_identity",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "add_registrar",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Add a registrar to the system.",
                "",
                "The dispatch origin for this call must be `T::RegistrarOrigin`.",
                "",
                "- `account`: the account of the registrar.",
                "",
                "Emits `RegistrarAdded` if successful.",
                "",
                "# <weight>",
                "- `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                "- One storage mutation (codec `O(R)`).",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "set_identity",
              "fields": [
                {
                  "name": "info",
                  "type": 243,
                  "typeName": "Box<IdentityInfo<T::MaxAdditionalFields>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set an account's identity information and reserve the appropriate deposit.",
                "",
                "If the account already has identity information, the deposit is taken as part payment",
                "for the new deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `info`: The identity information.",
                "",
                "Emits `IdentitySet` if successful.",
                "",
                "# <weight>",
                "- `O(X + X' + R)`",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded)",
                "  - where `R` judgements-count (registrar-count-bounded)",
                "- One balance reserve operation.",
                "- One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "set_subs",
              "fields": [
                {
                  "name": "subs",
                  "type": 277,
                  "typeName": "Vec<(T::AccountId, Data)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the sub-accounts of the sender.",
                "",
                "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                "and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "identity.",
                "",
                "- `subs`: The identity's (new) sub-accounts.",
                "",
                "# <weight>",
                "- `O(P + S)`",
                "  - where `P` old-subs-count (hard- and deposit-bounded).",
                "  - where `S` subs-count (hard- and deposit-bounded).",
                "- At most one balance operations.",
                "- DB:",
                "  - `P + S` storage mutations (codec complexity `O(1)`)",
                "  - One storage read (codec complexity `O(P)`).",
                "  - One storage write (codec complexity `O(S)`).",
                "  - One storage-exists (`IdentityOf::contains_key`).",
                "# </weight>"
              ]
            },
            {
              "name": "clear_identity",
              "fields": [],
              "index": 3,
              "docs": [
                "Clear an account's identity info and all sub-accounts and return all deposits.",
                "",
                "Payment: All reserved balances on the account are returned.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "identity.",
                "",
                "Emits `IdentityCleared` if successful.",
                "",
                "# <weight>",
                "- `O(R + S + X)`",
                "  - where `R` registrar-count (governance-bounded).",
                "  - where `S` subs-count (hard- and deposit-bounded).",
                "  - where `X` additional-field-count (deposit-bounded and code-bounded).",
                "- One balance-unreserve operation.",
                "- `2` storage reads and `S + 2` storage deletions.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "request_judgement",
              "fields": [
                {
                  "name": "reg_index",
                  "type": 101,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "max_fee",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Request a judgement from a registrar.",
                "",
                "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                "given.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                "registered identity.",
                "",
                "- `reg_index`: The index of the registrar whose judgement is requested.",
                "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                "",
                "```nocompile",
                "Self::registrars().get(reg_index).unwrap().fee",
                "```",
                "",
                "Emits `JudgementRequested` if successful.",
                "",
                "# <weight>",
                "- `O(R + X)`.",
                "- One balance-reserve operation.",
                "- Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_request",
              "fields": [
                {
                  "name": "reg_index",
                  "type": 4,
                  "typeName": "RegistrarIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Cancel a previous request.",
                "",
                "Payment: A previously reserved deposit is returned on success.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a",
                "registered identity.",
                "",
                "- `reg_index`: The index of the registrar whose judgement is no longer requested.",
                "",
                "Emits `JudgementUnrequested` if successful.",
                "",
                "# <weight>",
                "- `O(R + X)`.",
                "- One balance-reserve operation.",
                "- One storage mutation `O(R + X)`.",
                "- One event",
                "# </weight>"
              ]
            },
            {
              "name": "set_fee",
              "fields": [
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Set the fee required for a judgement to be requested from a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `fee`: the new fee.",
                "",
                "# <weight>",
                "- `O(R)`.",
                "- One storage mutation `O(R)`.",
                "- Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                "# </weight>"
              ]
            },
            {
              "name": "set_account_id",
              "fields": [
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Change the account associated with a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `new`: the new account ID.",
                "",
                "# <weight>",
                "- `O(R)`.",
                "- One storage mutation `O(R)`.",
                "- Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                "# </weight>"
              ]
            },
            {
              "name": "set_fields",
              "fields": [
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "fields",
                  "type": 279,
                  "typeName": "IdentityFields",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the field information for a registrar.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `index`.",
                "",
                "- `index`: the index of the registrar whose fee is to be set.",
                "- `fields`: the fields that the registrar concerns themselves with.",
                "",
                "# <weight>",
                "- `O(R)`.",
                "- One storage mutation `O(R)`.",
                "- Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                "# </weight>"
              ]
            },
            {
              "name": "provide_judgement",
              "fields": [
                {
                  "name": "reg_index",
                  "type": 101,
                  "typeName": "RegistrarIndex",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "judgement",
                  "type": 281,
                  "typeName": "Judgement<BalanceOf<T>>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Provide a judgement for an account's identity.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must be the account",
                "of the registrar whose index is `reg_index`.",
                "",
                "- `reg_index`: the index of the registrar whose judgement is being made.",
                "- `target`: the account whose identity the judgement is upon. This must be an account",
                "  with a registered identity.",
                "- `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                "",
                "Emits `JudgementGiven` if successful.",
                "",
                "# <weight>",
                "- `O(R + X)`.",
                "- One balance-transfer operation.",
                "- Up to one account-lookup operation.",
                "- Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "kill_identity",
              "fields": [
                {
                  "name": "target",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Remove an account's identity and sub-account information and slash the deposits.",
                "",
                "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                "`Slash`. Verification request deposits are not returned; they should be cancelled",
                "manually using `cancel_request`.",
                "",
                "The dispatch origin for this call must match `T::ForceOrigin`.",
                "",
                "- `target`: the account whose identity the judgement is upon. This must be an account",
                "  with a registered identity.",
                "",
                "Emits `IdentityKilled` if successful.",
                "",
                "# <weight>",
                "- `O(R + S + X)`.",
                "- One balance-reserve operation.",
                "- `S + 2` storage mutations.",
                "- One event.",
                "# </weight>"
              ]
            },
            {
              "name": "add_sub",
              "fields": [
                {
                  "name": "sub",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 246,
                  "typeName": "Data",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Add the given account to the sender's subs.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "rename_sub",
              "fields": [
                {
                  "name": "sub",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 246,
                  "typeName": "Data",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Alter the associated name of the given sub-account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "remove_sub",
              "fields": [
                {
                  "name": "sub",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Remove the given account from the sender's subs.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "sub identity of `sub`."
              ]
            },
            {
              "name": "quit_sub",
              "fields": [],
              "index": 14,
              "docs": [
                "Remove the sender as a sub-account.",
                "",
                "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                "to the sender (*not* the original depositor).",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                "super-identity.",
                "",
                "NOTE: This should not normally be used, but is provided in the case that the non-",
                "controller of an account is maliciously registered as a sub-account."
              ]
            }
          ]
        }
      },
      "docs": [
        "Identity pallet declaration."
      ]
    }
  },
  {
    "id": 243,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "IdentityInfo"
      ],
      "params": [
        {
          "name": "FieldLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "additional",
              "type": 244,
              "typeName": "BoundedVec<(Data, Data), FieldLimit>",
              "docs": []
            },
            {
              "name": "display",
              "type": 246,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "legal",
              "type": 246,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "web",
              "type": 246,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "riot",
              "type": 246,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "email",
              "type": 246,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "pgp_fingerprint",
              "type": 276,
              "typeName": "Option<[u8; 20]>",
              "docs": []
            },
            {
              "name": "image",
              "type": 246,
              "typeName": "Data",
              "docs": []
            },
            {
              "name": "twitter",
              "type": 246,
              "typeName": "Data",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 244,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 245
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 275,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 245,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          246,
          246
        ]
      },
      "docs": []
    }
  },
  {
    "id": 246,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "Data"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Raw0",
              "fields": [
                {
                  "name": null,
                  "type": 247,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw1",
              "fields": [
                {
                  "name": null,
                  "type": 248,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Raw2",
              "fields": [
                {
                  "name": null,
                  "type": 249,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Raw3",
              "fields": [
                {
                  "name": null,
                  "type": 250,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Raw4",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Raw5",
              "fields": [
                {
                  "name": null,
                  "type": 251,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Raw6",
              "fields": [
                {
                  "name": null,
                  "type": 252,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Raw7",
              "fields": [
                {
                  "name": null,
                  "type": 253,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Raw8",
              "fields": [
                {
                  "name": null,
                  "type": 119,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Raw9",
              "fields": [
                {
                  "name": null,
                  "type": 254,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Raw10",
              "fields": [
                {
                  "name": null,
                  "type": 255,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Raw11",
              "fields": [
                {
                  "name": null,
                  "type": 256,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Raw12",
              "fields": [
                {
                  "name": null,
                  "type": 257,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Raw13",
              "fields": [
                {
                  "name": null,
                  "type": 258,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Raw14",
              "fields": [
                {
                  "name": null,
                  "type": 259,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Raw15",
              "fields": [
                {
                  "name": null,
                  "type": 260,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Raw16",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Raw17",
              "fields": [
                {
                  "name": null,
                  "type": 261,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Raw18",
              "fields": [
                {
                  "name": null,
                  "type": 262,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Raw19",
              "fields": [
                {
                  "name": null,
                  "type": 263,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Raw20",
              "fields": [
                {
                  "name": null,
                  "type": 141,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Raw21",
              "fields": [
                {
                  "name": null,
                  "type": 264,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Raw22",
              "fields": [
                {
                  "name": null,
                  "type": 265,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Raw23",
              "fields": [
                {
                  "name": null,
                  "type": 266,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Raw24",
              "fields": [
                {
                  "name": null,
                  "type": 267,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Raw25",
              "fields": [
                {
                  "name": null,
                  "type": 268,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Raw26",
              "fields": [
                {
                  "name": null,
                  "type": 269,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Raw27",
              "fields": [
                {
                  "name": null,
                  "type": 270,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Raw28",
              "fields": [
                {
                  "name": null,
                  "type": 271,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Raw29",
              "fields": [
                {
                  "name": null,
                  "type": 272,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Raw30",
              "fields": [
                {
                  "name": null,
                  "type": 273,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Raw31",
              "fields": [
                {
                  "name": null,
                  "type": 274,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Raw32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "BlakeTwo256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Sha256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Keccak256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "ShaThree256",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 247,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 0,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 248,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 1,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 249,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 250,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 251,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 5,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 252,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 6,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 253,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 7,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 254,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 9,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 255,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 10,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 256,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 11,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 257,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 12,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 258,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 13,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 259,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 14,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 260,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 15,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 261,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 17,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 262,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 18,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 263,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 19,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 264,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 21,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 265,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 22,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 266,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 23,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 267,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 24,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 268,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 25,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 269,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 26,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 270,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 27,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 271,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 28,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 272,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 29,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 273,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 30,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 274,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 31,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 275,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 245
        }
      },
      "docs": []
    }
  },
  {
    "id": 276,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 141
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 141,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 277,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 278
        }
      },
      "docs": []
    }
  },
  {
    "id": 278,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          246
        ]
      },
      "docs": []
    }
  },
  {
    "id": 279,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "BitFlags"
      ],
      "params": [
        {
          "name": "T",
          "type": 280
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 8,
              "typeName": "IdentityField",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 280,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "IdentityField"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Display",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Legal",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Web",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Riot",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Email",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "PgpFingerprint",
              "fields": [],
              "index": 32,
              "docs": []
            },
            {
              "name": "Image",
              "fields": [],
              "index": 64,
              "docs": []
            },
            {
              "name": "Twitter",
              "fields": [],
              "index": 128,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 281,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "Judgement"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unknown",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "FeePaid",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Reasonable",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "KnownGood",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "OutOfDate",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "LowQuality",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Erroneous",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 282,
    "type": {
      "path": [
        "pallet_society",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "bid",
              "fields": [
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A user outside of the society can make a bid for entry.",
                "",
                "Payment: `CandidateDeposit` will be reserved for making a bid. It is returned",
                "when the bid becomes a member, or if the bid calls `unbid`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `value`: A one time payment the bid would like to receive when joining the society.",
                "",
                "# <weight>",
                "Key: B (len of bids), C (len of candidates), M (len of members), X (balance reserve)",
                "- Storage Reads:",
                "\t- One storage read to check for suspended candidate. O(1)",
                "\t- One storage read to check for suspended member. O(1)",
                "\t- One storage read to retrieve all current bids. O(B)",
                "\t- One storage read to retrieve all current candidates. O(C)",
                "\t- One storage read to retrieve all members. O(M)",
                "- Storage Writes:",
                "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
                "   w/ read)",
                "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                "- Notable Computation:",
                "\t- O(B + C + log M) search to check user is not already a part of society.",
                "\t- O(log B) search to insert the new bid sorted.",
                "- External Pallet Operations:",
                "\t- One balance reserve operation. O(X)",
                "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                "- Events:",
                "\t- One event for new bid.",
                "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                "",
                "Total Complexity: O(M + B + C + logM + logB + X)",
                "# </weight>"
              ]
            },
            {
              "name": "unbid",
              "fields": [
                {
                  "name": "pos",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A bidder can remove their bid for entry into society.",
                "By doing so, they will have their candidate deposit returned or",
                "they will unvouch their voucher.",
                "",
                "Payment: The bid deposit is unreserved if the user made a bid.",
                "",
                "The dispatch origin for this call must be _Signed_ and a bidder.",
                "",
                "Parameters:",
                "- `pos`: Position in the `Bids` vector of the bid who wants to unbid.",
                "",
                "# <weight>",
                "Key: B (len of bids), X (balance unreserve)",
                "- One storage read and write to retrieve and update the bids. O(B)",
                "- Either one unreserve balance action O(X) or one vouching storage removal. O(1)",
                "- One event.",
                "",
                "Total Complexity: O(B + X)",
                "# </weight>"
              ]
            },
            {
              "name": "vouch",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "tip",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "As a member, vouch for someone to join society by placing a bid on their behalf.",
                "",
                "There is no deposit required to vouch for a new bid, but a member can only vouch for",
                "one bid at a time. If the bid becomes a suspended candidate and ultimately rejected by",
                "the suspension judgement origin, the member will be banned from vouching again.",
                "",
                "As a vouching member, you can claim a tip if the candidate is accepted. This tip will",
                "be paid as a portion of the reward the member will receive for joining the society.",
                "",
                "The dispatch origin for this call must be _Signed_ and a member.",
                "",
                "Parameters:",
                "- `who`: The user who you would like to vouch for.",
                "- `value`: The total reward to be paid between you and the candidate if they become",
                "a member in the society.",
                "- `tip`: Your cut of the total `value` payout when the candidate is inducted into",
                "the society. Tips larger than `value` will be saturated upon payout.",
                "",
                "# <weight>",
                "Key: B (len of bids), C (len of candidates), M (len of members)",
                "- Storage Reads:",
                "\t- One storage read to retrieve all members. O(M)",
                "\t- One storage read to check member is not already vouching. O(1)",
                "\t- One storage read to check for suspended candidate. O(1)",
                "\t- One storage read to check for suspended member. O(1)",
                "\t- One storage read to retrieve all current bids. O(B)",
                "\t- One storage read to retrieve all current candidates. O(C)",
                "- Storage Writes:",
                "\t- One storage write to insert vouching status to the member. O(1)",
                "\t- One storage mutate to add a new bid to the vector O(B) (TODO: possible optimization",
                "   w/ read)",
                "\t- Up to one storage removal if bid.len() > MAX_BID_COUNT. O(1)",
                "- Notable Computation:",
                "\t- O(log M) search to check sender is a member.",
                "\t- O(B + C + log M) search to check user is not already a part of society.",
                "\t- O(log B) search to insert the new bid sorted.",
                "- External Pallet Operations:",
                "\t- One balance reserve operation. O(X)",
                "\t- Up to one balance unreserve operation if bids.len() > MAX_BID_COUNT.",
                "- Events:",
                "\t- One event for vouch.",
                "\t- Up to one event for AutoUnbid if bid.len() > MAX_BID_COUNT.",
                "",
                "Total Complexity: O(M + B + C + logM + logB + X)",
                "# </weight>"
              ]
            },
            {
              "name": "unvouch",
              "fields": [
                {
                  "name": "pos",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "As a vouching member, unvouch a bid. This only works while vouched user is",
                "only a bidder (and not a candidate).",
                "",
                "The dispatch origin for this call must be _Signed_ and a vouching member.",
                "",
                "Parameters:",
                "- `pos`: Position in the `Bids` vector of the bid who should be unvouched.",
                "",
                "# <weight>",
                "Key: B (len of bids)",
                "- One storage read O(1) to check the signer is a vouching member.",
                "- One storage mutate to retrieve and update the bids. O(B)",
                "- One vouching storage removal. O(1)",
                "- One event.",
                "",
                "Total Complexity: O(B)",
                "# </weight>"
              ]
            },
            {
              "name": "vote",
              "fields": [
                {
                  "name": "candidate",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "approve",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "As a member, vote on a candidate.",
                "",
                "The dispatch origin for this call must be _Signed_ and a member.",
                "",
                "Parameters:",
                "- `candidate`: The candidate that the member would like to bid on.",
                "- `approve`: A boolean which says if the candidate should be approved (`true`) or",
                "  rejected (`false`).",
                "",
                "# <weight>",
                "Key: C (len of candidates), M (len of members)",
                "- One storage read O(M) and O(log M) search to check user is a member.",
                "- One account lookup.",
                "- One storage read O(C) and O(C) search to check that user is a candidate.",
                "- One storage write to add vote to votes. O(1)",
                "- One event.",
                "",
                "Total Complexity: O(M + logM + C)",
                "# </weight>"
              ]
            },
            {
              "name": "defender_vote",
              "fields": [
                {
                  "name": "approve",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "As a member, vote on the defender.",
                "",
                "The dispatch origin for this call must be _Signed_ and a member.",
                "",
                "Parameters:",
                "- `approve`: A boolean which says if the candidate should be",
                "approved (`true`) or rejected (`false`).",
                "",
                "# <weight>",
                "- Key: M (len of members)",
                "- One storage read O(M) and O(log M) search to check user is a member.",
                "- One storage write to add vote to votes. O(1)",
                "- One event.",
                "",
                "Total Complexity: O(M + logM)",
                "# </weight>"
              ]
            },
            {
              "name": "payout",
              "fields": [],
              "index": 6,
              "docs": [
                "Transfer the first matured payout for the sender and remove it from the records.",
                "",
                "NOTE: This extrinsic needs to be called multiple times to claim multiple matured",
                "payouts.",
                "",
                "Payment: The member will receive a payment equal to their first matured",
                "payout to their free balance.",
                "",
                "The dispatch origin for this call must be _Signed_ and a member with",
                "payouts remaining.",
                "",
                "# <weight>",
                "Key: M (len of members), P (number of payouts for a particular member)",
                "- One storage read O(M) and O(log M) search to check signer is a member.",
                "- One storage read O(P) to get all payouts for a member.",
                "- One storage read O(1) to get the current block number.",
                "- One currency transfer call. O(X)",
                "- One storage write or removal to update the member's payouts. O(P)",
                "",
                "Total Complexity: O(M + logM + P + X)",
                "# </weight>"
              ]
            },
            {
              "name": "found",
              "fields": [
                {
                  "name": "founder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "max_members",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "rules",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Found the society.",
                "",
                "This is done as a discrete action in order to allow for the",
                "pallet to be included into a running chain and can only be done once.",
                "",
                "The dispatch origin for this call must be from the _FounderSetOrigin_.",
                "",
                "Parameters:",
                "- `founder` - The first member and head of the newly founded society.",
                "- `max_members` - The initial max number of members for the society.",
                "- `rules` - The rules of this society concerning membership.",
                "",
                "# <weight>",
                "- Two storage mutates to set `Head` and `Founder`. O(1)",
                "- One storage write to add the first member to society. O(1)",
                "- One event.",
                "",
                "Total Complexity: O(1)",
                "# </weight>"
              ]
            },
            {
              "name": "unfound",
              "fields": [],
              "index": 8,
              "docs": [
                "Annul the founding of the society.",
                "",
                "The dispatch origin for this call must be Signed, and the signing account must be both",
                "the `Founder` and the `Head`. This implies that it may only be done when there is one",
                "member.",
                "",
                "# <weight>",
                "- Two storage reads O(1).",
                "- Four storage removals O(1).",
                "- One event.",
                "",
                "Total Complexity: O(1)",
                "# </weight>"
              ]
            },
            {
              "name": "judge_suspended_member",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "forgive",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Allow suspension judgement origin to make judgement on a suspended member.",
                "",
                "If a suspended member is forgiven, we simply add them back as a member, not affecting",
                "any of the existing storage items for that member.",
                "",
                "If a suspended member is rejected, remove all associated storage items, including",
                "their payouts, and remove any vouched bids they currently have.",
                "",
                "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                "",
                "Parameters:",
                "- `who` - The suspended member to be judged.",
                "- `forgive` - A boolean representing whether the suspension judgement origin forgives",
                "  (`true`) or rejects (`false`) a suspended member.",
                "",
                "# <weight>",
                "Key: B (len of bids), M (len of members)",
                "- One storage read to check `who` is a suspended member. O(1)",
                "- Up to one storage write O(M) with O(log M) binary search to add a member back to",
                "  society.",
                "- Up to 3 storage removals O(1) to clean up a removed member.",
                "- Up to one storage write O(B) with O(B) search to remove vouched bid from bids.",
                "- Up to one additional event if unvouch takes place.",
                "- One storage removal. O(1)",
                "- One event for the judgement.",
                "",
                "Total Complexity: O(M + logM + B)",
                "# </weight>"
              ]
            },
            {
              "name": "judge_suspended_candidate",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "judgement",
                  "type": 283,
                  "typeName": "Judgement",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Allow suspended judgement origin to make judgement on a suspended candidate.",
                "",
                "If the judgement is `Approve`, we add them to society as a member with the appropriate",
                "payment for joining society.",
                "",
                "If the judgement is `Reject`, we either slash the deposit of the bid, giving it back",
                "to the society treasury, or we ban the voucher from vouching again.",
                "",
                "If the judgement is `Rebid`, we put the candidate back in the bid pool and let them go",
                "through the induction process again.",
                "",
                "The dispatch origin for this call must be from the _SuspensionJudgementOrigin_.",
                "",
                "Parameters:",
                "- `who` - The suspended candidate to be judged.",
                "- `judgement` - `Approve`, `Reject`, or `Rebid`.",
                "",
                "# <weight>",
                "Key: B (len of bids), M (len of members), X (balance action)",
                "- One storage read to check `who` is a suspended candidate.",
                "- One storage removal of the suspended candidate.",
                "- Approve Logic",
                "\t- One storage read to get the available pot to pay users with. O(1)",
                "\t- One storage write to update the available pot. O(1)",
                "\t- One storage read to get the current block number. O(1)",
                "\t- One storage read to get all members. O(M)",
                "\t- Up to one unreserve currency action.",
                "\t- Up to two new storage writes to payouts.",
                "\t- Up to one storage write with O(log M) binary search to add a member to society.",
                "- Reject Logic",
                "\t- Up to one repatriate reserved currency action. O(X)",
                "\t- Up to one storage write to ban the vouching member from vouching again.",
                "- Rebid Logic",
                "\t- Storage mutate with O(log B) binary search to place the user back into bids.",
                "- Up to one additional event if unvouch takes place.",
                "- One storage removal.",
                "- One event for the judgement.",
                "",
                "Total Complexity: O(M + logM + B + X)",
                "# </weight>"
              ]
            },
            {
              "name": "set_max_members",
              "fields": [
                {
                  "name": "max",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Allows root origin to change the maximum number of members in society.",
                "Max membership count must be greater than 1.",
                "",
                "The dispatch origin for this call must be from _ROOT_.",
                "",
                "Parameters:",
                "- `max` - The maximum number of members for the society.",
                "",
                "# <weight>",
                "- One storage write to update the max. O(1)",
                "- One event.",
                "",
                "Total Complexity: O(1)",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 283,
    "type": {
      "path": [
        "pallet_society",
        "Judgement"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Rebid",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reject",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Approve",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 284,
    "type": {
      "path": [
        "pallet_recovery",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "as_recovered",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Send a call through a recovered account.",
                "",
                "The dispatch origin for this call must be _Signed_ and registered to",
                "be able to make calls on behalf of the recovered account.",
                "",
                "Parameters:",
                "- `account`: The recovered account you want to make a call on-behalf-of.",
                "- `call`: The call you want to make with the recovered account.",
                "",
                "# <weight>",
                "- The weight of the `call` + 10,000.",
                "- One storage lookup to check account is recovered by `who`. O(1)",
                "# </weight>"
              ]
            },
            {
              "name": "set_recovered",
              "fields": [
                {
                  "name": "lost",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "rescuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Allow ROOT to bypass the recovery process and set an a rescuer account",
                "for a lost account directly.",
                "",
                "The dispatch origin for this call must be _ROOT_.",
                "",
                "Parameters:",
                "- `lost`: The \"lost account\" to be recovered.",
                "- `rescuer`: The \"rescuer account\" which can call as the lost account.",
                "",
                "# <weight>",
                "- One storage write O(1)",
                "- One event",
                "# </weight>"
              ]
            },
            {
              "name": "create_recovery",
              "fields": [
                {
                  "name": "friends",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "threshold",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "delay_period",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Create a recovery configuration for your account. This makes your account recoverable.",
                "",
                "Payment: `ConfigDepositBase` + `FriendDepositFactor` * #_of_friends balance",
                "will be reserved for storing the recovery configuration. This deposit is returned",
                "in full when the user calls `remove_recovery`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `friends`: A list of friends you trust to vouch for recovery attempts. Should be",
                "  ordered and contain no duplicate values.",
                "- `threshold`: The number of friends that must vouch for a recovery attempt before the",
                "  account can be recovered. Should be less than or equal to the length of the list of",
                "  friends.",
                "- `delay_period`: The number of blocks after a recovery attempt is initialized that",
                "  needs to pass before the account can be recovered.",
                "",
                "# <weight>",
                "- Key: F (len of friends)",
                "- One storage read to check that account is not already recoverable. O(1).",
                "- A check that the friends list is sorted and unique. O(F)",
                "- One currency reserve operation. O(X)",
                "- One storage write. O(1). Codec O(F).",
                "- One event.",
                "",
                "Total Complexity: O(F + X)",
                "# </weight>"
              ]
            },
            {
              "name": "initiate_recovery",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Initiate the process for recovering a recoverable account.",
                "",
                "Payment: `RecoveryDeposit` balance will be reserved for initiating the",
                "recovery process. This deposit will always be repatriated to the account",
                "trying to be recovered. See `close_recovery`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `account`: The lost account that you want to recover. This account needs to be",
                "  recoverable (i.e. have a recovery configuration).",
                "",
                "# <weight>",
                "- One storage read to check that account is recoverable. O(F)",
                "- One storage read to check that this recovery process hasn't already started. O(1)",
                "- One currency reserve operation. O(X)",
                "- One storage read to get the current block number. O(1)",
                "- One storage write. O(1).",
                "- One event.",
                "",
                "Total Complexity: O(F + X)",
                "# </weight>"
              ]
            },
            {
              "name": "vouch_recovery",
              "fields": [
                {
                  "name": "lost",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "rescuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Allow a \"friend\" of a recoverable account to vouch for an active recovery",
                "process for that account.",
                "",
                "The dispatch origin for this call must be _Signed_ and must be a \"friend\"",
                "for the recoverable account.",
                "",
                "Parameters:",
                "- `lost`: The lost account that you want to recover.",
                "- `rescuer`: The account trying to rescue the lost account that you want to vouch for.",
                "",
                "The combination of these two parameters must point to an active recovery",
                "process.",
                "",
                "# <weight>",
                "Key: F (len of friends in config), V (len of vouching friends)",
                "- One storage read to get the recovery configuration. O(1), Codec O(F)",
                "- One storage read to get the active recovery process. O(1), Codec O(V)",
                "- One binary search to confirm caller is a friend. O(logF)",
                "- One binary search to confirm caller has not already vouched. O(logV)",
                "- One storage write. O(1), Codec O(V).",
                "- One event.",
                "",
                "Total Complexity: O(F + logF + V + logV)",
                "# </weight>"
              ]
            },
            {
              "name": "claim_recovery",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Allow a successful rescuer to claim their recovered account.",
                "",
                "The dispatch origin for this call must be _Signed_ and must be a \"rescuer\"",
                "who has successfully completed the account recovery process: collected",
                "`threshold` or more vouches, waited `delay_period` blocks since initiation.",
                "",
                "Parameters:",
                "- `account`: The lost account that you want to claim has been successfully recovered by",
                "  you.",
                "",
                "# <weight>",
                "Key: F (len of friends in config), V (len of vouching friends)",
                "- One storage read to get the recovery configuration. O(1), Codec O(F)",
                "- One storage read to get the active recovery process. O(1), Codec O(V)",
                "- One storage read to get the current block number. O(1)",
                "- One storage write. O(1), Codec O(V).",
                "- One event.",
                "",
                "Total Complexity: O(F + V)",
                "# </weight>"
              ]
            },
            {
              "name": "close_recovery",
              "fields": [
                {
                  "name": "rescuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "As the controller of a recoverable account, close an active recovery",
                "process for your account.",
                "",
                "Payment: By calling this function, the recoverable account will receive",
                "the recovery deposit `RecoveryDeposit` placed by the rescuer.",
                "",
                "The dispatch origin for this call must be _Signed_ and must be a",
                "recoverable account with an active recovery process for it.",
                "",
                "Parameters:",
                "- `rescuer`: The account trying to rescue this recoverable account.",
                "",
                "# <weight>",
                "Key: V (len of vouching friends)",
                "- One storage read/remove to get the active recovery process. O(1), Codec O(V)",
                "- One balance call to repatriate reserved. O(X)",
                "- One event.",
                "",
                "Total Complexity: O(V + X)",
                "# </weight>"
              ]
            },
            {
              "name": "remove_recovery",
              "fields": [],
              "index": 7,
              "docs": [
                "Remove the recovery process for your account. Recovered accounts are still accessible.",
                "",
                "NOTE: The user must make sure to call `close_recovery` on all active",
                "recovery attempts before calling this function else it will fail.",
                "",
                "Payment: By calling this function the recoverable account will unreserve",
                "their recovery configuration deposit.",
                "(`ConfigDepositBase` + `FriendDepositFactor` * #_of_friends)",
                "",
                "The dispatch origin for this call must be _Signed_ and must be a",
                "recoverable account (i.e. has a recovery configuration).",
                "",
                "# <weight>",
                "Key: F (len of friends)",
                "- One storage read to get the prefix iterator for active recoveries. O(1)",
                "- One storage read/remove to get the recovery configuration. O(1), Codec O(F)",
                "- One balance call to unreserved. O(X)",
                "- One event.",
                "",
                "Total Complexity: O(F + X)",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_recovered",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Cancel the ability to use `as_recovered` for `account`.",
                "",
                "The dispatch origin for this call must be _Signed_ and registered to",
                "be able to make calls on behalf of the recovered account.",
                "",
                "Parameters:",
                "- `account`: The recovered account you are able to call on-behalf-of.",
                "",
                "# <weight>",
                "- One storage mutation to check account is recovered by `who`. O(1)",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 285,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "vest",
              "fields": [],
              "index": 0,
              "docs": [
                "Unlock any vested funds of the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 2 Reads, 2 Writes",
                "    - Reads: Vesting Storage, Balances Locks, [Sender Account]",
                "    - Writes: Vesting Storage, Balances Locks, [Sender Account]",
                "# </weight>"
              ]
            },
            {
              "name": "vest_other",
              "fields": [
                {
                  "name": "target",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Unlock any vested funds of a `target` account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 3 Reads, 3 Writes",
                "    - Reads: Vesting Storage, Balances Locks, Target Account",
                "    - Writes: Vesting Storage, Balances Locks, Target Account",
                "# </weight>"
              ]
            },
            {
              "name": "vested_transfer",
              "fields": [
                {
                  "name": "target",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 286,
                  "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Create a vested transfer.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account receiving the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 3 Reads, 3 Writes",
                "    - Reads: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                "    - Writes: Vesting Storage, Balances Locks, Target Account, [Sender Account]",
                "# </weight>"
              ]
            },
            {
              "name": "force_vested_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 286,
                  "typeName": "VestingInfo<BalanceOf<T>, T::BlockNumber>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force a vested transfer.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `source`: The account whose funds should be transferred.",
                "- `target`: The account that should be transferred the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "# <weight>",
                "- `O(1)`.",
                "- DbWeight: 4 Reads, 4 Writes",
                "    - Reads: Vesting Storage, Balances Locks, Target Account, Source Account",
                "    - Writes: Vesting Storage, Balances Locks, Target Account, Source Account",
                "# </weight>"
              ]
            },
            {
              "name": "merge_schedules",
              "fields": [
                {
                  "name": "schedule1_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "schedule2_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                "the highest possible start and end blocks. If both schedules have already started the",
                "current block will be used as the schedule start; with the caveat that if one schedule",
                "is finished by the current block, the other will be treated as the new merged schedule,",
                "unmodified.",
                "",
                "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                "NOTE: This will unlock all schedules through the current block prior to merging.",
                "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                "and both will be removed.",
                "",
                "Merged schedule attributes:",
                "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                "  current_block)`.",
                "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `schedule1_index`: index of the first schedule to merge.",
                "- `schedule2_index`: index of the second schedule to merge."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 286,
    "type": {
      "path": [
        "pallet_vesting",
        "vesting_info",
        "VestingInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "locked",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "per_block",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "starting_block",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 287,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "schedule",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 288,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 289,
                  "typeName": "Box<CallOrHashOf<T>>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Anonymously schedule a task."
              ]
            },
            {
              "name": "cancel",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Cancel an anonymously scheduled task."
              ]
            },
            {
              "name": "schedule_named",
              "fields": [
                {
                  "name": "id",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 288,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 289,
                  "typeName": "Box<CallOrHashOf<T>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Schedule a named task."
              ]
            },
            {
              "name": "cancel_named",
              "fields": [
                {
                  "name": "id",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a named scheduled task."
              ]
            },
            {
              "name": "schedule_after",
              "fields": [
                {
                  "name": "after",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 288,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 289,
                  "typeName": "Box<CallOrHashOf<T>>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Anonymously schedule a task after a delay.",
                "",
                "# <weight>",
                "Same as [`schedule`].",
                "# </weight>"
              ]
            },
            {
              "name": "schedule_named_after",
              "fields": [
                {
                  "name": "id",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "after",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 288,
                  "typeName": "Option<schedule::Period<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 289,
                  "typeName": "Box<CallOrHashOf<T>>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Schedule a named task after a delay.",
                "",
                "# <weight>",
                "Same as [`schedule_named`](Self::schedule_named).",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 288,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 73
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 73,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 289,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "schedule",
        "MaybeHashed"
      ],
      "params": [
        {
          "name": "T",
          "type": 123
        },
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Value",
              "fields": [
                {
                  "name": null,
                  "type": 123,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Hash",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 290,
    "type": {
      "path": [
        "pallet_preimage",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "note_preimage",
              "fields": [
                {
                  "name": "bytes",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Register a preimage on-chain.",
                "",
                "If the preimage was previously requested, no fees or deposits are taken for providing",
                "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
              ]
            },
            {
              "name": "unnote_preimage",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Clear an unrequested preimage from the runtime storage."
              ]
            },
            {
              "name": "request_preimage",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                "",
                "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                "a user may have paid, and take the control of the preimage out of their hands."
              ]
            },
            {
              "name": "unrequest_preimage",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Clear a previously made request for a preimage.",
                "",
                "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 291,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "proxy",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 292,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorised for through",
                "`add_proxy`.",
                "",
                "Removes any corresponding announcement(s).",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "add_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 78,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register a proxy account for the sender that is able to make calls on its behalf.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to make a proxy.",
                "- `proxy_type`: The permissions allowed for this proxy account.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "remove_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 78,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Unregister a proxy account for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                "- `proxy_type`: The permissions currently enabled for the removed proxy account.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "remove_proxies",
              "fields": [],
              "index": 3,
              "docs": [
                "Unregister all proxy accounts for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "WARNING: This may be called on accounts created by `anonymous`, however if done, then",
                "the unreserved fees will be inaccessible. **All access to this account will be lost.**",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "anonymous",
              "fields": [
                {
                  "name": "proxy_type",
                  "type": 78,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                "initialize it with a proxy of `proxy_type` for `origin` sender.",
                "",
                "Requires a `Signed` origin.",
                "",
                "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                "new account. This will almost always be the most permissive `ProxyType` possible to",
                "allow for maximum flexibility.",
                "- `index`: A disambiguation index, in case this is called multiple times in the same",
                "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                "want to use `0`.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero.",
                "",
                "Fails with `Duplicate` if this has already been called in this transaction, from the",
                "same sender, with the same parameters.",
                "",
                "Fails if there are insufficient funds to pay for deposit.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>",
                "TODO: Might be over counting 1 read"
              ]
            },
            {
              "name": "kill_anonymous",
              "fields": [
                {
                  "name": "spawner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 78,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "height",
                  "type": 101,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "ext_index",
                  "type": 101,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Removes a previously spawned anonymous proxy.",
                "",
                "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                "inaccessible.",
                "",
                "Requires a `Signed` origin, and the sender account must have been created by a call to",
                "`anonymous` with corresponding parameters.",
                "",
                "- `spawner`: The account that originally called `anonymous` to create this account.",
                "- `index`: The disambiguation index originally passed to `anonymous`. Probably `0`.",
                "- `proxy_type`: The proxy type originally passed to `anonymous`.",
                "- `height`: The height of the chain when the call to `anonymous` was processed.",
                "- `ext_index`: The extrinsic index in which the call to `anonymous` was processed.",
                "",
                "Fails with `NoPermission` in case the caller is not a previously created anonymous",
                "account whose `anonymous` call has corresponding parameters.",
                "",
                "# <weight>",
                "Weight is a function of the number of proxies the user has (P).",
                "# </weight>"
              ]
            },
            {
              "name": "announce",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Publish the hash of a proxy-call that will be made in the future.",
                "",
                "This must be called some number of blocks before the corresponding `proxy` is attempted",
                "if the delay associated with the proxy relationship is greater than zero.",
                "",
                "No more than `MaxPending` announcements may be made at any one time.",
                "",
                "This will take a deposit of `AnnouncementDepositFactor` as well as",
                "`AnnouncementDepositBase` if there are no other pending announcements.",
                "",
                "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            },
            {
              "name": "remove_announcement",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Remove a given announcement.",
                "",
                "May be called by a proxy account to remove a call they previously announced and return",
                "the deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            },
            {
              "name": "reject_announcement",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 9,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Remove the given announcement of a delegate.",
                "",
                "May be called by a target (proxied) account to remove a call that one of their delegates",
                "(`delegate`) has announced they want to execute. The deposit is returned.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `delegate`: The account that previously announced the call.",
                "- `call_hash`: The hash of the call to be made.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            },
            {
              "name": "proxy_announced",
              "fields": [
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 292,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorized for through",
                "`add_proxy`.",
                "",
                "Removes any corresponding announcement(s).",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account.",
                "",
                "# <weight>",
                "Weight is a function of:",
                "- A: the number of announcements made.",
                "- P: the number of proxies the user has.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 292,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 78
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 78,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 293,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "as_multi_threshold_1",
              "fields": [
                {
                  "name": "other_signatories",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Immediately dispatch a multi-signature call using a single approval from the caller.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `other_signatories`: The accounts (other than the sender) who are part of the",
                "multi-signature, but do not participate in the approval process.",
                "- `call`: The call to be executed.",
                "",
                "Result is equivalent to the dispatched result.",
                "",
                "# <weight>",
                "O(Z + C) where Z is the length of the call and C its execution weight.",
                "-------------------------------",
                "- DB Weight: None",
                "- Plus Call Weight",
                "# </weight>"
              ]
            },
            {
              "name": "as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 294,
                  "typeName": "Option<Timepoint<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 295,
                  "typeName": "OpaqueCall<T>",
                  "docs": []
                },
                {
                  "name": "store_call",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "If there are enough, then dispatch the call.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call`: The call to be executed.",
                "",
                "NOTE: Unless this is the final approval, you will generally want to use",
                "`approve_as_multi` instead, since it only requires a hash of the call.",
                "",
                "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                "on success, result is `Ok` and the result from the interior call, if it was executed,",
                "may be found in the deposited `MultisigExecuted` event.",
                "",
                "# <weight>",
                "- `O(S + Z + Call)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- The weight of the `call`.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                "-------------------------------",
                "- DB Weight:",
                "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                "- Plus Call Weight",
                "# </weight>"
              ]
            },
            {
              "name": "approve_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 294,
                  "typeName": "Option<Timepoint<T::BlockNumber>>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 8,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                "",
                "# <weight>",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`.",
                "----------------------------------",
                "- DB Weight:",
                "    - Read: Multisig Storage, [Caller Account]",
                "    - Write: Multisig Storage, [Caller Account]",
                "# </weight>"
              ]
            },
            {
              "name": "cancel_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 79,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 38,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 81,
                  "typeName": "Timepoint<T::BlockNumber>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                "for this operation will be unreserved on success.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                "transaction for this dispatch.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "# <weight>",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- One event.",
                "- I/O: 1 read `O(S)`, one remove.",
                "- Storage: removes one item.",
                "----------------------------------",
                "- DB Weight:",
                "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 294,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 81
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 81,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 295,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "misc",
        "WrapperKeepOpaque"
      ],
      "params": [
        {
          "name": "T",
          "type": 123
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 101,
              "typeName": null,
              "docs": []
            },
            {
              "name": null,
              "type": 123,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 296,
    "type": {
      "path": [
        "pallet_bounties",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "propose_bounty",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "description",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Propose a new bounty.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                "or slashed when rejected.",
                "",
                "- `curator`: The curator account whom will manage this bounty.",
                "- `fee`: The curator fee.",
                "- `value`: The total payment amount of this bounty, curator fee included.",
                "- `description`: The description of this bounty."
              ]
            },
            {
              "name": "approve_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                "and the original deposit will be returned.",
                "",
                "May only be called from `T::ApproveOrigin`.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "propose_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "curator",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Assign a curator to a funded bounty.",
                "",
                "May only be called from `T::ApproveOrigin`.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "unassign_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Unassign curator from a bounty.",
                "",
                "This function can only be called by the `RejectOrigin` a signed origin.",
                "",
                "If this function is called by the `RejectOrigin`, we assume that the curator is",
                "malicious or inactive. As a result, we will slash the curator when possible.",
                "",
                "If the origin is the curator, we take this as a sign they are unable to do their job and",
                "they willingly give up. We could slash them, but for now we allow them to recover their",
                "deposit and exit without issue. (We may want to change this if it is abused.)",
                "",
                "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                "anyone in the community to call out that a curator is not doing their due diligence, and",
                "we should pick a new curator. In this case the curator should also be slashed.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "accept_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Accept the curator role for a bounty.",
                "A deposit will be reserved from curator and refund upon successful payout.",
                "",
                "May only be called from the curator.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "award_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                "after a delay.",
                "",
                "The dispatch origin for this call must be the curator of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to award.",
                "- `beneficiary`: The beneficiary account whom will receive the payout.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "claim_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Claim the payout from an awarded bounty after payout delay.",
                "",
                "The dispatch origin for this call must be the beneficiary of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to claim.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "close_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                "the curator deposit will be unreserved if possible.",
                "",
                "Only `T::RejectOrigin` is able to cancel a bounty.",
                "",
                "- `bounty_id`: Bounty ID to cancel.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            },
            {
              "name": "extend_bounty_expiry",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "remark",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Extend the expiry time of an active bounty.",
                "",
                "The dispatch origin for this call must be the curator of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to extend.",
                "- `remark`: additional information.",
                "",
                "# <weight>",
                "- O(1).",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 297,
    "type": {
      "path": [
        "pallet_tips",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_awesome",
              "fields": [
                {
                  "name": "reason",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report something `reason` that deserves a tip and claim any eventual the finder's fee.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                "`DataDepositPerByte` for each byte in `reason`.",
                "",
                "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "  a UTF-8-encoded URL.",
                "- `who`: The account which should be credited for the tip.",
                "",
                "Emits `NewTip` if successful.",
                "",
                "# <weight>",
                "- Complexity: `O(R)` where `R` length of `reason`.",
                "  - encoding and hashing of 'reason'",
                "- DbReads: `Reasons`, `Tips`",
                "- DbWrites: `Reasons`, `Tips`",
                "# </weight>"
              ]
            },
            {
              "name": "retract_tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Retract a prior tip-report from `report_awesome`, and cancel the process of tipping.",
                "",
                "If successful, the original deposit will be unreserved.",
                "",
                "The dispatch origin for this call must be _Signed_ and the tip identified by `hash`",
                "must have been reported by the signing account through `report_awesome` (and not",
                "through `tip_new`).",
                "",
                "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "",
                "Emits `TipRetracted` if successful.",
                "",
                "# <weight>",
                "- Complexity: `O(1)`",
                "  - Depends on the length of `T::Hash` which is fixed.",
                "- DbReads: `Tips`, `origin account`",
                "- DbWrites: `Reasons`, `Tips`, `origin account`",
                "# </weight>"
              ]
            },
            {
              "name": "tip_new",
              "fields": [
                {
                  "name": "reason",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "tip_value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Give a tip for something new; no finder's fee will be taken.",
                "",
                "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                "member of the `Tippers` set.",
                "",
                "- `reason`: The reason for, or the thing that deserves, the tip; generally this will be",
                "  a UTF-8-encoded URL.",
                "- `who`: The account which should be credited for the tip.",
                "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "  value of active tippers will be given to the `who`.",
                "",
                "Emits `NewTip` if successful.",
                "",
                "# <weight>",
                "- Complexity: `O(R + T)` where `R` length of `reason`, `T` is the number of tippers.",
                "  - `O(T)`: decoding `Tipper` vec of length `T`. `T` is charged as upper bound given by",
                "    `ContainsLengthBound`. The actual cost depends on the implementation of",
                "    `T::Tippers`.",
                "  - `O(R)`: hashing and encoding of reason of length `R`",
                "- DbReads: `Tippers`, `Reasons`",
                "- DbWrites: `Reasons`, `Tips`",
                "# </weight>"
              ]
            },
            {
              "name": "tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "tip_value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Declare a tip value for an already-open tip.",
                "",
                "The dispatch origin for this call must be _Signed_ and the signing account must be a",
                "member of the `Tippers` set.",
                "",
                "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "  as the hash of the tuple of the hash of the original tip `reason` and the beneficiary",
                "  account ID.",
                "- `tip_value`: The amount of tip that the sender would like to give. The median tip",
                "  value of active tippers will be given to the `who`.",
                "",
                "Emits `TipClosing` if the threshold of tippers has been reached and the countdown period",
                "has started.",
                "",
                "# <weight>",
                "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                "  `T`, insert tip and check closing, `T` is charged as upper bound given by",
                "  `ContainsLengthBound`. The actual cost depends on the implementation of `T::Tippers`.",
                "",
                "  Actually weight could be lower as it depends on how many tips are in `OpenTip` but it",
                "  is weighted as if almost full i.e of length `T-1`.",
                "- DbReads: `Tippers`, `Tips`",
                "- DbWrites: `Tips`",
                "# </weight>"
              ]
            },
            {
              "name": "close_tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Close and payout a tip.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "The tip identified by `hash` must have finished its countdown period.",
                "",
                "- `hash`: The identity of the open tip for which a tip value is declared. This is formed",
                "  as the hash of the tuple of the original tip `reason` and the beneficiary account ID.",
                "",
                "# <weight>",
                "- Complexity: `O(T)` where `T` is the number of tippers. decoding `Tipper` vec of length",
                "  `T`. `T` is charged as upper bound given by `ContainsLengthBound`. The actual cost",
                "  depends on the implementation of `T::Tippers`.",
                "- DbReads: `Tips`, `Tippers`, `tip finder`",
                "- DbWrites: `Reasons`, `Tips`, `Tippers`, `tip finder`",
                "# </weight>"
              ]
            },
            {
              "name": "slash_tip",
              "fields": [
                {
                  "name": "hash",
                  "type": 9,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Remove and slash an already-open tip.",
                "",
                "May only be called from `T::RejectOrigin`.",
                "",
                "As a result, the finder is slashed and the deposits are lost.",
                "",
                "Emits `TipSlashed` if successful.",
                "",
                "# <weight>",
                "  `T` is charged as upper bound given by `ContainsLengthBound`.",
                "  The actual cost depends on the implementation of `T::Tippers`.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 298,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new class of fungible assets from a public origin.",
                "",
                "This new asset class has no assets initially and its owner is the origin.",
                "",
                "The origin must be Signed and the sender must have sufficient funds free.",
                "",
                "Funds of sender are reserved by `AssetDeposit`.",
                "",
                "Parameters:",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset.",
                "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                "member of the asset class's admin team.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new class of fungible assets from a privileged origin.",
                "",
                "This new asset class has no assets initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset.",
                "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                "over this asset, but may later change and configure the permissions using",
                "`transfer_ownership` and `set_team`.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "destroy",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 299,
                  "typeName": "DestroyWitness",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Destroy a class of fungible assets.",
                "",
                "The origin must conform to `ForceOrigin` or must be Signed and the sender must be the",
                "owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "asset.",
                "",
                "Emits `Destroyed` event when successful.",
                "",
                "NOTE: It can be helpful to first freeze an asset before destroying it so that you",
                "can provide accurate witness information and prevent users from manipulating state",
                "in a way that can make it harder to destroy.",
                "",
                "Weight: `O(c + p + a)` where:",
                "- `c = (witness.accounts - witness.sufficients)`",
                "- `s = witness.sufficients`",
                "- `a = witness.approvals`"
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Mint assets of a particular class.",
                "",
                "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount minted.",
                "- `beneficiary`: The account to be credited with the minted assets.",
                "- `amount`: The amount of the asset to be minted.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                "",
                "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                "",
                "Bails with `NoAccount` if the `who` is already dead.",
                "",
                "- `id`: The identifier of the asset to have some amount burned.",
                "- `who`: The account to be debited from.",
                "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                "",
                "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                "minimum for the asset, then the amount burned is increased to take it to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Move some assets from the sender account to another.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Move some assets from the sender account to another, keeping the sender account alive.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Move some assets from one account to another.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `source`: The account to be debited.",
                "- `dest`: The account to be credited.",
                "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the `source` balance above zero but",
                "below the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                "`dest`."
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Disallow further unprivileged transfers from an account.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Allow unprivileged transfers from an account again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be unfrozen.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "freeze_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Disallow further unprivileged transfers for the asset class.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Allow unprivileged transfers for the asset again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be thawed.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Change the Owner of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Change the Issuer, Admin and Freezer of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Set the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Funds of sender are reserved according to the formula:",
                "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Any deposit is freed for the asset owner.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Force the metadata for an asset to some value.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is left alone.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
              ]
            },
            {
              "name": "force_clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is returned.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_asset_status",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Alter the attributes of a given asset.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                "value to account for the state bloat associated with its balance storage. If set to",
                "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                "an ED in the Balances pallet or whatever else is used to control user-account state",
                "growth).",
                "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                "instructions.",
                "",
                "Emits `AssetStatusChanged` with the identity of the asset.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Approve an amount of asset for transfer by a delegated third-party account.",
                "",
                "Origin must be Signed.",
                "",
                "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                "for the purpose of holding the approval. If some non-zero amount of assets is already",
                "approved from signing account to `delegate`, then it is topped up or unreserved to",
                "meet the right value.",
                "",
                "NOTE: The signing account does not need to own `amount` of assets at the point of",
                "making this call.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account to delegate permission to transfer asset.",
                "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                "already an approval in place, then this acts additively.",
                "",
                "Emits `ApprovedTransfer` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be Signed and there must be an approval in place between signer and",
                "`delegate`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                "account of the asset `id`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_approved",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Transfer some asset balance from a previously delegated account to some third-party",
                "account.",
                "",
                "Origin must be Signed and there must be an approval in place by the `owner` to the",
                "signer.",
                "",
                "If the entire amount approved for transfer is transferred, then any deposit previously",
                "reserved by `approve_transfer` is unreserved.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                "from which the asset balance will be withdrawn.",
                "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                "- `amount`: The amount of assets to transfer.",
                "",
                "Emits `TransferredApproved` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "touch",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Create an asset account for non-provider assets.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                "  to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund",
              "fields": [
                {
                  "name": "id",
                  "type": 101,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "allow_burn",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Return the deposit (if any) of an asset account.",
                "",
                "The origin must be Signed.",
                "",
                "- `id`: The identifier of the asset for the account to be created.",
                "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 299,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "DestroyWitness"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "accounts",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "sufficients",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 101,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 300,
    "type": {
      "path": [
        "pallet_lottery",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "buy_ticket",
              "fields": [
                {
                  "name": "call",
                  "type": 123,
                  "typeName": "Box<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Buy a ticket to enter the lottery.",
                "",
                "This extrinsic acts as a passthrough function for `call`. In all",
                "situations where `call` alone would succeed, this extrinsic should",
                "succeed.",
                "",
                "If `call` is successful, then we will attempt to purchase a ticket,",
                "which may fail silently. To detect success of a ticket purchase, you",
                "should listen for the `TicketBought` event.",
                "",
                "This extrinsic must be called by a signed origin."
              ]
            },
            {
              "name": "set_calls",
              "fields": [
                {
                  "name": "calls",
                  "type": 122,
                  "typeName": "Vec<<T as Config>::Call>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set calls in storage which can be used to purchase a lottery ticket.",
                "",
                "This function only matters if you use the `ValidateCall` implementation",
                "provided by this pallet, which uses storage to determine the valid calls.",
                "",
                "This extrinsic must be called by the Manager origin."
              ]
            },
            {
              "name": "start_lottery",
              "fields": [
                {
                  "name": "price",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "length",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "repeat",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Start a lottery using the provided configuration.",
                "",
                "This extrinsic must be called by the `ManagerOrigin`.",
                "",
                "Parameters:",
                "",
                "* `price`: The cost of a single ticket.",
                "* `length`: How long the lottery should run for starting at the current block.",
                "* `delay`: How long after the lottery end we should wait before picking a winner.",
                "* `repeat`: If the lottery should repeat when completed."
              ]
            },
            {
              "name": "stop_repeat",
              "fields": [],
              "index": 3,
              "docs": [
                "If a lottery is repeating, you can use this to stop the repeat.",
                "The lottery will continue to run to completion.",
                "",
                "This extrinsic must be called by the `ManagerOrigin`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 301,
    "type": {
      "path": [
        "pallet_gilt",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "place_bid",
              "fields": [
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "duration",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Place a bid for a gilt to be issued.",
                "",
                "Origin must be Signed, and account must have at least `amount` in free balance.",
                "",
                "- `amount`: The amount of the bid; these funds will be reserved. If the bid is",
                "successfully elevated into an issued gilt, then these funds will continue to be",
                "reserved until the gilt expires. Must be at least `MinFreeze`.",
                "- `duration`: The number of periods for which the funds will be locked if the gilt is",
                "issued. It will expire only after this period has elapsed after the point of issuance.",
                "Must be greater than 1 and no more than `QueueCount`.",
                "",
                "Complexities:",
                "- `Queues[duration].len()` (just take max)."
              ]
            },
            {
              "name": "retract_bid",
              "fields": [
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "duration",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Retract a previously placed bid.",
                "",
                "Origin must be Signed, and the account should have previously issued a still-active bid",
                "of `amount` for `duration`.",
                "",
                "- `amount`: The amount of the previous bid.",
                "- `duration`: The duration of the previous bid."
              ]
            },
            {
              "name": "set_target",
              "fields": [
                {
                  "name": "target",
                  "type": 302,
                  "typeName": "Perquintill",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set target proportion of gilt-funds.",
                "",
                "Origin must be `AdminOrigin`.",
                "",
                "- `target`: The target proportion of effective issued funds that should be under gilts",
                "at any one time."
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "index",
                  "type": 101,
                  "typeName": "ActiveIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Remove an active but expired gilt. Reserved funds under gilt are freed and balance is",
                "adjusted to ensure that the funds grow or shrink to maintain the equivalent proportion",
                "of effective total issued funds.",
                "",
                "Origin must be Signed and the account must be the owner of the gilt of the given index.",
                "",
                "- `index`: The index of the gilt to be thawed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 302,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 303
        }
      },
      "docs": []
    }
  },
  {
    "id": 303,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perquintill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 8,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 304,
    "type": {
      "path": [
        "pallet_uniques",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new class of non-fungible assets from a public origin.",
                "",
                "This new asset class has no assets initially and its owner is the origin.",
                "",
                "The origin must be Signed and the sender must have sufficient funds free.",
                "",
                "`AssetDeposit` funds of sender are reserved.",
                "",
                "Parameters:",
                "- `class`: The identifier of the new asset class. This must not be currently in use.",
                "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                "member of the asset class's admin team.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "free_holding",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new class of non-fungible assets from a privileged origin.",
                "",
                "This new asset class has no assets initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `class`: The identifier of the new asset. This must not be currently in use.",
                "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                "over this asset, but may later change and configure the permissions using",
                "`transfer_ownership` and `set_team`.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "destroy",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 305,
                  "typeName": "DestroyWitness",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Destroy a class of fungible assets.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                "owner of the asset `class`.",
                "",
                "- `class`: The identifier of the asset class to be destroyed.",
                "- `witness`: Information on the instances minted in the asset class. This must be",
                "correct.",
                "",
                "Emits `Destroyed` event when successful.",
                "",
                "Weight: `O(n + m)` where:",
                "- `n = witness.instances`",
                "- `m = witness.instance_metadatas`",
                "- `a = witness.attributes`"
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Mint an asset instance of a particular class.",
                "",
                "The origin must be Signed and the sender must be the Issuer of the asset `class`.",
                "",
                "- `class`: The class of the asset to be minted.",
                "- `instance`: The instance value of the asset to be minted.",
                "- `beneficiary`: The initial owner of the minted asset.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "check_owner",
                  "type": 306,
                  "typeName": "Option<<T::Lookup as StaticLookup>::Source>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Destroy a single asset instance.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `class`.",
                "",
                "- `class`: The class of the asset to be burned.",
                "- `instance`: The instance of the asset to be burned.",
                "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
                "  asset is owned by this value.",
                "",
                "Emits `Burned` with the actual amount burned.",
                "",
                "Weight: `O(1)`",
                "Modes: `check_owner.is_some()`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Move an asset from the sender account to another.",
                "",
                "Origin must be Signed and the signing account must be either:",
                "- the Admin of the asset `class`;",
                "- the Owner of the asset `instance`;",
                "- the approved delegate for the asset `instance` (in this case, the approval is reset).",
                "",
                "Arguments:",
                "- `class`: The class of the asset to be transferred.",
                "- `instance`: The instance of the asset to be transferred.",
                "- `dest`: The account to receive ownership of the asset.",
                "",
                "Emits `Transferred`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "redeposit",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instances",
                  "type": 90,
                  "typeName": "Vec<T::InstanceId>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Reevaluate the deposits on some assets.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `class`.",
                "",
                "- `class`: The class of the asset to be frozen.",
                "- `instances`: The instances of the asset class whose deposits will be reevaluated.",
                "",
                "NOTE: This exists as a best-effort function. Any asset instances which are unknown or",
                "in the case that the owner account does not have reservable funds to pay for a",
                "deposit increase are ignored. Generally the owner isn't going to call this on instances",
                "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                "so it's of little consequence.",
                "",
                "It will still return an error in the case that the class is unknown of the signer is",
                "not permitted to call it.",
                "",
                "Weight: `O(instances.len())`"
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Disallow further unprivileged transfer of an asset instance.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
                "",
                "- `class`: The class of the asset to be frozen.",
                "- `instance`: The instance of the asset to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Re-allow unprivileged transfer of an asset instance.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
                "",
                "- `class`: The class of the asset to be thawed.",
                "- `instance`: The instance of the asset to be thawed.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "freeze_class",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Disallow further unprivileged transfers for a whole asset class.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `class`.",
                "",
                "- `class`: The asset class to be frozen.",
                "",
                "Emits `ClassFrozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw_class",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Re-allow unprivileged transfers for a whole asset class.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `class`.",
                "",
                "- `class`: The class to be thawed.",
                "",
                "Emits `ClassThawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Change the Owner of an asset class.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `class`.",
                "",
                "- `class`: The asset class whose owner should be changed.",
                "- `owner`: The new Owner of this asset class.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Change the Issuer, Admin and Freezer of an asset class.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `class`.",
                "",
                "- `class`: The asset class whose team should be changed.",
                "- `issuer`: The new Issuer of this asset class.",
                "- `admin`: The new Admin of this asset class.",
                "- `freezer`: The new Freezer of this asset class.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Approve an instance to be transferred by a delegated third-party account.",
                "",
                "Origin must be Signed and must be the owner of the asset `instance`.",
                "",
                "- `class`: The class of the asset to be approved for delegated transfer.",
                "- `instance`: The instance of the asset to be approved for delegated transfer.",
                "- `delegate`: The account to delegate permission to transfer the asset.",
                "",
                "Emits `ApprovedTransfer` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "maybe_check_delegate",
                  "type": 306,
                  "typeName": "Option<<T::Lookup as StaticLookup>::Source>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Cancel the prior approval for the transfer of an asset by a delegate.",
                "",
                "Origin must be either:",
                "- the `Force` origin;",
                "- `Signed` with the signer being the Admin of the asset `class`;",
                "- `Signed` with the signer being the Owner of the asset `instance`;",
                "",
                "Arguments:",
                "- `class`: The class of the asset of whose approval will be cancelled.",
                "- `instance`: The instance of the asset of whose approval will be cancelled.",
                "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
                "  which permission of transfer is delegated.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_asset_status",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "free_holding",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Alter the attributes of a given asset.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `class`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "- `free_holding`: Whether a deposit is taken for holding an instance of this asset",
                "  class.",
                "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                "instructions.",
                "",
                "Emits `AssetStatusChanged` with the identity of the asset.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_attribute",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "maybe_instance",
                  "type": 91,
                  "typeName": "Option<T::InstanceId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 92,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 93,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Set an attribute for an asset class or instance.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "asset `class`.",
                "",
                "If the origin is Signed, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `class`: The identifier of the asset class whose instance's metadata to set.",
                "- `maybe_instance`: The identifier of the asset instance whose metadata to set.",
                "- `key`: The key of the attribute.",
                "- `value`: The value to which to set the attribute.",
                "",
                "Emits `AttributeSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_attribute",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "maybe_instance",
                  "type": 91,
                  "typeName": "Option<T::InstanceId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 92,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Set an attribute for an asset class or instance.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "asset `class`.",
                "",
                "If the origin is Signed, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `class`: The identifier of the asset class whose instance's metadata to set.",
                "- `instance`: The identifier of the asset instance whose metadata to set.",
                "- `key`: The key of the attribute.",
                "- `value`: The value to which to set the attribute.",
                "",
                "Emits `AttributeSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 89,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Set the metadata for an asset instance.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "asset `class`.",
                "",
                "If the origin is Signed, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                "account any already reserved funds.",
                "",
                "- `class`: The identifier of the asset class whose instance's metadata to set.",
                "- `instance`: The identifier of the asset instance whose metadata to set.",
                "- `data`: The general information of this asset. Limited in length by `StringLimit`.",
                "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "instance",
                  "type": 101,
                  "typeName": "T::InstanceId",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Clear the metadata for an asset instance.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "asset `instance`.",
                "",
                "Any deposit is freed for the asset class owner.",
                "",
                "- `class`: The identifier of the asset class whose instance's metadata to clear.",
                "- `instance`: The identifier of the asset instance whose metadata to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_class_metadata",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 89,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Set the metadata for an asset class.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                "the asset `class`.",
                "",
                "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                "account any already reserved funds.",
                "",
                "- `class`: The identifier of the asset whose metadata to update.",
                "- `data`: The general information of this asset. Limited in length by `StringLimit`.",
                "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                "",
                "Emits `ClassMetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_class_metadata",
              "fields": [
                {
                  "name": "class",
                  "type": 101,
                  "typeName": "T::ClassId",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Clear the metadata for an asset class.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                "the asset `class`.",
                "",
                "Any deposit is freed for the asset class owner.",
                "",
                "- `class`: The identifier of the asset class whose metadata to clear.",
                "",
                "Emits `ClassMetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 305,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "DestroyWitness"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "instances",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "instance_metadatas",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 101,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 306,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 140
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 140,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 307,
    "type": {
      "path": [
        "pallet_transaction_storage",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "store",
              "fields": [
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Index and store data on chain. Minimum data size is 1 bytes, maximum is",
                "`MaxTransactionSize`. Data will be removed after `STORAGE_PERIOD` blocks, unless `renew`",
                "is called. # <weight>",
                "- n*log(n) of data size, as all data is pushed to an in-memory trie.",
                "Additionally contains a DB write.",
                "# </weight>"
              ]
            },
            {
              "name": "renew",
              "fields": [
                {
                  "name": "block",
                  "type": 4,
                  "typeName": "T::BlockNumber",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Renew previously stored data. Parameters are the block number that contains",
                "previous `store` or `renew` call and transaction index within that block.",
                "Transaction index is emitted in the `Stored` or `Renewed` event.",
                "Applies same fees as `store`.",
                "# <weight>",
                "- Constant.",
                "# </weight>"
              ]
            },
            {
              "name": "check_proof",
              "fields": [
                {
                  "name": "proof",
                  "type": 308,
                  "typeName": "TransactionStorageProof",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Check storage proof for block number `block_number() - StoragePeriod`.",
                "If such block does not exist the proof is expected to be `None`.",
                "# <weight>",
                "- Linear w.r.t the number of indexed transactions in the proved block for random",
                "  probing.",
                "There's a DB read for each transaction.",
                "Here we assume a maximum of 100 probed transactions.",
                "# </weight>"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 308,
    "type": {
      "path": [
        "sp_transaction_storage_proof",
        "TransactionStorageProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "chunk",
              "type": 10,
              "typeName": "Vec<u8>",
              "docs": []
            },
            {
              "name": "proof",
              "type": 107,
              "typeName": "Vec<Vec<u8>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 309,
    "type": {
      "path": [
        "pallet_bags_list",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "rebag",
              "fields": [
                {
                  "name": "dislocated",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                "changed its weight that it should properly fall into a different bag than its current",
                "one.",
                "",
                "Anyone can call this function about any potentially dislocated account.",
                "",
                "Will never return an error; if `dislocated` does not exist or doesn't need a rebag, then",
                "it is a noop and fees are still collected from `origin`."
              ]
            },
            {
              "name": "put_in_front_of",
              "fields": [
                {
                  "name": "lighter",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Move the caller's Id directly in front of `lighter`.",
                "",
                "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                "the account going in front of `lighter`.",
                "",
                "Only works if",
                "- both nodes are within the same bag,",
                "- and `origin` has a greater `VoteWeight` than `lighter`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 310,
    "type": {
      "path": [
        "pallet_child_bounties",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "add_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "description",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Add a new child-bounty.",
                "",
                "The dispatch origin for this call must be the curator of parent",
                "bounty and the parent bounty must be in \"active\" state.",
                "",
                "Child-bounty gets added successfully & fund gets transferred from",
                "parent bounty to child-bounty account, if parent bounty has enough",
                "funds, else the call fails.",
                "",
                "Upper bound to maximum number of active  child-bounties that can be",
                "added are managed via runtime trait config",
                "[`Config::MaxActiveChildBountyCount`].",
                "",
                "If the call is success, the status of child-bounty is updated to",
                "\"Added\".",
                "",
                "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
                "- `value`: Value for executing the proposal.",
                "- `description`: Text description for the child-bounty."
              ]
            },
            {
              "name": "propose_curator",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "curator",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Propose curator for funded child-bounty.",
                "",
                "The dispatch origin for this call must be curator of parent bounty.",
                "",
                "Parent bounty must be in active state, for this child-bounty call to",
                "work.",
                "",
                "Child-bounty must be in \"Added\" state, for processing the call. And",
                "state of child-bounty is moved to \"CuratorProposed\" on successful",
                "call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty.",
                "- `curator`: Address of child-bounty curator.",
                "- `fee`: payment fee to child-bounty curator for execution."
              ]
            },
            {
              "name": "accept_curator",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Accept the curator role for the child-bounty.",
                "",
                "The dispatch origin for this call must be the curator of this",
                "child-bounty.",
                "",
                "A deposit will be reserved from the curator and refund upon",
                "successful payout or cancellation.",
                "",
                "Fee for curator is deducted from curator fee of parent bounty.",
                "",
                "Parent bounty must be in active state, for this child-bounty call to",
                "work.",
                "",
                "Child-bounty must be in \"CuratorProposed\" state, for processing the",
                "call. And state of child-bounty is moved to \"Active\" on successful",
                "call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            },
            {
              "name": "unassign_curator",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Unassign curator from a child-bounty.",
                "",
                "The dispatch origin for this call can be either `RejectOrigin`, or",
                "the curator of the parent bounty, or any signed origin.",
                "",
                "For the origin other than T::RejectOrigin and the child-bounty",
                "curator, parent-bounty must be in active state, for this call to",
                "work. We allow child-bounty curator and T::RejectOrigin to execute",
                "this call irrespective of the parent-bounty state.",
                "",
                "If this function is called by the `RejectOrigin` or the",
                "parent-bounty curator, we assume that the child-bounty curator is",
                "malicious or inactive. As a result, child-bounty curator deposit is",
                "slashed.",
                "",
                "If the origin is the child-bounty curator, we take this as a sign",
                "that they are unable to do their job, and are willingly giving up.",
                "We could slash the deposit, but for now we allow them to unreserve",
                "their deposit and exit without issue. (We may want to change this if",
                "it is abused.)",
                "",
                "Finally, the origin can be anyone iff the child-bounty curator is",
                "\"inactive\". Expiry update due of parent bounty is used to estimate",
                "inactive state of child-bounty curator.",
                "",
                "This allows anyone in the community to call out that a child-bounty",
                "curator is not doing their due diligence, and we should pick a new",
                "one. In this case the child-bounty curator deposit is slashed.",
                "",
                "State of child-bounty is moved to Added state on successful call",
                "completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            },
            {
              "name": "award_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 140,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Award child-bounty to a beneficiary.",
                "",
                "The beneficiary will be able to claim the funds after a delay.",
                "",
                "The dispatch origin for this call must be the master curator or",
                "curator of this child-bounty.",
                "",
                "Parent bounty must be in active state, for this child-bounty call to",
                "work.",
                "",
                "Child-bounty must be in active state, for processing the call. And",
                "state of child-bounty is moved to \"PendingPayout\" on successful call",
                "completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty.",
                "- `beneficiary`: Beneficiary account."
              ]
            },
            {
              "name": "claim_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Claim the payout from an awarded child-bounty after payout delay.",
                "",
                "The dispatch origin for this call may be any signed origin.",
                "",
                "Call works independent of parent bounty state, No need for parent",
                "bounty to be in active state.",
                "",
                "The Beneficiary is paid out with agreed bounty value. Curator fee is",
                "paid & curator deposit is unreserved.",
                "",
                "Child-bounty must be in \"PendingPayout\" state, for processing the",
                "call. And instance of child-bounty is removed from the state on",
                "successful call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            },
            {
              "name": "close_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 101,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Cancel a proposed or active child-bounty. Child-bounty account funds",
                "are transferred to parent bounty account. The child-bounty curator",
                "deposit may be unreserved if possible.",
                "",
                "The dispatch origin for this call must be either parent curator or",
                "`T::RejectOrigin`.",
                "",
                "If the state of child-bounty is `Active`, curator deposit is",
                "unreserved.",
                "",
                "If the state of child-bounty is `PendingPayout`, call fails &",
                "returns `PendingPayout` error.",
                "",
                "For the origin other than T::RejectOrigin, parent bounty must be in",
                "active state, for this child-bounty call to work. For origin",
                "T::RejectOrigin execution is forced.",
                "",
                "Instance of child-bounty is removed from the state on successful",
                "call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains one variant per dispatchable that can be called by an extrinsic."
      ]
    }
  },
  {
    "id": 311,
    "type": {
      "path": [
        "node_runtime",
        "OriginCaller"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "system",
              "fields": [
                {
                  "name": null,
                  "type": 312,
                  "typeName": "frame_system::Origin<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Council",
              "fields": [
                {
                  "name": null,
                  "type": 313,
                  "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance1>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "TechnicalCommittee",
              "fields": [
                {
                  "name": null,
                  "type": 314,
                  "typeName": "pallet_collective::Origin<Runtime, pallet_collective::Instance2>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Void",
              "fields": [
                {
                  "name": null,
                  "type": 315,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::Void",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 312,
    "type": {
      "path": [
        "frame_system",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Root",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 313,
    "type": {
      "path": [
        "pallet_collective",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Members",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Member",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "_Phantom",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 314,
    "type": {
      "path": [
        "pallet_collective",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Members",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "MemberCount",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Member",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "_Phantom",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 315,
    "type": {
      "path": [
        "sp_core",
        "Void"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 316,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooManyCalls",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many calls batched."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 317,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 318
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 319,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 318,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          128,
          8
        ]
      },
      "docs": []
    }
  },
  {
    "id": 319,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 318
        }
      },
      "docs": []
    }
  },
  {
    "id": 320,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 1
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 321,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 321,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 1
        }
      },
      "docs": []
    }
  },
  {
    "id": 322,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 1
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 323,
    "type": {
      "path": [
        "sp_consensus_babe",
        "BabeEpochConfiguration"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "c",
              "type": 132,
              "typeName": "(u64, u64)",
              "docs": []
            },
            {
              "name": "allowed_slots",
              "type": 133,
              "typeName": "AllowedSlots",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 324,
    "type": {
      "path": [
        "pallet_babe",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 0,
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 1,
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 2,
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 325,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 326
        }
      },
      "docs": []
    }
  },
  {
    "id": 326,
    "type": {
      "path": [
        "pallet_authorship",
        "UncleEntryItem"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Author",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InclusionHeight",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Uncle",
              "fields": [
                {
                  "name": null,
                  "type": 9,
                  "typeName": "Hash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 56,
                  "typeName": "Option<Author>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 327,
    "type": {
      "path": [
        "pallet_authorship",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidUncleParent",
              "fields": [],
              "index": 0,
              "docs": [
                "The uncle parent not in the chain."
              ]
            },
            {
              "name": "UnclesAlreadySet",
              "fields": [],
              "index": 1,
              "docs": [
                "Uncles already set in the block."
              ]
            },
            {
              "name": "TooManyUncles",
              "fields": [],
              "index": 2,
              "docs": [
                "Too many uncles."
              ]
            },
            {
              "name": "GenesisUncle",
              "fields": [],
              "index": 3,
              "docs": [
                "The uncle is genesis."
              ]
            },
            {
              "name": "TooHighUncle",
              "fields": [],
              "index": 4,
              "docs": [
                "The uncle is too high in chain."
              ]
            },
            {
              "name": "UncleAlreadyIncluded",
              "fields": [],
              "index": 5,
              "docs": [
                "The uncle is already included."
              ]
            },
            {
              "name": "OldUncle",
              "fields": [],
              "index": 6,
              "docs": [
                "The uncle isn't recent enough to be included."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 328,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          6,
          33
        ]
      },
      "docs": []
    }
  },
  {
    "id": 329,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotAssigned",
              "fields": [],
              "index": 0,
              "docs": [
                "The index was not already assigned."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 1,
              "docs": [
                "The index is assigned to another account."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 2,
              "docs": [
                "The index was not available."
              ]
            },
            {
              "name": "NotTransfer",
              "fields": [],
              "index": 3,
              "docs": [
                "The source and destination accounts are identical."
              ]
            },
            {
              "name": "Permanent",
              "fields": [],
              "index": 4,
              "docs": [
                "The index is permanent and may not be freed/changed."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 330,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 331
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 333,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 331,
    "type": {
      "path": [
        "pallet_balances",
        "BalanceLock"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 119,
              "typeName": "LockIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reasons",
              "type": 332,
              "typeName": "Reasons",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 332,
    "type": {
      "path": [
        "pallet_balances",
        "Reasons"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fee",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Misc",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "All",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 333,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 331
        }
      },
      "docs": []
    }
  },
  {
    "id": 334,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 335
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 336,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 335,
    "type": {
      "path": [
        "pallet_balances",
        "ReserveData"
      ],
      "params": [
        {
          "name": "ReserveIdentifier",
          "type": 119
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 119,
              "typeName": "ReserveIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 336,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 335
        }
      },
      "docs": []
    }
  },
  {
    "id": 337,
    "type": {
      "path": [
        "pallet_balances",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1_0_0",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2_0_0",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 338,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Vesting balance too high to send value"
              ]
            },
            {
              "name": "LiquidityRestrictions",
              "fields": [],
              "index": 1,
              "docs": [
                "Account liquidity restrictions prevent withdrawal"
              ]
            },
            {
              "name": "InsufficientBalance",
              "fields": [],
              "index": 2,
              "docs": [
                "Balance too low to send value"
              ]
            },
            {
              "name": "ExistentialDeposit",
              "fields": [],
              "index": 3,
              "docs": [
                "Value too low to create account due to existential deposit"
              ]
            },
            {
              "name": "KeepAlive",
              "fields": [],
              "index": 4,
              "docs": [
                "Transfer/payment would kill account"
              ]
            },
            {
              "name": "ExistingVestingSchedule",
              "fields": [],
              "index": 5,
              "docs": [
                "A vesting schedule already exists for this account"
              ]
            },
            {
              "name": "DeadAccount",
              "fields": [],
              "index": 6,
              "docs": [
                "Beneficiary account must pre-exist"
              ]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 7,
              "docs": [
                "Number of named reserves exceed MaxReserves"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 339,
    "type": {
      "path": [
        "sp_arithmetic",
        "fixed_point",
        "FixedU128"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 340,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 341,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 342
        }
      },
      "docs": []
    }
  },
  {
    "id": 342,
    "type": {
      "path": [
        "frame_support",
        "weights",
        "WeightToFeeCoefficient"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "coeff_integer",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "coeff_frac",
              "type": 104,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "negative",
              "type": 33,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "degree",
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 343,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "Phase"
      ],
      "params": [
        {
          "name": "Bn",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Off",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsigned",
              "fields": [
                {
                  "name": null,
                  "type": 344,
                  "typeName": "(bool, Bn)",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Emergency",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 344,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          33,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 345,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "ReadySolution"
      ],
      "params": [
        {
          "name": "A",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "supports",
              "type": 198,
              "typeName": "Supports<A>",
              "docs": []
            },
            {
              "name": "score",
              "type": 195,
              "typeName": "ElectionScore",
              "docs": []
            },
            {
              "name": "compute",
              "type": 32,
              "typeName": "ElectionCompute",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 346,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "RoundSnapshot"
      ],
      "params": [
        {
          "name": "A",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "voters",
              "type": 347,
              "typeName": "Vec<(A, VoteWeight, Vec<A>)>",
              "docs": []
            },
            {
              "name": "targets",
              "type": 38,
              "typeName": "Vec<A>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 347,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 348
        }
      },
      "docs": []
    }
  },
  {
    "id": 348,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          8,
          38
        ]
      },
      "docs": []
    }
  },
  {
    "id": 349,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_btree_map",
        "BoundedBTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 195
        },
        {
          "name": "V",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 350,
              "typeName": "BTreeMap<K, V>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 350,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 195
        },
        {
          "name": "V",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 351,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 351,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 352
        }
      },
      "docs": []
    }
  },
  {
    "id": 352,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          195,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 353,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "signed",
        "SignedSubmission"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "Solution",
          "type": 144
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "raw_solution",
              "type": 143,
              "typeName": "RawSolution<Solution>",
              "docs": []
            },
            {
              "name": "reward",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 354,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PreDispatchEarlySubmission",
              "fields": [],
              "index": 0,
              "docs": [
                "Submission was too early."
              ]
            },
            {
              "name": "PreDispatchWrongWinnerCount",
              "fields": [],
              "index": 1,
              "docs": [
                "Wrong number of winners presented."
              ]
            },
            {
              "name": "PreDispatchWeakSubmission",
              "fields": [],
              "index": 2,
              "docs": [
                "Submission was too weak, score-wise."
              ]
            },
            {
              "name": "SignedQueueFull",
              "fields": [],
              "index": 3,
              "docs": [
                "The queue was full, and the solution was not better than any of the existing ones."
              ]
            },
            {
              "name": "SignedCannotPayDeposit",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin failed to pay the deposit."
              ]
            },
            {
              "name": "SignedInvalidWitness",
              "fields": [],
              "index": 5,
              "docs": [
                "Witness data to dispatchable is invalid."
              ]
            },
            {
              "name": "SignedTooMuchWeight",
              "fields": [],
              "index": 6,
              "docs": [
                "The signed submission consumes too much weight"
              ]
            },
            {
              "name": "OcwCallWrongEra",
              "fields": [],
              "index": 7,
              "docs": [
                "OCW submitted solution for wrong round"
              ]
            },
            {
              "name": "MissingSnapshotMetadata",
              "fields": [],
              "index": 8,
              "docs": [
                "Snapshot metadata should exist but didn't."
              ]
            },
            {
              "name": "InvalidSubmissionIndex",
              "fields": [],
              "index": 9,
              "docs": [
                "`Self::insert_submission` returned an invalid index."
              ]
            },
            {
              "name": "CallNotAllowed",
              "fields": [],
              "index": 10,
              "docs": [
                "The call is not allowed at this point."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error of the pallet that can be returned in response to dispatches."
      ]
    }
  },
  {
    "id": 355,
    "type": {
      "path": [
        "pallet_staking",
        "StakingLedger"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "stash",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "total",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "active",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "unlocking",
              "type": 356,
              "typeName": "Vec<UnlockChunk<Balance>>",
              "docs": []
            },
            {
              "name": "claimed_rewards",
              "type": 90,
              "typeName": "Vec<EraIndex>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 356,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 357
        }
      },
      "docs": []
    }
  },
  {
    "id": 357,
    "type": {
      "path": [
        "pallet_staking",
        "UnlockChunk"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "era",
              "type": 101,
              "typeName": "EraIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 358,
    "type": {
      "path": [
        "pallet_staking",
        "Nominations"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "targets",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "submitted_in",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "suppressed",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 359,
    "type": {
      "path": [
        "pallet_staking",
        "ActiveEraInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "start",
              "type": 111,
              "typeName": "Option<u64>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 360,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 361,
    "type": {
      "path": [
        "pallet_staking",
        "EraRewardPoints"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 4,
              "typeName": "RewardPoint",
              "docs": []
            },
            {
              "name": "individual",
              "type": 362,
              "typeName": "BTreeMap<AccountId, RewardPoint>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 362,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 0
        },
        {
          "name": "V",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 363,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 363,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 364
        }
      },
      "docs": []
    }
  },
  {
    "id": 364,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 365,
    "type": {
      "path": [
        "pallet_staking",
        "Forcing"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotForcing",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "ForceNew",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "ForceNone",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "ForceAlways",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 366,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 367
        }
      },
      "docs": []
    }
  },
  {
    "id": 367,
    "type": {
      "path": [
        "pallet_staking",
        "UnappliedSlash"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "validator",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "own",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "others",
              "type": 45,
              "typeName": "Vec<(AccountId, Balance)>",
              "docs": []
            },
            {
              "name": "reporters",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "payout",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 368,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          104,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 369,
    "type": {
      "path": [
        "pallet_staking",
        "slashing",
        "SlashingSpans"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "span_index",
              "type": 4,
              "typeName": "SpanIndex",
              "docs": []
            },
            {
              "name": "last_start",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "last_nonzero_slash",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "prior",
              "type": 90,
              "typeName": "Vec<EraIndex>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 370,
    "type": {
      "path": [
        "pallet_staking",
        "slashing",
        "SpanRecord"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "slashed",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "paid_out",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 371,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 372
        }
      },
      "docs": []
    }
  },
  {
    "id": 372,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          33
        ]
      },
      "docs": []
    }
  },
  {
    "id": 373,
    "type": {
      "path": [
        "pallet_staking",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1_0_0Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2_0_0",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3_0_0",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "V4_0_0",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "V5_0_0",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "V6_0_0",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "V7_0_0",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "V8_0_0",
              "fields": [],
              "index": 7,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 374,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotController",
              "fields": [],
              "index": 0,
              "docs": [
                "Not a controller account."
              ]
            },
            {
              "name": "NotStash",
              "fields": [],
              "index": 1,
              "docs": [
                "Not a stash account."
              ]
            },
            {
              "name": "AlreadyBonded",
              "fields": [],
              "index": 2,
              "docs": [
                "Stash is already bonded."
              ]
            },
            {
              "name": "AlreadyPaired",
              "fields": [],
              "index": 3,
              "docs": [
                "Controller is already paired."
              ]
            },
            {
              "name": "EmptyTargets",
              "fields": [],
              "index": 4,
              "docs": [
                "Targets cannot be empty."
              ]
            },
            {
              "name": "DuplicateIndex",
              "fields": [],
              "index": 5,
              "docs": [
                "Duplicate index."
              ]
            },
            {
              "name": "InvalidSlashIndex",
              "fields": [],
              "index": 6,
              "docs": [
                "Slash record index out of bounds."
              ]
            },
            {
              "name": "InsufficientBond",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot have a validator or nominator role, with value less than the minimum defined by",
                "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                "intention, `chill` first to remove one's role as validator/nominator."
              ]
            },
            {
              "name": "NoMoreChunks",
              "fields": [],
              "index": 8,
              "docs": [
                "Can not schedule more unlock chunks."
              ]
            },
            {
              "name": "NoUnlockChunk",
              "fields": [],
              "index": 9,
              "docs": [
                "Can not rebond without unlocking chunks."
              ]
            },
            {
              "name": "FundedTarget",
              "fields": [],
              "index": 10,
              "docs": [
                "Attempting to target a stash that still has funds."
              ]
            },
            {
              "name": "InvalidEraToReward",
              "fields": [],
              "index": 11,
              "docs": [
                "Invalid era to reward."
              ]
            },
            {
              "name": "InvalidNumberOfNominations",
              "fields": [],
              "index": 12,
              "docs": [
                "Invalid number of nominations."
              ]
            },
            {
              "name": "NotSortedAndUnique",
              "fields": [],
              "index": 13,
              "docs": [
                "Items are not sorted and unique."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "fields": [],
              "index": 14,
              "docs": [
                "Rewards for this era have already been claimed for this validator."
              ]
            },
            {
              "name": "IncorrectHistoryDepth",
              "fields": [],
              "index": 15,
              "docs": [
                "Incorrect previous history depth input provided."
              ]
            },
            {
              "name": "IncorrectSlashingSpans",
              "fields": [],
              "index": 16,
              "docs": [
                "Incorrect number of slashing spans provided."
              ]
            },
            {
              "name": "BadState",
              "fields": [],
              "index": 17,
              "docs": [
                "Internal state has become somehow corrupted and the operation cannot continue."
              ]
            },
            {
              "name": "TooManyTargets",
              "fields": [],
              "index": 18,
              "docs": [
                "Too many nomination targets supplied."
              ]
            },
            {
              "name": "BadTarget",
              "fields": [],
              "index": 19,
              "docs": [
                "A nomination target was supplied that was blocked or otherwise not a validator."
              ]
            },
            {
              "name": "CannotChillOther",
              "fields": [],
              "index": 20,
              "docs": [
                "The user has enough bond and thus cannot be chilled forcefully by an external person."
              ]
            },
            {
              "name": "TooManyNominators",
              "fields": [],
              "index": 21,
              "docs": [
                "There are too many nominators in the system. Governance needs to adjust the staking",
                "settings to keep things safe for the runtime."
              ]
            },
            {
              "name": "TooManyValidators",
              "fields": [],
              "index": 22,
              "docs": [
                "There are too many validators in the system. Governance needs to adjust the staking",
                "settings to keep things safe for the runtime."
              ]
            },
            {
              "name": "CommissionTooLow",
              "fields": [],
              "index": 23,
              "docs": [
                "Commission is too low. Must be at least `MinCommission`."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 375,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 376
        }
      },
      "docs": []
    }
  },
  {
    "id": 376,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          209
        ]
      },
      "docs": []
    }
  },
  {
    "id": 377,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          378,
          10
        ]
      },
      "docs": []
    }
  },
  {
    "id": 378,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "KeyTypeId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "[u8; 4]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 379,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidProof",
              "fields": [],
              "index": 0,
              "docs": [
                "Invalid ownership proof."
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "fields": [],
              "index": 1,
              "docs": [
                "No associated validator ID for account."
              ]
            },
            {
              "name": "DuplicatedKey",
              "fields": [],
              "index": 2,
              "docs": [
                "Registered duplicate key."
              ]
            },
            {
              "name": "NoKeys",
              "fields": [],
              "index": 3,
              "docs": [
                "No keys are associated with this account."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 4,
              "docs": [
                "Key setting account is not live, so it's impossible to associate keys."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the session pallet."
      ]
    }
  },
  {
    "id": 380,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 381
        }
      },
      "docs": []
    }
  },
  {
    "id": 381,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          9,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 382,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          38,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 383,
    "type": {
      "path": [
        "pallet_democracy",
        "PreimageStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Missing",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Available",
              "fields": [
                {
                  "name": "data",
                  "type": 10,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "provider",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "since",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "expiry",
                  "type": 91,
                  "typeName": "Option<BlockNumber>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 384,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "ReferendumInfo"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ongoing",
              "fields": [
                {
                  "name": null,
                  "type": 385,
                  "typeName": "ReferendumStatus<BlockNumber, Hash, Balance>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finished",
              "fields": [
                {
                  "name": "approved",
                  "type": 33,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 385,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "ReferendumStatus"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "end",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "proposal_hash",
              "type": 9,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "threshold",
              "type": 39,
              "typeName": "VoteThreshold",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "tally",
              "type": 386,
              "typeName": "Tally<Balance>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 386,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "Tally"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ayes",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "nays",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "turnout",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 387,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "Voting"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Direct",
              "fields": [
                {
                  "name": "votes",
                  "type": 388,
                  "typeName": "Vec<(ReferendumIndex, AccountVote<Balance>)>",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "type": 390,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "type": 391,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Delegating",
              "fields": [
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "type": 212,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "delegations",
                  "type": 390,
                  "typeName": "Delegations<Balance>",
                  "docs": []
                },
                {
                  "name": "prior",
                  "type": 391,
                  "typeName": "PriorLock<BlockNumber, Balance>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 388,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 389
        }
      },
      "docs": []
    }
  },
  {
    "id": 389,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          40
        ]
      },
      "docs": []
    }
  },
  {
    "id": 390,
    "type": {
      "path": [
        "pallet_democracy",
        "types",
        "Delegations"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "capital",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 391,
    "type": {
      "path": [
        "pallet_democracy",
        "vote",
        "PriorLock"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": null,
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 392,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          9,
          39
        ]
      },
      "docs": []
    }
  },
  {
    "id": 393,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          38
        ]
      },
      "docs": []
    }
  },
  {
    "id": 394,
    "type": {
      "path": [
        "pallet_democracy",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 395,
    "type": {
      "path": [
        "pallet_democracy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ValueLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Value too low"
              ]
            },
            {
              "name": "ProposalMissing",
              "fields": [],
              "index": 1,
              "docs": [
                "Proposal does not exist"
              ]
            },
            {
              "name": "AlreadyCanceled",
              "fields": [],
              "index": 2,
              "docs": [
                "Cannot cancel the same proposal twice"
              ]
            },
            {
              "name": "DuplicateProposal",
              "fields": [],
              "index": 3,
              "docs": [
                "Proposal already made"
              ]
            },
            {
              "name": "ProposalBlacklisted",
              "fields": [],
              "index": 4,
              "docs": [
                "Proposal still blacklisted"
              ]
            },
            {
              "name": "NotSimpleMajority",
              "fields": [],
              "index": 5,
              "docs": [
                "Next external proposal not simple majority"
              ]
            },
            {
              "name": "InvalidHash",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid hash"
              ]
            },
            {
              "name": "NoProposal",
              "fields": [],
              "index": 7,
              "docs": [
                "No external proposal"
              ]
            },
            {
              "name": "AlreadyVetoed",
              "fields": [],
              "index": 8,
              "docs": [
                "Identity may not veto a proposal twice"
              ]
            },
            {
              "name": "DuplicatePreimage",
              "fields": [],
              "index": 9,
              "docs": [
                "Preimage already noted"
              ]
            },
            {
              "name": "NotImminent",
              "fields": [],
              "index": 10,
              "docs": [
                "Not imminent"
              ]
            },
            {
              "name": "TooEarly",
              "fields": [],
              "index": 11,
              "docs": [
                "Too early"
              ]
            },
            {
              "name": "Imminent",
              "fields": [],
              "index": 12,
              "docs": [
                "Imminent"
              ]
            },
            {
              "name": "PreimageMissing",
              "fields": [],
              "index": 13,
              "docs": [
                "Preimage not found"
              ]
            },
            {
              "name": "ReferendumInvalid",
              "fields": [],
              "index": 14,
              "docs": [
                "Vote given for invalid referendum"
              ]
            },
            {
              "name": "PreimageInvalid",
              "fields": [],
              "index": 15,
              "docs": [
                "Invalid preimage"
              ]
            },
            {
              "name": "NoneWaiting",
              "fields": [],
              "index": 16,
              "docs": [
                "No proposals waiting"
              ]
            },
            {
              "name": "NotVoter",
              "fields": [],
              "index": 17,
              "docs": [
                "The given account did not vote on the referendum."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 18,
              "docs": [
                "The actor has no permission to conduct the action."
              ]
            },
            {
              "name": "AlreadyDelegating",
              "fields": [],
              "index": 19,
              "docs": [
                "The account is already delegating."
              ]
            },
            {
              "name": "InsufficientFunds",
              "fields": [],
              "index": 20,
              "docs": [
                "Too high a balance was provided that the account cannot afford."
              ]
            },
            {
              "name": "NotDelegating",
              "fields": [],
              "index": 21,
              "docs": [
                "The account is not currently delegating."
              ]
            },
            {
              "name": "VotesExist",
              "fields": [],
              "index": 22,
              "docs": [
                "The account currently has votes attached to it and the operation cannot succeed until",
                "these are removed, either through `unvote` or `reap_vote`."
              ]
            },
            {
              "name": "InstantNotAllowed",
              "fields": [],
              "index": 23,
              "docs": [
                "The instant referendum origin is currently disallowed."
              ]
            },
            {
              "name": "Nonsense",
              "fields": [],
              "index": 24,
              "docs": [
                "Delegation to oneself makes no sense."
              ]
            },
            {
              "name": "WrongUpperBound",
              "fields": [],
              "index": 25,
              "docs": [
                "Invalid upper bound."
              ]
            },
            {
              "name": "MaxVotesReached",
              "fields": [],
              "index": 26,
              "docs": [
                "Maximum number of votes reached."
              ]
            },
            {
              "name": "TooManyProposals",
              "fields": [],
              "index": 27,
              "docs": [
                "Maximum number of proposals reached."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 396,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 9
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 98,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 397,
    "type": {
      "path": [
        "pallet_collective",
        "Votes"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 4,
              "typeName": "ProposalIndex",
              "docs": []
            },
            {
              "name": "threshold",
              "type": 4,
              "typeName": "MemberCount",
              "docs": []
            },
            {
              "name": "ayes",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "nays",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "end",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 398,
    "type": {
      "path": [
        "pallet_collective",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotMember",
              "fields": [],
              "index": 0,
              "docs": [
                "Account is not a member"
              ]
            },
            {
              "name": "DuplicateProposal",
              "fields": [],
              "index": 1,
              "docs": [
                "Duplicate proposals not allowed"
              ]
            },
            {
              "name": "ProposalMissing",
              "fields": [],
              "index": 2,
              "docs": [
                "Proposal must exist"
              ]
            },
            {
              "name": "WrongIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Mismatched index"
              ]
            },
            {
              "name": "DuplicateVote",
              "fields": [],
              "index": 4,
              "docs": [
                "Duplicate vote ignored"
              ]
            },
            {
              "name": "AlreadyInitialized",
              "fields": [],
              "index": 5,
              "docs": [
                "Members are already initialized!"
              ]
            },
            {
              "name": "TooEarly",
              "fields": [],
              "index": 6,
              "docs": [
                "The close call was made too early, before the end of the voting."
              ]
            },
            {
              "name": "TooManyProposals",
              "fields": [],
              "index": 7,
              "docs": [
                "There can only be a maximum of `MaxProposals` active proposals."
              ]
            },
            {
              "name": "WrongProposalWeight",
              "fields": [],
              "index": 8,
              "docs": [
                "The given weight bound for the proposal was too low."
              ]
            },
            {
              "name": "WrongProposalLength",
              "fields": [],
              "index": 9,
              "docs": [
                "The given length bound for the proposal was too low."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 399,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 9
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 98,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 400,
    "type": {
      "path": [
        "pallet_collective",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotMember",
              "fields": [],
              "index": 0,
              "docs": [
                "Account is not a member"
              ]
            },
            {
              "name": "DuplicateProposal",
              "fields": [],
              "index": 1,
              "docs": [
                "Duplicate proposals not allowed"
              ]
            },
            {
              "name": "ProposalMissing",
              "fields": [],
              "index": 2,
              "docs": [
                "Proposal must exist"
              ]
            },
            {
              "name": "WrongIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Mismatched index"
              ]
            },
            {
              "name": "DuplicateVote",
              "fields": [],
              "index": 4,
              "docs": [
                "Duplicate vote ignored"
              ]
            },
            {
              "name": "AlreadyInitialized",
              "fields": [],
              "index": 5,
              "docs": [
                "Members are already initialized!"
              ]
            },
            {
              "name": "TooEarly",
              "fields": [],
              "index": 6,
              "docs": [
                "The close call was made too early, before the end of the voting."
              ]
            },
            {
              "name": "TooManyProposals",
              "fields": [],
              "index": 7,
              "docs": [
                "There can only be a maximum of `MaxProposals` active proposals."
              ]
            },
            {
              "name": "WrongProposalWeight",
              "fields": [],
              "index": 8,
              "docs": [
                "The given weight bound for the proposal was too low."
              ]
            },
            {
              "name": "WrongProposalLength",
              "fields": [],
              "index": 9,
              "docs": [
                "The given length bound for the proposal was too low."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 401,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 402
        }
      },
      "docs": []
    }
  },
  {
    "id": 402,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "SeatHolder"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "stake",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 403,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "Voter"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "stake",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 404,
    "type": {
      "path": [
        "pallet_elections_phragmen",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "UnableToVote",
              "fields": [],
              "index": 0,
              "docs": [
                "Cannot vote when no candidates or members exist."
              ]
            },
            {
              "name": "NoVotes",
              "fields": [],
              "index": 1,
              "docs": [
                "Must vote for at least one candidate."
              ]
            },
            {
              "name": "TooManyVotes",
              "fields": [],
              "index": 2,
              "docs": [
                "Cannot vote more than candidates."
              ]
            },
            {
              "name": "MaximumVotesExceeded",
              "fields": [],
              "index": 3,
              "docs": [
                "Cannot vote more than maximum allowed."
              ]
            },
            {
              "name": "LowBalance",
              "fields": [],
              "index": 4,
              "docs": [
                "Cannot vote with stake less than minimum balance."
              ]
            },
            {
              "name": "UnableToPayBond",
              "fields": [],
              "index": 5,
              "docs": [
                "Voter can not pay voting bond."
              ]
            },
            {
              "name": "MustBeVoter",
              "fields": [],
              "index": 6,
              "docs": [
                "Must be a voter."
              ]
            },
            {
              "name": "ReportSelf",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot report self."
              ]
            },
            {
              "name": "DuplicatedCandidate",
              "fields": [],
              "index": 8,
              "docs": [
                "Duplicated candidate submission."
              ]
            },
            {
              "name": "MemberSubmit",
              "fields": [],
              "index": 9,
              "docs": [
                "Member cannot re-submit candidacy."
              ]
            },
            {
              "name": "RunnerUpSubmit",
              "fields": [],
              "index": 10,
              "docs": [
                "Runner cannot re-submit candidacy."
              ]
            },
            {
              "name": "InsufficientCandidateFunds",
              "fields": [],
              "index": 11,
              "docs": [
                "Candidate does not have enough funds."
              ]
            },
            {
              "name": "NotMember",
              "fields": [],
              "index": 12,
              "docs": [
                "Not a member."
              ]
            },
            {
              "name": "InvalidWitnessData",
              "fields": [],
              "index": 13,
              "docs": [
                "The provided count of number of candidates is incorrect."
              ]
            },
            {
              "name": "InvalidVoteCount",
              "fields": [],
              "index": 14,
              "docs": [
                "The provided count of number of votes is incorrect."
              ]
            },
            {
              "name": "InvalidRenouncing",
              "fields": [],
              "index": 15,
              "docs": [
                "The renouncing origin presented a wrong `Renouncing` parameter."
              ]
            },
            {
              "name": "InvalidReplacement",
              "fields": [],
              "index": 16,
              "docs": [
                "Prediction regarding replacement after member removal is wrong."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 405,
    "type": {
      "path": [
        "pallet_membership",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AlreadyMember",
              "fields": [],
              "index": 0,
              "docs": [
                "Already a member."
              ]
            },
            {
              "name": "NotMember",
              "fields": [],
              "index": 1,
              "docs": [
                "Not a member."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 406,
    "type": {
      "path": [
        "pallet_grandpa",
        "StoredState"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Live",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PendingPause",
              "fields": [
                {
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "PendingResume",
              "fields": [
                {
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 407,
    "type": {
      "path": [
        "pallet_grandpa",
        "StoredPendingChange"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        },
        {
          "name": "Limit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "scheduled_at",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "next_authorities",
              "type": 408,
              "typeName": "BoundedAuthorityList<Limit>",
              "docs": []
            },
            {
              "name": "forced",
              "type": 91,
              "typeName": "Option<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 408,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 50
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 49,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 409,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PauseFailed",
              "fields": [],
              "index": 0,
              "docs": [
                "Attempt to signal GRANDPA pause when the authority set isn't live",
                "(either paused or already pending pause)."
              ]
            },
            {
              "name": "ResumeFailed",
              "fields": [],
              "index": 1,
              "docs": [
                "Attempt to signal GRANDPA resume when the authority set isn't paused",
                "(either live or already pending resume)."
              ]
            },
            {
              "name": "ChangePending",
              "fields": [],
              "index": 2,
              "docs": [
                "Attempt to signal GRANDPA change with one already pending."
              ]
            },
            {
              "name": "TooSoon",
              "fields": [],
              "index": 3,
              "docs": [
                "Cannot signal forced change so soon after last."
              ]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 4,
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 5,
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 6,
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 410,
    "type": {
      "path": [
        "pallet_treasury",
        "Proposal"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "beneficiary",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "bond",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 411,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 90,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 412,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Permill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 413,
    "type": {
      "path": [
        "frame_support",
        "PalletId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 119,
              "typeName": "[u8; 8]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 414,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InsufficientProposersBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Proposer's balance is too low."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 1,
              "docs": [
                "No proposal or bounty at that index."
              ]
            },
            {
              "name": "TooManyApprovals",
              "fields": [],
              "index": 2,
              "docs": [
                "Too many approvals in the queue."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the treasury pallet."
      ]
    }
  },
  {
    "id": 415,
    "type": {
      "path": [
        "pallet_contracts",
        "wasm",
        "PrefabWasmModule"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "instruction_weights_version",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "initial",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "maximum",
              "type": 101,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "code",
              "type": 10,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 416,
    "type": {
      "path": [
        "pallet_contracts",
        "wasm",
        "OwnerInfo"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountIdOf<T>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 63,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "refcount",
              "type": 135,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 417,
    "type": {
      "path": [
        "pallet_contracts",
        "storage",
        "RawContractInfo"
      ],
      "params": [
        {
          "name": "CodeHash",
          "type": 9
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "trie_id",
              "type": 10,
              "typeName": "TrieId",
              "docs": []
            },
            {
              "name": "code_hash",
              "type": 9,
              "typeName": "CodeHash",
              "docs": []
            },
            {
              "name": "storage_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 418,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 419
        }
      },
      "docs": []
    }
  },
  {
    "id": 419,
    "type": {
      "path": [
        "pallet_contracts",
        "storage",
        "DeletedContract"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "trie_id",
              "type": 10,
              "typeName": "TrieId",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 420,
    "type": {
      "path": [
        "pallet_contracts",
        "schedule",
        "Schedule"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "limits",
              "type": 421,
              "typeName": "Limits",
              "docs": []
            },
            {
              "name": "instruction_weights",
              "type": 422,
              "typeName": "InstructionWeights<T>",
              "docs": []
            },
            {
              "name": "host_fn_weights",
              "type": 423,
              "typeName": "HostFnWeights<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 421,
    "type": {
      "path": [
        "pallet_contracts",
        "schedule",
        "Limits"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "event_topics",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "stack_height",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "globals",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "parameters",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "memory_pages",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "table_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_table_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "subject_len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "call_depth",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "payload_len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "code_len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 422,
    "type": {
      "path": [
        "pallet_contracts",
        "schedule",
        "InstructionWeights"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64const",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64load",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64store",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "select",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "r#if",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_if",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_table",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "br_table_per_entry",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "call",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "call_indirect",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "call_indirect_per_param",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "local_get",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "local_set",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "local_tee",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "global_get",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "global_set",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "memory_current",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "memory_grow",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64clz",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ctz",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64popcnt",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64eqz",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64extendsi32",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64extendui32",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i32wrapi64",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64eq",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ne",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64lts",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ltu",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64gts",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64gtu",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64les",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64leu",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64ges",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64geu",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64add",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64sub",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64mul",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64divs",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64divu",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64rems",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64remu",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64and",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64or",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64xor",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64shl",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64shrs",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64shru",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64rotl",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "i64rotr",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 423,
    "type": {
      "path": [
        "pallet_contracts",
        "schedule",
        "HostFnWeights"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "caller",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "address",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "gas_left",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "balance",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "value_transferred",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "minimum_balance",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "block_number",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "now",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "weight_to_fee",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "gas",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "input",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "input_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "r#return",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "return_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "terminate",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "random",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "deposit_event",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "deposit_event_per_topic",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "deposit_event_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "debug_message",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "set_storage",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "set_storage_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "clear_storage",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "get_storage",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "get_storage_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "transfer",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "call",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "call_transfer_surcharge",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "call_per_input_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "call_per_output_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate_per_input_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate_per_output_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "instantiate_per_salt_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_sha2_256",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_sha2_256_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_keccak_256",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_keccak_256_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_256",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_256_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_128",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "hash_blake2_128_per_byte",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "ecdsa_recover",
              "type": 8,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 424,
    "type": {
      "path": [
        "pallet_contracts",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidScheduleVersion",
              "fields": [],
              "index": 0,
              "docs": [
                "A new schedule must have a greater version than the current one."
              ]
            },
            {
              "name": "OutOfGas",
              "fields": [],
              "index": 1,
              "docs": [
                "The executed contract exhausted its gas limit."
              ]
            },
            {
              "name": "OutputBufferTooSmall",
              "fields": [],
              "index": 2,
              "docs": [
                "The output buffer supplied to a contract API call was too small."
              ]
            },
            {
              "name": "TransferFailed",
              "fields": [],
              "index": 3,
              "docs": [
                "Performing the requested transfer failed. Probably because there isn't enough",
                "free balance in the sender's account."
              ]
            },
            {
              "name": "MaxCallDepthReached",
              "fields": [],
              "index": 4,
              "docs": [
                "Performing a call was denied because the calling depth reached the limit",
                "of what is specified in the schedule."
              ]
            },
            {
              "name": "ContractNotFound",
              "fields": [],
              "index": 5,
              "docs": [
                "No contract was found at the specified address."
              ]
            },
            {
              "name": "CodeTooLarge",
              "fields": [],
              "index": 6,
              "docs": [
                "The code supplied to `instantiate_with_code` exceeds the limit specified in the",
                "current schedule."
              ]
            },
            {
              "name": "CodeNotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "No code could be found at the supplied code hash."
              ]
            },
            {
              "name": "OutOfBounds",
              "fields": [],
              "index": 8,
              "docs": [
                "A buffer outside of sandbox memory was passed to a contract API function."
              ]
            },
            {
              "name": "DecodingFailed",
              "fields": [],
              "index": 9,
              "docs": [
                "Input passed to a contract API function failed to decode as expected type."
              ]
            },
            {
              "name": "ContractTrapped",
              "fields": [],
              "index": 10,
              "docs": [
                "Contract trapped during execution."
              ]
            },
            {
              "name": "ValueTooLarge",
              "fields": [],
              "index": 11,
              "docs": [
                "The size defined in `T::MaxValueSize` was exceeded."
              ]
            },
            {
              "name": "TerminatedWhileReentrant",
              "fields": [],
              "index": 12,
              "docs": [
                "Termination of a contract is not allowed while the contract is already",
                "on the call stack. Can be triggered by `seal_terminate`."
              ]
            },
            {
              "name": "InputForwarded",
              "fields": [],
              "index": 13,
              "docs": [
                "`seal_call` forwarded this contracts input. It therefore is no longer available."
              ]
            },
            {
              "name": "RandomSubjectTooLong",
              "fields": [],
              "index": 14,
              "docs": [
                "The subject passed to `seal_random` exceeds the limit."
              ]
            },
            {
              "name": "TooManyTopics",
              "fields": [],
              "index": 15,
              "docs": [
                "The amount of topics passed to `seal_deposit_events` exceeds the limit."
              ]
            },
            {
              "name": "DuplicateTopics",
              "fields": [],
              "index": 16,
              "docs": [
                "The topics passed to `seal_deposit_events` contains at least one duplicate."
              ]
            },
            {
              "name": "NoChainExtension",
              "fields": [],
              "index": 17,
              "docs": [
                "The chain does not provide a chain extension. Calling the chain extension results",
                "in this error. Note that this usually  shouldn't happen as deploying such contracts",
                "is rejected."
              ]
            },
            {
              "name": "DeletionQueueFull",
              "fields": [],
              "index": 18,
              "docs": [
                "Removal of a contract failed because the deletion queue is full.",
                "",
                "This can happen when calling `seal_terminate`.",
                "The queue is filled by deleting contracts and emptied by a fixed amount each block.",
                "Trying again during another block is the only way to resolve this issue."
              ]
            },
            {
              "name": "DuplicateContract",
              "fields": [],
              "index": 19,
              "docs": [
                "A contract with the same AccountId already exists."
              ]
            },
            {
              "name": "TerminatedInConstructor",
              "fields": [],
              "index": 20,
              "docs": [
                "A contract self destructed in its constructor.",
                "",
                "This can be triggered by a call to `seal_terminate`."
              ]
            },
            {
              "name": "DebugMessageInvalidUTF8",
              "fields": [],
              "index": 21,
              "docs": [
                "The debug message specified to `seal_debug_message` does contain invalid UTF-8."
              ]
            },
            {
              "name": "ReentranceDenied",
              "fields": [],
              "index": 22,
              "docs": [
                "A call tried to invoke a contract that is flagged as non-reentrant."
              ]
            },
            {
              "name": "StorageDepositNotEnoughFunds",
              "fields": [],
              "index": 23,
              "docs": [
                "Origin doesn't have enough balance to pay the required storage deposits."
              ]
            },
            {
              "name": "StorageDepositLimitExhausted",
              "fields": [],
              "index": 24,
              "docs": [
                "More storage was created than allowed by the storage deposit limit."
              ]
            },
            {
              "name": "CodeInUse",
              "fields": [],
              "index": 25,
              "docs": [
                "Code removal was denied because the code is still in use by at least one contract."
              ]
            },
            {
              "name": "ContractReverted",
              "fields": [],
              "index": 26,
              "docs": [
                "The contract ran to completion but decided to revert its storage changes.",
                "Please note that this error is only returned from extrinsics. When called directly",
                "or via RPC an `Ok` will be returned. In this case the caller needs to inspect the flags",
                "to determine whether a reversion has taken place."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 425,
    "type": {
      "path": [
        "pallet_sudo",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "RequireSudo",
              "fields": [],
              "index": 0,
              "docs": [
                "Sender must be the Sudo account"
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the Sudo pallet"
      ]
    }
  },
  {
    "id": 426,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 58
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 427,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 427,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 428,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "misc",
        "WrapperOpaque"
      ],
      "params": [
        {
          "name": "T",
          "type": 429
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 101,
              "typeName": null,
              "docs": []
            },
            {
              "name": null,
              "type": 429,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 429,
    "type": {
      "path": [
        "pallet_im_online",
        "BoundedOpaqueNetworkState"
      ],
      "params": [
        {
          "name": "PeerIdEncodingLimit",
          "type": null
        },
        {
          "name": "MultiAddrEncodingLimit",
          "type": null
        },
        {
          "name": "AddressesLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "peer_id",
              "type": 430,
              "typeName": "WeakBoundedVec<u8, PeerIdEncodingLimit>",
              "docs": []
            },
            {
              "name": "external_addresses",
              "type": 431,
              "typeName": "WeakBoundedVec<WeakBoundedVec<u8, MultiAddrEncodingLimit>, AddressesLimit\n>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 430,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 431,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 430
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 432,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 432,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 430
        }
      },
      "docs": []
    }
  },
  {
    "id": 433,
    "type": {
      "path": [
        "pallet_im_online",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidKey",
              "fields": [],
              "index": 0,
              "docs": [
                "Non existent public key."
              ]
            },
            {
              "name": "DuplicatedHeartbeat",
              "fields": [],
              "index": 1,
              "docs": [
                "Duplicated heartbeat."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 434,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 210
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 435,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 435,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 210
        }
      },
      "docs": []
    }
  },
  {
    "id": 436,
    "type": {
      "path": [
        "sp_staking",
        "offence",
        "OffenceDetails"
      ],
      "params": [
        {
          "name": "Reporter",
          "type": 0
        },
        {
          "name": "Offender",
          "type": 61
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "offender",
              "type": 61,
              "typeName": "Offender",
              "docs": []
            },
            {
              "name": "reporters",
              "type": 38,
              "typeName": "Vec<Reporter>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 437,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          67,
          10
        ]
      },
      "docs": []
    }
  },
  {
    "id": 438,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "Registration"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "MaxJudgements",
          "type": null
        },
        {
          "name": "MaxAdditionalFields",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "judgements",
              "type": 439,
              "typeName": "BoundedVec<(RegistrarIndex, Judgement<Balance>), MaxJudgements>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "info",
              "type": 243,
              "typeName": "IdentityInfo<MaxAdditionalFields>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 439,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 440
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 441,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 440,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          281
        ]
      },
      "docs": []
    }
  },
  {
    "id": 441,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 440
        }
      },
      "docs": []
    }
  },
  {
    "id": 442,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          443
        ]
      },
      "docs": []
    }
  },
  {
    "id": 443,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 38,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 444,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 445
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 447,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 445,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 446
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 446,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 446,
    "type": {
      "path": [
        "pallet_identity",
        "types",
        "RegistrarInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fields",
              "type": 279,
              "typeName": "IdentityFields",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 447,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 445
        }
      },
      "docs": []
    }
  },
  {
    "id": 448,
    "type": {
      "path": [
        "pallet_identity",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooManySubAccounts",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many subs-accounts."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Account isn't found."
              ]
            },
            {
              "name": "NotNamed",
              "fields": [],
              "index": 2,
              "docs": [
                "Account isn't named."
              ]
            },
            {
              "name": "EmptyIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "Empty index."
              ]
            },
            {
              "name": "FeeChanged",
              "fields": [],
              "index": 4,
              "docs": [
                "Fee is changed."
              ]
            },
            {
              "name": "NoIdentity",
              "fields": [],
              "index": 5,
              "docs": [
                "No identity found."
              ]
            },
            {
              "name": "StickyJudgement",
              "fields": [],
              "index": 6,
              "docs": [
                "Sticky judgement."
              ]
            },
            {
              "name": "JudgementGiven",
              "fields": [],
              "index": 7,
              "docs": [
                "Judgement given."
              ]
            },
            {
              "name": "InvalidJudgement",
              "fields": [],
              "index": 8,
              "docs": [
                "Invalid judgement."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 9,
              "docs": [
                "The index is invalid."
              ]
            },
            {
              "name": "InvalidTarget",
              "fields": [],
              "index": 10,
              "docs": [
                "The target is invalid."
              ]
            },
            {
              "name": "TooManyFields",
              "fields": [],
              "index": 11,
              "docs": [
                "Too many additional fields."
              ]
            },
            {
              "name": "TooManyRegistrars",
              "fields": [],
              "index": 12,
              "docs": [
                "Maximum amount of registrars reached. Cannot add any more."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "fields": [],
              "index": 13,
              "docs": [
                "Account ID is already named."
              ]
            },
            {
              "name": "NotSub",
              "fields": [],
              "index": 14,
              "docs": [
                "Sender is not a sub-account."
              ]
            },
            {
              "name": "NotOwned",
              "fields": [],
              "index": 15,
              "docs": [
                "Sub-account isn't owned by sender."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 449,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 450
        }
      },
      "docs": []
    }
  },
  {
    "id": 450,
    "type": {
      "path": [
        "pallet_society",
        "Bid"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "kind",
              "type": 451,
              "typeName": "BidKind<AccountId, Balance>",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 451,
    "type": {
      "path": [
        "pallet_society",
        "BidKind"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Vouch",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 452,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          451
        ]
      },
      "docs": []
    }
  },
  {
    "id": 453,
    "type": {
      "path": [
        "pallet_society",
        "VouchingStatus"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Vouching",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Banned",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 454,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 455
        }
      },
      "docs": []
    }
  },
  {
    "id": 455,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 456,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 457,
    "type": {
      "path": [
        "pallet_society",
        "Vote"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Skeptic",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reject",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Approve",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 458,
    "type": {
      "path": [
        "pallet_society",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BadPosition",
              "fields": [],
              "index": 0,
              "docs": [
                "An incorrect position was provided."
              ]
            },
            {
              "name": "NotMember",
              "fields": [],
              "index": 1,
              "docs": [
                "User is not a member."
              ]
            },
            {
              "name": "AlreadyMember",
              "fields": [],
              "index": 2,
              "docs": [
                "User is already a member."
              ]
            },
            {
              "name": "Suspended",
              "fields": [],
              "index": 3,
              "docs": [
                "User is suspended."
              ]
            },
            {
              "name": "NotSuspended",
              "fields": [],
              "index": 4,
              "docs": [
                "User is not suspended."
              ]
            },
            {
              "name": "NoPayout",
              "fields": [],
              "index": 5,
              "docs": [
                "Nothing to payout."
              ]
            },
            {
              "name": "AlreadyFounded",
              "fields": [],
              "index": 6,
              "docs": [
                "Society already founded."
              ]
            },
            {
              "name": "InsufficientPot",
              "fields": [],
              "index": 7,
              "docs": [
                "Not enough in pot to accept candidate."
              ]
            },
            {
              "name": "AlreadyVouching",
              "fields": [],
              "index": 8,
              "docs": [
                "Member is already vouching or banned from vouching again."
              ]
            },
            {
              "name": "NotVouching",
              "fields": [],
              "index": 9,
              "docs": [
                "Member is not vouching."
              ]
            },
            {
              "name": "Head",
              "fields": [],
              "index": 10,
              "docs": [
                "Cannot remove the head of the chain."
              ]
            },
            {
              "name": "Founder",
              "fields": [],
              "index": 11,
              "docs": [
                "Cannot remove the founder."
              ]
            },
            {
              "name": "AlreadyBid",
              "fields": [],
              "index": 12,
              "docs": [
                "User has already made a bid."
              ]
            },
            {
              "name": "AlreadyCandidate",
              "fields": [],
              "index": 13,
              "docs": [
                "User is already a candidate."
              ]
            },
            {
              "name": "NotCandidate",
              "fields": [],
              "index": 14,
              "docs": [
                "User is not a candidate."
              ]
            },
            {
              "name": "MaxMembers",
              "fields": [],
              "index": 15,
              "docs": [
                "Too many members in the society."
              ]
            },
            {
              "name": "NotFounder",
              "fields": [],
              "index": 16,
              "docs": [
                "The caller is not the founder."
              ]
            },
            {
              "name": "NotHead",
              "fields": [],
              "index": 17,
              "docs": [
                "The caller is not the head."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 459,
    "type": {
      "path": [
        "pallet_recovery",
        "RecoveryConfig"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "delay_period",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "friends",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "threshold",
              "type": 79,
              "typeName": "u16",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 460,
    "type": {
      "path": [
        "pallet_recovery",
        "ActiveRecovery"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "created",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "friends",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 461,
    "type": {
      "path": [
        "pallet_recovery",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotAllowed",
              "fields": [],
              "index": 0,
              "docs": [
                "User is not allowed to make a call on behalf of this account"
              ]
            },
            {
              "name": "ZeroThreshold",
              "fields": [],
              "index": 1,
              "docs": [
                "Threshold must be greater than zero"
              ]
            },
            {
              "name": "NotEnoughFriends",
              "fields": [],
              "index": 2,
              "docs": [
                "Friends list must be greater than zero and threshold"
              ]
            },
            {
              "name": "MaxFriends",
              "fields": [],
              "index": 3,
              "docs": [
                "Friends list must be less than max friends"
              ]
            },
            {
              "name": "NotSorted",
              "fields": [],
              "index": 4,
              "docs": [
                "Friends list must be sorted and free of duplicates"
              ]
            },
            {
              "name": "NotRecoverable",
              "fields": [],
              "index": 5,
              "docs": [
                "This account is not set up for recovery"
              ]
            },
            {
              "name": "AlreadyRecoverable",
              "fields": [],
              "index": 6,
              "docs": [
                "This account is already set up for recovery"
              ]
            },
            {
              "name": "AlreadyStarted",
              "fields": [],
              "index": 7,
              "docs": [
                "A recovery process has already started for this account"
              ]
            },
            {
              "name": "NotStarted",
              "fields": [],
              "index": 8,
              "docs": [
                "A recovery process has not started for this rescuer"
              ]
            },
            {
              "name": "NotFriend",
              "fields": [],
              "index": 9,
              "docs": [
                "This account is not a friend who can vouch"
              ]
            },
            {
              "name": "DelayPeriod",
              "fields": [],
              "index": 10,
              "docs": [
                "The friend must wait until the delay period to vouch for this recovery"
              ]
            },
            {
              "name": "AlreadyVouched",
              "fields": [],
              "index": 11,
              "docs": [
                "This user has already vouched for this recovery"
              ]
            },
            {
              "name": "Threshold",
              "fields": [],
              "index": 12,
              "docs": [
                "The threshold for recovering this account has not been met"
              ]
            },
            {
              "name": "StillActive",
              "fields": [],
              "index": 13,
              "docs": [
                "There are still active recovery attempts that need to be closed"
              ]
            },
            {
              "name": "AlreadyProxy",
              "fields": [],
              "index": 14,
              "docs": [
                "This account is already set up for recovery"
              ]
            },
            {
              "name": "BadState",
              "fields": [],
              "index": 15,
              "docs": [
                "Some internal state is broken."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 462,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 286
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 463,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 463,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 286
        }
      },
      "docs": []
    }
  },
  {
    "id": 464,
    "type": {
      "path": [
        "pallet_vesting",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V0",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V1",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 465,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotVesting",
              "fields": [],
              "index": 0,
              "docs": [
                "The account given is not vesting."
              ]
            },
            {
              "name": "AtMaxVestingSchedules",
              "fields": [],
              "index": 1,
              "docs": [
                "The account already has `MaxVestingSchedules` count of schedules and thus",
                "cannot add another one. Consider merging existing schedules in order to add another."
              ]
            },
            {
              "name": "AmountLow",
              "fields": [],
              "index": 2,
              "docs": [
                "Amount being transferred is too low to create a vesting schedule."
              ]
            },
            {
              "name": "ScheduleIndexOutOfBounds",
              "fields": [],
              "index": 3,
              "docs": [
                "An index was out of bounds of the vesting schedules."
              ]
            },
            {
              "name": "InvalidScheduleParams",
              "fields": [],
              "index": 4,
              "docs": [
                "Failed to create a new schedule because some parameter was invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the vesting pallet."
      ]
    }
  },
  {
    "id": 466,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 467
        }
      },
      "docs": []
    }
  },
  {
    "id": 467,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 468
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 468,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 468,
    "type": {
      "path": [
        "pallet_scheduler",
        "ScheduledV3"
      ],
      "params": [
        {
          "name": "Call",
          "type": 289
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "PalletsOrigin",
          "type": 311
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "maybe_id",
              "type": 74,
              "typeName": "Option<Vec<u8>>",
              "docs": []
            },
            {
              "name": "priority",
              "type": 2,
              "typeName": "schedule::Priority",
              "docs": []
            },
            {
              "name": "call",
              "type": 289,
              "typeName": "Call",
              "docs": []
            },
            {
              "name": "maybe_periodic",
              "type": 288,
              "typeName": "Option<schedule::Period<BlockNumber>>",
              "docs": []
            },
            {
              "name": "origin",
              "type": 311,
              "typeName": "PalletsOrigin",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 469,
    "type": {
      "path": [
        "pallet_scheduler",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 470,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "FailedToSchedule",
              "fields": [],
              "index": 0,
              "docs": [
                "Failed to schedule a call"
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Cannot find the scheduled call."
              ]
            },
            {
              "name": "TargetBlockNumberInPast",
              "fields": [],
              "index": 2,
              "docs": [
                "Given target block number is in the past."
              ]
            },
            {
              "name": "RescheduleNoChange",
              "fields": [],
              "index": 3,
              "docs": [
                "Reschedule failed because it does not change scheduled time."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 471,
    "type": {
      "path": [
        "pallet_preimage",
        "RequestStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unrequested",
              "fields": [
                {
                  "name": null,
                  "type": 472,
                  "typeName": "Option<(AccountId, Balance)>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Requested",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 472,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 46
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 46,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 473,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 474,
    "type": {
      "path": [
        "pallet_preimage",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooLarge",
              "fields": [],
              "index": 0,
              "docs": [
                "Preimage is too large to store on-chain."
              ]
            },
            {
              "name": "AlreadyNoted",
              "fields": [],
              "index": 1,
              "docs": [
                "Preimage has already been noted on-chain."
              ]
            },
            {
              "name": "NotAuthorized",
              "fields": [],
              "index": 2,
              "docs": [
                "The user is not authorized to perform this action."
              ]
            },
            {
              "name": "NotNoted",
              "fields": [],
              "index": 3,
              "docs": [
                "The preimage cannot be removed since it has not yet been noted."
              ]
            },
            {
              "name": "Requested",
              "fields": [],
              "index": 4,
              "docs": [
                "A preimage may not be removed when there are outstanding requests."
              ]
            },
            {
              "name": "NotRequested",
              "fields": [],
              "index": 5,
              "docs": [
                "The preimage request cannot be removed since no outstanding requests exist."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 475,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          476,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 476,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 477
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 478,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 477,
    "type": {
      "path": [
        "pallet_proxy",
        "ProxyDefinition"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "ProxyType",
          "type": 78
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "delegate",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "proxy_type",
              "type": 78,
              "typeName": "ProxyType",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 478,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 477
        }
      },
      "docs": []
    }
  },
  {
    "id": 479,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          480,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 480,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 481
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 482,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 481,
    "type": {
      "path": [
        "pallet_proxy",
        "Announcement"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Hash",
          "type": 9
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "real",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "call_hash",
              "type": 9,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 482,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 481
        }
      },
      "docs": []
    }
  },
  {
    "id": 483,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooMany",
              "fields": [],
              "index": 0,
              "docs": [
                "There are too many proxies registered or too many announcements pending."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Proxy registration not found."
              ]
            },
            {
              "name": "NotProxy",
              "fields": [],
              "index": 2,
              "docs": [
                "Sender is not a proxy of the account to be proxied."
              ]
            },
            {
              "name": "Unproxyable",
              "fields": [],
              "index": 3,
              "docs": [
                "A call which is incompatible with the proxy type's filter was attempted."
              ]
            },
            {
              "name": "Duplicate",
              "fields": [],
              "index": 4,
              "docs": [
                "Account is already a proxy."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 5,
              "docs": [
                "Call may not be made by proxy because it may escalate its privileges."
              ]
            },
            {
              "name": "Unannounced",
              "fields": [],
              "index": 6,
              "docs": [
                "Announcement, if made at all, was made too recently."
              ]
            },
            {
              "name": "NoSelfProxy",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot add self as proxy."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 484,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          1
        ]
      },
      "docs": []
    }
  },
  {
    "id": 485,
    "type": {
      "path": [
        "pallet_multisig",
        "Multisig"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "when",
              "type": 81,
              "typeName": "Timepoint<BlockNumber>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "depositor",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 38,
              "typeName": "Vec<AccountId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 486,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          295,
          0,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 487,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MinimumThreshold",
              "fields": [],
              "index": 0,
              "docs": [
                "Threshold must be 2 or greater."
              ]
            },
            {
              "name": "AlreadyApproved",
              "fields": [],
              "index": 1,
              "docs": [
                "Call is already approved by this signatory."
              ]
            },
            {
              "name": "NoApprovalsNeeded",
              "fields": [],
              "index": 2,
              "docs": [
                "Call doesn't need any (more) approvals."
              ]
            },
            {
              "name": "TooFewSignatories",
              "fields": [],
              "index": 3,
              "docs": [
                "There are too few signatories in the list."
              ]
            },
            {
              "name": "TooManySignatories",
              "fields": [],
              "index": 4,
              "docs": [
                "There are too many signatories in the list."
              ]
            },
            {
              "name": "SignatoriesOutOfOrder",
              "fields": [],
              "index": 5,
              "docs": [
                "The signatories were provided out of order; they should be ordered."
              ]
            },
            {
              "name": "SenderInSignatories",
              "fields": [],
              "index": 6,
              "docs": [
                "The sender was contained in the other signatories; it shouldn't be."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "Multisig operation not found when attempting to cancel."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 8,
              "docs": [
                "Only the account that originally created the multisig is able to cancel it."
              ]
            },
            {
              "name": "NoTimepoint",
              "fields": [],
              "index": 9,
              "docs": [
                "No timepoint was given, yet the multisig operation is already underway."
              ]
            },
            {
              "name": "WrongTimepoint",
              "fields": [],
              "index": 10,
              "docs": [
                "A different timepoint was given to the multisig operation that is underway."
              ]
            },
            {
              "name": "UnexpectedTimepoint",
              "fields": [],
              "index": 11,
              "docs": [
                "A timepoint was given, yet no multisig operation is underway."
              ]
            },
            {
              "name": "MaxWeightTooLow",
              "fields": [],
              "index": 12,
              "docs": [
                "The maximum weight information provided was too low."
              ]
            },
            {
              "name": "AlreadyStored",
              "fields": [],
              "index": 13,
              "docs": [
                "The data to be stored is already stored."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 488,
    "type": {
      "path": [
        "pallet_bounties",
        "Bounty"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "curator_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "bond",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "status",
              "type": 489,
              "typeName": "BountyStatus<AccountId, BlockNumber>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 489,
    "type": {
      "path": [
        "pallet_bounties",
        "BountyStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Approved",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Funded",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CuratorProposed",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Active",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "update_due",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "PendingPayout",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "unlock_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 490,
    "type": {
      "path": [
        "pallet_bounties",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InsufficientProposersBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Proposer's balance is too low."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 1,
              "docs": [
                "No proposal or bounty at that index."
              ]
            },
            {
              "name": "ReasonTooBig",
              "fields": [],
              "index": 2,
              "docs": [
                "The reason given is just too big."
              ]
            },
            {
              "name": "UnexpectedStatus",
              "fields": [],
              "index": 3,
              "docs": [
                "The bounty status is unexpected."
              ]
            },
            {
              "name": "RequireCurator",
              "fields": [],
              "index": 4,
              "docs": [
                "Require bounty curator."
              ]
            },
            {
              "name": "InvalidValue",
              "fields": [],
              "index": 5,
              "docs": [
                "Invalid bounty value."
              ]
            },
            {
              "name": "InvalidFee",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid bounty fee."
              ]
            },
            {
              "name": "PendingPayout",
              "fields": [],
              "index": 7,
              "docs": [
                "A bounty payout is pending.",
                "To cancel the bounty, you must unassign and slash the curator."
              ]
            },
            {
              "name": "Premature",
              "fields": [],
              "index": 8,
              "docs": [
                "The bounties cannot be claimed/closed because it's still in the countdown period."
              ]
            },
            {
              "name": "HasActiveChildBounty",
              "fields": [],
              "index": 9,
              "docs": [
                "The bounty cannot be closed because it has active child-bounties."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 491,
    "type": {
      "path": [
        "pallet_tips",
        "OpenTip"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Hash",
          "type": 9
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "reason",
              "type": 9,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "finder",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "closes",
              "type": 91,
              "typeName": "Option<BlockNumber>",
              "docs": []
            },
            {
              "name": "tips",
              "type": 45,
              "typeName": "Vec<(AccountId, Balance)>",
              "docs": []
            },
            {
              "name": "finders_fee",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 492,
    "type": {
      "path": [
        "pallet_tips",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ReasonTooBig",
              "fields": [],
              "index": 0,
              "docs": [
                "The reason given is just too big."
              ]
            },
            {
              "name": "AlreadyKnown",
              "fields": [],
              "index": 1,
              "docs": [
                "The tip was already found/started."
              ]
            },
            {
              "name": "UnknownTip",
              "fields": [],
              "index": 2,
              "docs": [
                "The tip hash is unknown."
              ]
            },
            {
              "name": "NotFinder",
              "fields": [],
              "index": 3,
              "docs": [
                "The account attempting to retract the tip is not the finder of the tip."
              ]
            },
            {
              "name": "StillOpen",
              "fields": [],
              "index": 4,
              "docs": [
                "The tip cannot be claimed/closed because there are not enough tippers yet."
              ]
            },
            {
              "name": "Premature",
              "fields": [],
              "index": 5,
              "docs": [
                "The tip cannot be claimed/closed because it's still in the countdown period."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 493,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetDetails"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "issuer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "admin",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "freezer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "supply",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "min_balance",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "is_sufficient",
              "type": 33,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "accounts",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "sufficients",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 494,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetAccount"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "Extra",
          "type": 27
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "balance",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 33,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "reason",
              "type": 495,
              "typeName": "ExistenceReason<DepositBalance>",
              "docs": []
            },
            {
              "name": "extra",
              "type": 27,
              "typeName": "Extra",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 495,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "ExistenceReason"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Consumer",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sufficient",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DepositHeld",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "DepositRefunded",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 496,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 497,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "Approval"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 498,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "BoundedString",
          "type": 89
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "name",
              "type": 89,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "symbol",
              "type": 89,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "decimals",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 499,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BalanceLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Account balance must be greater than or equal to the transfer amount."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 1,
              "docs": [
                "The account to alter does not exist."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 2,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 3,
              "docs": [
                "The given asset ID is unknown."
              ]
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin account is frozen."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 5,
              "docs": [
                "The asset ID is already taken."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid witness data given."
              ]
            },
            {
              "name": "MinBalanceZero",
              "fields": [],
              "index": 7,
              "docs": [
                "Minimum balance should be non-zero."
              ]
            },
            {
              "name": "NoProvider",
              "fields": [],
              "index": 8,
              "docs": [
                "Unable to increment the consumer reference counters on the account. Either no provider",
                "reference exists to allow a non-zero balance of a non-self-sufficient asset, or the",
                "maximum number of consumers has been reached."
              ]
            },
            {
              "name": "BadMetadata",
              "fields": [],
              "index": 9,
              "docs": [
                "Invalid metadata given."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 10,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 11,
              "docs": [
                "The source account would not survive the transfer and it needs to stay alive."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 12,
              "docs": [
                "The asset-account already exists."
              ]
            },
            {
              "name": "NoDeposit",
              "fields": [],
              "index": 13,
              "docs": [
                "The asset-account doesn't have an associated deposit."
              ]
            },
            {
              "name": "WouldBurn",
              "fields": [],
              "index": 14,
              "docs": [
                "The operation would result in funds being burned."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 500,
    "type": {
      "path": [
        "pallet_lottery",
        "LotteryConfig"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "price",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "start",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "length",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "repeat",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 501,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          502
        ]
      },
      "docs": []
    }
  },
  {
    "id": 502,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 86
        }
      },
      "docs": []
    }
  },
  {
    "id": 503,
    "type": {
      "path": [
        "pallet_lottery",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotConfigured",
              "fields": [],
              "index": 0,
              "docs": [
                "A lottery has not been configured."
              ]
            },
            {
              "name": "InProgress",
              "fields": [],
              "index": 1,
              "docs": [
                "A lottery is already in progress."
              ]
            },
            {
              "name": "AlreadyEnded",
              "fields": [],
              "index": 2,
              "docs": [
                "A lottery has already ended."
              ]
            },
            {
              "name": "InvalidCall",
              "fields": [],
              "index": 3,
              "docs": [
                "The call is not valid for an open lottery."
              ]
            },
            {
              "name": "AlreadyParticipating",
              "fields": [],
              "index": 4,
              "docs": [
                "You are already participating in the lottery with this call."
              ]
            },
            {
              "name": "TooManyCalls",
              "fields": [],
              "index": 5,
              "docs": [
                "Too many calls for a single lottery."
              ]
            },
            {
              "name": "EncodingFailed",
              "fields": [],
              "index": 6,
              "docs": [
                "Failed to encode calls"
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 504,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 505
        }
      },
      "docs": []
    }
  },
  {
    "id": 505,
    "type": {
      "path": [
        "pallet_gilt",
        "pallet",
        "GiltBid"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 506,
    "type": {
      "path": [
        "pallet_gilt",
        "pallet",
        "ActiveGiltsTotal"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "frozen",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "proportion",
              "type": 303,
              "typeName": "Perquintill",
              "docs": []
            },
            {
              "name": "index",
              "type": 4,
              "typeName": "ActiveIndex",
              "docs": []
            },
            {
              "name": "target",
              "type": 303,
              "typeName": "Perquintill",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 507,
    "type": {
      "path": [
        "pallet_gilt",
        "pallet",
        "ActiveGilt"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "proportion",
              "type": 303,
              "typeName": "Perquintill",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "expiry",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 508,
    "type": {
      "path": [
        "pallet_gilt",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "DurationTooSmall",
              "fields": [],
              "index": 0,
              "docs": [
                "The duration of the bid is less than one."
              ]
            },
            {
              "name": "DurationTooBig",
              "fields": [],
              "index": 1,
              "docs": [
                "The duration is the bid is greater than the number of queues."
              ]
            },
            {
              "name": "AmountTooSmall",
              "fields": [],
              "index": 2,
              "docs": [
                "The amount of the bid is less than the minimum allowed."
              ]
            },
            {
              "name": "BidTooLow",
              "fields": [],
              "index": 3,
              "docs": [
                "The queue for the bid's duration is full and the amount bid is too low to get in",
                "through replacing an existing bid."
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 4,
              "docs": [
                "Gilt index is unknown."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 5,
              "docs": [
                "Not the owner of the gilt."
              ]
            },
            {
              "name": "NotExpired",
              "fields": [],
              "index": 6,
              "docs": [
                "Gilt not yet at expiry date."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "The given bid for retraction is not found."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 509,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "ClassDetails"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "issuer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "admin",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "freezer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "total_deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "free_holding",
              "type": 33,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "instances",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "instance_metadatas",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 510,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          4,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 511,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "InstanceDetails"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approved",
              "type": 56,
              "typeName": "Option<AccountId>",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 33,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 512,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "ClassMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "data",
              "type": 89,
              "typeName": "BoundedVec<u8, StringLimit>",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 513,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "InstanceMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "data",
              "type": 89,
              "typeName": "BoundedVec<u8, StringLimit>",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 33,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 514,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          91,
          92
        ]
      },
      "docs": []
    }
  },
  {
    "id": 515,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          93,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 516,
    "type": {
      "path": [
        "pallet_uniques",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NoPermission",
              "fields": [],
              "index": 0,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 1,
              "docs": [
                "The given asset ID is unknown."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 2,
              "docs": [
                "The asset instance ID has already been used for an asset."
              ]
            },
            {
              "name": "WrongOwner",
              "fields": [],
              "index": 3,
              "docs": [
                "The owner turned out to be different to what was expected."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 4,
              "docs": [
                "Invalid witness data given."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 5,
              "docs": [
                "The asset ID is already taken."
              ]
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 6,
              "docs": [
                "The asset instance or class is frozen."
              ]
            },
            {
              "name": "WrongDelegate",
              "fields": [],
              "index": 7,
              "docs": [
                "The delegate turned out to be different to what was expected."
              ]
            },
            {
              "name": "NoDelegate",
              "fields": [],
              "index": 8,
              "docs": [
                "There is no delegate approved."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 9,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 517,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 518
        }
      },
      "docs": []
    }
  },
  {
    "id": 518,
    "type": {
      "path": [
        "pallet_transaction_storage",
        "TransactionInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "chunk_root",
              "type": 9,
              "typeName": "<BlakeTwo256 as Hash>::Output",
              "docs": []
            },
            {
              "name": "content_hash",
              "type": 9,
              "typeName": "<BlakeTwo256 as Hash>::Output",
              "docs": []
            },
            {
              "name": "size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "block_chunks",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 519,
    "type": {
      "path": [
        "pallet_transaction_storage",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InsufficientFunds",
              "fields": [],
              "index": 0,
              "docs": [
                "Insufficient account balance."
              ]
            },
            {
              "name": "NotConfigured",
              "fields": [],
              "index": 1,
              "docs": [
                "Invalid configuration."
              ]
            },
            {
              "name": "RenewedNotFound",
              "fields": [],
              "index": 2,
              "docs": [
                "Renewed extrinsic is not found."
              ]
            },
            {
              "name": "EmptyTransaction",
              "fields": [],
              "index": 3,
              "docs": [
                "Attempting to store empty transaction"
              ]
            },
            {
              "name": "UnexpectedProof",
              "fields": [],
              "index": 4,
              "docs": [
                "Proof was not expected in this block."
              ]
            },
            {
              "name": "InvalidProof",
              "fields": [],
              "index": 5,
              "docs": [
                "Proof failed verification."
              ]
            },
            {
              "name": "MissingProof",
              "fields": [],
              "index": 6,
              "docs": [
                "Missing storage proof."
              ]
            },
            {
              "name": "MissingStateData",
              "fields": [],
              "index": 7,
              "docs": [
                "Unable to verify proof becasue state data is missing."
              ]
            },
            {
              "name": "DoubleCheck",
              "fields": [],
              "index": 8,
              "docs": [
                "Double proof check in the block."
              ]
            },
            {
              "name": "ProofNotChecked",
              "fields": [],
              "index": 9,
              "docs": [
                "Storage proof was not checked in the block."
              ]
            },
            {
              "name": "TransactionTooLarge",
              "fields": [],
              "index": 10,
              "docs": [
                "Transaction is too large."
              ]
            },
            {
              "name": "TooManyTransactions",
              "fields": [],
              "index": 11,
              "docs": [
                "Too many transactions in the block."
              ]
            },
            {
              "name": "BadContext",
              "fields": [],
              "index": 12,
              "docs": [
                "Attempted to call `store` outside of block execution."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 520,
    "type": {
      "path": [
        "pallet_bags_list",
        "list",
        "Node"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 0,
              "typeName": "T::AccountId",
              "docs": []
            },
            {
              "name": "prev",
              "type": 56,
              "typeName": "Option<T::AccountId>",
              "docs": []
            },
            {
              "name": "next",
              "type": 56,
              "typeName": "Option<T::AccountId>",
              "docs": []
            },
            {
              "name": "bag_upper",
              "type": 8,
              "typeName": "VoteWeight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 521,
    "type": {
      "path": [
        "pallet_bags_list",
        "list",
        "Bag"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "head",
              "type": 56,
              "typeName": "Option<T::AccountId>",
              "docs": []
            },
            {
              "name": "tail",
              "type": 56,
              "typeName": "Option<T::AccountId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 522,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 8
        }
      },
      "docs": []
    }
  },
  {
    "id": 523,
    "type": {
      "path": [
        "pallet_bags_list",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotInSameBag",
              "fields": [],
              "index": 0,
              "docs": [
                "Attempted to place node in front of a node in another bag."
              ]
            },
            {
              "name": "IdNotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Id not found in list."
              ]
            },
            {
              "name": "NotHeavier",
              "fields": [],
              "index": 2,
              "docs": [
                "An Id does not have a greater vote weight than another Id."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 524,
    "type": {
      "path": [
        "pallet_child_bounties",
        "ChildBounty"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_bounty",
              "type": 4,
              "typeName": "BountyIndex",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "curator_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "status",
              "type": 525,
              "typeName": "ChildBountyStatus<AccountId, BlockNumber>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 525,
    "type": {
      "path": [
        "pallet_child_bounties",
        "ChildBountyStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Added",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CuratorProposed",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Active",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "PendingPayout",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "unlock_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 526,
    "type": {
      "path": [
        "frame_support",
        "storage",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 527,
    "type": {
      "path": [
        "pallet_child_bounties",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ParentBountyNotActive",
              "fields": [],
              "index": 0,
              "docs": [
                "The parent bounty is not in active state."
              ]
            },
            {
              "name": "InsufficientBountyBalance",
              "fields": [],
              "index": 1,
              "docs": [
                "The bounty balance is not enough to add new child-bounty."
              ]
            },
            {
              "name": "TooManyChildBounties",
              "fields": [],
              "index": 2,
              "docs": [
                "Number of child-bounties exceeds limit `MaxActiveChildBountyCount`."
              ]
            }
          ]
        }
      },
      "docs": [
        "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"
      ]
    }
  },
  {
    "id": 528,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "unchecked_extrinsic",
        "UncheckedExtrinsic"
      ],
      "params": [
        {
          "name": "Address",
          "type": 140
        },
        {
          "name": "Call",
          "type": 123
        },
        {
          "name": "Signature",
          "type": 529
        },
        {
          "name": "Extra",
          "type": 532
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 10,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 529,
    "type": {
      "path": [
        "sp_runtime",
        "MultiSignature"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ed25519",
              "fields": [
                {
                  "name": null,
                  "type": 224,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sr25519",
              "fields": [
                {
                  "name": null,
                  "type": 241,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ecdsa",
              "fields": [
                {
                  "name": null,
                  "type": 530,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 530,
    "type": {
      "path": [
        "sp_core",
        "ecdsa",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 531,
              "typeName": "[u8; 65]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 531,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 65,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 532,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          533,
          534,
          535,
          536,
          537,
          539,
          540,
          541
        ]
      },
      "docs": []
    }
  },
  {
    "id": 533,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_non_zero_sender",
        "CheckNonZeroSender"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 534,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_spec_version",
        "CheckSpecVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 535,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_tx_version",
        "CheckTxVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 536,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_genesis",
        "CheckGenesis"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 537,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_mortality",
        "CheckMortality"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 538,
              "typeName": "Era",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 538,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "era",
        "Era"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Immortal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Mortal1",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mortal2",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Mortal3",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Mortal4",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Mortal5",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Mortal6",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Mortal7",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Mortal8",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Mortal9",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Mortal10",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Mortal11",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Mortal12",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Mortal13",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Mortal14",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Mortal15",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Mortal16",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Mortal17",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Mortal18",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Mortal19",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Mortal20",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Mortal21",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Mortal22",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Mortal23",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Mortal24",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Mortal25",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Mortal26",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Mortal27",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Mortal28",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Mortal29",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Mortal30",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Mortal31",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Mortal32",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Mortal33",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Mortal34",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Mortal35",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Mortal36",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Mortal37",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "Mortal38",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Mortal39",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Mortal40",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Mortal41",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Mortal42",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Mortal43",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "Mortal44",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "Mortal45",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 45,
              "docs": []
            },
            {
              "name": "Mortal46",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "Mortal47",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            },
            {
              "name": "Mortal48",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 48,
              "docs": []
            },
            {
              "name": "Mortal49",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 49,
              "docs": []
            },
            {
              "name": "Mortal50",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Mortal51",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Mortal52",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "Mortal53",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "Mortal54",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Mortal55",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "Mortal56",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Mortal57",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 57,
              "docs": []
            },
            {
              "name": "Mortal58",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 58,
              "docs": []
            },
            {
              "name": "Mortal59",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 59,
              "docs": []
            },
            {
              "name": "Mortal60",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Mortal61",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "Mortal62",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "Mortal63",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Mortal64",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Mortal65",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 65,
              "docs": []
            },
            {
              "name": "Mortal66",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 66,
              "docs": []
            },
            {
              "name": "Mortal67",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 67,
              "docs": []
            },
            {
              "name": "Mortal68",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 68,
              "docs": []
            },
            {
              "name": "Mortal69",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 69,
              "docs": []
            },
            {
              "name": "Mortal70",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Mortal71",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Mortal72",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Mortal73",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Mortal74",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "Mortal75",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 75,
              "docs": []
            },
            {
              "name": "Mortal76",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 76,
              "docs": []
            },
            {
              "name": "Mortal77",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 77,
              "docs": []
            },
            {
              "name": "Mortal78",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 78,
              "docs": []
            },
            {
              "name": "Mortal79",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 79,
              "docs": []
            },
            {
              "name": "Mortal80",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 80,
              "docs": []
            },
            {
              "name": "Mortal81",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 81,
              "docs": []
            },
            {
              "name": "Mortal82",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 82,
              "docs": []
            },
            {
              "name": "Mortal83",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 83,
              "docs": []
            },
            {
              "name": "Mortal84",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 84,
              "docs": []
            },
            {
              "name": "Mortal85",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 85,
              "docs": []
            },
            {
              "name": "Mortal86",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 86,
              "docs": []
            },
            {
              "name": "Mortal87",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 87,
              "docs": []
            },
            {
              "name": "Mortal88",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 88,
              "docs": []
            },
            {
              "name": "Mortal89",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 89,
              "docs": []
            },
            {
              "name": "Mortal90",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 90,
              "docs": []
            },
            {
              "name": "Mortal91",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 91,
              "docs": []
            },
            {
              "name": "Mortal92",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 92,
              "docs": []
            },
            {
              "name": "Mortal93",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 93,
              "docs": []
            },
            {
              "name": "Mortal94",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 94,
              "docs": []
            },
            {
              "name": "Mortal95",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 95,
              "docs": []
            },
            {
              "name": "Mortal96",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 96,
              "docs": []
            },
            {
              "name": "Mortal97",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 97,
              "docs": []
            },
            {
              "name": "Mortal98",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "Mortal99",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "Mortal100",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "Mortal101",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Mortal102",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 102,
              "docs": []
            },
            {
              "name": "Mortal103",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 103,
              "docs": []
            },
            {
              "name": "Mortal104",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 104,
              "docs": []
            },
            {
              "name": "Mortal105",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 105,
              "docs": []
            },
            {
              "name": "Mortal106",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 106,
              "docs": []
            },
            {
              "name": "Mortal107",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 107,
              "docs": []
            },
            {
              "name": "Mortal108",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 108,
              "docs": []
            },
            {
              "name": "Mortal109",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 109,
              "docs": []
            },
            {
              "name": "Mortal110",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 110,
              "docs": []
            },
            {
              "name": "Mortal111",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 111,
              "docs": []
            },
            {
              "name": "Mortal112",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 112,
              "docs": []
            },
            {
              "name": "Mortal113",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 113,
              "docs": []
            },
            {
              "name": "Mortal114",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 114,
              "docs": []
            },
            {
              "name": "Mortal115",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 115,
              "docs": []
            },
            {
              "name": "Mortal116",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 116,
              "docs": []
            },
            {
              "name": "Mortal117",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 117,
              "docs": []
            },
            {
              "name": "Mortal118",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 118,
              "docs": []
            },
            {
              "name": "Mortal119",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 119,
              "docs": []
            },
            {
              "name": "Mortal120",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 120,
              "docs": []
            },
            {
              "name": "Mortal121",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 121,
              "docs": []
            },
            {
              "name": "Mortal122",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 122,
              "docs": []
            },
            {
              "name": "Mortal123",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 123,
              "docs": []
            },
            {
              "name": "Mortal124",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 124,
              "docs": []
            },
            {
              "name": "Mortal125",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 125,
              "docs": []
            },
            {
              "name": "Mortal126",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 126,
              "docs": []
            },
            {
              "name": "Mortal127",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 127,
              "docs": []
            },
            {
              "name": "Mortal128",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 128,
              "docs": []
            },
            {
              "name": "Mortal129",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 129,
              "docs": []
            },
            {
              "name": "Mortal130",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 130,
              "docs": []
            },
            {
              "name": "Mortal131",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 131,
              "docs": []
            },
            {
              "name": "Mortal132",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 132,
              "docs": []
            },
            {
              "name": "Mortal133",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 133,
              "docs": []
            },
            {
              "name": "Mortal134",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 134,
              "docs": []
            },
            {
              "name": "Mortal135",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 135,
              "docs": []
            },
            {
              "name": "Mortal136",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 136,
              "docs": []
            },
            {
              "name": "Mortal137",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 137,
              "docs": []
            },
            {
              "name": "Mortal138",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 138,
              "docs": []
            },
            {
              "name": "Mortal139",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 139,
              "docs": []
            },
            {
              "name": "Mortal140",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 140,
              "docs": []
            },
            {
              "name": "Mortal141",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 141,
              "docs": []
            },
            {
              "name": "Mortal142",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 142,
              "docs": []
            },
            {
              "name": "Mortal143",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 143,
              "docs": []
            },
            {
              "name": "Mortal144",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 144,
              "docs": []
            },
            {
              "name": "Mortal145",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 145,
              "docs": []
            },
            {
              "name": "Mortal146",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 146,
              "docs": []
            },
            {
              "name": "Mortal147",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 147,
              "docs": []
            },
            {
              "name": "Mortal148",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 148,
              "docs": []
            },
            {
              "name": "Mortal149",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 149,
              "docs": []
            },
            {
              "name": "Mortal150",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 150,
              "docs": []
            },
            {
              "name": "Mortal151",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 151,
              "docs": []
            },
            {
              "name": "Mortal152",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 152,
              "docs": []
            },
            {
              "name": "Mortal153",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 153,
              "docs": []
            },
            {
              "name": "Mortal154",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 154,
              "docs": []
            },
            {
              "name": "Mortal155",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 155,
              "docs": []
            },
            {
              "name": "Mortal156",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 156,
              "docs": []
            },
            {
              "name": "Mortal157",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 157,
              "docs": []
            },
            {
              "name": "Mortal158",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 158,
              "docs": []
            },
            {
              "name": "Mortal159",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 159,
              "docs": []
            },
            {
              "name": "Mortal160",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 160,
              "docs": []
            },
            {
              "name": "Mortal161",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 161,
              "docs": []
            },
            {
              "name": "Mortal162",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 162,
              "docs": []
            },
            {
              "name": "Mortal163",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 163,
              "docs": []
            },
            {
              "name": "Mortal164",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 164,
              "docs": []
            },
            {
              "name": "Mortal165",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 165,
              "docs": []
            },
            {
              "name": "Mortal166",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 166,
              "docs": []
            },
            {
              "name": "Mortal167",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 167,
              "docs": []
            },
            {
              "name": "Mortal168",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 168,
              "docs": []
            },
            {
              "name": "Mortal169",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 169,
              "docs": []
            },
            {
              "name": "Mortal170",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 170,
              "docs": []
            },
            {
              "name": "Mortal171",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 171,
              "docs": []
            },
            {
              "name": "Mortal172",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 172,
              "docs": []
            },
            {
              "name": "Mortal173",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 173,
              "docs": []
            },
            {
              "name": "Mortal174",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 174,
              "docs": []
            },
            {
              "name": "Mortal175",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 175,
              "docs": []
            },
            {
              "name": "Mortal176",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 176,
              "docs": []
            },
            {
              "name": "Mortal177",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 177,
              "docs": []
            },
            {
              "name": "Mortal178",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 178,
              "docs": []
            },
            {
              "name": "Mortal179",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 179,
              "docs": []
            },
            {
              "name": "Mortal180",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 180,
              "docs": []
            },
            {
              "name": "Mortal181",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 181,
              "docs": []
            },
            {
              "name": "Mortal182",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 182,
              "docs": []
            },
            {
              "name": "Mortal183",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 183,
              "docs": []
            },
            {
              "name": "Mortal184",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 184,
              "docs": []
            },
            {
              "name": "Mortal185",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 185,
              "docs": []
            },
            {
              "name": "Mortal186",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 186,
              "docs": []
            },
            {
              "name": "Mortal187",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 187,
              "docs": []
            },
            {
              "name": "Mortal188",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 188,
              "docs": []
            },
            {
              "name": "Mortal189",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 189,
              "docs": []
            },
            {
              "name": "Mortal190",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 190,
              "docs": []
            },
            {
              "name": "Mortal191",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 191,
              "docs": []
            },
            {
              "name": "Mortal192",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 192,
              "docs": []
            },
            {
              "name": "Mortal193",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 193,
              "docs": []
            },
            {
              "name": "Mortal194",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 194,
              "docs": []
            },
            {
              "name": "Mortal195",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 195,
              "docs": []
            },
            {
              "name": "Mortal196",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 196,
              "docs": []
            },
            {
              "name": "Mortal197",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 197,
              "docs": []
            },
            {
              "name": "Mortal198",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 198,
              "docs": []
            },
            {
              "name": "Mortal199",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 199,
              "docs": []
            },
            {
              "name": "Mortal200",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            },
            {
              "name": "Mortal201",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 201,
              "docs": []
            },
            {
              "name": "Mortal202",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 202,
              "docs": []
            },
            {
              "name": "Mortal203",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 203,
              "docs": []
            },
            {
              "name": "Mortal204",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 204,
              "docs": []
            },
            {
              "name": "Mortal205",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 205,
              "docs": []
            },
            {
              "name": "Mortal206",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 206,
              "docs": []
            },
            {
              "name": "Mortal207",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 207,
              "docs": []
            },
            {
              "name": "Mortal208",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 208,
              "docs": []
            },
            {
              "name": "Mortal209",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 209,
              "docs": []
            },
            {
              "name": "Mortal210",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 210,
              "docs": []
            },
            {
              "name": "Mortal211",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 211,
              "docs": []
            },
            {
              "name": "Mortal212",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 212,
              "docs": []
            },
            {
              "name": "Mortal213",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 213,
              "docs": []
            },
            {
              "name": "Mortal214",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 214,
              "docs": []
            },
            {
              "name": "Mortal215",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 215,
              "docs": []
            },
            {
              "name": "Mortal216",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 216,
              "docs": []
            },
            {
              "name": "Mortal217",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 217,
              "docs": []
            },
            {
              "name": "Mortal218",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 218,
              "docs": []
            },
            {
              "name": "Mortal219",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 219,
              "docs": []
            },
            {
              "name": "Mortal220",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 220,
              "docs": []
            },
            {
              "name": "Mortal221",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 221,
              "docs": []
            },
            {
              "name": "Mortal222",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 222,
              "docs": []
            },
            {
              "name": "Mortal223",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 223,
              "docs": []
            },
            {
              "name": "Mortal224",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 224,
              "docs": []
            },
            {
              "name": "Mortal225",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 225,
              "docs": []
            },
            {
              "name": "Mortal226",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 226,
              "docs": []
            },
            {
              "name": "Mortal227",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 227,
              "docs": []
            },
            {
              "name": "Mortal228",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 228,
              "docs": []
            },
            {
              "name": "Mortal229",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 229,
              "docs": []
            },
            {
              "name": "Mortal230",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 230,
              "docs": []
            },
            {
              "name": "Mortal231",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 231,
              "docs": []
            },
            {
              "name": "Mortal232",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 232,
              "docs": []
            },
            {
              "name": "Mortal233",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 233,
              "docs": []
            },
            {
              "name": "Mortal234",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 234,
              "docs": []
            },
            {
              "name": "Mortal235",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 235,
              "docs": []
            },
            {
              "name": "Mortal236",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 236,
              "docs": []
            },
            {
              "name": "Mortal237",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 237,
              "docs": []
            },
            {
              "name": "Mortal238",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 238,
              "docs": []
            },
            {
              "name": "Mortal239",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 239,
              "docs": []
            },
            {
              "name": "Mortal240",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 240,
              "docs": []
            },
            {
              "name": "Mortal241",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 241,
              "docs": []
            },
            {
              "name": "Mortal242",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 242,
              "docs": []
            },
            {
              "name": "Mortal243",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 243,
              "docs": []
            },
            {
              "name": "Mortal244",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 244,
              "docs": []
            },
            {
              "name": "Mortal245",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 245,
              "docs": []
            },
            {
              "name": "Mortal246",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 246,
              "docs": []
            },
            {
              "name": "Mortal247",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 247,
              "docs": []
            },
            {
              "name": "Mortal248",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 248,
              "docs": []
            },
            {
              "name": "Mortal249",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 249,
              "docs": []
            },
            {
              "name": "Mortal250",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 250,
              "docs": []
            },
            {
              "name": "Mortal251",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 251,
              "docs": []
            },
            {
              "name": "Mortal252",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 252,
              "docs": []
            },
            {
              "name": "Mortal253",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 253,
              "docs": []
            },
            {
              "name": "Mortal254",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 254,
              "docs": []
            },
            {
              "name": "Mortal255",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 255,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 539,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_nonce",
        "CheckNonce"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 101,
              "typeName": "T::Index",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 540,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_weight",
        "CheckWeight"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 541,
    "type": {
      "path": [
        "pallet_asset_tx_payment",
        "ChargeAssetTxPayment"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "tip",
              "type": 63,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "asset_id",
              "type": 91,
              "typeName": "Option<ChargeAssetIdOf<T>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 542,
    "type": {
      "path": [
        "node_runtime",
        "Runtime"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  }
]