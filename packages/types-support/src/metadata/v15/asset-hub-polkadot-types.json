[
  {
    "id": 0,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "AccountId32"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 1,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 32,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 2,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U8"
      },
      "docs": []
    }
  },
  {
    "id": 3,
    "type": {
      "path": [
        "frame_system",
        "AccountInfo"
      ],
      "params": [
        {
          "name": "Nonce",
          "type": 4
        },
        {
          "name": "AccountData",
          "type": 5
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "nonce",
              "type": 4,
              "typeName": "Nonce",
              "docs": []
            },
            {
              "name": "consumers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "providers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "sufficients",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "data",
              "type": 5,
              "typeName": "AccountData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 4,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U32"
      },
      "docs": []
    }
  },
  {
    "id": 5,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "AccountData"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "free",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "frozen",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "flags",
              "type": 7,
              "typeName": "ExtraFlags",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 6,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U128"
      },
      "docs": []
    }
  },
  {
    "id": 7,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "ExtraFlags"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 8,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Bool"
      },
      "docs": []
    }
  },
  {
    "id": 9,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 10,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 10,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 10,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 10,
    "type": {
      "path": [
        "sp_weights",
        "weight_v2",
        "Weight"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ref_time",
              "type": 11,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "proof_size",
              "type": 11,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 11,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 12
        }
      },
      "docs": []
    }
  },
  {
    "id": 12,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U64"
      },
      "docs": []
    }
  },
  {
    "id": 13,
    "type": {
      "path": [
        "primitive_types",
        "H256"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 14,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 15,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "Digest"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "logs",
              "type": 16,
              "typeName": "Vec<DigestItem>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 16,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 17
        }
      },
      "docs": []
    }
  },
  {
    "id": 17,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "DigestItem"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PreRuntime",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Consensus",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Seal",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "RuntimeEnvironmentUpdated",
              "fields": [],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 18,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 19,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 20
        }
      },
      "docs": []
    }
  },
  {
    "id": 20,
    "type": {
      "path": [
        "frame_system",
        "EventRecord"
      ],
      "params": [
        {
          "name": "E",
          "type": 21
        },
        {
          "name": "T",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "phase",
              "type": 152,
              "typeName": "Phase",
              "docs": []
            },
            {
              "name": "event",
              "type": 21,
              "typeName": "E",
              "docs": []
            },
            {
              "name": "topics",
              "type": 153,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 21,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "RuntimeEvent"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 22,
                  "typeName": "frame_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ParachainSystem",
              "fields": [
                {
                  "name": null,
                  "type": 31,
                  "typeName": "cumulus_pallet_parachain_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 33,
                  "typeName": "pallet_balances::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "TransactionPayment",
              "fields": [
                {
                  "name": null,
                  "type": 35,
                  "typeName": "pallet_transaction_payment::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "AssetTxPayment",
              "fields": [
                {
                  "name": null,
                  "type": 36,
                  "typeName": "pallet_asset_conversion_tx_payment::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 47,
                  "typeName": "pallet_vesting::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "CollatorSelection",
              "fields": [
                {
                  "name": null,
                  "type": 48,
                  "typeName": "pallet_collator_selection::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 50,
                  "typeName": "pallet_session::Event",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "XcmpQueue",
              "fields": [
                {
                  "name": null,
                  "type": 51,
                  "typeName": "cumulus_pallet_xcmp_queue::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "PolkadotXcm",
              "fields": [
                {
                  "name": null,
                  "type": 52,
                  "typeName": "pallet_xcm::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "CumulusXcm",
              "fields": [
                {
                  "name": null,
                  "type": 117,
                  "typeName": "cumulus_pallet_xcm::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "MessageQueue",
              "fields": [
                {
                  "name": null,
                  "type": 118,
                  "typeName": "pallet_message_queue::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 122,
                  "typeName": "pallet_utility::Event",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 125,
                  "typeName": "pallet_multisig::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 127,
                  "typeName": "pallet_proxy::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 130,
                  "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance1>",
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Uniques",
              "fields": [
                {
                  "name": null,
                  "type": 131,
                  "typeName": "pallet_uniques::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Nfts",
              "fields": [
                {
                  "name": null,
                  "type": 138,
                  "typeName": "pallet_nfts::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "ForeignAssets",
              "fields": [
                {
                  "name": null,
                  "type": 145,
                  "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance2>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "PoolAssets",
              "fields": [
                {
                  "name": null,
                  "type": 146,
                  "typeName": "pallet_assets::Event<Runtime, pallet_assets::Instance3>",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "AssetConversion",
              "fields": [
                {
                  "name": null,
                  "type": 147,
                  "typeName": "pallet_asset_conversion::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 22,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ExtrinsicSuccess",
              "fields": [
                {
                  "name": "dispatch_info",
                  "type": 23,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An extrinsic completed successfully."
              ]
            },
            {
              "name": "ExtrinsicFailed",
              "fields": [
                {
                  "name": "dispatch_error",
                  "type": 26,
                  "typeName": "DispatchError",
                  "docs": []
                },
                {
                  "name": "dispatch_info",
                  "type": 23,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An extrinsic failed."
              ]
            },
            {
              "name": "CodeUpdated",
              "fields": [],
              "index": 2,
              "docs": [
                "`:code` was updated."
              ]
            },
            {
              "name": "NewAccount",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A new account was created."
              ]
            },
            {
              "name": "KilledAccount",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An account was reaped."
              ]
            },
            {
              "name": "Remarked",
              "fields": [
                {
                  "name": "sender",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "On on-chain remark happened."
              ]
            },
            {
              "name": "UpgradeAuthorized",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "check_version",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An upgrade was authorized."
              ]
            }
          ]
        }
      },
      "docs": [
        "Event for the System pallet."
      ]
    }
  },
  {
    "id": 23,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "DispatchInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "type": 24,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "pays_fee",
              "type": 25,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 24,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "DispatchClass"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Normal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Operational",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mandatory",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 25,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "Pays"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Yes",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "No",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 26,
    "type": {
      "path": [
        "sp_runtime",
        "DispatchError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Other",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Module",
              "fields": [
                {
                  "name": null,
                  "type": 27,
                  "typeName": "ModuleError",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "ConsumerRemaining",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "NoProviders",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "TooManyConsumers",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Token",
              "fields": [
                {
                  "name": null,
                  "type": 28,
                  "typeName": "TokenError",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Arithmetic",
              "fields": [
                {
                  "name": null,
                  "type": 29,
                  "typeName": "ArithmeticError",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Transactional",
              "fields": [
                {
                  "name": null,
                  "type": 30,
                  "typeName": "TransactionalError",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Exhausted",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "Corruption",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "Unavailable",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "RootNotAllowed",
              "fields": [],
              "index": 13,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 27,
    "type": {
      "path": [
        "sp_runtime",
        "ModuleError"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "error",
              "type": 18,
              "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 28,
    "type": {
      "path": [
        "sp_runtime",
        "TokenError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "FundsUnavailable",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "OnlyProvider",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BelowMinimum",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CannotCreate",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "UnknownAsset",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "CannotCreateHold",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "NotExpendable",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Blocked",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 29,
    "type": {
      "path": [
        "sp_arithmetic",
        "ArithmeticError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Underflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DivisionByZero",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 30,
    "type": {
      "path": [
        "sp_runtime",
        "TransactionalError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "LimitReached",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NoLayer",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 31,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ValidationFunctionStored",
              "fields": [],
              "index": 0,
              "docs": [
                "The validation function has been scheduled to apply."
              ]
            },
            {
              "name": "ValidationFunctionApplied",
              "fields": [
                {
                  "name": "relay_chain_block_num",
                  "type": 4,
                  "typeName": "RelayChainBlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The validation function was applied as of the contained relay chain block number."
              ]
            },
            {
              "name": "ValidationFunctionDiscarded",
              "fields": [],
              "index": 2,
              "docs": [
                "The relay-chain aborted the upgrade process."
              ]
            },
            {
              "name": "DownwardMessagesReceived",
              "fields": [
                {
                  "name": "count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Some downward messages have been received and will be processed."
              ]
            },
            {
              "name": "DownwardMessagesProcessed",
              "fields": [
                {
                  "name": "weight_used",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "dmq_head",
                  "type": 13,
                  "typeName": "relay_chain::Hash",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Downward messages were processed using the given weight."
              ]
            },
            {
              "name": "UpwardMessageSent",
              "fields": [
                {
                  "name": "message_hash",
                  "type": 32,
                  "typeName": "Option<XcmHash>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An upward message was sent to the relay chain."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 32,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 1
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 33,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Endowed",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An account was created with some free balance."
              ]
            },
            {
              "name": "DustLost",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                "resulting in an outright loss."
              ]
            },
            {
              "name": "Transfer",
              "fields": [
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer succeeded."
              ]
            },
            {
              "name": "BalanceSet",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A balance was set by root."
              ]
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some balance was reserved (moved from free to reserved)."
              ]
            },
            {
              "name": "Unreserved",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Some balance was unreserved (moved from reserved to free)."
              ]
            },
            {
              "name": "ReserveRepatriated",
              "fields": [
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "destination_status",
                  "type": 34,
                  "typeName": "Status",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some balance was moved from the reserve of the first account to the second account.",
                "Final argument indicates the destination balance type."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some amount was deposited (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Withdraw",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some amount was withdrawn from the account (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some amount was removed from the account (e.g. for misbehavior)."
              ]
            },
            {
              "name": "Minted",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Some amount was minted into an account."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Some amount was burned from an account."
              ]
            },
            {
              "name": "Suspended",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Some amount was suspended from an account (it can be restored later)."
              ]
            },
            {
              "name": "Restored",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Some amount was restored into an account."
              ]
            },
            {
              "name": "Upgraded",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "An account was upgraded."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Total issuance was increased by `amount`, creating a credit to be balanced."
              ]
            },
            {
              "name": "Rescinded",
              "fields": [
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Total issuance was decreased by `amount`, creating a debt to be balanced."
              ]
            },
            {
              "name": "Locked",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Some balance was locked."
              ]
            },
            {
              "name": "Unlocked",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Some balance was unlocked."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Some balance was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Some balance was thawed."
              ]
            },
            {
              "name": "TotalIssuanceForced",
              "fields": [
                {
                  "name": "old",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "The `TotalIssuance` was forcefully changed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 34,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "BalanceStatus"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Free",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reserved",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 35,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TransactionFeePaid",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "actual_fee",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "tip",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                "has been paid by `who`."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 36,
    "type": {
      "path": [
        "pallet_asset_conversion_tx_payment",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AssetTxFeePaid",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "actual_fee",
                  "type": 6,
                  "typeName": "AssetBalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "tip",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "ChargeAssetIdOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                "has been paid by `who` in an asset `asset_id`."
              ]
            },
            {
              "name": "AssetRefundFailed",
              "fields": [
                {
                  "name": "native_amount_kept",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A swap of the refund in native currency back to asset failed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 37,
    "type": {
      "path": [
        "staging_xcm",
        "v3",
        "multilocation",
        "MultiLocation"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parents",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "type": 38,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 38,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junctions",
        "Junctions"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 39,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "Junction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "type": 41,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "type": 41,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "type": 41,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 43,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "name": "length",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "type": 45,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "type": 46,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "GlobalConsensus",
              "fields": [
                {
                  "name": null,
                  "type": 42,
                  "typeName": "NetworkId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 40,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 41,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 42
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 42,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 42,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "NetworkId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ByGenesis",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ByFork",
              "fields": [
                {
                  "name": "block_number",
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "block_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Westend",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Rococo",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Wococo",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "name": "chain_id",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "BitcoinCore",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "BitcoinCash",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "PolkadotBulletin",
              "fields": [],
              "index": 10,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 43,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 20,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 44,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 6
        }
      },
      "docs": []
    }
  },
  {
    "id": 45,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "BodyId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unit",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Moniker",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Executive",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Technical",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Legislative",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Judicial",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Defense",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Administration",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 46,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "BodyPart"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Voice",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Members",
              "fields": [
                {
                  "name": "count",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Fraction",
              "fields": [
                {
                  "name": "nom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AtLeastProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "MoreThanProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 47,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingUpdated",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "unvested",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The amount vested has been updated. This could indicate a change in funds available.",
                "The balance given is the amount which is left unvested (and thus locked)."
              ]
            },
            {
              "name": "VestingCompleted",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An \\[account\\] has become fully vested."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 48,
    "type": {
      "path": [
        "pallet_collator_selection",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewInvulnerables",
              "fields": [
                {
                  "name": "invulnerables",
                  "type": 49,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New Invulnerables were set."
              ]
            },
            {
              "name": "InvulnerableAdded",
              "fields": [
                {
                  "name": "account_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A new Invulnerable was added."
              ]
            },
            {
              "name": "InvulnerableRemoved",
              "fields": [
                {
                  "name": "account_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An Invulnerable was removed."
              ]
            },
            {
              "name": "NewDesiredCandidates",
              "fields": [
                {
                  "name": "desired_candidates",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "The number of desired candidates was set."
              ]
            },
            {
              "name": "NewCandidacyBond",
              "fields": [
                {
                  "name": "bond_amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The candidacy bond was set."
              ]
            },
            {
              "name": "CandidateAdded",
              "fields": [
                {
                  "name": "account_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A new candidate joined."
              ]
            },
            {
              "name": "CandidateBondUpdated",
              "fields": [
                {
                  "name": "account_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Bond of a candidate updated."
              ]
            },
            {
              "name": "CandidateRemoved",
              "fields": [
                {
                  "name": "account_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A candidate was removed."
              ]
            },
            {
              "name": "CandidateReplaced",
              "fields": [
                {
                  "name": "old",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "An account was replaced in the candidate list by another one."
              ]
            },
            {
              "name": "InvalidInvulnerableSkipped",
              "fields": [
                {
                  "name": "account_id",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "An account was unable to be added to the Invulnerables because they did not have keys",
                "registered. Other Invulnerables may have been set."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 49,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 0
        }
      },
      "docs": []
    }
  },
  {
    "id": 50,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewSession",
              "fields": [
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New session has happened. Note that the argument is the session index, not the",
                "block number as the type might suggest."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 51,
    "type": {
      "path": [
        "cumulus_pallet_xcmp_queue",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "XcmpMessageSent",
              "fields": [
                {
                  "name": "message_hash",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An HRMP message was sent to a sibling parachain."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 52,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Attempted",
              "fields": [
                {
                  "name": "outcome",
                  "type": 53,
                  "typeName": "xcm::latest::Outcome",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Execution of an XCM message was attempted."
              ]
            },
            {
              "name": "Sent",
              "fields": [
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "message",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A XCM message was sent."
              ]
            },
            {
              "name": "UnexpectedResponse",
              "fields": [
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Query response received which does not match a registered query. This may be because a",
                "matching query was never registered, it may be because it is a duplicate response, or",
                "because the query timed out."
              ]
            },
            {
              "name": "ResponseReady",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 79,
                  "typeName": "Response",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Query response has been received and is ready for taking with `take_response`. There is",
                "no registered notification call."
              ]
            },
            {
              "name": "Notified",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Query response has been received and query is removed. The registered notification has",
                "been dispatched and executed successfully."
              ]
            },
            {
              "name": "NotifyOverweight",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "actual_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_budgeted_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Query response has been received and query is removed. The registered notification",
                "could not be dispatched because the dispatch weight is greater than the maximum weight",
                "originally budgeted by this runtime for the query result."
              ]
            },
            {
              "name": "NotifyDispatchError",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Query response has been received and query is removed. There was a general error with",
                "dispatching the notification call."
              ]
            },
            {
              "name": "NotifyDecodeFailed",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Query response has been received and query is removed. The dispatch was unable to be",
                "decoded into a `Call`; this might be due to dispatch function having a signature which",
                "is not `(origin, QueryId, Response)`."
              ]
            },
            {
              "name": "InvalidResponder",
              "fields": [
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "expected_location",
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Expected query response has been received but the origin location of the response does",
                "not match that expected. The query remains registered for a later, valid, response to",
                "be received and acted upon."
              ]
            },
            {
              "name": "InvalidResponderVersion",
              "fields": [
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Expected query response has been received but the expected origin location placed in",
                "storage by this runtime previously cannot be decoded. The query remains registered.",
                "",
                "This is unexpected (since a location placed in storage in a previously executing",
                "runtime should be readable prior to query timeout) and dangerous since the possibly",
                "valid response will be dropped. Manual governance intervention is probably going to be",
                "needed."
              ]
            },
            {
              "name": "ResponseTaken",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Received query response has been read and removed."
              ]
            },
            {
              "name": "AssetsTrapped",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "VersionedAssets",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Some assets have been placed in an asset trap."
              ]
            },
            {
              "name": "VersionChangeNotified",
              "fields": [
                {
                  "name": "destination",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An XCM version change notification message has been attempted to be sent.",
                "",
                "The cost of sending it (borne by the chain) is included."
              ]
            },
            {
              "name": "SupportedVersionChanged",
              "fields": [
                {
                  "name": "location",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "version",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "The supported version of a location has been changed. This might be through an",
                "automatic notification or a manual intervention."
              ]
            },
            {
              "name": "NotifyTargetSendFail",
              "fields": [
                {
                  "name": "location",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 54,
                  "typeName": "XcmError",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "A given location which had a version change subscription was dropped owing to an error",
                "sending the notification to it."
              ]
            },
            {
              "name": "NotifyTargetMigrationFail",
              "fields": [
                {
                  "name": "location",
                  "type": 116,
                  "typeName": "VersionedLocation",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "A given location which had a version change subscription was dropped owing to an error",
                "migrating the location to our new XCM format."
              ]
            },
            {
              "name": "InvalidQuerierVersion",
              "fields": [
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Expected query response has been received but the expected querier location placed in",
                "storage by this runtime previously cannot be decoded. The query remains registered.",
                "",
                "This is unexpected (since a location placed in storage in a previously executing",
                "runtime should be readable prior to query timeout) and dangerous since the possibly",
                "valid response will be dropped. Manual governance intervention is probably going to be",
                "needed."
              ]
            },
            {
              "name": "InvalidQuerier",
              "fields": [
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "expected_querier",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "maybe_actual_querier",
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Expected query response has been received but the querier location of the response does",
                "not match the expected. The query remains registered for a later, valid, response to",
                "be received and acted upon."
              ]
            },
            {
              "name": "VersionNotifyStarted",
              "fields": [
                {
                  "name": "destination",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "A remote has requested XCM version change notification from us and we have honored it.",
                "A version information message is sent to them and its cost is included."
              ]
            },
            {
              "name": "VersionNotifyRequested",
              "fields": [
                {
                  "name": "destination",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "We have requested that a remote chain send us XCM version change notifications."
              ]
            },
            {
              "name": "VersionNotifyUnrequested",
              "fields": [
                {
                  "name": "destination",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "We have requested that a remote chain stops sending us XCM version change",
                "notifications."
              ]
            },
            {
              "name": "FeesPaid",
              "fields": [
                {
                  "name": "paying",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "fees",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Fees were paid from a location for an operation (often for using `SendXcm`)."
              ]
            },
            {
              "name": "AssetsClaimed",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "VersionedAssets",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Some assets have been claimed from an asset trap"
              ]
            },
            {
              "name": "VersionMigrationFinished",
              "fields": [
                {
                  "name": "version",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "A XCM version migration finished."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 53,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "traits",
        "Outcome"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Complete",
              "fields": [
                {
                  "name": "used",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Incomplete",
              "fields": [
                {
                  "name": "used",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 54,
                  "typeName": "Error",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Error",
              "fields": [
                {
                  "name": "error",
                  "type": 54,
                  "typeName": "Error",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 54,
    "type": {
      "path": [
        "xcm",
        "v3",
        "traits",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Overflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UntrustedReserveLocation",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UntrustedTeleportLocation",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "LocationFull",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "LocationNotInvertible",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "InvalidLocation",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "FailedToTransactAsset",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "NotWithdrawable",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "LocationCannotHold",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "ExceedsMaxMessageSize",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "DestinationUnsupported",
              "fields": [],
              "index": 13,
              "docs": []
            },
            {
              "name": "Transport",
              "fields": [],
              "index": 14,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 15,
              "docs": []
            },
            {
              "name": "UnknownClaim",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "FailedToDecode",
              "fields": [],
              "index": 17,
              "docs": []
            },
            {
              "name": "MaxWeightInvalid",
              "fields": [],
              "index": 18,
              "docs": []
            },
            {
              "name": "NotHoldingFees",
              "fields": [],
              "index": 19,
              "docs": []
            },
            {
              "name": "TooExpensive",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "ExpectationFalse",
              "fields": [],
              "index": 22,
              "docs": []
            },
            {
              "name": "PalletNotFound",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "NameMismatch",
              "fields": [],
              "index": 24,
              "docs": []
            },
            {
              "name": "VersionIncompatible",
              "fields": [],
              "index": 25,
              "docs": []
            },
            {
              "name": "HoldingWouldOverflow",
              "fields": [],
              "index": 26,
              "docs": []
            },
            {
              "name": "ExportError",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "ReanchorFailed",
              "fields": [],
              "index": 28,
              "docs": []
            },
            {
              "name": "NoDeal",
              "fields": [],
              "index": 29,
              "docs": []
            },
            {
              "name": "FeesNotMet",
              "fields": [],
              "index": 30,
              "docs": []
            },
            {
              "name": "LockError",
              "fields": [],
              "index": 31,
              "docs": []
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 32,
              "docs": []
            },
            {
              "name": "Unanchored",
              "fields": [],
              "index": 33,
              "docs": []
            },
            {
              "name": "NotDepositable",
              "fields": [],
              "index": 34,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 35,
              "docs": []
            },
            {
              "name": "WeightLimitReached",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Barrier",
              "fields": [],
              "index": 37,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 38,
              "docs": []
            },
            {
              "name": "ExceedsStackLimit",
              "fields": [],
              "index": 39,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 55,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "location",
        "Location"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parents",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "type": 56,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 56,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "junctions",
        "Junctions"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "name": null,
                  "type": 57,
                  "typeName": "Arc<[Junction; 1]>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "name": null,
                  "type": 61,
                  "typeName": "Arc<[Junction; 2]>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "name": null,
                  "type": 62,
                  "typeName": "Arc<[Junction; 3]>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "Arc<[Junction; 4]>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "name": null,
                  "type": 64,
                  "typeName": "Arc<[Junction; 5]>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "name": null,
                  "type": 65,
                  "typeName": "Arc<[Junction; 6]>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "name": null,
                  "type": 66,
                  "typeName": "Arc<[Junction; 7]>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": "Arc<[Junction; 8]>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 57,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 1,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 58,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "junction",
        "Junction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "type": 59,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "type": 59,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "type": 59,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 43,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "name": "length",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "type": 45,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "type": 46,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "GlobalConsensus",
              "fields": [
                {
                  "name": null,
                  "type": 60,
                  "typeName": "NetworkId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 59,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 60
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 60,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 60,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "junction",
        "NetworkId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ByGenesis",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ByFork",
              "fields": [
                {
                  "name": "block_number",
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "block_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Westend",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Rococo",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Wococo",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "name": "chain_id",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "BitcoinCore",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "BitcoinCash",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "PolkadotBulletin",
              "fields": [],
              "index": 10,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 61,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 62,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 63,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 64,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 5,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 65,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 6,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 66,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 7,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 67,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 58
        }
      },
      "docs": []
    }
  },
  {
    "id": 68,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 69,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 69,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 70,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 79,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 89,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 90,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 56,
                  "typeName": "InteriorLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 68,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 68,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 60,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 56,
                  "typeName": "InteriorLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 71,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "Assets"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 72,
              "typeName": "Vec<Asset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 72,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 73
        }
      },
      "docs": []
    }
  },
  {
    "id": 73,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "Asset"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 74,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "type": 75,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 74,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "AssetId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 55,
              "typeName": "Location",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 75,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "Fungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "name": null,
                  "type": 76,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 76,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "AssetInstance"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "name": null,
                  "type": 77,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "name": null,
                  "type": 78,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 77,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 78,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 16,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 79,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Response"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletsInfo",
              "fields": [
                {
                  "name": null,
                  "type": 82,
                  "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "DispatchResult",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 80,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 81
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 81,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 81,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          54
        ]
      },
      "docs": []
    }
  },
  {
    "id": 82,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 83
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 85,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 83,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "PalletInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "name",
              "type": 84,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "module_name",
              "type": 84,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "major",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "minor",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "patch",
              "type": 40,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 84,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 85,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 83
        }
      },
      "docs": []
    }
  },
  {
    "id": 86,
    "type": {
      "path": [
        "xcm",
        "v3",
        "MaybeErrorCode"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Success",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Error",
              "fields": [
                {
                  "name": null,
                  "type": 87,
                  "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "TruncatedError",
              "fields": [
                {
                  "name": null,
                  "type": 87,
                  "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 87,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 88,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 55
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 55,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 89,
    "type": {
      "path": [
        "xcm",
        "v3",
        "OriginKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Native",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SovereignAccount",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Superuser",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Xcm",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 90,
    "type": {
      "path": [
        "xcm",
        "double_encoded",
        "DoubleEncoded"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "encoded",
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 91,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "QueryResponseInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "destination",
              "type": 55,
              "typeName": "Location",
              "docs": []
            },
            {
              "name": "query_id",
              "type": 11,
              "typeName": "QueryId",
              "docs": []
            },
            {
              "name": "max_weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 92,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "AssetFilter"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Definite",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "name": null,
                  "type": 93,
                  "typeName": "WildAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 93,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "WildAsset"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "type": 74,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 94,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AllCounted",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AllOfCounted",
              "fields": [
                {
                  "name": "id",
                  "type": 74,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 94,
                  "typeName": "WildFungibility",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 94,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "WildFungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 95,
    "type": {
      "path": [
        "xcm",
        "v3",
        "WeightLimit"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unlimited",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Limited",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 96,
    "type": {
      "path": [
        "xcm",
        "VersionedAssets"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "v2::MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "v3::MultiAssets",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "v4::Assets",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 97,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAssets"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 98,
              "typeName": "Vec<MultiAsset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 98,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 99
        }
      },
      "docs": []
    }
  },
  {
    "id": 99,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAsset"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 100,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "type": 108,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 100,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "AssetId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Concrete",
              "fields": [
                {
                  "name": null,
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Abstract",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 101,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multilocation",
        "MultiLocation"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parents",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "type": 102,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 102,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multilocation",
        "Junctions"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 103,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 103,
    "type": {
      "path": [
        "xcm",
        "v2",
        "junction",
        "Junction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "type": 104,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "type": 104,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "type": 104,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 43,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "name": null,
                  "type": 105,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "type": 106,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "type": 107,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 104,
    "type": {
      "path": [
        "xcm",
        "v2",
        "NetworkId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Named",
              "fields": [
                {
                  "name": null,
                  "type": 105,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 105,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 106,
    "type": {
      "path": [
        "xcm",
        "v2",
        "BodyId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unit",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Named",
              "fields": [
                {
                  "name": null,
                  "type": 105,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Executive",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Technical",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Legislative",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Judicial",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Defense",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Administration",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 107,
    "type": {
      "path": [
        "xcm",
        "v2",
        "BodyPart"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Voice",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Members",
              "fields": [
                {
                  "name": "count",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Fraction",
              "fields": [
                {
                  "name": "nom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AtLeastProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "MoreThanProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 108,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "Fungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "name": null,
                  "type": 109,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 109,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "AssetInstance"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "name": null,
                  "type": 77,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "name": null,
                  "type": 78,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Blob",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 110,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAssets"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 111,
              "typeName": "Vec<MultiAsset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 111,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 112
        }
      },
      "docs": []
    }
  },
  {
    "id": 112,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAsset"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 113,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "type": 114,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 113,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "AssetId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Concrete",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Abstract",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 114,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "Fungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "name": null,
                  "type": 115,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 115,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "AssetInstance"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 44,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "name": null,
                  "type": 77,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "name": null,
                  "type": 78,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 116,
    "type": {
      "path": [
        "xcm",
        "VersionedLocation"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 101,
                  "typeName": "v2::MultiLocation",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": "v3::MultiLocation",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 55,
                  "typeName": "v4::Location",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 117,
    "type": {
      "path": [
        "cumulus_pallet_xcm",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidFormat",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Downward message is invalid XCM.",
                "\\[ id \\]"
              ]
            },
            {
              "name": "UnsupportedVersion",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Downward message is unsupported version of XCM.",
                "\\[ id \\]"
              ]
            },
            {
              "name": "ExecutedDownward",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 53,
                  "typeName": "Outcome",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Downward message executed with the given outcome.",
                "\\[ id, outcome \\]"
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 118,
    "type": {
      "path": [
        "pallet_message_queue",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ProcessingFailed",
              "fields": [
                {
                  "name": "id",
                  "type": 13,
                  "typeName": "H256",
                  "docs": [
                    "The `blake2_256` hash of the message."
                  ]
                },
                {
                  "name": "origin",
                  "type": 119,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the message."
                  ]
                },
                {
                  "name": "error",
                  "type": 121,
                  "typeName": "ProcessMessageError",
                  "docs": [
                    "The error that occurred.",
                    "",
                    "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                    "by the `MessageProcessor`."
                  ]
                }
              ],
              "index": 0,
              "docs": [
                "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
              ]
            },
            {
              "name": "Processed",
              "fields": [
                {
                  "name": "id",
                  "type": 13,
                  "typeName": "H256",
                  "docs": [
                    "The `blake2_256` hash of the message."
                  ]
                },
                {
                  "name": "origin",
                  "type": 119,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the message."
                  ]
                },
                {
                  "name": "weight_used",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": [
                    "How much weight was used to process the message."
                  ]
                },
                {
                  "name": "success",
                  "type": 8,
                  "typeName": "bool",
                  "docs": [
                    "Whether the message was processed.",
                    "",
                    "Note that this does not mean that the underlying `MessageProcessor` was internally",
                    "successful. It *solely* means that the MQ pallet will treat this as a success",
                    "condition and discard the message. Any internal error needs to be emitted as events",
                    "by the `MessageProcessor`."
                  ]
                }
              ],
              "index": 1,
              "docs": [
                "Message is processed."
              ]
            },
            {
              "name": "OverweightEnqueued",
              "fields": [
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": [
                    "The `blake2_256` hash of the message."
                  ]
                },
                {
                  "name": "origin",
                  "type": 119,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the message."
                  ]
                },
                {
                  "name": "page_index",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": [
                    "The page of the message."
                  ]
                },
                {
                  "name": "message_index",
                  "type": 4,
                  "typeName": "T::Size",
                  "docs": [
                    "The index of the message within the page."
                  ]
                }
              ],
              "index": 2,
              "docs": [
                "Message placed in overweight queue."
              ]
            },
            {
              "name": "PageReaped",
              "fields": [
                {
                  "name": "origin",
                  "type": 119,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the page."
                  ]
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": [
                    "The index of the page."
                  ]
                }
              ],
              "index": 3,
              "docs": [
                "This page was reaped."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 119,
    "type": {
      "path": [
        "cumulus_primitives_core",
        "AggregateMessageOrigin"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Parent",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Sibling",
              "fields": [
                {
                  "name": null,
                  "type": 120,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 120,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "Id"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 121,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "messages",
        "ProcessMessageError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BadFormat",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Corrupt",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Overweight",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Yield",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "StackLimitReached",
              "fields": [],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 122,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BatchInterrupted",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 26,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                "well as the error."
              ]
            },
            {
              "name": "BatchCompleted",
              "fields": [],
              "index": 1,
              "docs": [
                "Batch of dispatches completed fully with no error."
              ]
            },
            {
              "name": "BatchCompletedWithErrors",
              "fields": [],
              "index": 2,
              "docs": [
                "Batch of dispatches completed but has errors."
              ]
            },
            {
              "name": "ItemCompleted",
              "fields": [],
              "index": 3,
              "docs": [
                "A single item within a Batch of dispatches has completed with no error."
              ]
            },
            {
              "name": "ItemFailed",
              "fields": [
                {
                  "name": "error",
                  "type": 26,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A single item within a Batch of dispatches has completed with error."
              ]
            },
            {
              "name": "DispatchedAs",
              "fields": [
                {
                  "name": "result",
                  "type": 123,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A call was dispatched."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 123,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 124
        },
        {
          "name": "E",
          "type": 26
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 124,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 26,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 124,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": []
      },
      "docs": []
    }
  },
  {
    "id": 125,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewMultisig",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new multisig operation has begun."
              ]
            },
            {
              "name": "MultisigApproval",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 126,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A multisig operation has been approved by someone."
              ]
            },
            {
              "name": "MultisigExecuted",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 126,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 123,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A multisig operation has been executed."
              ]
            },
            {
              "name": "MultisigCancelled",
              "fields": [
                {
                  "name": "cancelling",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 126,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A multisig operation has been cancelled."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 126,
    "type": {
      "path": [
        "pallet_multisig",
        "Timepoint"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "index",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 127,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ProxyExecuted",
              "fields": [
                {
                  "name": "result",
                  "type": 123,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A proxy was executed correctly, with the given."
              ]
            },
            {
              "name": "PureCreated",
              "fields": [
                {
                  "name": "pure",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 128,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "disambiguation_index",
                  "type": 129,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A pure account has been created by new proxy with given",
                "disambiguation index and proxy type."
              ]
            },
            {
              "name": "Announced",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An announcement was placed to make a call in the future."
              ]
            },
            {
              "name": "ProxyAdded",
              "fields": [
                {
                  "name": "delegator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegatee",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 128,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A proxy was added."
              ]
            },
            {
              "name": "ProxyRemoved",
              "fields": [
                {
                  "name": "delegator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegatee",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 128,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A proxy was removed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 128,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "ProxyType"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonTransfer",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "CancelProxy",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "AssetOwner",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "AssetManager",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Collator",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 129,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U16"
      },
      "docs": []
    }
  },
  {
    "id": 130,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Some asset class was created."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some assets were issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some assets were transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Some assets were destroyed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some account `who` was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some account `who` was thawed."
              ]
            },
            {
              "name": "AssetFrozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some asset `asset_id` was frozen."
              ]
            },
            {
              "name": "AssetThawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some asset `asset_id` was thawed."
              ]
            },
            {
              "name": "AccountsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "accounts_destroyed",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "accounts_remaining",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Accounts were destroyed for given asset."
              ]
            },
            {
              "name": "ApprovalsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "approvals_destroyed",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "approvals_remaining",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Approvals were destroyed for given asset."
              ]
            },
            {
              "name": "DestructionStarted",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An asset class is in the process of being destroyed."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "An asset class was destroyed."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Some asset class was force-created."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "New metadata has been set for an asset."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Metadata has been cleared for an asset."
              ]
            },
            {
              "name": "ApprovedTransfer",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "(Additional) funds have been approved for transfer to a destination account."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "An approval for account `delegate` was cancelled by `owner`."
              ]
            },
            {
              "name": "TransferredApproved",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "An `amount` was transferred in its entirety from `owner` to `destination` by",
                "the approved `delegate`."
              ]
            },
            {
              "name": "AssetStatusChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "An asset has had its attributes changed by the `Force` origin."
              ]
            },
            {
              "name": "AssetMinBalanceChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "new_min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "The min_balance of an asset has been updated by the asset owner."
              ]
            },
            {
              "name": "Touched",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Some account `who` was created with a deposit from `depositor`."
              ]
            },
            {
              "name": "Blocked",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Some account `who` was blocked."
              ]
            },
            {
              "name": "Deposited",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Some assets were deposited (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Some assets were withdrawn from the account (e.g. for transaction fees)."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 131,
    "type": {
      "path": [
        "pallet_uniques",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A `collection` was created."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A `collection` was force-created."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A `collection` was destroyed."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An `item` was issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An `item` was transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An `item` was destroyed."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some `item` was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some `item` was thawed."
              ]
            },
            {
              "name": "CollectionFrozen",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some `collection` was frozen."
              ]
            },
            {
              "name": "CollectionThawed",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some `collection` was thawed."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "new_owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "ApprovedTransfer",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An `item` of a `collection` has been approved by the `owner` for transfer by",
                "a `delegate`."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "An approval for a `delegate` account to transfer the `item` of an item",
                "`collection` was cancelled by its `owner`."
              ]
            },
            {
              "name": "ItemStatusChanged",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "A `collection` has had its attributes changed by the `Force` origin."
              ]
            },
            {
              "name": "CollectionMetadataSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 132,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "New metadata has been set for a `collection`."
              ]
            },
            {
              "name": "CollectionMetadataCleared",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Metadata has been cleared for a `collection`."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 132,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "New metadata has been set for an item."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Metadata has been cleared for an item."
              ]
            },
            {
              "name": "Redeposited",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "successful_items",
                  "type": 133,
                  "typeName": "Vec<T::ItemId>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Metadata has been cleared for an item."
              ]
            },
            {
              "name": "AttributeSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 135,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 136,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "New attribute metadata has been set for a `collection` or `item`."
              ]
            },
            {
              "name": "AttributeCleared",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 135,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Attribute metadata has been cleared for a `collection` or `item`."
              ]
            },
            {
              "name": "OwnershipAcceptanceChanged",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "maybe_collection",
                  "type": 134,
                  "typeName": "Option<T::CollectionId>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Ownership acceptance has changed for an account."
              ]
            },
            {
              "name": "CollectionMaxSupplySet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "max_supply",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Max supply has been set for a collection."
              ]
            },
            {
              "name": "ItemPriceSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 6,
                  "typeName": "ItemPrice<T, I>",
                  "docs": []
                },
                {
                  "name": "whitelisted_buyer",
                  "type": 137,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "The price was set for the instance."
              ]
            },
            {
              "name": "ItemPriceRemoved",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "The price for the instance was removed."
              ]
            },
            {
              "name": "ItemBought",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 6,
                  "typeName": "ItemPrice<T, I>",
                  "docs": []
                },
                {
                  "name": "seller",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "buyer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "An item was bought."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 132,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 133,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 134,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 135,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 136,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 137,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 138,
    "type": {
      "path": [
        "pallet_nfts",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A `collection` was created."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A `collection` was force-created."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A `collection` was destroyed."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An `item` was issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An `item` was transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An `item` was destroyed."
              ]
            },
            {
              "name": "ItemTransferLocked",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An `item` became non-transferable."
              ]
            },
            {
              "name": "ItemTransferUnlocked",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "An `item` became transferable."
              ]
            },
            {
              "name": "ItemPropertiesLocked",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "lock_metadata",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "lock_attributes",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "`item` metadata or attributes were locked."
              ]
            },
            {
              "name": "CollectionLocked",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some `collection` was locked."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "new_owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 137,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 137,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 137,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "TransferApproved",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deadline",
                  "type": 134,
                  "typeName": "Option<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An `item` of a `collection` has been approved by the `owner` for transfer by",
                "a `delegate`."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "An approval for a `delegate` account to transfer the `item` of an item",
                "`collection` was cancelled by its `owner`."
              ]
            },
            {
              "name": "AllApprovalsCancelled",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "All approvals of an item got cancelled."
              ]
            },
            {
              "name": "CollectionConfigChanged",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "A `collection` has had its config changed by the `Force` origin."
              ]
            },
            {
              "name": "CollectionMetadataSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "New metadata has been set for a `collection`."
              ]
            },
            {
              "name": "CollectionMetadataCleared",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Metadata has been cleared for a `collection`."
              ]
            },
            {
              "name": "ItemMetadataSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "New metadata has been set for an item."
              ]
            },
            {
              "name": "ItemMetadataCleared",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Metadata has been cleared for an item."
              ]
            },
            {
              "name": "Redeposited",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "successful_items",
                  "type": 133,
                  "typeName": "Vec<T::ItemId>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "The deposit for a set of `item`s within a `collection` has been updated."
              ]
            },
            {
              "name": "AttributeSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 136,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                },
                {
                  "name": "namespace",
                  "type": 140,
                  "typeName": "AttributeNamespace<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "New attribute metadata has been set for a `collection` or `item`."
              ]
            },
            {
              "name": "AttributeCleared",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 136,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "namespace",
                  "type": 140,
                  "typeName": "AttributeNamespace<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Attribute metadata has been cleared for a `collection` or `item`."
              ]
            },
            {
              "name": "ItemAttributesApprovalAdded",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "A new approval to modify item attributes was added."
              ]
            },
            {
              "name": "ItemAttributesApprovalRemoved",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "A new approval to modify item attributes was removed."
              ]
            },
            {
              "name": "OwnershipAcceptanceChanged",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "maybe_collection",
                  "type": 134,
                  "typeName": "Option<T::CollectionId>",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Ownership acceptance has changed for an account."
              ]
            },
            {
              "name": "CollectionMaxSupplySet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "max_supply",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "Max supply has been set for a collection."
              ]
            },
            {
              "name": "CollectionMintSettingsUpdated",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Mint settings for a collection had changed."
              ]
            },
            {
              "name": "NextCollectionIdIncremented",
              "fields": [
                {
                  "name": "next_id",
                  "type": 134,
                  "typeName": "Option<T::CollectionId>",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Event gets emitted when the `NextCollectionId` gets incremented."
              ]
            },
            {
              "name": "ItemPriceSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 6,
                  "typeName": "ItemPrice<T, I>",
                  "docs": []
                },
                {
                  "name": "whitelisted_buyer",
                  "type": 137,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "The price was set for the item."
              ]
            },
            {
              "name": "ItemPriceRemoved",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": [
                "The price for the item was removed."
              ]
            },
            {
              "name": "ItemBought",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 6,
                  "typeName": "ItemPrice<T, I>",
                  "docs": []
                },
                {
                  "name": "seller",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "buyer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": [
                "An item was bought."
              ]
            },
            {
              "name": "TipSent",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "receiver",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "DepositBalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": [
                "A tip was sent."
              ]
            },
            {
              "name": "SwapCreated",
              "fields": [
                {
                  "name": "offered_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "offered_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "desired_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "desired_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 141,
                  "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                  "docs": []
                },
                {
                  "name": "deadline",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": [
                "An `item` swap intent was created."
              ]
            },
            {
              "name": "SwapCancelled",
              "fields": [
                {
                  "name": "offered_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "offered_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "desired_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "desired_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 141,
                  "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                  "docs": []
                },
                {
                  "name": "deadline",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": [
                "The swap was cancelled."
              ]
            },
            {
              "name": "SwapClaimed",
              "fields": [
                {
                  "name": "sent_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "sent_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "sent_item_owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "received_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "received_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "received_item_owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 141,
                  "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                  "docs": []
                },
                {
                  "name": "deadline",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": [
                "The swap has been claimed."
              ]
            },
            {
              "name": "PreSignedAttributesSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "namespace",
                  "type": 140,
                  "typeName": "AttributeNamespace<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": [
                "New attributes have been set for an `item` of the `collection`."
              ]
            },
            {
              "name": "PalletAttributeSet",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "attribute",
                  "type": 144,
                  "typeName": "PalletAttributes<T::CollectionId>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": [
                "A new attribute in the `Pallet` namespace was set for the `collection` or an `item`",
                "within that `collection`."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 139,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 140,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "AttributeNamespace"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Pallet",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CollectionOwner",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "ItemOwner",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Account",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 141,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 142
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 142,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 142,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "PriceWithDirection"
      ],
      "params": [
        {
          "name": "Amount",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "amount",
              "type": 6,
              "typeName": "Amount",
              "docs": []
            },
            {
              "name": "direction",
              "type": 143,
              "typeName": "PriceDirection",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 143,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "PriceDirection"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Send",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Receive",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 144,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "PalletAttributes"
      ],
      "params": [
        {
          "name": "CollectionId",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "UsedToClaim",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "CollectionId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "TransferDisabled",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 145,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Some asset class was created."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some assets were issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some assets were transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Some assets were destroyed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some account `who` was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some account `who` was thawed."
              ]
            },
            {
              "name": "AssetFrozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some asset `asset_id` was frozen."
              ]
            },
            {
              "name": "AssetThawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some asset `asset_id` was thawed."
              ]
            },
            {
              "name": "AccountsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "accounts_destroyed",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "accounts_remaining",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Accounts were destroyed for given asset."
              ]
            },
            {
              "name": "ApprovalsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "approvals_destroyed",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "approvals_remaining",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Approvals were destroyed for given asset."
              ]
            },
            {
              "name": "DestructionStarted",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An asset class is in the process of being destroyed."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "An asset class was destroyed."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Some asset class was force-created."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "New metadata has been set for an asset."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Metadata has been cleared for an asset."
              ]
            },
            {
              "name": "ApprovedTransfer",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "(Additional) funds have been approved for transfer to a destination account."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "An approval for account `delegate` was cancelled by `owner`."
              ]
            },
            {
              "name": "TransferredApproved",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "An `amount` was transferred in its entirety from `owner` to `destination` by",
                "the approved `delegate`."
              ]
            },
            {
              "name": "AssetStatusChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "An asset has had its attributes changed by the `Force` origin."
              ]
            },
            {
              "name": "AssetMinBalanceChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "new_min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "The min_balance of an asset has been updated by the asset owner."
              ]
            },
            {
              "name": "Touched",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Some account `who` was created with a deposit from `depositor`."
              ]
            },
            {
              "name": "Blocked",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Some account `who` was blocked."
              ]
            },
            {
              "name": "Deposited",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Some assets were deposited (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 37,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Some assets were withdrawn from the account (e.g. for transaction fees)."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 146,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Some asset class was created."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some assets were issued."
              ]
            },
            {
              "name": "Transferred",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some assets were transferred."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Some assets were destroyed."
              ]
            },
            {
              "name": "TeamChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "The management team changed."
              ]
            },
            {
              "name": "OwnerChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The owner changed."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some account `who` was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some account `who` was thawed."
              ]
            },
            {
              "name": "AssetFrozen",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some asset `asset_id` was frozen."
              ]
            },
            {
              "name": "AssetThawed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some asset `asset_id` was thawed."
              ]
            },
            {
              "name": "AccountsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "accounts_destroyed",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "accounts_remaining",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Accounts were destroyed for given asset."
              ]
            },
            {
              "name": "ApprovalsDestroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "approvals_destroyed",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "approvals_remaining",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Approvals were destroyed for given asset."
              ]
            },
            {
              "name": "DestructionStarted",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An asset class is in the process of being destroyed."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "An asset class was destroyed."
              ]
            },
            {
              "name": "ForceCreated",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Some asset class was force-created."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "New metadata has been set for an asset."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Metadata has been cleared for an asset."
              ]
            },
            {
              "name": "ApprovedTransfer",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "(Additional) funds have been approved for transfer to a destination account."
              ]
            },
            {
              "name": "ApprovalCancelled",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "An approval for account `delegate` was cancelled by `owner`."
              ]
            },
            {
              "name": "TransferredApproved",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "An `amount` was transferred in its entirety from `owner` to `destination` by",
                "the approved `delegate`."
              ]
            },
            {
              "name": "AssetStatusChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "An asset has had its attributes changed by the `Force` origin."
              ]
            },
            {
              "name": "AssetMinBalanceChanged",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "new_min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "The min_balance of an asset has been updated by the asset owner."
              ]
            },
            {
              "name": "Touched",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Some account `who` was created with a deposit from `depositor`."
              ]
            },
            {
              "name": "Blocked",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Some account `who` was blocked."
              ]
            },
            {
              "name": "Deposited",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Some assets were deposited (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "name": "asset_id",
                  "type": 4,
                  "typeName": "T::AssetId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Some assets were withdrawn from the account (e.g. for transaction fees)."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 147,
    "type": {
      "path": [
        "pallet_asset_conversion",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PoolCreated",
              "fields": [
                {
                  "name": "creator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that created the pool."
                  ]
                },
                {
                  "name": "pool_id",
                  "type": 148,
                  "typeName": "T::PoolId",
                  "docs": [
                    "The pool id associated with the pool. Note that the order of the assets may not be",
                    "the same as the order specified in the create pool extrinsic."
                  ]
                },
                {
                  "name": "pool_account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account ID of the pool."
                  ]
                },
                {
                  "name": "lp_token",
                  "type": 4,
                  "typeName": "T::PoolAssetId",
                  "docs": [
                    "The id of the liquidity tokens that will be minted when assets are added to this",
                    "pool."
                  ]
                }
              ],
              "index": 0,
              "docs": [
                "A successful call of the `CreatePool` extrinsic will create this event."
              ]
            },
            {
              "name": "LiquidityAdded",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that the liquidity was taken from."
                  ]
                },
                {
                  "name": "mint_to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that the liquidity tokens were minted to."
                  ]
                },
                {
                  "name": "pool_id",
                  "type": 148,
                  "typeName": "T::PoolId",
                  "docs": [
                    "The pool id of the pool that the liquidity was added to."
                  ]
                },
                {
                  "name": "amount1_provided",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the first asset that was added to the pool."
                  ]
                },
                {
                  "name": "amount2_provided",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the second asset that was added to the pool."
                  ]
                },
                {
                  "name": "lp_token",
                  "type": 4,
                  "typeName": "T::PoolAssetId",
                  "docs": [
                    "The id of the lp token that was minted."
                  ]
                },
                {
                  "name": "lp_token_minted",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of lp tokens that were minted of that id."
                  ]
                }
              ],
              "index": 1,
              "docs": [
                "A successful call of the `AddLiquidity` extrinsic will create this event."
              ]
            },
            {
              "name": "LiquidityRemoved",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that the liquidity tokens were burned from."
                  ]
                },
                {
                  "name": "withdraw_to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that the assets were transferred to."
                  ]
                },
                {
                  "name": "pool_id",
                  "type": 148,
                  "typeName": "T::PoolId",
                  "docs": [
                    "The pool id that the liquidity was removed from."
                  ]
                },
                {
                  "name": "amount1",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the first asset that was removed from the pool."
                  ]
                },
                {
                  "name": "amount2",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the second asset that was removed from the pool."
                  ]
                },
                {
                  "name": "lp_token",
                  "type": 4,
                  "typeName": "T::PoolAssetId",
                  "docs": [
                    "The id of the lp token that was burned."
                  ]
                },
                {
                  "name": "lp_token_burned",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of lp tokens that were burned of that id."
                  ]
                },
                {
                  "name": "withdrawal_fee",
                  "type": 149,
                  "typeName": "Permill",
                  "docs": [
                    "Liquidity withdrawal fee (%)."
                  ]
                }
              ],
              "index": 2,
              "docs": [
                "A successful call of the `RemoveLiquidity` extrinsic will create this event."
              ]
            },
            {
              "name": "SwapExecuted",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "Which account was the instigator of the swap."
                  ]
                },
                {
                  "name": "send_to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account that the assets were transferred to."
                  ]
                },
                {
                  "name": "amount_in",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the first asset that was swapped."
                  ]
                },
                {
                  "name": "amount_out",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the second asset that was received."
                  ]
                },
                {
                  "name": "path",
                  "type": 150,
                  "typeName": "BalancePath<T>",
                  "docs": [
                    "The route of asset IDs with amounts that the swap went through.",
                    "E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)"
                  ]
                }
              ],
              "index": 3,
              "docs": [
                "Assets have been converted from one to another. Both `SwapExactTokenForToken`",
                "and `SwapTokenForExactToken` will generate this event."
              ]
            },
            {
              "name": "SwapCreditExecuted",
              "fields": [
                {
                  "name": "amount_in",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the first asset that was swapped."
                  ]
                },
                {
                  "name": "amount_out",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": [
                    "The amount of the second asset that was received."
                  ]
                },
                {
                  "name": "path",
                  "type": 150,
                  "typeName": "BalancePath<T>",
                  "docs": [
                    "The route of asset IDs with amounts that the swap went through.",
                    "E.g. (A, amount_in) -> (Dot, amount_out) -> (B, amount_out)"
                  ]
                }
              ],
              "index": 4,
              "docs": [
                "Assets have been converted from one to another."
              ]
            },
            {
              "name": "Touched",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 148,
                  "typeName": "T::PoolId",
                  "docs": [
                    "The ID of the pool."
                  ]
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account initiating the touch."
                  ]
                }
              ],
              "index": 5,
              "docs": [
                "Pool has been touched in order to fulfill operational requirements."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 148,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          37,
          37
        ]
      },
      "docs": []
    }
  },
  {
    "id": 149,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Permill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 150,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 151
        }
      },
      "docs": []
    }
  },
  {
    "id": 151,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          37,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 152,
    "type": {
      "path": [
        "frame_system",
        "Phase"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ApplyExtrinsic",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finalization",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Initialization",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 153,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 13
        }
      },
      "docs": []
    }
  },
  {
    "id": 154,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 155
        }
      },
      "docs": []
    }
  },
  {
    "id": 155,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 156,
    "type": {
      "path": [
        "frame_system",
        "LastRuntimeUpgradeInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_version",
              "type": 40,
              "typeName": "codec::Compact<u32>",
              "docs": []
            },
            {
              "name": "spec_name",
              "type": 157,
              "typeName": "sp_runtime::RuntimeString",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 157,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Str"
      },
      "docs": []
    }
  },
  {
    "id": 158,
    "type": {
      "path": [
        "frame_system",
        "CodeUpgradeAuthorization"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "code_hash",
              "type": 13,
              "typeName": "T::Hash",
              "docs": []
            },
            {
              "name": "check_version",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 159,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "remark",
              "fields": [
                {
                  "name": "remark",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Make some on-chain remark.",
                "",
                "Can be executed by every `origin`."
              ]
            },
            {
              "name": "set_heap_pages",
              "fields": [
                {
                  "name": "pages",
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the number of pages in the WebAssembly environment's heap."
              ]
            },
            {
              "name": "set_code",
              "fields": [
                {
                  "name": "code",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the new runtime code."
              ]
            },
            {
              "name": "set_code_without_checks",
              "fields": [
                {
                  "name": "code",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set the new runtime code without doing any checks of the given `code`.",
                "",
                "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                "version!"
              ]
            },
            {
              "name": "set_storage",
              "fields": [
                {
                  "name": "items",
                  "type": 160,
                  "typeName": "Vec<KeyValue>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Set some items of storage."
              ]
            },
            {
              "name": "kill_storage",
              "fields": [
                {
                  "name": "keys",
                  "type": 162,
                  "typeName": "Vec<Key>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Kill some items from storage."
              ]
            },
            {
              "name": "kill_prefix",
              "fields": [
                {
                  "name": "prefix",
                  "type": 14,
                  "typeName": "Key",
                  "docs": []
                },
                {
                  "name": "subkeys",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Kill all storage items with a key that starts with the given prefix.",
                "",
                "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                "the prefix we are removing to accurately calculate the weight of this function."
              ]
            },
            {
              "name": "remark_with_event",
              "fields": [
                {
                  "name": "remark",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Make some on-chain remark and emit event."
              ]
            },
            {
              "name": "authorize_upgrade",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                "later.",
                "",
                "This call requires Root origin."
              ]
            },
            {
              "name": "authorize_upgrade_without_checks",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                "later.",
                "",
                "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                "example that the spec name remains the same and that the version number increases. Not",
                "recommended for normal use. Use `authorize_upgrade` instead.",
                "",
                "This call requires Root origin."
              ]
            },
            {
              "name": "apply_authorized_upgrade",
              "fields": [
                {
                  "name": "code",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                "",
                "If the authorization required a version check, this call will ensure the spec name",
                "remains unchanged and that the spec version has increased.",
                "",
                "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                "the new `code` in the same block or attempt to schedule the upgrade.",
                "",
                "All origins are allowed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 160,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 161
        }
      },
      "docs": []
    }
  },
  {
    "id": 161,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          14,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 162,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 14
        }
      },
      "docs": []
    }
  },
  {
    "id": 163,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockWeights"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_block",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_block",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "per_class",
              "type": 164,
              "typeName": "PerDispatchClass<WeightsPerClass>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 164,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 165
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 165,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 165,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 165,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 165,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "WeightsPerClass"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_extrinsic",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_extrinsic",
              "type": 166,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "max_total",
              "type": 166,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 166,
              "typeName": "Option<Weight>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 166,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 167,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockLength"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max",
              "type": 168,
              "typeName": "PerDispatchClass<u32>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 168,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 4,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 169,
    "type": {
      "path": [
        "sp_weights",
        "RuntimeDbWeight"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "read",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "write",
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 170,
    "type": {
      "path": [
        "sp_version",
        "RuntimeVersion"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_name",
              "type": 157,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "impl_name",
              "type": 157,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "authoring_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "spec_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "impl_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "apis",
              "type": 171,
              "typeName": "ApisVec",
              "docs": []
            },
            {
              "name": "transaction_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "state_version",
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 171,
    "type": {
      "path": [
        "Cow"
      ],
      "params": [
        {
          "name": "T",
          "type": 172
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 172,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 172,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 173
        }
      },
      "docs": []
    }
  },
  {
    "id": 173,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          77,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 174,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidSpecName",
              "fields": [],
              "index": 0,
              "docs": [
                "The name of specification does not match between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "fields": [],
              "index": 1,
              "docs": [
                "The specification version is not allowed to decrease between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to extract the runtime version from the new runtime.",
                "",
                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "fields": [],
              "index": 3,
              "docs": [
                "Suicide called when the account has non-default composite data."
              ]
            },
            {
              "name": "NonZeroRefCount",
              "fields": [],
              "index": 4,
              "docs": [
                "There is a non-zero reference count preventing the account from being purged."
              ]
            },
            {
              "name": "CallFiltered",
              "fields": [],
              "index": 5,
              "docs": [
                "The origin filter prevent the call to be dispatched."
              ]
            },
            {
              "name": "MultiBlockMigrationsOngoing",
              "fields": [],
              "index": 6,
              "docs": [
                "A multi-block migration is ongoing and prevents the current code from being replaced."
              ]
            },
            {
              "name": "NothingAuthorized",
              "fields": [],
              "index": 7,
              "docs": [
                "No upgrade authorized."
              ]
            },
            {
              "name": "Unauthorized",
              "fields": [],
              "index": 8,
              "docs": [
                "The submitted code is not authorized."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the System pallet"
      ]
    }
  },
  {
    "id": 175,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 176
        }
      },
      "docs": []
    }
  },
  {
    "id": 176,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "unincluded_segment",
        "Ancestor"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "used_bandwidth",
              "type": 177,
              "typeName": "UsedBandwidth",
              "docs": []
            },
            {
              "name": "para_head_hash",
              "type": 182,
              "typeName": "Option<H>",
              "docs": []
            },
            {
              "name": "consumed_go_ahead_signal",
              "type": 183,
              "typeName": "Option<relay_chain::UpgradeGoAhead>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 177,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "unincluded_segment",
        "UsedBandwidth"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ump_msg_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "ump_total_bytes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_outgoing",
              "type": 178,
              "typeName": "BTreeMap<ParaId, HrmpChannelUpdate>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 178,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 120
        },
        {
          "name": "V",
          "type": 179
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 180,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 179,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "unincluded_segment",
        "HrmpChannelUpdate"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "msg_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "total_bytes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 180,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 181
        }
      },
      "docs": []
    }
  },
  {
    "id": 181,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          120,
          179
        ]
      },
      "docs": []
    }
  },
  {
    "id": 182,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 13
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 13,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 183,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 184
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 184,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 184,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "UpgradeGoAhead"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Abort",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "GoAhead",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 185,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "unincluded_segment",
        "SegmentTracker"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "used_bandwidth",
              "type": 177,
              "typeName": "UsedBandwidth",
              "docs": []
            },
            {
              "name": "hrmp_watermark",
              "type": 134,
              "typeName": "Option<relay_chain::BlockNumber>",
              "docs": []
            },
            {
              "name": "consumed_go_ahead_signal",
              "type": 183,
              "typeName": "Option<relay_chain::UpgradeGoAhead>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 186,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "PersistedValidationData"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_head",
              "type": 187,
              "typeName": "HeadData",
              "docs": []
            },
            {
              "name": "relay_parent_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "relay_parent_storage_root",
              "type": 13,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "max_pov_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 187,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "HeadData"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 188,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 189
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 189,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 189,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "UpgradeRestriction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Present",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 190,
    "type": {
      "path": [
        "sp_trie",
        "storage_proof",
        "StorageProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "trie_nodes",
              "type": 191,
              "typeName": "BTreeSet<Vec<u8>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 191,
    "type": {
      "path": [
        "BTreeSet"
      ],
      "params": [
        {
          "name": "T",
          "type": 14
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 162,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 192,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "relay_state_snapshot",
        "MessagingStateSnapshot"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "dmq_mqc_head",
              "type": 13,
              "typeName": "relay_chain::Hash",
              "docs": []
            },
            {
              "name": "relay_dispatch_queue_remaining_capacity",
              "type": 193,
              "typeName": "RelayDispatchQueueRemainingCapacity",
              "docs": []
            },
            {
              "name": "ingress_channels",
              "type": 194,
              "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
              "docs": []
            },
            {
              "name": "egress_channels",
              "type": 194,
              "typeName": "Vec<(ParaId, AbridgedHrmpChannel)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 193,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "relay_state_snapshot",
        "RelayDispatchQueueRemainingCapacity"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "remaining_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "remaining_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 194,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 195
        }
      },
      "docs": []
    }
  },
  {
    "id": 195,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          120,
          196
        ]
      },
      "docs": []
    }
  },
  {
    "id": 196,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "AbridgedHrmpChannel"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_capacity",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_total_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_message_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "msg_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "total_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "mqc_head",
              "type": 182,
              "typeName": "Option<Hash>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 197,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "AbridgedHostConfiguration"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_code_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_head_data_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_queue_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_queue_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_message_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_message_num_per_candidate",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_max_message_num_per_candidate",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "validation_upgrade_cooldown",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "validation_upgrade_delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "async_backing_params",
              "type": 198,
              "typeName": "AsyncBackingParams",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 198,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "async_backing",
        "AsyncBackingParams"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_candidate_depth",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "allowed_ancestry_len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 199,
    "type": {
      "path": [
        "cumulus_primitives_parachain_inherent",
        "MessageQueueChain"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 13,
              "typeName": "RelayHash",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 200,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 120
        },
        {
          "name": "V",
          "type": 199
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 201,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 201,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 202
        }
      },
      "docs": []
    }
  },
  {
    "id": 202,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          120,
          199
        ]
      },
      "docs": []
    }
  },
  {
    "id": 203,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 204
        }
      },
      "docs": []
    }
  },
  {
    "id": 204,
    "type": {
      "path": [
        "polkadot_core_primitives",
        "OutboundHrmpMessage"
      ],
      "params": [
        {
          "name": "Id",
          "type": 120
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "recipient",
              "type": 120,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "data",
              "type": 14,
              "typeName": "sp_std::vec::Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 205,
    "type": {
      "path": [
        "sp_arithmetic",
        "fixed_point",
        "FixedU128"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 206,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_validation_data",
              "fields": [
                {
                  "name": "data",
                  "type": 207,
                  "typeName": "ParachainInherentData",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current validation data.",
                "",
                "This should be invoked exactly once per block. It will panic at the finalization",
                "phase if the call was not invoked.",
                "",
                "The dispatch origin for this call must be `Inherent`",
                "",
                "As a side effect, this function upgrades the current validation function",
                "if the appropriate time has come."
              ]
            },
            {
              "name": "sudo_send_upward_message",
              "fields": [
                {
                  "name": "message",
                  "type": 14,
                  "typeName": "UpwardMessage",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "authorize_upgrade",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "check_version",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                "later.",
                "",
                "The `check_version` parameter sets a boolean flag for whether or not the runtime's spec",
                "version and name should be verified on upgrade. Since the authorization only has a hash,",
                "it cannot actually perform the verification.",
                "",
                "This call requires Root origin."
              ]
            },
            {
              "name": "enact_authorized_upgrade",
              "fields": [
                {
                  "name": "code",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                "",
                "If the authorization required a version check, this call will ensure the spec name",
                "remains unchanged and that the spec version has increased.",
                "",
                "Note that this function will not apply the new `code`, but only attempt to schedule the",
                "upgrade with the Relay Chain.",
                "",
                "All origins are allowed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 207,
    "type": {
      "path": [
        "cumulus_primitives_parachain_inherent",
        "ParachainInherentData"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "validation_data",
              "type": 186,
              "typeName": "PersistedValidationData",
              "docs": []
            },
            {
              "name": "relay_chain_state",
              "type": 190,
              "typeName": "sp_trie::StorageProof",
              "docs": []
            },
            {
              "name": "downward_messages",
              "type": 208,
              "typeName": "Vec<InboundDownwardMessage>",
              "docs": []
            },
            {
              "name": "horizontal_messages",
              "type": 210,
              "typeName": "BTreeMap<ParaId, Vec<InboundHrmpMessage>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 208,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 209
        }
      },
      "docs": []
    }
  },
  {
    "id": 209,
    "type": {
      "path": [
        "polkadot_core_primitives",
        "InboundDownwardMessage"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "sent_at",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "msg",
              "type": 14,
              "typeName": "DownwardMessage",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 210,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 120
        },
        {
          "name": "V",
          "type": 211
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 213,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 211,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 212
        }
      },
      "docs": []
    }
  },
  {
    "id": 212,
    "type": {
      "path": [
        "polkadot_core_primitives",
        "InboundHrmpMessage"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "sent_at",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "data",
              "type": 14,
              "typeName": "sp_std::vec::Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 213,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 214
        }
      },
      "docs": []
    }
  },
  {
    "id": 214,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          120,
          211
        ]
      },
      "docs": []
    }
  },
  {
    "id": 215,
    "type": {
      "path": [
        "cumulus_pallet_parachain_system",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "OverlappingUpgrades",
              "fields": [],
              "index": 0,
              "docs": [
                "Attempt to upgrade validation function while existing upgrade pending."
              ]
            },
            {
              "name": "ProhibitedByPolkadot",
              "fields": [],
              "index": 1,
              "docs": [
                "Polkadot currently prohibits this parachain from upgrading its validation function."
              ]
            },
            {
              "name": "TooBig",
              "fields": [],
              "index": 2,
              "docs": [
                "The supplied validation function has compiled into a blob larger than Polkadot is",
                "willing to run."
              ]
            },
            {
              "name": "ValidationDataNotAvailable",
              "fields": [],
              "index": 3,
              "docs": [
                "The inherent which supplies the validation data did not run this block."
              ]
            },
            {
              "name": "HostConfigurationNotAvailable",
              "fields": [],
              "index": 4,
              "docs": [
                "The inherent which supplies the host configuration did not run this block."
              ]
            },
            {
              "name": "NotScheduled",
              "fields": [],
              "index": 5,
              "docs": [
                "No validation function upgrade is currently scheduled."
              ]
            },
            {
              "name": "NothingAuthorized",
              "fields": [],
              "index": 6,
              "docs": [
                "No code upgrade has been authorized."
              ]
            },
            {
              "name": "Unauthorized",
              "fields": [],
              "index": 7,
              "docs": [
                "The given code upgrade has not been authorized."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 216,
    "type": {
      "path": [
        "pallet_timestamp",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set",
              "fields": [
                {
                  "name": "now",
                  "type": 11,
                  "typeName": "T::Moment",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current time.",
                "",
                "This call should be invoked exactly once per block. It will panic at the finalization",
                "phase, if this call hasn't been invoked by that time.",
                "",
                "The timestamp should be greater than the previous one by the amount specified by",
                "[`Config::MinimumPeriod`].",
                "",
                "The dispatch origin for this call must be _None_.",
                "",
                "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                "that changing the complexity of this call could result exhausting the resources in a",
                "block to execute any other calls.",
                "",
                "## Complexity",
                "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                "  `on_finalize`)",
                "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 217,
    "type": {
      "path": [
        "staging_parachain_info",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 218,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 219
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 221,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 219,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "BalanceLock"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 77,
              "typeName": "LockIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reasons",
              "type": 220,
              "typeName": "Reasons",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 220,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "Reasons"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fee",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Misc",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "All",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 221,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 219
        }
      },
      "docs": []
    }
  },
  {
    "id": 222,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 223
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 224,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 223,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "ReserveData"
      ],
      "params": [
        {
          "name": "ReserveIdentifier",
          "type": 77
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 77,
              "typeName": "ReserveIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 224,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 223
        }
      },
      "docs": []
    }
  },
  {
    "id": 225,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 226
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 228,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 226,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "IdAmount"
      ],
      "params": [
        {
          "name": "Id",
          "type": 227
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 227,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 227,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "RuntimeHoldReason"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 228,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 226
        }
      },
      "docs": []
    }
  },
  {
    "id": 229,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 230
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 231,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 230,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "IdAmount"
      ],
      "params": [
        {
          "name": "Id",
          "type": 124
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 124,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 231,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 230
        }
      },
      "docs": []
    }
  },
  {
    "id": 232,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "transfer_allow_death",
              "fields": [
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transfer some liquid free balance to another account.",
                "",
                "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                "If the sender's account is below the existential deposit as a result",
                "of the transfer, the account will be reaped.",
                "",
                "The dispatch origin for this call must be `Signed` by the transactor."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                "may be specified."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                "kill the origin account.",
                "",
                "99% of the time you want [`transfer_allow_death`] instead.",
                "",
                "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
              ]
            },
            {
              "name": "transfer_all",
              "fields": [
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Transfer the entire transferable balance from the caller account.",
                "",
                "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                "transferred by this function. To ensure that this function results in a killed account,",
                "you might need to prepare the account by removing any reference counters, storage",
                "deposits, etc...",
                "",
                "The dispatch origin of this call must be Signed.",
                "",
                "- `dest`: The recipient of the transfer.",
                "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                "  of the funds the account has, causing the sender account to be killed (false), or",
                "  transfer everything except at least the existential deposit, which will guarantee to",
                "  keep the sender account alive (true)."
              ]
            },
            {
              "name": "force_unreserve",
              "fields": [
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Unreserve some balance from a user by force.",
                "",
                "Can only be called by ROOT."
              ]
            },
            {
              "name": "upgrade_accounts",
              "fields": [
                {
                  "name": "who",
                  "type": 49,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Upgrade a specified account.",
                "",
                "- `origin`: Must be `Signed`.",
                "- `who`: The account to be upgraded.",
                "",
                "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                "possibility of churn)."
              ]
            },
            {
              "name": "force_set_balance",
              "fields": [
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "new_free",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the regular balance of a given account.",
                "",
                "The dispatch origin for this call is `root`."
              ]
            },
            {
              "name": "force_adjust_total_issuance",
              "fields": [
                {
                  "name": "direction",
                  "type": 235,
                  "typeName": "AdjustmentDirection",
                  "docs": []
                },
                {
                  "name": "delta",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Adjust the total issuance in a saturating way.",
                "",
                "Can only be called by root and always needs a positive `delta`.",
                "",
                "# Example"
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "value",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Burn the specified liquid free balance from the origin account.",
                "",
                "If the origin's account ends up below the existential deposit as a result",
                "of the burn and `keep_alive` is false, the account will be reaped.",
                "",
                "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                "this `burn` operation will reduce total issuance by the amount _burned_."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 233,
    "type": {
      "path": [
        "sp_runtime",
        "multiaddress",
        "MultiAddress"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "AccountIndex",
          "type": 124
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Id",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 234,
                  "typeName": "AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Address32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Address20",
              "fields": [
                {
                  "name": null,
                  "type": 43,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 234,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 124
        }
      },
      "docs": []
    }
  },
  {
    "id": 235,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "AdjustmentDirection"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Increase",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Decrease",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 236,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Vesting balance too high to send value."
              ]
            },
            {
              "name": "LiquidityRestrictions",
              "fields": [],
              "index": 1,
              "docs": [
                "Account liquidity restrictions prevent withdrawal."
              ]
            },
            {
              "name": "InsufficientBalance",
              "fields": [],
              "index": 2,
              "docs": [
                "Balance too low to send value."
              ]
            },
            {
              "name": "ExistentialDeposit",
              "fields": [],
              "index": 3,
              "docs": [
                "Value too low to create account due to existential deposit."
              ]
            },
            {
              "name": "Expendability",
              "fields": [],
              "index": 4,
              "docs": [
                "Transfer/payment would kill account."
              ]
            },
            {
              "name": "ExistingVestingSchedule",
              "fields": [],
              "index": 5,
              "docs": [
                "A vesting schedule already exists for this account."
              ]
            },
            {
              "name": "DeadAccount",
              "fields": [],
              "index": 6,
              "docs": [
                "Beneficiary account must pre-exist."
              ]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 7,
              "docs": [
                "Number of named reserves exceed `MaxReserves`."
              ]
            },
            {
              "name": "TooManyHolds",
              "fields": [],
              "index": 8,
              "docs": [
                "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
              ]
            },
            {
              "name": "TooManyFreezes",
              "fields": [],
              "index": 9,
              "docs": [
                "Number of freezes exceed `MaxFreezes`."
              ]
            },
            {
              "name": "IssuanceDeactivated",
              "fields": [],
              "index": 10,
              "docs": [
                "The issuance cannot be modified since it is already deactivated."
              ]
            },
            {
              "name": "DeltaZero",
              "fields": [],
              "index": 11,
              "docs": [
                "The delta cannot be zero."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 237,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 238,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 239
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 240,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 239,
    "type": {
      "path": [
        "pallet_vesting",
        "vesting_info",
        "VestingInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "locked",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "per_block",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "starting_block",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 240,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 239
        }
      },
      "docs": []
    }
  },
  {
    "id": 241,
    "type": {
      "path": [
        "pallet_vesting",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V0",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V1",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 242,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "vest",
              "fields": [],
              "index": 0,
              "docs": [
                "Unlock any vested funds of the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "vest_other",
              "fields": [
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Unlock any vested funds of a `target` account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "vested_transfer",
              "fields": [
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 239,
                  "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Create a vested transfer.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account receiving the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "force_vested_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 239,
                  "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force a vested transfer.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `source`: The account whose funds should be transferred.",
                "- `target`: The account that should be transferred the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "merge_schedules",
              "fields": [
                {
                  "name": "schedule1_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "schedule2_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                "the highest possible start and end blocks. If both schedules have already started the",
                "current block will be used as the schedule start; with the caveat that if one schedule",
                "is finished by the current block, the other will be treated as the new merged schedule,",
                "unmodified.",
                "",
                "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                "NOTE: This will unlock all schedules through the current block prior to merging.",
                "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                "and both will be removed.",
                "",
                "Merged schedule attributes:",
                "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                "  current_block)`.",
                "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `schedule1_index`: index of the first schedule to merge.",
                "- `schedule2_index`: index of the second schedule to merge."
              ]
            },
            {
              "name": "force_remove_vesting_schedule",
              "fields": [
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "schedule_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Force remove a vesting schedule",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `target`: An account that has a vesting schedule",
                "- `schedule_index`: The vesting schedule index that should be removed"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 243,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotVesting",
              "fields": [],
              "index": 0,
              "docs": [
                "The account given is not vesting."
              ]
            },
            {
              "name": "AtMaxVestingSchedules",
              "fields": [],
              "index": 1,
              "docs": [
                "The account already has `MaxVestingSchedules` count of schedules and thus",
                "cannot add another one. Consider merging existing schedules in order to add another."
              ]
            },
            {
              "name": "AmountLow",
              "fields": [],
              "index": 2,
              "docs": [
                "Amount being transferred is too low to create a vesting schedule."
              ]
            },
            {
              "name": "ScheduleIndexOutOfBounds",
              "fields": [],
              "index": 3,
              "docs": [
                "An index was out of bounds of the vesting schedules."
              ]
            },
            {
              "name": "InvalidScheduleParams",
              "fields": [],
              "index": 4,
              "docs": [
                "Failed to create a new schedule because some parameter was invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the vesting pallet."
      ]
    }
  },
  {
    "id": 244,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 49,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 245,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 246
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 247,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 246,
    "type": {
      "path": [
        "pallet_collator_selection",
        "pallet",
        "CandidateInfo"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 247,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 246
        }
      },
      "docs": []
    }
  },
  {
    "id": 248,
    "type": {
      "path": [
        "pallet_collator_selection",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_invulnerables",
              "fields": [
                {
                  "name": "new",
                  "type": 49,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the list of invulnerable (fixed) collators. These collators must do some",
                "preparation, namely to have registered session keys.",
                "",
                "The call will remove any accounts that have not registered keys from the set. That is,",
                "it is non-atomic; the caller accepts all `AccountId`s passed in `new` _individually_ as",
                "acceptable Invulnerables, and is not proposing a _set_ of new Invulnerables.",
                "",
                "This call does not maintain mutual exclusivity of `Invulnerables` and `Candidates`. It",
                "is recommended to use a batch of `add_invulnerable` and `remove_invulnerable` instead. A",
                "`batch_all` can also be used to enforce atomicity. If any candidates are included in",
                "`new`, they should be removed with `remove_invulnerable_candidate` after execution.",
                "",
                "Must be called by the `UpdateOrigin`."
              ]
            },
            {
              "name": "set_desired_candidates",
              "fields": [
                {
                  "name": "max",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the ideal number of non-invulnerable collators. If lowering this number, then the",
                "number of running collators could be higher than this figure. Aside from that edge case,",
                "there should be no other way to have more candidates than the desired number.",
                "",
                "The origin for this call must be the `UpdateOrigin`."
              ]
            },
            {
              "name": "set_candidacy_bond",
              "fields": [
                {
                  "name": "bond",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the candidacy bond amount.",
                "",
                "If the candidacy bond is increased by this call, all current candidates which have a",
                "deposit lower than the new bond will be kicked from the list and get their deposits",
                "back.",
                "",
                "The origin for this call must be the `UpdateOrigin`."
              ]
            },
            {
              "name": "register_as_candidate",
              "fields": [],
              "index": 3,
              "docs": [
                "Register this account as a collator candidate. The account must (a) already have",
                "registered session keys and (b) be able to reserve the `CandidacyBond`.",
                "",
                "This call is not available to `Invulnerable` collators."
              ]
            },
            {
              "name": "leave_intent",
              "fields": [],
              "index": 4,
              "docs": [
                "Deregister `origin` as a collator candidate. Note that the collator can only leave on",
                "session change. The `CandidacyBond` will be unreserved immediately.",
                "",
                "This call will fail if the total number of candidates would drop below",
                "`MinEligibleCollators`."
              ]
            },
            {
              "name": "add_invulnerable",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Add a new account `who` to the list of `Invulnerables` collators. `who` must have",
                "registered session keys. If `who` is a candidate, they will be removed.",
                "",
                "The origin for this call must be the `UpdateOrigin`."
              ]
            },
            {
              "name": "remove_invulnerable",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Remove an account `who` from the list of `Invulnerables` collators. `Invulnerables` must",
                "be sorted.",
                "",
                "The origin for this call must be the `UpdateOrigin`."
              ]
            },
            {
              "name": "update_bond",
              "fields": [
                {
                  "name": "new_deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Update the candidacy bond of collator candidate `origin` to a new amount `new_deposit`.",
                "",
                "Setting a `new_deposit` that is lower than the current deposit while `origin` is",
                "occupying a top-`DesiredCandidates` slot is not allowed.",
                "",
                "This call will fail if `origin` is not a collator candidate, the updated bond is lower",
                "than the minimum candidacy bond, and/or the amount cannot be reserved."
              ]
            },
            {
              "name": "take_candidate_slot",
              "fields": [
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "The caller `origin` replaces a candidate `target` in the collator candidate list by",
                "reserving `deposit`. The amount `deposit` reserved by the caller must be greater than",
                "the existing bond of the target it is trying to replace.",
                "",
                "This call will fail if the caller is already a collator candidate or invulnerable, the",
                "caller does not have registered session keys, the target is not a collator candidate,",
                "and/or the `deposit` amount cannot be reserved."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 249,
    "type": {
      "path": [
        "pallet_collator_selection",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooManyCandidates",
              "fields": [],
              "index": 0,
              "docs": [
                "The pallet has too many candidates."
              ]
            },
            {
              "name": "TooFewEligibleCollators",
              "fields": [],
              "index": 1,
              "docs": [
                "Leaving would result in too few candidates."
              ]
            },
            {
              "name": "AlreadyCandidate",
              "fields": [],
              "index": 2,
              "docs": [
                "Account is already a candidate."
              ]
            },
            {
              "name": "NotCandidate",
              "fields": [],
              "index": 3,
              "docs": [
                "Account is not a candidate."
              ]
            },
            {
              "name": "TooManyInvulnerables",
              "fields": [],
              "index": 4,
              "docs": [
                "There are too many Invulnerables."
              ]
            },
            {
              "name": "AlreadyInvulnerable",
              "fields": [],
              "index": 5,
              "docs": [
                "Account is already an Invulnerable."
              ]
            },
            {
              "name": "NotInvulnerable",
              "fields": [],
              "index": 6,
              "docs": [
                "Account is not an Invulnerable."
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "fields": [],
              "index": 7,
              "docs": [
                "Account has no associated validator ID."
              ]
            },
            {
              "name": "ValidatorNotRegistered",
              "fields": [],
              "index": 8,
              "docs": [
                "Validator ID is not yet registered."
              ]
            },
            {
              "name": "InsertToCandidateListFailed",
              "fields": [],
              "index": 9,
              "docs": [
                "Could not insert in the candidate list."
              ]
            },
            {
              "name": "RemoveFromCandidateListFailed",
              "fields": [],
              "index": 10,
              "docs": [
                "Could not remove from the candidate list."
              ]
            },
            {
              "name": "DepositTooLow",
              "fields": [],
              "index": 11,
              "docs": [
                "New deposit amount would be below the minimum candidacy bond."
              ]
            },
            {
              "name": "UpdateCandidateListFailed",
              "fields": [],
              "index": 12,
              "docs": [
                "Could not update the candidate list."
              ]
            },
            {
              "name": "InsufficientBond",
              "fields": [],
              "index": 13,
              "docs": [
                "Deposit amount is too low to take the target's slot in the candidate list."
              ]
            },
            {
              "name": "TargetIsNotCandidate",
              "fields": [],
              "index": 14,
              "docs": [
                "The target account to be replaced in the candidate list is not a candidate."
              ]
            },
            {
              "name": "IdenticalDeposit",
              "fields": [],
              "index": 15,
              "docs": [
                "The updated deposit amount is equal to the amount already reserved."
              ]
            },
            {
              "name": "InvalidUnreserve",
              "fields": [],
              "index": 16,
              "docs": [
                "Cannot lower candidacy bond while occupying a future collator slot in the list."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 250,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 251
        }
      },
      "docs": []
    }
  },
  {
    "id": 251,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          252
        ]
      },
      "docs": []
    }
  },
  {
    "id": 252,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "SessionKeys"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "aura",
              "type": 253,
              "typeName": "<Aura as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 253,
    "type": {
      "path": [
        "sp_consensus_aura",
        "ed25519",
        "app_ed25519",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "ed25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 254,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          255,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 255,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "KeyTypeId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 18,
              "typeName": "[u8; 4]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 256,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_keys",
              "fields": [
                {
                  "name": "keys",
                  "type": 252,
                  "typeName": "T::Keys",
                  "docs": []
                },
                {
                  "name": "proof",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Sets the session key(s) of the function caller to `keys`.",
                "Allows an account to set its session key prior to becoming a validator.",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be signed.",
                "",
                "## Complexity",
                "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                "  fixed."
              ]
            },
            {
              "name": "purge_keys",
              "fields": [],
              "index": 1,
              "docs": [
                "Removes any session key(s) of the function caller.",
                "",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be Signed and the account must be either be",
                "convertible to a validator ID using the chain's typical addressing system (this usually",
                "means being a controller account) or directly convertible into a validator ID (which",
                "usually means being a stash account).",
                "",
                "## Complexity",
                "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                "  `T::Keys::key_ids()` which is fixed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 257,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidProof",
              "fields": [],
              "index": 0,
              "docs": [
                "Invalid ownership proof."
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "fields": [],
              "index": 1,
              "docs": [
                "No associated validator ID for account."
              ]
            },
            {
              "name": "DuplicatedKey",
              "fields": [],
              "index": 2,
              "docs": [
                "Registered duplicate key."
              ]
            },
            {
              "name": "NoKeys",
              "fields": [],
              "index": 3,
              "docs": [
                "No keys are associated with this account."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 4,
              "docs": [
                "Key setting account is not live, so it's impossible to associate keys."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the session pallet."
      ]
    }
  },
  {
    "id": 258,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 253
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 259,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 259,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 253
        }
      },
      "docs": []
    }
  },
  {
    "id": 260,
    "type": {
      "path": [
        "sp_consensus_slots",
        "Slot"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 261,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          260,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 262,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_btree_set",
        "BoundedBTreeSet"
      ],
      "params": [
        {
          "name": "T",
          "type": 120
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 263,
              "typeName": "BTreeSet<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 263,
    "type": {
      "path": [
        "BTreeSet"
      ],
      "params": [
        {
          "name": "T",
          "type": 120
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 264,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 264,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 120
        }
      },
      "docs": []
    }
  },
  {
    "id": 265,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 266
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 268,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 266,
    "type": {
      "path": [
        "cumulus_pallet_xcmp_queue",
        "OutboundChannelDetails"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "recipient",
              "type": 120,
              "typeName": "ParaId",
              "docs": []
            },
            {
              "name": "state",
              "type": 267,
              "typeName": "OutboundState",
              "docs": []
            },
            {
              "name": "signals_exist",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "first_index",
              "type": 129,
              "typeName": "u16",
              "docs": []
            },
            {
              "name": "last_index",
              "type": 129,
              "typeName": "u16",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 267,
    "type": {
      "path": [
        "cumulus_pallet_xcmp_queue",
        "OutboundState"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Suspended",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 268,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 266
        }
      },
      "docs": []
    }
  },
  {
    "id": 269,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          120,
          129
        ]
      },
      "docs": []
    }
  },
  {
    "id": 270,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 271,
    "type": {
      "path": [
        "cumulus_pallet_xcmp_queue",
        "QueueConfigData"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "suspend_threshold",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "drop_threshold",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "resume_threshold",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 272,
    "type": {
      "path": [
        "cumulus_pallet_xcmp_queue",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "suspend_xcm_execution",
              "fields": [],
              "index": 1,
              "docs": [
                "Suspends all XCM executions for the XCMP queue, regardless of the sender's origin.",
                "",
                "- `origin`: Must pass `ControllerOrigin`."
              ]
            },
            {
              "name": "resume_xcm_execution",
              "fields": [],
              "index": 2,
              "docs": [
                "Resumes all XCM executions for the XCMP queue.",
                "",
                "Note that this function doesn't change the status of the in/out bound channels.",
                "",
                "- `origin`: Must pass `ControllerOrigin`."
              ]
            },
            {
              "name": "update_suspend_threshold",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Overwrites the number of pages which must be in the queue for the other side to be",
                "told to suspend their sending.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.suspend_value`"
              ]
            },
            {
              "name": "update_drop_threshold",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Overwrites the number of pages which must be in the queue after which we drop any",
                "further messages from the channel.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.drop_threshold`"
              ]
            },
            {
              "name": "update_resume_threshold",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Overwrites the number of pages which the queue must be reduced to before it signals",
                "that message sending may recommence after it has been suspended.",
                "",
                "- `origin`: Must pass `Root`.",
                "- `new`: Desired value for `QueueConfigData.resume_threshold`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 273,
    "type": {
      "path": [
        "cumulus_pallet_xcmp_queue",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BadQueueConfig",
              "fields": [],
              "index": 0,
              "docs": [
                "Setting the queue config failed since one of its values was invalid."
              ]
            },
            {
              "name": "AlreadySuspended",
              "fields": [],
              "index": 1,
              "docs": [
                "The execution is already suspended."
              ]
            },
            {
              "name": "AlreadyResumed",
              "fields": [],
              "index": 2,
              "docs": [
                "The execution is already resumed."
              ]
            },
            {
              "name": "TooManyActiveOutboundChannels",
              "fields": [],
              "index": 3,
              "docs": [
                "There are too many active outbound channels."
              ]
            },
            {
              "name": "TooBig",
              "fields": [],
              "index": 4,
              "docs": [
                "The message is too big."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 274,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "QueryStatus"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Pending",
              "fields": [
                {
                  "name": "responder",
                  "type": 116,
                  "typeName": "VersionedLocation",
                  "docs": []
                },
                {
                  "name": "maybe_match_querier",
                  "type": 275,
                  "typeName": "Option<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "maybe_notify",
                  "type": 276,
                  "typeName": "Option<(u8, u8)>",
                  "docs": []
                },
                {
                  "name": "timeout",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionNotifier",
              "fields": [
                {
                  "name": "origin",
                  "type": 116,
                  "typeName": "VersionedLocation",
                  "docs": []
                },
                {
                  "name": "is_active",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ready",
              "fields": [
                {
                  "name": "response",
                  "type": 278,
                  "typeName": "VersionedResponse",
                  "docs": []
                },
                {
                  "name": "at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 275,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 116
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 116,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 276,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 277
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 277,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 277,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          2,
          2
        ]
      },
      "docs": []
    }
  },
  {
    "id": 278,
    "type": {
      "path": [
        "xcm",
        "VersionedResponse"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 279,
                  "typeName": "v2::Response",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 283,
                  "typeName": "v3::Response",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 79,
                  "typeName": "v4::Response",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 279,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Response"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "name": null,
                  "type": 280,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 280,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 281
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 281,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 281,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          282
        ]
      },
      "docs": []
    }
  },
  {
    "id": 282,
    "type": {
      "path": [
        "xcm",
        "v2",
        "traits",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Overflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UntrustedReserveLocation",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UntrustedTeleportLocation",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "MultiLocationFull",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "MultiLocationNotInvertible",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "InvalidLocation",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "FailedToTransactAsset",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "NotWithdrawable",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "LocationCannotHold",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "ExceedsMaxMessageSize",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "DestinationUnsupported",
              "fields": [],
              "index": 13,
              "docs": []
            },
            {
              "name": "Transport",
              "fields": [],
              "index": 14,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 15,
              "docs": []
            },
            {
              "name": "UnknownClaim",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "FailedToDecode",
              "fields": [],
              "index": 17,
              "docs": []
            },
            {
              "name": "MaxWeightInvalid",
              "fields": [],
              "index": 18,
              "docs": []
            },
            {
              "name": "NotHoldingFees",
              "fields": [],
              "index": 19,
              "docs": []
            },
            {
              "name": "TooExpensive",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 22,
              "docs": []
            },
            {
              "name": "WeightLimitReached",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Barrier",
              "fields": [],
              "index": 24,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 25,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 283,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Response"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletsInfo",
              "fields": [
                {
                  "name": null,
                  "type": 284,
                  "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "DispatchResult",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 284,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 285
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 287,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 285,
    "type": {
      "path": [
        "xcm",
        "v3",
        "PalletInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "name",
              "type": 286,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "module_name",
              "type": 286,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "major",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "minor",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "patch",
              "type": 40,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 286,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 287,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 285
        }
      },
      "docs": []
    }
  },
  {
    "id": 288,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          116
        ]
      },
      "docs": []
    }
  },
  {
    "id": 289,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          12,
          10,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 290,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 291
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 292,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 291,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          116,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 292,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 291
        }
      },
      "docs": []
    }
  },
  {
    "id": 293,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "VersionMigrationStage"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MigrateSupportedVersion",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "MigrateVersionNotifiers",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "NotifyCurrentTargets",
              "fields": [
                {
                  "name": null,
                  "type": 294,
                  "typeName": "Option<Vec<u8>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "MigrateAndNotifyOldTargets",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 294,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 14
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 295,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0,
          296
        ]
      },
      "docs": []
    }
  },
  {
    "id": 296,
    "type": {
      "path": [
        "xcm",
        "VersionedAssetId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 113,
                  "typeName": "v3::AssetId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 74,
                  "typeName": "v4::AssetId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 297,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "RemoteLockedFungibleRecord"
      ],
      "params": [
        {
          "name": "ConsumerIdentifier",
          "type": 124
        },
        {
          "name": "MaxConsumers",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "amount",
              "type": 6,
              "typeName": "u128",
              "docs": []
            },
            {
              "name": "owner",
              "type": 116,
              "typeName": "VersionedLocation",
              "docs": []
            },
            {
              "name": "locker",
              "type": 116,
              "typeName": "VersionedLocation",
              "docs": []
            },
            {
              "name": "consumers",
              "type": 298,
              "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 298,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 299
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 300,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 299,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          124,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 300,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 299
        }
      },
      "docs": []
    }
  },
  {
    "id": 301,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 302
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 303,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 302,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          116
        ]
      },
      "docs": []
    }
  },
  {
    "id": 303,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 302
        }
      },
      "docs": []
    }
  },
  {
    "id": 304,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "send",
              "fields": [
                {
                  "name": "dest",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "message",
                  "type": 305,
                  "typeName": "Box<VersionedXcm<()>>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "teleport_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Teleport some assets from the local chain to some destination chain.",
                "",
                "**This function is deprecated: Use `limited_teleport_assets` instead.**",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` chain.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees."
              ]
            },
            {
              "name": "reserve_transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer some assets from the local chain to the destination chain through their local,",
                "destination or remote reserve.",
                "",
                "`assets` must have same reserve location and may not be teleportable to `dest`.",
                " - `assets` have local reserve: transfer assets to sovereign account of destination",
                "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                "   assets to `beneficiary`.",
                " - `assets` have destination reserve: burn local assets and forward a notification to",
                "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                "   deposit them to `beneficiary`.",
                " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                "   to mint and deposit reserve-based assets to `beneficiary`.",
                "",
                "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees."
              ]
            },
            {
              "name": "execute",
              "fields": [
                {
                  "name": "message",
                  "type": 322,
                  "typeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Execute an XCM message from a local, signed, origin.",
                "",
                "An event is deposited indicating whether `msg` could be executed completely or only",
                "partially.",
                "",
                "No more than `max_weight` will be used in its attempted execution. If this is less than",
                "the maximum amount of weight that the message could take to be executed, then no",
                "execution attempt will be made."
              ]
            },
            {
              "name": "force_xcm_version",
              "fields": [
                {
                  "name": "location",
                  "type": 55,
                  "typeName": "Box<Location>",
                  "docs": []
                },
                {
                  "name": "version",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Extoll that a particular destination can be communicated with through a particular",
                "version of XCM.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `location`: The destination that is being described.",
                "- `xcm_version`: The latest version of XCM that `location` supports."
              ]
            },
            {
              "name": "force_default_xcm_version",
              "fields": [
                {
                  "name": "maybe_xcm_version",
                  "type": 134,
                  "typeName": "Option<XcmVersion>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                "version a destination can accept is unknown).",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
              ]
            },
            {
              "name": "force_subscribe_version_notify",
              "fields": [
                {
                  "name": "location",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Ask a location to notify us regarding their XCM version and any changes to it.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `location`: The location to which we should subscribe for XCM version notifications."
              ]
            },
            {
              "name": "force_unsubscribe_version_notify",
              "fields": [
                {
                  "name": "location",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Require that a particular destination should no longer notify us regarding any XCM",
                "version changes.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `location`: The location to which we are currently subscribed for XCM version",
                "  notifications which we no longer desire."
              ]
            },
            {
              "name": "limited_reserve_transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Transfer some assets from the local chain to the destination chain through their local,",
                "destination or remote reserve.",
                "",
                "`assets` must have same reserve location and may not be teleportable to `dest`.",
                " - `assets` have local reserve: transfer assets to sovereign account of destination",
                "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                "   assets to `beneficiary`.",
                " - `assets` have destination reserve: burn local assets and forward a notification to",
                "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                "   deposit them to `beneficiary`.",
                " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                "   to mint and deposit reserve-based assets to `beneficiary`.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                "at risk.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "limited_teleport_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Teleport some assets from the local chain to some destination chain.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                "at risk.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` chain.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "force_suspension",
              "fields": [
                {
                  "name": "suspended",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Set or unset the global suspension state of the XCM executor.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `suspended`: `true` to suspend, `false` to resume."
              ]
            },
            {
              "name": "transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Transfer some assets from the local chain to the destination chain through their local,",
                "destination or remote reserve, or through teleports.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
                "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
                "operation will fail and the sent assets may be at risk.",
                "",
                "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
                "to `dest`, no limitations imposed on `fees`.",
                " - for local reserve: transfer assets to sovereign account of destination chain and",
                "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
                "   `beneficiary`.",
                " - for destination reserve: burn local assets and forward a notification to `dest` chain",
                "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
                "   to `beneficiary`.",
                " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
                "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
                "   and deposit reserve-based assets to `beneficiary`.",
                " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
                "   assets and deposit them to `beneficiary`.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
                "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
                "  from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "claim_assets",
              "fields": [
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
                "",
                "- `origin`: Anyone can call this extrinsic.",
                "- `assets`: The exact assets that were trapped. Use the version to specify what version",
                "was the latest when they were trapped.",
                "- `beneficiary`: The location/account where the claimed assets will be deposited."
              ]
            },
            {
              "name": "transfer_assets_using_type_and_then",
              "fields": [
                {
                  "name": "dest",
                  "type": 116,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 96,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "assets_transfer_type",
                  "type": 333,
                  "typeName": "Box<TransferType>",
                  "docs": []
                },
                {
                  "name": "remote_fees_id",
                  "type": 296,
                  "typeName": "Box<VersionedAssetId>",
                  "docs": []
                },
                {
                  "name": "fees_transfer_type",
                  "type": 333,
                  "typeName": "Box<TransferType>",
                  "docs": []
                },
                {
                  "name": "custom_xcm_on_dest",
                  "type": 305,
                  "typeName": "Box<VersionedXcm<()>>",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Transfer assets from the local chain to the destination chain using explicit transfer",
                "types for assets and fees.",
                "",
                "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
                "provide the `assets_transfer_type` to be used for `assets`:",
                " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
                "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                "   assets to `beneficiary`.",
                " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
                "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                "   deposit them to `beneficiary`.",
                " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
                "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
                "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
                "   the remote `reserve` is Asset Hub.",
                " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
                "   mint/teleport assets and deposit them to `beneficiary`.",
                "",
                "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
                "buy execution using transferred `assets` identified by `remote_fees_id`.",
                "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
                "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                "at risk.",
                "",
                "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
                "specified through `fees_transfer_type`.",
                "",
                "The caller needs to specify what should happen to the transferred assets once they reach",
                "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
                "contains the instructions to execute on `dest` as a final step.",
                "  This is usually as simple as:",
                "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
                "  but could be something more exotic like sending the `assets` even further.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
                "  parachain across a bridge to another ecosystem destination.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
                "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
                "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
                "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
                "  transfer, which also determines what happens to the assets on the destination chain.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 305,
    "type": {
      "path": [
        "xcm",
        "VersionedXcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 306,
                  "typeName": "v2::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 314,
                  "typeName": "v3::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 68,
                  "typeName": "v4::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 306,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Xcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 307,
              "typeName": "Vec<Instruction<RuntimeCall>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 307,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 308
        }
      },
      "docs": []
    }
  },
  {
    "id": 308,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Instruction"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 279,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_type",
                  "type": 309,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 90,
                  "typeName": "DoubleEncoded<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 102,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "receive",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "QueryHolding",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 99,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 313,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 306,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 306,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 309,
    "type": {
      "path": [
        "xcm",
        "v2",
        "OriginKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Native",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SovereignAccount",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Superuser",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Xcm",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 310,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAssetFilter"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Definite",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "name": null,
                  "type": 311,
                  "typeName": "WildMultiAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 311,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "WildMultiAsset"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "type": 100,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 312,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 312,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "WildFungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 313,
    "type": {
      "path": [
        "xcm",
        "v2",
        "WeightLimit"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unlimited",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Limited",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 314,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 315,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 315,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 316
        }
      },
      "docs": []
    }
  },
  {
    "id": 316,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 283,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 317,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 89,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 90,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 38,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 314,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 314,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 317,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 42,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 38,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 317,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 317,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 37
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 318,
    "type": {
      "path": [
        "xcm",
        "v3",
        "QueryResponseInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "destination",
              "type": 37,
              "typeName": "MultiLocation",
              "docs": []
            },
            {
              "name": "query_id",
              "type": 11,
              "typeName": "QueryId",
              "docs": []
            },
            {
              "name": "max_weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 319,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAssetFilter"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Definite",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "name": null,
                  "type": 320,
                  "typeName": "WildMultiAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 320,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "WildMultiAsset"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "type": 113,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 321,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AllCounted",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AllOfCounted",
              "fields": [
                {
                  "name": "id",
                  "type": 113,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 321,
                  "typeName": "WildFungibility",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 321,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "WildFungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 322,
    "type": {
      "path": [
        "xcm",
        "VersionedXcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 323,
                  "typeName": "v2::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 327,
                  "typeName": "v3::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 330,
                  "typeName": "v4::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 323,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Xcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 324,
              "typeName": "Vec<Instruction<RuntimeCall>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 324,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 325
        }
      },
      "docs": []
    }
  },
  {
    "id": 325,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Instruction"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 279,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_type",
                  "type": 309,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 326,
                  "typeName": "DoubleEncoded<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 102,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "receive",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 306,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "QueryHolding",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 310,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 99,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 313,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 323,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 323,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 97,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 101,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 326,
    "type": {
      "path": [
        "xcm",
        "double_encoded",
        "DoubleEncoded"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "encoded",
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 327,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 328,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 328,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 329
        }
      },
      "docs": []
    }
  },
  {
    "id": 329,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 283,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 317,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 89,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 326,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 38,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 319,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 327,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 327,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 110,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 317,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 318,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 39,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 42,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 38,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 314,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 112,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 317,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 330,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 331,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 331,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 332
        }
      },
      "docs": []
    }
  },
  {
    "id": 332,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 79,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 89,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 326,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 56,
                  "typeName": "InteriorLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 92,
                  "typeName": "AssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 330,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 330,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 71,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 91,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 60,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 56,
                  "typeName": "InteriorLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 68,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 73,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 95,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 88,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 333,
    "type": {
      "path": [
        "staging_xcm_executor",
        "traits",
        "asset_transfer",
        "TransferType"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Teleport",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "LocalReserve",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DestinationReserve",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "RemoteReserve",
              "fields": [
                {
                  "name": null,
                  "type": 116,
                  "typeName": "VersionedLocation",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 334,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unreachable",
              "fields": [],
              "index": 0,
              "docs": [
                "The desired destination was unreachable, generally because there is a no way of routing",
                "to it."
              ]
            },
            {
              "name": "SendFailure",
              "fields": [],
              "index": 1,
              "docs": [
                "There was some other issue (i.e. not to do with routing) in sending the message.",
                "Perhaps a lack of space for buffering the message."
              ]
            },
            {
              "name": "Filtered",
              "fields": [],
              "index": 2,
              "docs": [
                "The message execution fails the filter."
              ]
            },
            {
              "name": "UnweighableMessage",
              "fields": [],
              "index": 3,
              "docs": [
                "The message's weight could not be determined."
              ]
            },
            {
              "name": "DestinationNotInvertible",
              "fields": [],
              "index": 4,
              "docs": [
                "The destination `Location` provided cannot be inverted."
              ]
            },
            {
              "name": "Empty",
              "fields": [],
              "index": 5,
              "docs": [
                "The assets to be sent are empty."
              ]
            },
            {
              "name": "CannotReanchor",
              "fields": [],
              "index": 6,
              "docs": [
                "Could not re-anchor the assets to declare the fees for the destination chain."
              ]
            },
            {
              "name": "TooManyAssets",
              "fields": [],
              "index": 7,
              "docs": [
                "Too many assets have been attempted for transfer."
              ]
            },
            {
              "name": "InvalidOrigin",
              "fields": [],
              "index": 8,
              "docs": [
                "Origin is invalid for sending."
              ]
            },
            {
              "name": "BadVersion",
              "fields": [],
              "index": 9,
              "docs": [
                "The version of the `Versioned` value used is not able to be interpreted."
              ]
            },
            {
              "name": "BadLocation",
              "fields": [],
              "index": 10,
              "docs": [
                "The given location could not be used (e.g. because it cannot be expressed in the",
                "desired version of XCM)."
              ]
            },
            {
              "name": "NoSubscription",
              "fields": [],
              "index": 11,
              "docs": [
                "The referenced subscription could not be found."
              ]
            },
            {
              "name": "AlreadySubscribed",
              "fields": [],
              "index": 12,
              "docs": [
                "The location is invalid since it already has a subscription from us."
              ]
            },
            {
              "name": "CannotCheckOutTeleport",
              "fields": [],
              "index": 13,
              "docs": [
                "Could not check-out the assets for teleportation to the destination chain."
              ]
            },
            {
              "name": "LowBalance",
              "fields": [],
              "index": 14,
              "docs": [
                "The owner does not own (all) of the asset that they wish to do the operation on."
              ]
            },
            {
              "name": "TooManyLocks",
              "fields": [],
              "index": 15,
              "docs": [
                "The asset owner has too many locks on the asset."
              ]
            },
            {
              "name": "AccountNotSovereign",
              "fields": [],
              "index": 16,
              "docs": [
                "The given account is not an identifiable sovereign account for any location."
              ]
            },
            {
              "name": "FeesNotMet",
              "fields": [],
              "index": 17,
              "docs": [
                "The operation required fees to be paid which the initiator could not meet."
              ]
            },
            {
              "name": "LockNotFound",
              "fields": [],
              "index": 18,
              "docs": [
                "A remote lock with the corresponding data could not be found."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 19,
              "docs": [
                "The unlock operation cannot succeed because there are still consumers of the lock."
              ]
            },
            {
              "name": "InvalidAssetUnknownReserve",
              "fields": [],
              "index": 21,
              "docs": [
                "Invalid asset, reserve chain could not be determined for it."
              ]
            },
            {
              "name": "InvalidAssetUnsupportedReserve",
              "fields": [],
              "index": 22,
              "docs": [
                "Invalid asset, do not support remote asset reserves with different fees reserves."
              ]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 23,
              "docs": [
                "Too many assets with different reserve locations have been attempted for transfer."
              ]
            },
            {
              "name": "LocalExecutionIncomplete",
              "fields": [],
              "index": 24,
              "docs": [
                "Local XCM execution incomplete."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 335,
    "type": {
      "path": [
        "cumulus_pallet_xcm",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 336,
    "type": {
      "path": [
        "bp_xcm_bridge_hub_router",
        "BridgeState"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "delivery_fee_factor",
              "type": 205,
              "typeName": "FixedU128",
              "docs": []
            },
            {
              "name": "is_congested",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 337,
    "type": {
      "path": [
        "pallet_xcm_bridge_hub_router",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_bridge_status",
              "fields": [
                {
                  "name": "bridge_id",
                  "type": 13,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "is_congested",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Notification about congested bridge queue."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 338,
    "type": {
      "path": [
        "pallet_message_queue",
        "BookState"
      ],
      "params": [
        {
          "name": "MessageOrigin",
          "type": 119
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "begin",
              "type": 4,
              "typeName": "PageIndex",
              "docs": []
            },
            {
              "name": "end",
              "type": 4,
              "typeName": "PageIndex",
              "docs": []
            },
            {
              "name": "count",
              "type": 4,
              "typeName": "PageIndex",
              "docs": []
            },
            {
              "name": "ready_neighbours",
              "type": 339,
              "typeName": "Option<Neighbours<MessageOrigin>>",
              "docs": []
            },
            {
              "name": "message_count",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "size",
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 339,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 340
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 340,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 340,
    "type": {
      "path": [
        "pallet_message_queue",
        "Neighbours"
      ],
      "params": [
        {
          "name": "MessageOrigin",
          "type": 119
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "prev",
              "type": 119,
              "typeName": "MessageOrigin",
              "docs": []
            },
            {
              "name": "next",
              "type": 119,
              "typeName": "MessageOrigin",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 341,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          119,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 342,
    "type": {
      "path": [
        "pallet_message_queue",
        "Page"
      ],
      "params": [
        {
          "name": "Size",
          "type": 4
        },
        {
          "name": "HeapSize",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "remaining",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "remaining_size",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "first_index",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "first",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "last",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "heap",
              "type": 343,
              "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 343,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 344,
    "type": {
      "path": [
        "pallet_message_queue",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "reap_page",
              "fields": [
                {
                  "name": "message_origin",
                  "type": 119,
                  "typeName": "MessageOriginOf<T>",
                  "docs": []
                },
                {
                  "name": "page_index",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Remove a page which has no more messages remaining to be processed or is stale."
              ]
            },
            {
              "name": "execute_overweight",
              "fields": [
                {
                  "name": "message_origin",
                  "type": 119,
                  "typeName": "MessageOriginOf<T>",
                  "docs": []
                },
                {
                  "name": "page",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::Size",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Execute an overweight message.",
                "",
                "Temporary processing errors will be propagated whereas permanent errors are treated",
                "as success condition.",
                "",
                "- `origin`: Must be `Signed`.",
                "- `message_origin`: The origin from which the message to be executed arrived.",
                "- `page`: The page in the queue in which the message to be executed is sitting.",
                "- `index`: The index into the queue of the message to be executed.",
                "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                "  of the message.",
                "",
                "Benchmark complexity considerations: O(index + weight_limit)."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 345,
    "type": {
      "path": [
        "pallet_message_queue",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotReapable",
              "fields": [],
              "index": 0,
              "docs": [
                "Page is not reapable because it has items remaining to be processed and is not old",
                "enough."
              ]
            },
            {
              "name": "NoPage",
              "fields": [],
              "index": 1,
              "docs": [
                "Page to be reaped does not exist."
              ]
            },
            {
              "name": "NoMessage",
              "fields": [],
              "index": 2,
              "docs": [
                "The referenced message could not be found."
              ]
            },
            {
              "name": "AlreadyProcessed",
              "fields": [],
              "index": 3,
              "docs": [
                "The message was already processed and cannot be processed again."
              ]
            },
            {
              "name": "Queued",
              "fields": [],
              "index": 4,
              "docs": [
                "The message is queued for future execution."
              ]
            },
            {
              "name": "InsufficientWeight",
              "fields": [],
              "index": 5,
              "docs": [
                "There is temporarily not enough weight to continue servicing messages."
              ]
            },
            {
              "name": "TemporarilyUnprocessable",
              "fields": [],
              "index": 6,
              "docs": [
                "This message is temporarily unprocessable.",
                "",
                "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                "retrying."
              ]
            },
            {
              "name": "QueuePaused",
              "fields": [],
              "index": 7,
              "docs": [
                "The queue is paused and no message can be executed from it.",
                "",
                "This can change at any time and may resolve in the future by re-trying."
              ]
            },
            {
              "name": "RecursiveDisallowed",
              "fields": [],
              "index": 8,
              "docs": [
                "Another call is in progress and needs to finish before this call can happen."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 346,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "batch",
              "fields": [
                {
                  "name": "calls",
                  "type": 347,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Send a batch of dispatch calls.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatched without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched.",
                "",
                "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                "event is deposited. If a call failed and the batch was interrupted, then the",
                "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                "event is deposited."
              ]
            },
            {
              "name": "as_derivative",
              "fields": [
                {
                  "name": "index",
                  "type": 129,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 348,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Send a call through an indexed pseudonym of the sender.",
                "",
                "Filter from origin are passed along. The call will be dispatched with an origin which",
                "use the same filter as the origin of this call.",
                "",
                "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                "because you expect `proxy` to have been used prior in the call stack and you do not want",
                "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                "in the Multisig pallet instead.",
                "",
                "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                "",
                "The dispatch origin for this call must be _Signed_."
              ]
            },
            {
              "name": "batch_all",
              "fields": [
                {
                  "name": "calls",
                  "type": 347,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Send a batch of dispatch calls and atomically execute them.",
                "The whole transaction will rollback and fail if any of the calls failed.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatched without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched."
              ]
            },
            {
              "name": "dispatch_as",
              "fields": [
                {
                  "name": "as_origin",
                  "type": 383,
                  "typeName": "Box<T::PalletsOrigin>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 348,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Dispatches a function call with a provided origin.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "force_batch",
              "fields": [
                {
                  "name": "calls",
                  "type": 347,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Send a batch of dispatch calls.",
                "Unlike `batch`, it allows errors and won't interrupt.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatch without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched."
              ]
            },
            {
              "name": "with_weight",
              "fields": [
                {
                  "name": "call",
                  "type": 348,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Dispatch a function call with a specified weight.",
                "",
                "This function does not check the weight of the call, and instead allows the",
                "Root origin to specify the weight of the call.",
                "",
                "The dispatch origin for this call must be _Root_."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 347,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 348
        }
      },
      "docs": []
    }
  },
  {
    "id": 348,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "RuntimeCall"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 159,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ParachainSystem",
              "fields": [
                {
                  "name": null,
                  "type": 206,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainSystem, Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Timestamp",
              "fields": [
                {
                  "name": null,
                  "type": 216,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "ParachainInfo",
              "fields": [
                {
                  "name": null,
                  "type": 217,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParachainInfo, Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 232,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 242,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "CollatorSelection",
              "fields": [
                {
                  "name": null,
                  "type": 248,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CollatorSelection, Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 256,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "XcmpQueue",
              "fields": [
                {
                  "name": null,
                  "type": 272,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmpQueue, Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "PolkadotXcm",
              "fields": [
                {
                  "name": null,
                  "type": 304,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PolkadotXcm, Runtime>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "CumulusXcm",
              "fields": [
                {
                  "name": null,
                  "type": 335,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<CumulusXcm, Runtime>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "ToKusamaXcmRouter",
              "fields": [
                {
                  "name": null,
                  "type": 337,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ToKusamaXcmRouter, Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "MessageQueue",
              "fields": [
                {
                  "name": null,
                  "type": 344,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 346,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 349,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 351,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 353,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Assets, Runtime>",
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Uniques",
              "fields": [
                {
                  "name": null,
                  "type": 354,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Uniques, Runtime>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Nfts",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nfts, Runtime>",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "ForeignAssets",
              "fields": [
                {
                  "name": null,
                  "type": 379,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ForeignAssets, Runtime>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "PoolAssets",
              "fields": [
                {
                  "name": null,
                  "type": 380,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<PoolAssets, Runtime>",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "AssetConversion",
              "fields": [
                {
                  "name": null,
                  "type": 381,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetConversion, Runtime>",
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 349,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "as_multi_threshold_1",
              "fields": [
                {
                  "name": "other_signatories",
                  "type": 49,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 348,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Immediately dispatch a multi-signature call using a single approval from the caller.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `other_signatories`: The accounts (other than the sender) who are part of the",
                "multi-signature, but do not participate in the approval process.",
                "- `call`: The call to be executed.",
                "",
                "Result is equivalent to the dispatched result.",
                "",
                "## Complexity",
                "O(Z + C) where Z is the length of the call and C its execution weight."
              ]
            },
            {
              "name": "as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 129,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 49,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 350,
                  "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 348,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "If there are enough, then dispatch the call.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call`: The call to be executed.",
                "",
                "NOTE: Unless this is the final approval, you will generally want to use",
                "`approve_as_multi` instead, since it only requires a hash of the call.",
                "",
                "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                "on success, result is `Ok` and the result from the interior call, if it was executed,",
                "may be found in the deposited `MultisigExecuted` event.",
                "",
                "## Complexity",
                "- `O(S + Z + Call)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- The weight of the `call`.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
              ]
            },
            {
              "name": "approve_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 129,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 49,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 350,
                  "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                "",
                "## Complexity",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
              ]
            },
            {
              "name": "cancel_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 129,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 49,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 126,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                "for this operation will be unreserved on success.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                "transaction for this dispatch.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "## Complexity",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- One event.",
                "- I/O: 1 read `O(S)`, one remove.",
                "- Storage: removes one item."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 350,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 126
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 126,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 351,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "proxy",
              "fields": [
                {
                  "name": "real",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 352,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 348,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorised for through",
                "`add_proxy`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account."
              ]
            },
            {
              "name": "add_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 128,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register a proxy account for the sender that is able to make calls on its behalf.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to make a proxy.",
                "- `proxy_type`: The permissions allowed for this proxy account.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero."
              ]
            },
            {
              "name": "remove_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 128,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Unregister a proxy account for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                "- `proxy_type`: The permissions currently enabled for the removed proxy account."
              ]
            },
            {
              "name": "remove_proxies",
              "fields": [],
              "index": 3,
              "docs": [
                "Unregister all proxy accounts for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "WARNING: This may be called on accounts created by `pure`, however if done, then",
                "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
              ]
            },
            {
              "name": "create_pure",
              "fields": [
                {
                  "name": "proxy_type",
                  "type": 128,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 129,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                "initialize it with a proxy of `proxy_type` for `origin` sender.",
                "",
                "Requires a `Signed` origin.",
                "",
                "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                "new account. This will almost always be the most permissive `ProxyType` possible to",
                "allow for maximum flexibility.",
                "- `index`: A disambiguation index, in case this is called multiple times in the same",
                "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                "want to use `0`.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero.",
                "",
                "Fails with `Duplicate` if this has already been called in this transaction, from the",
                "same sender, with the same parameters.",
                "",
                "Fails if there are insufficient funds to pay for deposit."
              ]
            },
            {
              "name": "kill_pure",
              "fields": [
                {
                  "name": "spawner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 128,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 129,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "height",
                  "type": 40,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "ext_index",
                  "type": 40,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Removes a previously spawned pure proxy.",
                "",
                "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                "inaccessible.",
                "",
                "Requires a `Signed` origin, and the sender account must have been created by a call to",
                "`pure` with corresponding parameters.",
                "",
                "- `spawner`: The account that originally called `pure` to create this account.",
                "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                "- `proxy_type`: The proxy type originally passed to `pure`.",
                "- `height`: The height of the chain when the call to `pure` was processed.",
                "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                "",
                "Fails with `NoPermission` in case the caller is not a previously created pure",
                "account whose `pure` call has corresponding parameters."
              ]
            },
            {
              "name": "announce",
              "fields": [
                {
                  "name": "real",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Publish the hash of a proxy-call that will be made in the future.",
                "",
                "This must be called some number of blocks before the corresponding `proxy` is attempted",
                "if the delay associated with the proxy relationship is greater than zero.",
                "",
                "No more than `MaxPending` announcements may be made at any one time.",
                "",
                "This will take a deposit of `AnnouncementDepositFactor` as well as",
                "`AnnouncementDepositBase` if there are no other pending announcements.",
                "",
                "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account."
              ]
            },
            {
              "name": "remove_announcement",
              "fields": [
                {
                  "name": "real",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Remove a given announcement.",
                "",
                "May be called by a proxy account to remove a call they previously announced and return",
                "the deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account."
              ]
            },
            {
              "name": "reject_announcement",
              "fields": [
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Remove the given announcement of a delegate.",
                "",
                "May be called by a target (proxied) account to remove a call that one of their delegates",
                "(`delegate`) has announced they want to execute. The deposit is returned.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `delegate`: The account that previously announced the call.",
                "- `call_hash`: The hash of the call to be made."
              ]
            },
            {
              "name": "proxy_announced",
              "fields": [
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "real",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 352,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 348,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorized for through",
                "`add_proxy`.",
                "",
                "Removes any corresponding announcement(s).",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 352,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 128
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 128,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 353,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new class of fungible assets from a public origin.",
                "",
                "This new asset class has no assets initially and its owner is the origin.",
                "",
                "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                "",
                "Funds of sender are reserved by `AssetDeposit`.",
                "",
                "Parameters:",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                "member of the asset class's admin team.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new class of fungible assets from a privileged origin.",
                "",
                "This new asset class has no assets initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                "over this asset, but may later change and configure the permissions using",
                "`transfer_ownership` and `set_team`.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "start_destroy",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Start the process of destroying a fungible asset class.",
                "",
                "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                "destruction of an asset class.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "The asset class must be frozen before calling `start_destroy`."
              ]
            },
            {
              "name": "destroy_accounts",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Destroy all accounts associated with a given asset.",
                "",
                "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedAccounts` event."
              ]
            },
            {
              "name": "destroy_approvals",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                "",
                "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedApprovals` event."
              ]
            },
            {
              "name": "finish_destroy",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Complete destroying asset and unreserve currency.",
                "",
                "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                "hand.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each successful call emits the `Event::Destroyed` event."
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Mint assets of a particular class.",
                "",
                "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount minted.",
                "- `beneficiary`: The account to be credited with the minted assets.",
                "- `amount`: The amount of the asset to be minted.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                "",
                "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                "",
                "Bails with `NoAccount` if the `who` is already dead.",
                "",
                "- `id`: The identifier of the asset to have some amount burned.",
                "- `who`: The account to be debited from.",
                "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                "",
                "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                "minimum for the asset, then the amount burned is increased to take it to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Move some assets from the sender account to another.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Move some assets from the sender account to another, keeping the sender account alive.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Move some assets from one account to another.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `source`: The account to be debited.",
                "- `dest`: The account to be credited.",
                "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the `source` balance above zero but",
                "below the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                "`dest`."
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                "account that does not have an entry, use `touch_other` first.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Allow unprivileged transfers to and from an account again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be unfrozen.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "freeze_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Disallow further unprivileged transfers for the asset class.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Allow unprivileged transfers for the asset again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be thawed.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Change the Owner of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Change the Issuer, Admin and Freezer of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Set the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Funds of sender are reserved according to the formula:",
                "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Any deposit is freed for the asset owner.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Force the metadata for an asset to some value.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is left alone.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
              ]
            },
            {
              "name": "force_clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is returned.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_asset_status",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Alter the attributes of a given asset.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                "value to account for the state bloat associated with its balance storage. If set to",
                "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                "an ED in the Balances pallet or whatever else is used to control user-account state",
                "growth).",
                "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                "instructions.",
                "",
                "Emits `AssetStatusChanged` with the identity of the asset.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Approve an amount of asset for transfer by a delegated third-party account.",
                "",
                "Origin must be Signed.",
                "",
                "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                "for the purpose of holding the approval. If some non-zero amount of assets is already",
                "approved from signing account to `delegate`, then it is topped up or unreserved to",
                "meet the right value.",
                "",
                "NOTE: The signing account does not need to own `amount` of assets at the point of",
                "making this call.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account to delegate permission to transfer asset.",
                "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                "already an approval in place, then this acts additively.",
                "",
                "Emits `ApprovedTransfer` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be Signed and there must be an approval in place between signer and",
                "`delegate`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                "account of the asset `id`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_approved",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Transfer some asset balance from a previously delegated account to some third-party",
                "account.",
                "",
                "Origin must be Signed and there must be an approval in place by the `owner` to the",
                "signer.",
                "",
                "If the entire amount approved for transfer is transferred, then any deposit previously",
                "reserved by `approve_transfer` is unreserved.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                "from which the asset balance will be withdrawn.",
                "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                "- `amount`: The amount of assets to transfer.",
                "",
                "Emits `TransferredApproved` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "touch",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "Create an asset account for non-provider assets.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                "  to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "allow_burn",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                "account.",
                "",
                "The origin must be Signed.",
                "",
                "- `id`: The identifier of the asset for which the caller would like the deposit",
                "  refunded.",
                "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "set_min_balance",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Sets the minimum balance of an asset.",
                "",
                "Only works if there aren't any accounts that are holding the asset or if",
                "the new value of `min_balance` is less than the old one.",
                "",
                "Origin must be Signed and the sender has to be the Owner of the",
                "asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `min_balance`: The new value of `min_balance`.",
                "",
                "Emits `AssetMinBalanceChanged` event when successful."
              ]
            },
            {
              "name": "touch_other",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "Create an asset account for `who`.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                "  must have sufficient funds for a deposit to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "- `who`: The account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund_other",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": [
                "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                "",
                "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                "order to burn a non-zero balance of the asset, the caller must be the account and should",
                "use `refund`.",
                "",
                "- `id`: The identifier of the asset for the account holding a deposit.",
                "- `who`: The account to refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "block",
              "fields": [
                {
                  "name": "id",
                  "type": 40,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the account's asset.",
                "- `who`: The account to be unblocked.",
                "",
                "Emits `Blocked`.",
                "",
                "Weight: `O(1)`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 354,
    "type": {
      "path": [
        "pallet_uniques",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new collection of non-fungible items from a public origin.",
                "",
                "This new collection has no items initially and its owner is the origin.",
                "",
                "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                "",
                "`ItemDeposit` funds of sender are reserved.",
                "",
                "Parameters:",
                "- `collection`: The identifier of the new collection. This must not be currently in use.",
                "- `admin`: The admin of this collection. The admin is the initial address of each",
                "member of the collection's admin team.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "free_holding",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new collection of non-fungible items from a privileged origin.",
                "",
                "This new collection has no items initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `collection`: The identifier of the new item. This must not be currently in use.",
                "- `owner`: The owner of this collection of items. The owner has full superuser",
                "  permissions",
                "over this item, but may later change and configure the permissions using",
                "`transfer_ownership` and `set_team`.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "destroy",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 355,
                  "typeName": "DestroyWitness",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Destroy a collection of fungible items.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                "owner of the `collection`.",
                "",
                "- `collection`: The identifier of the collection to be destroyed.",
                "- `witness`: Information on the items minted in the collection. This must be",
                "correct.",
                "",
                "Emits `Destroyed` event when successful.",
                "",
                "Weight: `O(n + m)` where:",
                "- `n = witness.items`",
                "- `m = witness.item_metadatas`",
                "- `a = witness.attributes`"
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Mint an item of a particular collection.",
                "",
                "The origin must be Signed and the sender must be the Issuer of the `collection`.",
                "",
                "- `collection`: The collection of the item to be minted.",
                "- `item`: The item value of the item to be minted.",
                "- `beneficiary`: The initial owner of the minted item.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "check_owner",
                  "type": 356,
                  "typeName": "Option<AccountIdLookupOf<T>>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Destroy a single item.",
                "",
                "Origin must be Signed and the signing account must be either:",
                "- the Admin of the `collection`;",
                "- the Owner of the `item`;",
                "",
                "- `collection`: The collection of the item to be burned.",
                "- `item`: The item of the item to be burned.",
                "- `check_owner`: If `Some` then the operation will fail with `WrongOwner` unless the",
                "  item is owned by this value.",
                "",
                "Emits `Burned` with the actual amount burned.",
                "",
                "Weight: `O(1)`",
                "Modes: `check_owner.is_some()`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Move an item from the sender account to another.",
                "",
                "This resets the approved account of the item.",
                "",
                "Origin must be Signed and the signing account must be either:",
                "- the Admin of the `collection`;",
                "- the Owner of the `item`;",
                "- the approved delegate for the `item` (in this case, the approval is reset).",
                "",
                "Arguments:",
                "- `collection`: The collection of the item to be transferred.",
                "- `item`: The item of the item to be transferred.",
                "- `dest`: The account to receive ownership of the item.",
                "",
                "Emits `Transferred`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "redeposit",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "items",
                  "type": 133,
                  "typeName": "Vec<T::ItemId>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Reevaluate the deposits on some items.",
                "",
                "Origin must be Signed and the sender should be the Owner of the `collection`.",
                "",
                "- `collection`: The collection to be frozen.",
                "- `items`: The items of the collection whose deposits will be reevaluated.",
                "",
                "NOTE: This exists as a best-effort function. Any items which are unknown or",
                "in the case that the owner account does not have reservable funds to pay for a",
                "deposit increase are ignored. Generally the owner isn't going to call this on items",
                "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                "so it's of little consequence.",
                "",
                "It will still return an error in the case that the collection is unknown of the signer",
                "is not permitted to call it.",
                "",
                "Weight: `O(items.len())`"
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Disallow further unprivileged transfer of an item.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                "",
                "- `collection`: The collection of the item to be frozen.",
                "- `item`: The item of the item to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Re-allow unprivileged transfer of an item.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                "",
                "- `collection`: The collection of the item to be thawed.",
                "- `item`: The item of the item to be thawed.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "freeze_collection",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Disallow further unprivileged transfers for a whole collection.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                "",
                "- `collection`: The collection to be frozen.",
                "",
                "Emits `CollectionFrozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw_collection",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Re-allow unprivileged transfers for a whole collection.",
                "",
                "Origin must be Signed and the sender should be the Admin of the `collection`.",
                "",
                "- `collection`: The collection to be thawed.",
                "",
                "Emits `CollectionThawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "new_owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Change the Owner of a collection.",
                "",
                "Origin must be Signed and the sender should be the Owner of the `collection`.",
                "",
                "- `collection`: The collection whose owner should be changed.",
                "- `owner`: The new Owner of this collection. They must have called",
                "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Change the Issuer, Admin and Freezer of a collection.",
                "",
                "Origin must be Signed and the sender should be the Owner of the `collection`.",
                "",
                "- `collection`: The collection whose team should be changed.",
                "- `issuer`: The new Issuer of this collection.",
                "- `admin`: The new Admin of this collection.",
                "- `freezer`: The new Freezer of this collection.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Approve an item to be transferred by a delegated third-party account.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be",
                "either the owner of the `item` or the admin of the collection.",
                "",
                "- `collection`: The collection of the item to be approved for delegated transfer.",
                "- `item`: The item of the item to be approved for delegated transfer.",
                "- `delegate`: The account to delegate permission to transfer the item.",
                "",
                "Important NOTE: The `approved` account gets reset after each transfer.",
                "",
                "Emits `ApprovedTransfer` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "maybe_check_delegate",
                  "type": 356,
                  "typeName": "Option<AccountIdLookupOf<T>>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Cancel the prior approval for the transfer of an item by a delegate.",
                "",
                "Origin must be either:",
                "- the `Force` origin;",
                "- `Signed` with the signer being the Admin of the `collection`;",
                "- `Signed` with the signer being the Owner of the `item`;",
                "",
                "Arguments:",
                "- `collection`: The collection of the item of whose approval will be cancelled.",
                "- `item`: The item of the item of whose approval will be cancelled.",
                "- `maybe_check_delegate`: If `Some` will ensure that the given account is the one to",
                "  which permission of transfer is delegated.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_item_status",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "free_holding",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Alter the attributes of a given item.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `collection`: The identifier of the item.",
                "- `owner`: The new Owner of this item.",
                "- `issuer`: The new Issuer of this item.",
                "- `admin`: The new Admin of this item.",
                "- `freezer`: The new Freezer of this item.",
                "- `free_holding`: Whether a deposit is taken for holding an item of this collection.",
                "- `is_frozen`: Whether this collection is frozen except for permissioned/admin",
                "instructions.",
                "",
                "Emits `ItemStatusChanged` with the identity of the item.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_attribute",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 135,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 136,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Set an attribute for a collection or item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "`collection`.",
                "",
                "If the origin is Signed, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to set.",
                "- `maybe_item`: The identifier of the item whose metadata to set.",
                "- `key`: The key of the attribute.",
                "- `value`: The value to which to set the attribute.",
                "",
                "Emits `AttributeSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_attribute",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 135,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Clear an attribute for a collection or item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "`collection`.",
                "",
                "Any deposit is freed for the collection's owner.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to clear.",
                "- `maybe_item`: The identifier of the item whose metadata to clear.",
                "- `key`: The key of the attribute.",
                "",
                "Emits `AttributeCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 132,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Set the metadata for an item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "`collection`.",
                "",
                "If the origin is Signed, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                "account any already reserved funds.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to set.",
                "- `item`: The identifier of the item whose metadata to set.",
                "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Clear the metadata for an item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "`item`.",
                "",
                "Any deposit is freed for the collection's owner.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to clear.",
                "- `item`: The identifier of the item whose metadata to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_collection_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 132,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Set the metadata for a collection.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                "the `collection`.",
                "",
                "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                "account any already reserved funds.",
                "",
                "- `collection`: The identifier of the item whose metadata to update.",
                "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                "- `is_frozen`: Whether the metadata should be frozen against further changes.",
                "",
                "Emits `CollectionMetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_collection_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Clear the metadata for a collection.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                "the `collection`.",
                "",
                "Any deposit is freed for the collection's owner.",
                "",
                "- `collection`: The identifier of the collection whose metadata to clear.",
                "",
                "Emits `CollectionMetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_accept_ownership",
              "fields": [
                {
                  "name": "maybe_collection",
                  "type": 134,
                  "typeName": "Option<T::CollectionId>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Set (or reset) the acceptance of ownership for a particular account.",
                "",
                "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
                "provider reference.",
                "",
                "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
                "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
                "  ownership transferal.",
                "",
                "Emits `OwnershipAcceptanceChanged`."
              ]
            },
            {
              "name": "set_collection_max_supply",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "max_supply",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Set the maximum amount of items a collection could have.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                "the `collection`.",
                "",
                "Note: This function can only succeed once per collection.",
                "",
                "- `collection`: The identifier of the collection to change.",
                "- `max_supply`: The maximum amount of items a collection could have.",
                "",
                "Emits `CollectionMaxSupplySet` event when successful."
              ]
            },
            {
              "name": "set_price",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 357,
                  "typeName": "Option<ItemPrice<T, I>>",
                  "docs": []
                },
                {
                  "name": "whitelisted_buyer",
                  "type": 356,
                  "typeName": "Option<AccountIdLookupOf<T>>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Set (or reset) the price for an item.",
                "",
                "Origin must be Signed and must be the owner of the asset `item`.",
                "",
                "- `collection`: The collection of the item.",
                "- `item`: The item to set the price for.",
                "- `price`: The price for the item. Pass `None`, to reset the price.",
                "- `buyer`: Restricts the buy operation to a specific account.",
                "",
                "Emits `ItemPriceSet` on success if the price is not `None`.",
                "Emits `ItemPriceRemoved` on success if the price is `None`."
              ]
            },
            {
              "name": "buy_item",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "bid_price",
                  "type": 6,
                  "typeName": "ItemPrice<T, I>",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Allows to buy an item if it's up for sale.",
                "",
                "Origin must be Signed and must not be the owner of the `item`.",
                "",
                "- `collection`: The collection of the item.",
                "- `item`: The item the sender wants to buy.",
                "- `bid_price`: The price the sender is willing to pay.",
                "",
                "Emits `ItemBought` on success."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 355,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "DestroyWitness"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "items",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "item_metadatas",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 40,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 356,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 233
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 233,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 357,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 358,
    "type": {
      "path": [
        "pallet_nfts",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "config",
                  "type": 359,
                  "typeName": "CollectionConfigFor<T, I>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new collection of non-fungible items from a public origin.",
                "",
                "This new collection has no items initially and its owner is the origin.",
                "",
                "The origin must be Signed and the sender must have sufficient funds free.",
                "",
                "`CollectionDeposit` funds of sender are reserved.",
                "",
                "Parameters:",
                "- `admin`: The admin of this collection. The admin is the initial address of each",
                "member of the collection's admin team.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "config",
                  "type": 359,
                  "typeName": "CollectionConfigFor<T, I>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new collection of non-fungible items from a privileged origin.",
                "",
                "This new collection has no items initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `owner`: The owner of this collection of items. The owner has full superuser",
                "  permissions over this item, but may later change and configure the permissions using",
                "  `transfer_ownership` and `set_team`.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "destroy",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 366,
                  "typeName": "DestroyWitness",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Destroy a collection of fungible items.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                "owner of the `collection`.",
                "",
                "NOTE: The collection must have 0 items to be destroyed.",
                "",
                "- `collection`: The identifier of the collection to be destroyed.",
                "- `witness`: Information on the items minted in the collection. This must be",
                "correct.",
                "",
                "Emits `Destroyed` event when successful.",
                "",
                "Weight: `O(m + c + a)` where:",
                "- `m = witness.item_metadatas`",
                "- `c = witness.item_configs`",
                "- `a = witness.attributes`"
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "mint_to",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "witness_data",
                  "type": 367,
                  "typeName": "Option<MintWitness<T::ItemId, DepositBalanceOf<T, I>>>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Mint an item of a particular collection.",
                "",
                "The origin must be Signed and the sender must comply with the `mint_settings` rules.",
                "",
                "- `collection`: The collection of the item to be minted.",
                "- `item`: An identifier of the new item.",
                "- `mint_to`: Account into which the item will be minted.",
                "- `witness_data`: When the mint type is `HolderOf(collection_id)`, then the owned",
                "  item_id from that collection needs to be provided within the witness data object. If",
                "  the mint price is set, then it should be additionally confirmed in the `witness_data`.",
                "",
                "Note: the deposit will be taken from the `origin` and not the `owner` of the `item`.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_mint",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "mint_to",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "item_config",
                  "type": 369,
                  "typeName": "ItemConfig",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Mint an item of a particular collection from a privileged origin.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` and the sender must be the",
                "Issuer of the `collection`.",
                "",
                "- `collection`: The collection of the item to be minted.",
                "- `item`: An identifier of the new item.",
                "- `mint_to`: Account into which the item will be minted.",
                "- `item_config`: A config of the new item.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Destroy a single item.",
                "",
                "The origin must conform to `ForceOrigin` or must be Signed and the signing account must",
                "be the owner of the `item`.",
                "",
                "- `collection`: The collection of the item to be burned.",
                "- `item`: The item to be burned.",
                "",
                "Emits `Burned`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Move an item from the sender account to another.",
                "",
                "Origin must be Signed and the signing account must be either:",
                "- the Owner of the `item`;",
                "- the approved delegate for the `item` (in this case, the approval is reset).",
                "",
                "Arguments:",
                "- `collection`: The collection of the item to be transferred.",
                "- `item`: The item to be transferred.",
                "- `dest`: The account to receive ownership of the item.",
                "",
                "Emits `Transferred`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "redeposit",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "items",
                  "type": 133,
                  "typeName": "Vec<T::ItemId>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Re-evaluate the deposits on some items.",
                "",
                "Origin must be Signed and the sender should be the Owner of the `collection`.",
                "",
                "- `collection`: The collection of the items to be reevaluated.",
                "- `items`: The items of the collection whose deposits will be reevaluated.",
                "",
                "NOTE: This exists as a best-effort function. Any items which are unknown or",
                "in the case that the owner account does not have reservable funds to pay for a",
                "deposit increase are ignored. Generally the owner isn't going to call this on items",
                "whose existing deposit is less than the refreshed deposit as it would only cost them,",
                "so it's of little consequence.",
                "",
                "It will still return an error in the case that the collection is unknown or the signer",
                "is not permitted to call it.",
                "",
                "Weight: `O(items.len())`"
              ]
            },
            {
              "name": "lock_item_transfer",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Disallow further unprivileged transfer of an item.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                "",
                "- `collection`: The collection of the item to be changed.",
                "- `item`: The item to become non-transferable.",
                "",
                "Emits `ItemTransferLocked`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "unlock_item_transfer",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Re-allow unprivileged transfer of an item.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the `collection`.",
                "",
                "- `collection`: The collection of the item to be changed.",
                "- `item`: The item to become transferable.",
                "",
                "Emits `ItemTransferUnlocked`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "lock_collection",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "lock_settings",
                  "type": 360,
                  "typeName": "CollectionSettings",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Disallows specified settings for the whole collection.",
                "",
                "Origin must be Signed and the sender should be the Owner of the `collection`.",
                "",
                "- `collection`: The collection to be locked.",
                "- `lock_settings`: The settings to be locked.",
                "",
                "Note: it's possible to only lock(set) the setting, but not to unset it.",
                "",
                "Emits `CollectionLocked`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "new_owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Change the Owner of a collection.",
                "",
                "Origin must be Signed and the sender should be the Owner of the `collection`.",
                "",
                "- `collection`: The collection whose owner should be changed.",
                "- `owner`: The new Owner of this collection. They must have called",
                "  `set_accept_ownership` with `collection` in order for this operation to succeed.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 356,
                  "typeName": "Option<AccountIdLookupOf<T>>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 356,
                  "typeName": "Option<AccountIdLookupOf<T>>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 356,
                  "typeName": "Option<AccountIdLookupOf<T>>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Change the Issuer, Admin and Freezer of a collection.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "`collection`.",
                "",
                "Note: by setting the role to `None` only the `ForceOrigin` will be able to change it",
                "after to `Some(account)`.",
                "",
                "- `collection`: The collection whose team should be changed.",
                "- `issuer`: The new Issuer of this collection.",
                "- `admin`: The new Admin of this collection.",
                "- `freezer`: The new Freezer of this collection.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_collection_owner",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Change the Owner of a collection.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `collection`: The identifier of the collection.",
                "- `owner`: The new Owner of this collection.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_collection_config",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "config",
                  "type": 359,
                  "typeName": "CollectionConfigFor<T, I>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Change the config of a collection.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `collection`: The identifier of the collection.",
                "- `config`: The new config of this collection.",
                "",
                "Emits `CollectionConfigChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "maybe_deadline",
                  "type": 134,
                  "typeName": "Option<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Approve an item to be transferred by a delegated third-party account.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "`item`.",
                "",
                "- `collection`: The collection of the item to be approved for delegated transfer.",
                "- `item`: The item to be approved for delegated transfer.",
                "- `delegate`: The account to delegate permission to transfer the item.",
                "- `maybe_deadline`: Optional deadline for the approval. Specified by providing the",
                "\tnumber of blocks after which the approval will expire",
                "",
                "Emits `TransferApproved` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Cancel one of the transfer approvals for a specific item.",
                "",
                "Origin must be either:",
                "- the `Force` origin;",
                "- `Signed` with the signer being the Owner of the `item`;",
                "",
                "Arguments:",
                "- `collection`: The collection of the item of whose approval will be cancelled.",
                "- `item`: The item of the collection of whose approval will be cancelled.",
                "- `delegate`: The account that is going to loose their approval.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_all_transfer_approvals",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Cancel all the approvals of a specific item.",
                "",
                "Origin must be either:",
                "- the `Force` origin;",
                "- `Signed` with the signer being the Owner of the `item`;",
                "",
                "Arguments:",
                "- `collection`: The collection of the item of whose approvals will be cleared.",
                "- `item`: The item of the collection of whose approvals will be cleared.",
                "",
                "Emits `AllApprovalsCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "lock_item_properties",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "lock_metadata",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "lock_attributes",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Disallows changing the metadata or attributes of the item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin",
                "of the `collection`.",
                "",
                "- `collection`: The collection if the `item`.",
                "- `item`: An item to be locked.",
                "- `lock_metadata`: Specifies whether the metadata should be locked.",
                "- `lock_attributes`: Specifies whether the attributes in the `CollectionOwner` namespace",
                "  should be locked.",
                "",
                "Note: `lock_attributes` affects the attributes in the `CollectionOwner` namespace only.",
                "When the metadata or attributes are locked, it won't be possible the unlock them.",
                "",
                "Emits `ItemPropertiesLocked`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_attribute",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "namespace",
                  "type": 140,
                  "typeName": "AttributeNamespace<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 136,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Set an attribute for a collection or item.",
                "",
                "Origin must be Signed and must conform to the namespace ruleset:",
                "- `CollectionOwner` namespace could be modified by the `collection` Admin only;",
                "- `ItemOwner` namespace could be modified by the `maybe_item` owner only. `maybe_item`",
                "  should be set in that case;",
                "- `Account(AccountId)` namespace could be modified only when the `origin` was given a",
                "  permission to do so;",
                "",
                "The funds of `origin` are reserved according to the formula:",
                "`AttributeDepositBase + DepositPerByte * (key.len + value.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to set.",
                "- `maybe_item`: The identifier of the item whose metadata to set.",
                "- `namespace`: Attribute's namespace.",
                "- `key`: The key of the attribute.",
                "- `value`: The value to which to set the attribute.",
                "",
                "Emits `AttributeSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_set_attribute",
              "fields": [
                {
                  "name": "set_as",
                  "type": 137,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "namespace",
                  "type": 140,
                  "typeName": "AttributeNamespace<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 136,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::ValueLimit>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Force-set an attribute for a collection or item.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "If the attribute already exists and it was set by another account, the deposit",
                "will be returned to the previous owner.",
                "",
                "- `set_as`: An optional owner of the attribute.",
                "- `collection`: The identifier of the collection whose item's metadata to set.",
                "- `maybe_item`: The identifier of the item whose metadata to set.",
                "- `namespace`: Attribute's namespace.",
                "- `key`: The key of the attribute.",
                "- `value`: The value to which to set the attribute.",
                "",
                "Emits `AttributeSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_attribute",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "namespace",
                  "type": 140,
                  "typeName": "AttributeNamespace<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 136,
                  "typeName": "BoundedVec<u8, T::KeyLimit>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Clear an attribute for a collection or item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Owner of the",
                "attribute.",
                "",
                "Any deposit is freed for the collection's owner.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to clear.",
                "- `maybe_item`: The identifier of the item whose metadata to clear.",
                "- `namespace`: Attribute's namespace.",
                "- `key`: The key of the attribute.",
                "",
                "Emits `AttributeCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_item_attributes",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Approve item's attributes to be changed by a delegated third-party account.",
                "",
                "Origin must be Signed and must be an owner of the `item`.",
                "",
                "- `collection`: A collection of the item.",
                "- `item`: The item that holds attributes.",
                "- `delegate`: The account to delegate permission to change attributes of the item.",
                "",
                "Emits `ItemAttributesApprovalAdded` on success."
              ]
            },
            {
              "name": "cancel_item_attributes_approval",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 370,
                  "typeName": "CancelAttributesApprovalWitness",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Cancel the previously provided approval to change item's attributes.",
                "All the previously set attributes by the `delegate` will be removed.",
                "",
                "Origin must be Signed and must be an owner of the `item`.",
                "",
                "- `collection`: Collection that the item is contained within.",
                "- `item`: The item that holds attributes.",
                "- `delegate`: The previously approved account to remove.",
                "",
                "Emits `ItemAttributesApprovalRemoved` on success."
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Set the metadata for an item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
                "`collection`.",
                "",
                "If the origin is Signed, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                "account any already reserved funds.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to set.",
                "- `item`: The identifier of the item whose metadata to set.",
                "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                "",
                "Emits `ItemMetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Clear the metadata for an item.",
                "",
                "Origin must be either `ForceOrigin` or Signed and the sender should be the Admin of the",
                "`collection`.",
                "",
                "Any deposit is freed for the collection's owner.",
                "",
                "- `collection`: The identifier of the collection whose item's metadata to clear.",
                "- `item`: The identifier of the item whose metadata to clear.",
                "",
                "Emits `ItemMetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_collection_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 139,
                  "typeName": "BoundedVec<u8, T::StringLimit>",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "Set the metadata for a collection.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
                "the `collection`.",
                "",
                "If the origin is `Signed`, then funds of signer are reserved according to the formula:",
                "`MetadataDepositBase + DepositPerByte * data.len` taking into",
                "account any already reserved funds.",
                "",
                "- `collection`: The identifier of the item whose metadata to update.",
                "- `data`: The general information of this item. Limited in length by `StringLimit`.",
                "",
                "Emits `CollectionMetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_collection_metadata",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Clear the metadata for a collection.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Admin of",
                "the `collection`.",
                "",
                "Any deposit is freed for the collection's owner.",
                "",
                "- `collection`: The identifier of the collection whose metadata to clear.",
                "",
                "Emits `CollectionMetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_accept_ownership",
              "fields": [
                {
                  "name": "maybe_collection",
                  "type": 134,
                  "typeName": "Option<T::CollectionId>",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Set (or reset) the acceptance of ownership for a particular account.",
                "",
                "Origin must be `Signed` and if `maybe_collection` is `Some`, then the signer must have a",
                "provider reference.",
                "",
                "- `maybe_collection`: The identifier of the collection whose ownership the signer is",
                "  willing to accept, or if `None`, an indication that the signer is willing to accept no",
                "  ownership transferal.",
                "",
                "Emits `OwnershipAcceptanceChanged`."
              ]
            },
            {
              "name": "set_collection_max_supply",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "max_supply",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "Set the maximum number of items a collection could have.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Owner of",
                "the `collection`.",
                "",
                "- `collection`: The identifier of the collection to change.",
                "- `max_supply`: The maximum number of items a collection could have.",
                "",
                "Emits `CollectionMaxSupplySet` event when successful."
              ]
            },
            {
              "name": "update_mint_settings",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "mint_settings",
                  "type": 362,
                  "typeName": "MintSettings<BalanceOf<T, I>, BlockNumberFor<T>, T::CollectionId>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": [
                "Update mint settings.",
                "",
                "Origin must be either `ForceOrigin` or `Signed` and the sender should be the Issuer",
                "of the `collection`.",
                "",
                "- `collection`: The identifier of the collection to change.",
                "- `mint_settings`: The new mint settings.",
                "",
                "Emits `CollectionMintSettingsUpdated` event when successful."
              ]
            },
            {
              "name": "set_price",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "price",
                  "type": 357,
                  "typeName": "Option<ItemPrice<T, I>>",
                  "docs": []
                },
                {
                  "name": "whitelisted_buyer",
                  "type": 356,
                  "typeName": "Option<AccountIdLookupOf<T>>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": [
                "Set (or reset) the price for an item.",
                "",
                "Origin must be Signed and must be the owner of the `item`.",
                "",
                "- `collection`: The collection of the item.",
                "- `item`: The item to set the price for.",
                "- `price`: The price for the item. Pass `None`, to reset the price.",
                "- `buyer`: Restricts the buy operation to a specific account.",
                "",
                "Emits `ItemPriceSet` on success if the price is not `None`.",
                "Emits `ItemPriceRemoved` on success if the price is `None`."
              ]
            },
            {
              "name": "buy_item",
              "fields": [
                {
                  "name": "collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "bid_price",
                  "type": 6,
                  "typeName": "ItemPrice<T, I>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": [
                "Allows to buy an item if it's up for sale.",
                "",
                "Origin must be Signed and must not be the owner of the `item`.",
                "",
                "- `collection`: The collection of the item.",
                "- `item`: The item the sender wants to buy.",
                "- `bid_price`: The price the sender is willing to pay.",
                "",
                "Emits `ItemBought` on success."
              ]
            },
            {
              "name": "pay_tips",
              "fields": [
                {
                  "name": "tips",
                  "type": 371,
                  "typeName": "BoundedVec<ItemTipOf<T, I>, T::MaxTips>",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": [
                "Allows to pay the tips.",
                "",
                "Origin must be Signed.",
                "",
                "- `tips`: Tips array.",
                "",
                "Emits `TipSent` on every tip transfer."
              ]
            },
            {
              "name": "create_swap",
              "fields": [
                {
                  "name": "offered_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "offered_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "desired_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "maybe_desired_item",
                  "type": 134,
                  "typeName": "Option<T::ItemId>",
                  "docs": []
                },
                {
                  "name": "maybe_price",
                  "type": 141,
                  "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                  "docs": []
                },
                {
                  "name": "duration",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": [
                "Register a new atomic swap, declaring an intention to send an `item` in exchange for",
                "`desired_item` from origin to target on the current blockchain.",
                "The target can execute the swap during the specified `duration` of blocks (if set).",
                "Additionally, the price could be set for the desired `item`.",
                "",
                "Origin must be Signed and must be an owner of the `item`.",
                "",
                "- `collection`: The collection of the item.",
                "- `item`: The item an owner wants to give.",
                "- `desired_collection`: The collection of the desired item.",
                "- `desired_item`: The desired item an owner wants to receive.",
                "- `maybe_price`: The price an owner is willing to pay or receive for the desired `item`.",
                "- `duration`: A deadline for the swap. Specified by providing the number of blocks",
                "\tafter which the swap will expire.",
                "",
                "Emits `SwapCreated` on success."
              ]
            },
            {
              "name": "cancel_swap",
              "fields": [
                {
                  "name": "offered_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "offered_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": [
                "Cancel an atomic swap.",
                "",
                "Origin must be Signed.",
                "Origin must be an owner of the `item` if the deadline hasn't expired.",
                "",
                "- `collection`: The collection of the item.",
                "- `item`: The item an owner wants to give.",
                "",
                "Emits `SwapCancelled` on success."
              ]
            },
            {
              "name": "claim_swap",
              "fields": [
                {
                  "name": "send_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "send_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "receive_collection",
                  "type": 4,
                  "typeName": "T::CollectionId",
                  "docs": []
                },
                {
                  "name": "receive_item",
                  "type": 4,
                  "typeName": "T::ItemId",
                  "docs": []
                },
                {
                  "name": "witness_price",
                  "type": 141,
                  "typeName": "Option<PriceWithDirection<ItemPrice<T, I>>>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": [
                "Claim an atomic swap.",
                "This method executes a pending swap, that was created by a counterpart before.",
                "",
                "Origin must be Signed and must be an owner of the `item`.",
                "",
                "- `send_collection`: The collection of the item to be sent.",
                "- `send_item`: The item to be sent.",
                "- `receive_collection`: The collection of the item to be received.",
                "- `receive_item`: The item to be received.",
                "- `witness_price`: A price that was previously agreed on.",
                "",
                "Emits `SwapClaimed` on success."
              ]
            },
            {
              "name": "mint_pre_signed",
              "fields": [
                {
                  "name": "mint_data",
                  "type": 374,
                  "typeName": "Box<PreSignedMintOf<T, I>>",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 375,
                  "typeName": "T::OffchainSignature",
                  "docs": []
                },
                {
                  "name": "signer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": [
                "Mint an item by providing the pre-signed approval.",
                "",
                "Origin must be Signed.",
                "",
                "- `mint_data`: The pre-signed approval that consists of the information about the item,",
                "  its metadata, attributes, who can mint it (`None` for anyone) and until what block",
                "  number.",
                "- `signature`: The signature of the `data` object.",
                "- `signer`: The `data` object's signer. Should be an Issuer of the collection.",
                "",
                "Emits `Issued` on success.",
                "Emits `AttributeSet` if the attributes were provided.",
                "Emits `ItemMetadataSet` if the metadata was not empty."
              ]
            },
            {
              "name": "set_attributes_pre_signed",
              "fields": [
                {
                  "name": "data",
                  "type": 378,
                  "typeName": "PreSignedAttributesOf<T, I>",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 375,
                  "typeName": "T::OffchainSignature",
                  "docs": []
                },
                {
                  "name": "signer",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": [
                "Set attributes for an item by providing the pre-signed approval.",
                "",
                "Origin must be Signed and must be an owner of the `data.item`.",
                "",
                "- `data`: The pre-signed approval that consists of the information about the item,",
                "  attributes to update and until what block number.",
                "- `signature`: The signature of the `data` object.",
                "- `signer`: The `data` object's signer. Should be an Admin of the collection for the",
                "  `CollectionOwner` namespace.",
                "",
                "Emits `AttributeSet` for each provided attribute.",
                "Emits `ItemAttributesApprovalAdded` if the approval wasn't set before.",
                "Emits `PreSignedAttributesSet` on success."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 359,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "CollectionConfig"
      ],
      "params": [
        {
          "name": "Price",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "CollectionId",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "settings",
              "type": 360,
              "typeName": "CollectionSettings",
              "docs": []
            },
            {
              "name": "max_supply",
              "type": 134,
              "typeName": "Option<u32>",
              "docs": []
            },
            {
              "name": "mint_settings",
              "type": 362,
              "typeName": "MintSettings<Price, BlockNumber, CollectionId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 360,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "BitFlags"
      ],
      "params": [
        {
          "name": "T",
          "type": 361
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 12,
              "typeName": "CollectionSetting",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 361,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "CollectionSetting"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TransferableItems",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UnlockedMetadata",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UnlockedAttributes",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "UnlockedMaxSupply",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "DepositRequired",
              "fields": [],
              "index": 16,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 362,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "MintSettings"
      ],
      "params": [
        {
          "name": "Price",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "CollectionId",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "mint_type",
              "type": 363,
              "typeName": "MintType<CollectionId>",
              "docs": []
            },
            {
              "name": "price",
              "type": 357,
              "typeName": "Option<Price>",
              "docs": []
            },
            {
              "name": "start_block",
              "type": 134,
              "typeName": "Option<BlockNumber>",
              "docs": []
            },
            {
              "name": "end_block",
              "type": 134,
              "typeName": "Option<BlockNumber>",
              "docs": []
            },
            {
              "name": "default_item_settings",
              "type": 364,
              "typeName": "ItemSettings",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 363,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "MintType"
      ],
      "params": [
        {
          "name": "CollectionId",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Issuer",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Public",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "HolderOf",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "CollectionId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 364,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "BitFlags"
      ],
      "params": [
        {
          "name": "T",
          "type": 365
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 12,
              "typeName": "ItemSetting",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 365,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "ItemSetting"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Transferable",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UnlockedMetadata",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UnlockedAttributes",
              "fields": [],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 366,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "DestroyWitness"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "item_metadatas",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "item_configs",
              "type": 40,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 40,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 367,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 368
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 368,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 368,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "MintWitness"
      ],
      "params": [
        {
          "name": "ItemId",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owned_item",
              "type": 134,
              "typeName": "Option<ItemId>",
              "docs": []
            },
            {
              "name": "mint_price",
              "type": 357,
              "typeName": "Option<Balance>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 369,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "ItemConfig"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "settings",
              "type": 364,
              "typeName": "ItemSettings",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 370,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "CancelAttributesApprovalWitness"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account_attributes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 371,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 372
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 373,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 372,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "ItemTip"
      ],
      "params": [
        {
          "name": "CollectionId",
          "type": 4
        },
        {
          "name": "ItemId",
          "type": 4
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Amount",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "collection",
              "type": 4,
              "typeName": "CollectionId",
              "docs": []
            },
            {
              "name": "item",
              "type": 4,
              "typeName": "ItemId",
              "docs": []
            },
            {
              "name": "receiver",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Amount",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 373,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 372
        }
      },
      "docs": []
    }
  },
  {
    "id": 374,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "PreSignedMint"
      ],
      "params": [
        {
          "name": "CollectionId",
          "type": 4
        },
        {
          "name": "ItemId",
          "type": 4
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Deadline",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "collection",
              "type": 4,
              "typeName": "CollectionId",
              "docs": []
            },
            {
              "name": "item",
              "type": 4,
              "typeName": "ItemId",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 160,
              "typeName": "Vec<(Vec<u8>, Vec<u8>)>",
              "docs": []
            },
            {
              "name": "metadata",
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            },
            {
              "name": "only_account",
              "type": 137,
              "typeName": "Option<AccountId>",
              "docs": []
            },
            {
              "name": "deadline",
              "type": 4,
              "typeName": "Deadline",
              "docs": []
            },
            {
              "name": "mint_price",
              "type": 357,
              "typeName": "Option<Balance>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 375,
    "type": {
      "path": [
        "sp_runtime",
        "MultiSignature"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ed25519",
              "fields": [
                {
                  "name": null,
                  "type": 376,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sr25519",
              "fields": [
                {
                  "name": null,
                  "type": 376,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ecdsa",
              "fields": [
                {
                  "name": null,
                  "type": 377,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 376,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 64,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 377,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 65,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 378,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "PreSignedAttributes"
      ],
      "params": [
        {
          "name": "CollectionId",
          "type": 4
        },
        {
          "name": "ItemId",
          "type": 4
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Deadline",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "collection",
              "type": 4,
              "typeName": "CollectionId",
              "docs": []
            },
            {
              "name": "item",
              "type": 4,
              "typeName": "ItemId",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 160,
              "typeName": "Vec<(Vec<u8>, Vec<u8>)>",
              "docs": []
            },
            {
              "name": "namespace",
              "type": 140,
              "typeName": "AttributeNamespace<AccountId>",
              "docs": []
            },
            {
              "name": "deadline",
              "type": 4,
              "typeName": "Deadline",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 379,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new class of fungible assets from a public origin.",
                "",
                "This new asset class has no assets initially and its owner is the origin.",
                "",
                "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                "",
                "Funds of sender are reserved by `AssetDeposit`.",
                "",
                "Parameters:",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                "member of the asset class's admin team.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new class of fungible assets from a privileged origin.",
                "",
                "This new asset class has no assets initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                "over this asset, but may later change and configure the permissions using",
                "`transfer_ownership` and `set_team`.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "start_destroy",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Start the process of destroying a fungible asset class.",
                "",
                "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                "destruction of an asset class.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "The asset class must be frozen before calling `start_destroy`."
              ]
            },
            {
              "name": "destroy_accounts",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Destroy all accounts associated with a given asset.",
                "",
                "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedAccounts` event."
              ]
            },
            {
              "name": "destroy_approvals",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                "",
                "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedApprovals` event."
              ]
            },
            {
              "name": "finish_destroy",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Complete destroying asset and unreserve currency.",
                "",
                "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                "hand.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each successful call emits the `Event::Destroyed` event."
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Mint assets of a particular class.",
                "",
                "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount minted.",
                "- `beneficiary`: The account to be credited with the minted assets.",
                "- `amount`: The amount of the asset to be minted.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                "",
                "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                "",
                "Bails with `NoAccount` if the `who` is already dead.",
                "",
                "- `id`: The identifier of the asset to have some amount burned.",
                "- `who`: The account to be debited from.",
                "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                "",
                "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                "minimum for the asset, then the amount burned is increased to take it to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Move some assets from the sender account to another.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Move some assets from the sender account to another, keeping the sender account alive.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Move some assets from one account to another.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `source`: The account to be debited.",
                "- `dest`: The account to be credited.",
                "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the `source` balance above zero but",
                "below the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                "`dest`."
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                "account that does not have an entry, use `touch_other` first.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Allow unprivileged transfers to and from an account again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be unfrozen.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "freeze_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Disallow further unprivileged transfers for the asset class.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Allow unprivileged transfers for the asset again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be thawed.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Change the Owner of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Change the Issuer, Admin and Freezer of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Set the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Funds of sender are reserved according to the formula:",
                "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Any deposit is freed for the asset owner.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Force the metadata for an asset to some value.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is left alone.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
              ]
            },
            {
              "name": "force_clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is returned.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_asset_status",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Alter the attributes of a given asset.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                "value to account for the state bloat associated with its balance storage. If set to",
                "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                "an ED in the Balances pallet or whatever else is used to control user-account state",
                "growth).",
                "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                "instructions.",
                "",
                "Emits `AssetStatusChanged` with the identity of the asset.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Approve an amount of asset for transfer by a delegated third-party account.",
                "",
                "Origin must be Signed.",
                "",
                "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                "for the purpose of holding the approval. If some non-zero amount of assets is already",
                "approved from signing account to `delegate`, then it is topped up or unreserved to",
                "meet the right value.",
                "",
                "NOTE: The signing account does not need to own `amount` of assets at the point of",
                "making this call.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account to delegate permission to transfer asset.",
                "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                "already an approval in place, then this acts additively.",
                "",
                "Emits `ApprovedTransfer` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be Signed and there must be an approval in place between signer and",
                "`delegate`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                "account of the asset `id`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_approved",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Transfer some asset balance from a previously delegated account to some third-party",
                "account.",
                "",
                "Origin must be Signed and there must be an approval in place by the `owner` to the",
                "signer.",
                "",
                "If the entire amount approved for transfer is transferred, then any deposit previously",
                "reserved by `approve_transfer` is unreserved.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                "from which the asset balance will be withdrawn.",
                "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                "- `amount`: The amount of assets to transfer.",
                "",
                "Emits `TransferredApproved` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "touch",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "Create an asset account for non-provider assets.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                "  to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "allow_burn",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                "account.",
                "",
                "The origin must be Signed.",
                "",
                "- `id`: The identifier of the asset for which the caller would like the deposit",
                "  refunded.",
                "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "set_min_balance",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Sets the minimum balance of an asset.",
                "",
                "Only works if there aren't any accounts that are holding the asset or if",
                "the new value of `min_balance` is less than the old one.",
                "",
                "Origin must be Signed and the sender has to be the Owner of the",
                "asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `min_balance`: The new value of `min_balance`.",
                "",
                "Emits `AssetMinBalanceChanged` event when successful."
              ]
            },
            {
              "name": "touch_other",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "Create an asset account for `who`.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                "  must have sufficient funds for a deposit to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "- `who`: The account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund_other",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": [
                "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                "",
                "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                "order to burn a non-zero balance of the asset, the caller must be the account and should",
                "use `refund`.",
                "",
                "- `id`: The identifier of the asset for the account holding a deposit.",
                "- `who`: The account to refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "block",
              "fields": [
                {
                  "name": "id",
                  "type": 37,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the account's asset.",
                "- `who`: The account to be unblocked.",
                "",
                "Emits `Blocked`.",
                "",
                "Weight: `O(1)`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 380,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a new class of fungible assets from a public origin.",
                "",
                "This new asset class has no assets initially and its owner is the origin.",
                "",
                "The origin must conform to the configured `CreateOrigin` and have sufficient funds free.",
                "",
                "Funds of sender are reserved by `AssetDeposit`.",
                "",
                "Parameters:",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                "- `admin`: The admin of this class of assets. The admin is the initial address of each",
                "member of the asset class's admin team.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `Created` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_create",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Issue a new class of fungible assets from a privileged origin.",
                "",
                "This new asset class has no assets initially.",
                "",
                "The origin must conform to `ForceOrigin`.",
                "",
                "Unlike `create`, no funds are reserved.",
                "",
                "- `id`: The identifier of the new asset. This must not be currently in use to identify",
                "an existing asset. If [`NextAssetId`] is set, then this must be equal to it.",
                "- `owner`: The owner of this class of assets. The owner has full superuser permissions",
                "over this asset, but may later change and configure the permissions using",
                "`transfer_ownership` and `set_team`.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "",
                "Emits `ForceCreated` event when successful.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "start_destroy",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Start the process of destroying a fungible asset class.",
                "",
                "`start_destroy` is the first in a series of extrinsics that should be called, to allow",
                "destruction of an asset class.",
                "",
                "The origin must conform to `ForceOrigin` or must be `Signed` by the asset's `owner`.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "The asset class must be frozen before calling `start_destroy`."
              ]
            },
            {
              "name": "destroy_accounts",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Destroy all accounts associated with a given asset.",
                "",
                "`destroy_accounts` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all accounts. It will destroy `RemoveItemsLimit` accounts at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedAccounts` event."
              ]
            },
            {
              "name": "destroy_approvals",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Destroy all approvals associated with a given asset up to the max (T::RemoveItemsLimit).",
                "",
                "`destroy_approvals` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state.",
                "",
                "Due to weight restrictions, this function may need to be called multiple times to fully",
                "destroy all approvals. It will destroy `RemoveItemsLimit` approvals at a time.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each call emits the `Event::DestroyedApprovals` event."
              ]
            },
            {
              "name": "finish_destroy",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Complete destroying asset and unreserve currency.",
                "",
                "`finish_destroy` should only be called after `start_destroy` has been called, and the",
                "asset is in a `Destroying` state. All accounts or approvals should be destroyed before",
                "hand.",
                "",
                "- `id`: The identifier of the asset to be destroyed. This must identify an existing",
                "  asset.",
                "",
                "Each successful call emits the `Event::Destroyed` event."
              ]
            },
            {
              "name": "mint",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Mint assets of a particular class.",
                "",
                "The origin must be Signed and the sender must be the Issuer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount minted.",
                "- `beneficiary`: The account to be credited with the minted assets.",
                "- `amount`: The amount of the asset to be minted.",
                "",
                "Emits `Issued` event when successful.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existing balance of `beneficiary`; Account pre-existence of `beneficiary`."
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Reduce the balance of `who` by as much as possible up to `amount` assets of `id`.",
                "",
                "Origin must be Signed and the sender should be the Manager of the asset `id`.",
                "",
                "Bails with `NoAccount` if the `who` is already dead.",
                "",
                "- `id`: The identifier of the asset to have some amount burned.",
                "- `who`: The account to be debited from.",
                "- `amount`: The maximum amount by which `who`'s balance should be reduced.",
                "",
                "Emits `Burned` with the actual amount burned. If this takes the balance to below the",
                "minimum for the asset, then the amount burned is increased to take it to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Post-existence of `who`; Pre & post Zombie-status of `who`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Move some assets from the sender account to another.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Move some assets from the sender account to another, keeping the sender account alive.",
                "",
                "Origin must be Signed.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `target`: The account to be credited.",
                "- `amount`: The amount by which the sender's balance of assets should be reduced and",
                "`target`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the sender balance above zero but below",
                "the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `target`; Post-existence of sender; Account pre-existence of",
                "`target`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "source",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Move some assets from one account to another.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to have some amount transferred.",
                "- `source`: The account to be debited.",
                "- `dest`: The account to be credited.",
                "- `amount`: The amount by which the `source`'s balance of assets should be reduced and",
                "`dest`'s balance increased. The amount actually transferred may be slightly greater in",
                "the case that the transfer would otherwise take the `source` balance above zero but",
                "below the minimum balance. Must be greater than zero.",
                "",
                "Emits `Transferred` with the actual amount transferred. If this takes the source balance",
                "to below the minimum for the asset, then the amount transferred is increased to take it",
                "to zero.",
                "",
                "Weight: `O(1)`",
                "Modes: Pre-existence of `dest`; Post-existence of `source`; Account pre-existence of",
                "`dest`."
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` from an account `who`. `who`",
                "must already exist as an entry in `Account`s of the asset. If you want to freeze an",
                "account that does not have an entry, use `touch_other` first.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Allow unprivileged transfers to and from an account again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `who`: The account to be unfrozen.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "freeze_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Disallow further unprivileged transfers for the asset class.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "",
                "Emits `Frozen`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "thaw_asset",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Allow unprivileged transfers for the asset again.",
                "",
                "Origin must be Signed and the sender should be the Admin of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be thawed.",
                "",
                "Emits `Thawed`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_ownership",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Change the Owner of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "",
                "Emits `OwnerChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_team",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Change the Issuer, Admin and Freezer of an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "- `id`: The identifier of the asset to be frozen.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "",
                "Emits `TeamChanged`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Set the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Funds of sender are reserved according to the formula:",
                "`MetadataDepositBase + MetadataDepositPerByte * (name.len + symbol.len)` taking into",
                "account any already reserved funds.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be Signed and the sender should be the Owner of the asset `id`.",
                "",
                "Any deposit is freed for the asset owner.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_set_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "symbol",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "decimals",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Force the metadata for an asset to some value.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is left alone.",
                "",
                "- `id`: The identifier of the asset to update.",
                "- `name`: The user friendly name of this asset. Limited in length by `StringLimit`.",
                "- `symbol`: The exchange symbol for this asset. Limited in length by `StringLimit`.",
                "- `decimals`: The number of decimals this asset uses to represent one unit.",
                "",
                "Emits `MetadataSet`.",
                "",
                "Weight: `O(N + S)` where N and S are the length of the name and symbol respectively."
              ]
            },
            {
              "name": "force_clear_metadata",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Clear the metadata for an asset.",
                "",
                "Origin must be ForceOrigin.",
                "",
                "Any deposit is returned.",
                "",
                "- `id`: The identifier of the asset to clear.",
                "",
                "Emits `MetadataCleared`.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_asset_status",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "issuer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "admin",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "freezer",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "is_sufficient",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                },
                {
                  "name": "is_frozen",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Alter the attributes of a given asset.",
                "",
                "Origin must be `ForceOrigin`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The new Owner of this asset.",
                "- `issuer`: The new Issuer of this asset.",
                "- `admin`: The new Admin of this asset.",
                "- `freezer`: The new Freezer of this asset.",
                "- `min_balance`: The minimum balance of this new asset that any single account must",
                "have. If an account's balance is reduced below this, then it collapses to zero.",
                "- `is_sufficient`: Whether a non-zero balance of this asset is deposit of sufficient",
                "value to account for the state bloat associated with its balance storage. If set to",
                "`true`, then non-zero balances may be stored without a `consumer` reference (and thus",
                "an ED in the Balances pallet or whatever else is used to control user-account state",
                "growth).",
                "- `is_frozen`: Whether this asset class is frozen except for permissioned/admin",
                "instructions.",
                "",
                "Emits `AssetStatusChanged` with the identity of the asset.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "approve_transfer",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Approve an amount of asset for transfer by a delegated third-party account.",
                "",
                "Origin must be Signed.",
                "",
                "Ensures that `ApprovalDeposit` worth of `Currency` is reserved from signing account",
                "for the purpose of holding the approval. If some non-zero amount of assets is already",
                "approved from signing account to `delegate`, then it is topped up or unreserved to",
                "meet the right value.",
                "",
                "NOTE: The signing account does not need to own `amount` of assets at the point of",
                "making this call.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account to delegate permission to transfer asset.",
                "- `amount`: The amount of asset that may be transferred by `delegate`. If there is",
                "already an approval in place, then this acts additively.",
                "",
                "Emits `ApprovedTransfer` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be Signed and there must be an approval in place between signer and",
                "`delegate`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "force_cancel_approval",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "delegate",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Cancel all of some asset approved for delegated transfer by a third-party account.",
                "",
                "Origin must be either ForceOrigin or Signed origin with the signer being the Admin",
                "account of the asset `id`.",
                "",
                "Unreserves any deposit previously reserved by `approve_transfer` for the approval.",
                "",
                "- `id`: The identifier of the asset.",
                "- `delegate`: The account delegated permission to transfer asset.",
                "",
                "Emits `ApprovalCancelled` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "transfer_approved",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 44,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Transfer some asset balance from a previously delegated account to some third-party",
                "account.",
                "",
                "Origin must be Signed and there must be an approval in place by the `owner` to the",
                "signer.",
                "",
                "If the entire amount approved for transfer is transferred, then any deposit previously",
                "reserved by `approve_transfer` is unreserved.",
                "",
                "- `id`: The identifier of the asset.",
                "- `owner`: The account which previously approved for a transfer of at least `amount` and",
                "from which the asset balance will be withdrawn.",
                "- `destination`: The account to which the asset balance of `amount` will be transferred.",
                "- `amount`: The amount of assets to transfer.",
                "",
                "Emits `TransferredApproved` on success.",
                "",
                "Weight: `O(1)`"
              ]
            },
            {
              "name": "touch",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "Create an asset account for non-provider assets.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed; the signer account must have sufficient funds for a deposit",
                "  to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "allow_burn",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Return the deposit (if any) of an asset account or a consumer reference (if any) of an",
                "account.",
                "",
                "The origin must be Signed.",
                "",
                "- `id`: The identifier of the asset for which the caller would like the deposit",
                "  refunded.",
                "- `allow_burn`: If `true` then assets may be destroyed in order to complete the refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "set_min_balance",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "min_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Sets the minimum balance of an asset.",
                "",
                "Only works if there aren't any accounts that are holding the asset or if",
                "the new value of `min_balance` is less than the old one.",
                "",
                "Origin must be Signed and the sender has to be the Owner of the",
                "asset `id`.",
                "",
                "- `id`: The identifier of the asset.",
                "- `min_balance`: The new value of `min_balance`.",
                "",
                "Emits `AssetMinBalanceChanged` event when successful."
              ]
            },
            {
              "name": "touch_other",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "Create an asset account for `who`.",
                "",
                "A deposit will be taken from the signer account.",
                "",
                "- `origin`: Must be Signed by `Freezer` or `Admin` of the asset `id`; the signer account",
                "  must have sufficient funds for a deposit to be taken.",
                "- `id`: The identifier of the asset for the account to be created.",
                "- `who`: The account to be created.",
                "",
                "Emits `Touched` event when successful."
              ]
            },
            {
              "name": "refund_other",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": [
                "Return the deposit (if any) of a target asset account. Useful if you are the depositor.",
                "",
                "The origin must be Signed and either the account owner, depositor, or asset `Admin`. In",
                "order to burn a non-zero balance of the asset, the caller must be the account and should",
                "use `refund`.",
                "",
                "- `id`: The identifier of the asset for the account holding a deposit.",
                "- `who`: The account to refund.",
                "",
                "Emits `Refunded` event when successful."
              ]
            },
            {
              "name": "block",
              "fields": [
                {
                  "name": "id",
                  "type": 4,
                  "typeName": "T::AssetIdParameter",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 233,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": [
                "Disallow further unprivileged transfers of an asset `id` to and from an account `who`.",
                "",
                "Origin must be Signed and the sender should be the Freezer of the asset `id`.",
                "",
                "- `id`: The identifier of the account's asset.",
                "- `who`: The account to be unblocked.",
                "",
                "Emits `Blocked`.",
                "",
                "Weight: `O(1)`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 381,
    "type": {
      "path": [
        "pallet_asset_conversion",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create_pool",
              "fields": [
                {
                  "name": "asset1",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "asset2",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Creates an empty liquidity pool and an associated new `lp_token` asset",
                "(the id of which is returned in the `Event::PoolCreated` event).",
                "",
                "Once a pool is created, someone may [`Pallet::add_liquidity`] to it."
              ]
            },
            {
              "name": "add_liquidity",
              "fields": [
                {
                  "name": "asset1",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "asset2",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "amount1_desired",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "amount2_desired",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "amount1_min",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "amount2_min",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "mint_to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Provide liquidity into the pool of `asset1` and `asset2`.",
                "NOTE: an optimal amount of asset1 and asset2 will be calculated and",
                "might be different than the provided `amount1_desired`/`amount2_desired`",
                "thus you should provide the min amount you're happy to provide.",
                "Params `amount1_min`/`amount2_min` represent that.",
                "`mint_to` will be sent the liquidity tokens that represent this share of the pool.",
                "",
                "NOTE: when encountering an incorrect exchange rate and non-withdrawable pool liquidity,",
                "batch an atomic call with [`Pallet::add_liquidity`] and",
                "[`Pallet::swap_exact_tokens_for_tokens`] or [`Pallet::swap_tokens_for_exact_tokens`]",
                "calls to render the liquidity withdrawable and rectify the exchange rate.",
                "",
                "Once liquidity is added, someone may successfully call",
                "[`Pallet::swap_exact_tokens_for_tokens`] successfully."
              ]
            },
            {
              "name": "remove_liquidity",
              "fields": [
                {
                  "name": "asset1",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "asset2",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "lp_token_burn",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "amount1_min_receive",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "amount2_min_receive",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "withdraw_to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Allows you to remove liquidity by providing the `lp_token_burn` tokens that will be",
                "burned in the process. With the usage of `amount1_min_receive`/`amount2_min_receive`",
                "it's possible to control the min amount of returned tokens you're happy with."
              ]
            },
            {
              "name": "swap_exact_tokens_for_tokens",
              "fields": [
                {
                  "name": "path",
                  "type": 382,
                  "typeName": "Vec<Box<T::AssetKind>>",
                  "docs": []
                },
                {
                  "name": "amount_in",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "amount_out_min",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "send_to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Swap the exact amount of `asset1` into `asset2`.",
                "`amount_out_min` param allows you to specify the min amount of the `asset2`",
                "you're happy to receive.",
                "",
                "[`AssetConversionApi::quote_price_exact_tokens_for_tokens`] runtime call can be called",
                "for a quote."
              ]
            },
            {
              "name": "swap_tokens_for_exact_tokens",
              "fields": [
                {
                  "name": "path",
                  "type": 382,
                  "typeName": "Vec<Box<T::AssetKind>>",
                  "docs": []
                },
                {
                  "name": "amount_out",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "amount_in_max",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "send_to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Swap any amount of `asset1` to get the exact amount of `asset2`.",
                "`amount_in_max` param allows to specify the max amount of the `asset1`",
                "you're happy to provide.",
                "",
                "[`AssetConversionApi::quote_price_tokens_for_exact_tokens`] runtime call can be called",
                "for a quote."
              ]
            },
            {
              "name": "touch",
              "fields": [
                {
                  "name": "asset1",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "asset2",
                  "type": 37,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Touch an existing pool to fulfill prerequisites before providing liquidity, such as",
                "ensuring that the pool's accounts are in place. It is typically useful when a pool",
                "creator removes the pool's accounts and does not provide a liquidity. This action may",
                "involve holding assets from the caller as a deposit for creating the pool's accounts.",
                "",
                "The origin must be Signed.",
                "",
                "- `asset1`: The asset ID of an existing pool with a pair (asset1, asset2).",
                "- `asset2`: The asset ID of an existing pool with a pair (asset1, asset2).",
                "",
                "Emits `Touched` event when successful."
              ]
            }
          ]
        }
      },
      "docs": [
        "Pallet's callable functions."
      ]
    }
  },
  {
    "id": 382,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 37
        }
      },
      "docs": []
    }
  },
  {
    "id": 383,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "OriginCaller"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "system",
              "fields": [
                {
                  "name": null,
                  "type": 384,
                  "typeName": "frame_system::Origin<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "PolkadotXcm",
              "fields": [
                {
                  "name": null,
                  "type": 385,
                  "typeName": "pallet_xcm::Origin",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "CumulusXcm",
              "fields": [
                {
                  "name": null,
                  "type": 386,
                  "typeName": "cumulus_pallet_xcm::Origin",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Void",
              "fields": [
                {
                  "name": null,
                  "type": 387,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 384,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Root",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 385,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Origin"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Xcm",
              "fields": [
                {
                  "name": null,
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Response",
              "fields": [
                {
                  "name": null,
                  "type": 55,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 386,
    "type": {
      "path": [
        "cumulus_pallet_xcm",
        "pallet",
        "Origin"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Relay",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SiblingParachain",
              "fields": [
                {
                  "name": null,
                  "type": 120,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 387,
    "type": {
      "path": [
        "sp_core",
        "Void"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 388,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooManyCalls",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many calls batched."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 389,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          1
        ]
      },
      "docs": []
    }
  },
  {
    "id": 390,
    "type": {
      "path": [
        "pallet_multisig",
        "Multisig"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "MaxApprovals",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "when",
              "type": 126,
              "typeName": "Timepoint<BlockNumber>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "depositor",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 391,
              "typeName": "BoundedVec<AccountId, MaxApprovals>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 391,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 49,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 392,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MinimumThreshold",
              "fields": [],
              "index": 0,
              "docs": [
                "Threshold must be 2 or greater."
              ]
            },
            {
              "name": "AlreadyApproved",
              "fields": [],
              "index": 1,
              "docs": [
                "Call is already approved by this signatory."
              ]
            },
            {
              "name": "NoApprovalsNeeded",
              "fields": [],
              "index": 2,
              "docs": [
                "Call doesn't need any (more) approvals."
              ]
            },
            {
              "name": "TooFewSignatories",
              "fields": [],
              "index": 3,
              "docs": [
                "There are too few signatories in the list."
              ]
            },
            {
              "name": "TooManySignatories",
              "fields": [],
              "index": 4,
              "docs": [
                "There are too many signatories in the list."
              ]
            },
            {
              "name": "SignatoriesOutOfOrder",
              "fields": [],
              "index": 5,
              "docs": [
                "The signatories were provided out of order; they should be ordered."
              ]
            },
            {
              "name": "SenderInSignatories",
              "fields": [],
              "index": 6,
              "docs": [
                "The sender was contained in the other signatories; it shouldn't be."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "Multisig operation not found when attempting to cancel."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 8,
              "docs": [
                "Only the account that originally created the multisig is able to cancel it."
              ]
            },
            {
              "name": "NoTimepoint",
              "fields": [],
              "index": 9,
              "docs": [
                "No timepoint was given, yet the multisig operation is already underway."
              ]
            },
            {
              "name": "WrongTimepoint",
              "fields": [],
              "index": 10,
              "docs": [
                "A different timepoint was given to the multisig operation that is underway."
              ]
            },
            {
              "name": "UnexpectedTimepoint",
              "fields": [],
              "index": 11,
              "docs": [
                "A timepoint was given, yet no multisig operation is underway."
              ]
            },
            {
              "name": "MaxWeightTooLow",
              "fields": [],
              "index": 12,
              "docs": [
                "The maximum weight information provided was too low."
              ]
            },
            {
              "name": "AlreadyStored",
              "fields": [],
              "index": 13,
              "docs": [
                "The data to be stored is already stored."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 393,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          394,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 394,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 395
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 396,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 395,
    "type": {
      "path": [
        "pallet_proxy",
        "ProxyDefinition"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "ProxyType",
          "type": 128
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "delegate",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "proxy_type",
              "type": 128,
              "typeName": "ProxyType",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 396,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 395
        }
      },
      "docs": []
    }
  },
  {
    "id": 397,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          398,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 398,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 399
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 400,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 399,
    "type": {
      "path": [
        "pallet_proxy",
        "Announcement"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Hash",
          "type": 13
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "real",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "call_hash",
              "type": 13,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 400,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 399
        }
      },
      "docs": []
    }
  },
  {
    "id": 401,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooMany",
              "fields": [],
              "index": 0,
              "docs": [
                "There are too many proxies registered or too many announcements pending."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Proxy registration not found."
              ]
            },
            {
              "name": "NotProxy",
              "fields": [],
              "index": 2,
              "docs": [
                "Sender is not a proxy of the account to be proxied."
              ]
            },
            {
              "name": "Unproxyable",
              "fields": [],
              "index": 3,
              "docs": [
                "A call which is incompatible with the proxy type's filter was attempted."
              ]
            },
            {
              "name": "Duplicate",
              "fields": [],
              "index": 4,
              "docs": [
                "Account is already a proxy."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 5,
              "docs": [
                "Call may not be made by proxy because it may escalate its privileges."
              ]
            },
            {
              "name": "Unannounced",
              "fields": [],
              "index": 6,
              "docs": [
                "Announcement, if made at all, was made too recently."
              ]
            },
            {
              "name": "NoSelfProxy",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot add self as proxy."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 402,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetDetails"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "issuer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "admin",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "freezer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "supply",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "min_balance",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "is_sufficient",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "accounts",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "sufficients",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "status",
              "type": 403,
              "typeName": "AssetStatus",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 403,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetStatus"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Live",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Destroying",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 404,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 405,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetAccount"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "Extra",
          "type": 124
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "balance",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "status",
              "type": 406,
              "typeName": "AccountStatus",
              "docs": []
            },
            {
              "name": "reason",
              "type": 407,
              "typeName": "ExistenceReason<DepositBalance, AccountId>",
              "docs": []
            },
            {
              "name": "extra",
              "type": 124,
              "typeName": "Extra",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 406,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AccountStatus"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Liquid",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Blocked",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 407,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "ExistenceReason"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Consumer",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sufficient",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DepositHeld",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "DepositRefunded",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "DepositFrom",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 408,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 409,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "Approval"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 410,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "BoundedString",
          "type": 411
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "name",
              "type": 411,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "symbol",
              "type": 411,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "decimals",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 411,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 412,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BalanceLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Account balance must be greater than or equal to the transfer amount."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 1,
              "docs": [
                "The account to alter does not exist."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 2,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 3,
              "docs": [
                "The given asset ID is unknown."
              ]
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin account is frozen."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 5,
              "docs": [
                "The asset ID is already taken."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid witness data given."
              ]
            },
            {
              "name": "MinBalanceZero",
              "fields": [],
              "index": 7,
              "docs": [
                "Minimum balance should be non-zero."
              ]
            },
            {
              "name": "UnavailableConsumer",
              "fields": [],
              "index": 8,
              "docs": [
                "Unable to increment the consumer reference counters on the account. Either no provider",
                "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                "fewer then the maximum number of consumers has been reached."
              ]
            },
            {
              "name": "BadMetadata",
              "fields": [],
              "index": 9,
              "docs": [
                "Invalid metadata given."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 10,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 11,
              "docs": [
                "The source account would not survive the transfer and it needs to stay alive."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 12,
              "docs": [
                "The asset-account already exists."
              ]
            },
            {
              "name": "NoDeposit",
              "fields": [],
              "index": 13,
              "docs": [
                "The asset-account doesn't have an associated deposit."
              ]
            },
            {
              "name": "WouldBurn",
              "fields": [],
              "index": 14,
              "docs": [
                "The operation would result in funds being burned."
              ]
            },
            {
              "name": "LiveAsset",
              "fields": [],
              "index": 15,
              "docs": [
                "The asset is a live asset and is actively being used. Usually emit for operations such",
                "as `start_destroy` which require the asset to be in a destroying state."
              ]
            },
            {
              "name": "AssetNotLive",
              "fields": [],
              "index": 16,
              "docs": [
                "The asset is not live, and likely being destroyed."
              ]
            },
            {
              "name": "IncorrectStatus",
              "fields": [],
              "index": 17,
              "docs": [
                "The asset status is not the expected status."
              ]
            },
            {
              "name": "NotFrozen",
              "fields": [],
              "index": 18,
              "docs": [
                "The asset should be frozen before the given operation."
              ]
            },
            {
              "name": "CallbackFailed",
              "fields": [],
              "index": 19,
              "docs": [
                "Callback action resulted in error"
              ]
            },
            {
              "name": "BadAssetId",
              "fields": [],
              "index": 20,
              "docs": [
                "The asset ID must be equal to the [`NextAssetId`]."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 413,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "CollectionDetails"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "issuer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "admin",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "freezer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "total_deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "free_holding",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "items",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "item_metadatas",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 414,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          4,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 415,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 416,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "ItemDetails"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approved",
              "type": 137,
              "typeName": "Option<AccountId>",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 417,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "CollectionMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "data",
              "type": 132,
              "typeName": "BoundedVec<u8, StringLimit>",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 418,
    "type": {
      "path": [
        "pallet_uniques",
        "types",
        "ItemMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "data",
              "type": 132,
              "typeName": "BoundedVec<u8, StringLimit>",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 419,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          134,
          135
        ]
      },
      "docs": []
    }
  },
  {
    "id": 420,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          136,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 421,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          137
        ]
      },
      "docs": []
    }
  },
  {
    "id": 422,
    "type": {
      "path": [
        "pallet_uniques",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NoPermission",
              "fields": [],
              "index": 0,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "UnknownCollection",
              "fields": [],
              "index": 1,
              "docs": [
                "The given item ID is unknown."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 2,
              "docs": [
                "The item ID has already been used for an item."
              ]
            },
            {
              "name": "WrongOwner",
              "fields": [],
              "index": 3,
              "docs": [
                "The owner turned out to be different to what was expected."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 4,
              "docs": [
                "Invalid witness data given."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 5,
              "docs": [
                "The item ID is already taken."
              ]
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 6,
              "docs": [
                "The item or collection is frozen."
              ]
            },
            {
              "name": "WrongDelegate",
              "fields": [],
              "index": 7,
              "docs": [
                "The delegate turned out to be different to what was expected."
              ]
            },
            {
              "name": "NoDelegate",
              "fields": [],
              "index": 8,
              "docs": [
                "There is no delegate approved."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 9,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            },
            {
              "name": "Unaccepted",
              "fields": [],
              "index": 10,
              "docs": [
                "The named owner has not signed ownership of the collection is acceptable."
              ]
            },
            {
              "name": "Locked",
              "fields": [],
              "index": 11,
              "docs": [
                "The item is locked."
              ]
            },
            {
              "name": "MaxSupplyReached",
              "fields": [],
              "index": 12,
              "docs": [
                "All items have been minted."
              ]
            },
            {
              "name": "MaxSupplyAlreadySet",
              "fields": [],
              "index": 13,
              "docs": [
                "The max supply has already been set."
              ]
            },
            {
              "name": "MaxSupplyTooSmall",
              "fields": [],
              "index": 14,
              "docs": [
                "The provided max supply is less to the amount of items a collection already has."
              ]
            },
            {
              "name": "UnknownItem",
              "fields": [],
              "index": 15,
              "docs": [
                "The given item ID is unknown."
              ]
            },
            {
              "name": "NotForSale",
              "fields": [],
              "index": 16,
              "docs": [
                "Item is not for sale."
              ]
            },
            {
              "name": "BidTooLow",
              "fields": [],
              "index": 17,
              "docs": [
                "The provided bid is too low."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 423,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "CollectionDetails"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DepositBalance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "owner_deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "items",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "item_metadatas",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "item_configs",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "attributes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 424,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "BitFlags"
      ],
      "params": [
        {
          "name": "T",
          "type": 425
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 2,
              "typeName": "CollectionRole",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 425,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "CollectionRole"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Issuer",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Freezer",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Admin",
              "fields": [],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 426,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "ItemDetails"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Deposit",
          "type": 427
        },
        {
          "name": "Approvals",
          "type": 428
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "owner",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 428,
              "typeName": "Approvals",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 427,
              "typeName": "Deposit",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 427,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "ItemDeposit"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 428,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_btree_map",
        "BoundedBTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 0
        },
        {
          "name": "V",
          "type": 134
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 429,
              "typeName": "BTreeMap<K, V>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 429,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 0
        },
        {
          "name": "V",
          "type": 134
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 430,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 430,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 431
        }
      },
      "docs": []
    }
  },
  {
    "id": 431,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          134
        ]
      },
      "docs": []
    }
  },
  {
    "id": 432,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "CollectionMetadata"
      ],
      "params": [
        {
          "name": "Deposit",
          "type": 6
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Deposit",
              "docs": []
            },
            {
              "name": "data",
              "type": 139,
              "typeName": "BoundedVec<u8, StringLimit>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 433,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "ItemMetadata"
      ],
      "params": [
        {
          "name": "Deposit",
          "type": 434
        },
        {
          "name": "StringLimit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 434,
              "typeName": "Deposit",
              "docs": []
            },
            {
              "name": "data",
              "type": 139,
              "typeName": "BoundedVec<u8, StringLimit>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 434,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "ItemMetadataDeposit"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account",
              "type": 137,
              "typeName": "Option<AccountId>",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 435,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          134,
          140,
          136
        ]
      },
      "docs": []
    }
  },
  {
    "id": 436,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          139,
          437
        ]
      },
      "docs": []
    }
  },
  {
    "id": 437,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "AttributeDeposit"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "account",
              "type": 137,
              "typeName": "Option<AccountId>",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 438,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_btree_set",
        "BoundedBTreeSet"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 439,
              "typeName": "BTreeSet<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 439,
    "type": {
      "path": [
        "BTreeSet"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 49,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 440,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "PendingSwap"
      ],
      "params": [
        {
          "name": "CollectionId",
          "type": 4
        },
        {
          "name": "ItemId",
          "type": 4
        },
        {
          "name": "ItemPriceWithDirection",
          "type": 142
        },
        {
          "name": "Deadline",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "desired_collection",
              "type": 4,
              "typeName": "CollectionId",
              "docs": []
            },
            {
              "name": "desired_item",
              "type": 134,
              "typeName": "Option<ItemId>",
              "docs": []
            },
            {
              "name": "price",
              "type": 141,
              "typeName": "Option<ItemPriceWithDirection>",
              "docs": []
            },
            {
              "name": "deadline",
              "type": 4,
              "typeName": "Deadline",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 441,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "BitFlags"
      ],
      "params": [
        {
          "name": "T",
          "type": 442
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 12,
              "typeName": "PalletFeature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 442,
    "type": {
      "path": [
        "pallet_nfts",
        "types",
        "PalletFeature"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Trading",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Attributes",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Approvals",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Swaps",
              "fields": [],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 443,
    "type": {
      "path": [
        "pallet_nfts",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NoPermission",
              "fields": [],
              "index": 0,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "UnknownCollection",
              "fields": [],
              "index": 1,
              "docs": [
                "The given item ID is unknown."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 2,
              "docs": [
                "The item ID has already been used for an item."
              ]
            },
            {
              "name": "ApprovalExpired",
              "fields": [],
              "index": 3,
              "docs": [
                "The approval had a deadline that expired, so the approval isn't valid anymore."
              ]
            },
            {
              "name": "WrongOwner",
              "fields": [],
              "index": 4,
              "docs": [
                "The owner turned out to be different to what was expected."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 5,
              "docs": [
                "The witness data given does not match the current state of the chain."
              ]
            },
            {
              "name": "CollectionIdInUse",
              "fields": [],
              "index": 6,
              "docs": [
                "Collection ID is already taken."
              ]
            },
            {
              "name": "ItemsNonTransferable",
              "fields": [],
              "index": 7,
              "docs": [
                "Items within that collection are non-transferable."
              ]
            },
            {
              "name": "NotDelegate",
              "fields": [],
              "index": 8,
              "docs": [
                "The provided account is not a delegate."
              ]
            },
            {
              "name": "WrongDelegate",
              "fields": [],
              "index": 9,
              "docs": [
                "The delegate turned out to be different to what was expected."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 10,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            },
            {
              "name": "Unaccepted",
              "fields": [],
              "index": 11,
              "docs": [
                "The named owner has not signed ownership acceptance of the collection."
              ]
            },
            {
              "name": "ItemLocked",
              "fields": [],
              "index": 12,
              "docs": [
                "The item is locked (non-transferable)."
              ]
            },
            {
              "name": "LockedItemAttributes",
              "fields": [],
              "index": 13,
              "docs": [
                "Item's attributes are locked."
              ]
            },
            {
              "name": "LockedCollectionAttributes",
              "fields": [],
              "index": 14,
              "docs": [
                "Collection's attributes are locked."
              ]
            },
            {
              "name": "LockedItemMetadata",
              "fields": [],
              "index": 15,
              "docs": [
                "Item's metadata is locked."
              ]
            },
            {
              "name": "LockedCollectionMetadata",
              "fields": [],
              "index": 16,
              "docs": [
                "Collection's metadata is locked."
              ]
            },
            {
              "name": "MaxSupplyReached",
              "fields": [],
              "index": 17,
              "docs": [
                "All items have been minted."
              ]
            },
            {
              "name": "MaxSupplyLocked",
              "fields": [],
              "index": 18,
              "docs": [
                "The max supply is locked and can't be changed."
              ]
            },
            {
              "name": "MaxSupplyTooSmall",
              "fields": [],
              "index": 19,
              "docs": [
                "The provided max supply is less than the number of items a collection already has."
              ]
            },
            {
              "name": "UnknownItem",
              "fields": [],
              "index": 20,
              "docs": [
                "The given item ID is unknown."
              ]
            },
            {
              "name": "UnknownSwap",
              "fields": [],
              "index": 21,
              "docs": [
                "Swap doesn't exist."
              ]
            },
            {
              "name": "MetadataNotFound",
              "fields": [],
              "index": 22,
              "docs": [
                "The given item has no metadata set."
              ]
            },
            {
              "name": "AttributeNotFound",
              "fields": [],
              "index": 23,
              "docs": [
                "The provided attribute can't be found."
              ]
            },
            {
              "name": "NotForSale",
              "fields": [],
              "index": 24,
              "docs": [
                "Item is not for sale."
              ]
            },
            {
              "name": "BidTooLow",
              "fields": [],
              "index": 25,
              "docs": [
                "The provided bid is too low."
              ]
            },
            {
              "name": "ReachedApprovalLimit",
              "fields": [],
              "index": 26,
              "docs": [
                "The item has reached its approval limit."
              ]
            },
            {
              "name": "DeadlineExpired",
              "fields": [],
              "index": 27,
              "docs": [
                "The deadline has already expired."
              ]
            },
            {
              "name": "WrongDuration",
              "fields": [],
              "index": 28,
              "docs": [
                "The duration provided should be less than or equal to `MaxDeadlineDuration`."
              ]
            },
            {
              "name": "MethodDisabled",
              "fields": [],
              "index": 29,
              "docs": [
                "The method is disabled by system settings."
              ]
            },
            {
              "name": "WrongSetting",
              "fields": [],
              "index": 30,
              "docs": [
                "The provided setting can't be set."
              ]
            },
            {
              "name": "InconsistentItemConfig",
              "fields": [],
              "index": 31,
              "docs": [
                "Item's config already exists and should be equal to the provided one."
              ]
            },
            {
              "name": "NoConfig",
              "fields": [],
              "index": 32,
              "docs": [
                "Config for a collection or an item can't be found."
              ]
            },
            {
              "name": "RolesNotCleared",
              "fields": [],
              "index": 33,
              "docs": [
                "Some roles were not cleared."
              ]
            },
            {
              "name": "MintNotStarted",
              "fields": [],
              "index": 34,
              "docs": [
                "Mint has not started yet."
              ]
            },
            {
              "name": "MintEnded",
              "fields": [],
              "index": 35,
              "docs": [
                "Mint has already ended."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "fields": [],
              "index": 36,
              "docs": [
                "The provided Item was already used for claiming."
              ]
            },
            {
              "name": "IncorrectData",
              "fields": [],
              "index": 37,
              "docs": [
                "The provided data is incorrect."
              ]
            },
            {
              "name": "WrongOrigin",
              "fields": [],
              "index": 38,
              "docs": [
                "The extrinsic was sent by the wrong origin."
              ]
            },
            {
              "name": "WrongSignature",
              "fields": [],
              "index": 39,
              "docs": [
                "The provided signature is incorrect."
              ]
            },
            {
              "name": "IncorrectMetadata",
              "fields": [],
              "index": 40,
              "docs": [
                "The provided metadata might be too long."
              ]
            },
            {
              "name": "MaxAttributesLimitReached",
              "fields": [],
              "index": 41,
              "docs": [
                "Can't set more attributes per one call."
              ]
            },
            {
              "name": "WrongNamespace",
              "fields": [],
              "index": 42,
              "docs": [
                "The provided namespace isn't supported in this call."
              ]
            },
            {
              "name": "CollectionNotEmpty",
              "fields": [],
              "index": 43,
              "docs": [
                "Can't delete non-empty collections."
              ]
            },
            {
              "name": "WitnessRequired",
              "fields": [],
              "index": 44,
              "docs": [
                "The witness data should be provided."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 444,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          37,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 445,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          37,
          0,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 446,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "BoundedString",
          "type": 447
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "name",
              "type": 447,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "symbol",
              "type": 447,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "decimals",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 447,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 448,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BalanceLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Account balance must be greater than or equal to the transfer amount."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 1,
              "docs": [
                "The account to alter does not exist."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 2,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 3,
              "docs": [
                "The given asset ID is unknown."
              ]
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin account is frozen."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 5,
              "docs": [
                "The asset ID is already taken."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid witness data given."
              ]
            },
            {
              "name": "MinBalanceZero",
              "fields": [],
              "index": 7,
              "docs": [
                "Minimum balance should be non-zero."
              ]
            },
            {
              "name": "UnavailableConsumer",
              "fields": [],
              "index": 8,
              "docs": [
                "Unable to increment the consumer reference counters on the account. Either no provider",
                "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                "fewer then the maximum number of consumers has been reached."
              ]
            },
            {
              "name": "BadMetadata",
              "fields": [],
              "index": 9,
              "docs": [
                "Invalid metadata given."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 10,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 11,
              "docs": [
                "The source account would not survive the transfer and it needs to stay alive."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 12,
              "docs": [
                "The asset-account already exists."
              ]
            },
            {
              "name": "NoDeposit",
              "fields": [],
              "index": 13,
              "docs": [
                "The asset-account doesn't have an associated deposit."
              ]
            },
            {
              "name": "WouldBurn",
              "fields": [],
              "index": 14,
              "docs": [
                "The operation would result in funds being burned."
              ]
            },
            {
              "name": "LiveAsset",
              "fields": [],
              "index": 15,
              "docs": [
                "The asset is a live asset and is actively being used. Usually emit for operations such",
                "as `start_destroy` which require the asset to be in a destroying state."
              ]
            },
            {
              "name": "AssetNotLive",
              "fields": [],
              "index": 16,
              "docs": [
                "The asset is not live, and likely being destroyed."
              ]
            },
            {
              "name": "IncorrectStatus",
              "fields": [],
              "index": 17,
              "docs": [
                "The asset status is not the expected status."
              ]
            },
            {
              "name": "NotFrozen",
              "fields": [],
              "index": 18,
              "docs": [
                "The asset should be frozen before the given operation."
              ]
            },
            {
              "name": "CallbackFailed",
              "fields": [],
              "index": 19,
              "docs": [
                "Callback action resulted in error"
              ]
            },
            {
              "name": "BadAssetId",
              "fields": [],
              "index": 20,
              "docs": [
                "The asset ID must be equal to the [`NextAssetId`]."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 449,
    "type": {
      "path": [
        "pallet_assets",
        "types",
        "AssetMetadata"
      ],
      "params": [
        {
          "name": "DepositBalance",
          "type": 6
        },
        {
          "name": "BoundedString",
          "type": 450
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "deposit",
              "type": 6,
              "typeName": "DepositBalance",
              "docs": []
            },
            {
              "name": "name",
              "type": 450,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "symbol",
              "type": 450,
              "typeName": "BoundedString",
              "docs": []
            },
            {
              "name": "decimals",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "is_frozen",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 450,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 451,
    "type": {
      "path": [
        "pallet_assets",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BalanceLow",
              "fields": [],
              "index": 0,
              "docs": [
                "Account balance must be greater than or equal to the transfer amount."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 1,
              "docs": [
                "The account to alter does not exist."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 2,
              "docs": [
                "The signing account has no permission to do the operation."
              ]
            },
            {
              "name": "Unknown",
              "fields": [],
              "index": 3,
              "docs": [
                "The given asset ID is unknown."
              ]
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin account is frozen."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 5,
              "docs": [
                "The asset ID is already taken."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid witness data given."
              ]
            },
            {
              "name": "MinBalanceZero",
              "fields": [],
              "index": 7,
              "docs": [
                "Minimum balance should be non-zero."
              ]
            },
            {
              "name": "UnavailableConsumer",
              "fields": [],
              "index": 8,
              "docs": [
                "Unable to increment the consumer reference counters on the account. Either no provider",
                "reference exists to allow a non-zero balance of a non-self-sufficient asset, or one",
                "fewer then the maximum number of consumers has been reached."
              ]
            },
            {
              "name": "BadMetadata",
              "fields": [],
              "index": 9,
              "docs": [
                "Invalid metadata given."
              ]
            },
            {
              "name": "Unapproved",
              "fields": [],
              "index": 10,
              "docs": [
                "No approval exists that would allow the transfer."
              ]
            },
            {
              "name": "WouldDie",
              "fields": [],
              "index": 11,
              "docs": [
                "The source account would not survive the transfer and it needs to stay alive."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 12,
              "docs": [
                "The asset-account already exists."
              ]
            },
            {
              "name": "NoDeposit",
              "fields": [],
              "index": 13,
              "docs": [
                "The asset-account doesn't have an associated deposit."
              ]
            },
            {
              "name": "WouldBurn",
              "fields": [],
              "index": 14,
              "docs": [
                "The operation would result in funds being burned."
              ]
            },
            {
              "name": "LiveAsset",
              "fields": [],
              "index": 15,
              "docs": [
                "The asset is a live asset and is actively being used. Usually emit for operations such",
                "as `start_destroy` which require the asset to be in a destroying state."
              ]
            },
            {
              "name": "AssetNotLive",
              "fields": [],
              "index": 16,
              "docs": [
                "The asset is not live, and likely being destroyed."
              ]
            },
            {
              "name": "IncorrectStatus",
              "fields": [],
              "index": 17,
              "docs": [
                "The asset status is not the expected status."
              ]
            },
            {
              "name": "NotFrozen",
              "fields": [],
              "index": 18,
              "docs": [
                "The asset should be frozen before the given operation."
              ]
            },
            {
              "name": "CallbackFailed",
              "fields": [],
              "index": 19,
              "docs": [
                "Callback action resulted in error"
              ]
            },
            {
              "name": "BadAssetId",
              "fields": [],
              "index": 20,
              "docs": [
                "The asset ID must be equal to the [`NextAssetId`]."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 452,
    "type": {
      "path": [
        "pallet_asset_conversion",
        "types",
        "PoolInfo"
      ],
      "params": [
        {
          "name": "PoolAssetId",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "lp_token",
              "type": 4,
              "typeName": "PoolAssetId",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 453,
    "type": {
      "path": [
        "frame_support",
        "PalletId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 77,
              "typeName": "[u8; 8]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 454,
    "type": {
      "path": [
        "pallet_asset_conversion",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidAssetPair",
              "fields": [],
              "index": 0,
              "docs": [
                "Provided asset pair is not supported for pool."
              ]
            },
            {
              "name": "PoolExists",
              "fields": [],
              "index": 1,
              "docs": [
                "Pool already exists."
              ]
            },
            {
              "name": "WrongDesiredAmount",
              "fields": [],
              "index": 2,
              "docs": [
                "Desired amount can't be zero."
              ]
            },
            {
              "name": "AmountOneLessThanMinimal",
              "fields": [],
              "index": 3,
              "docs": [
                "Provided amount should be greater than or equal to the existential deposit/asset's",
                "minimal amount."
              ]
            },
            {
              "name": "AmountTwoLessThanMinimal",
              "fields": [],
              "index": 4,
              "docs": [
                "Provided amount should be greater than or equal to the existential deposit/asset's",
                "minimal amount."
              ]
            },
            {
              "name": "ReserveLeftLessThanMinimal",
              "fields": [],
              "index": 5,
              "docs": [
                "Reserve needs to always be greater than or equal to the existential deposit/asset's",
                "minimal amount."
              ]
            },
            {
              "name": "AmountOutTooHigh",
              "fields": [],
              "index": 6,
              "docs": [
                "Desired amount can't be equal to the pool reserve."
              ]
            },
            {
              "name": "PoolNotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "The pool doesn't exist."
              ]
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 8,
              "docs": [
                "An overflow happened."
              ]
            },
            {
              "name": "AssetOneDepositDidNotMeetMinimum",
              "fields": [],
              "index": 9,
              "docs": [
                "The minimal amount requirement for the first token in the pair wasn't met."
              ]
            },
            {
              "name": "AssetTwoDepositDidNotMeetMinimum",
              "fields": [],
              "index": 10,
              "docs": [
                "The minimal amount requirement for the second token in the pair wasn't met."
              ]
            },
            {
              "name": "AssetOneWithdrawalDidNotMeetMinimum",
              "fields": [],
              "index": 11,
              "docs": [
                "The minimal amount requirement for the first token in the pair wasn't met."
              ]
            },
            {
              "name": "AssetTwoWithdrawalDidNotMeetMinimum",
              "fields": [],
              "index": 12,
              "docs": [
                "The minimal amount requirement for the second token in the pair wasn't met."
              ]
            },
            {
              "name": "OptimalAmountLessThanDesired",
              "fields": [],
              "index": 13,
              "docs": [
                "Optimal calculated amount is less than desired."
              ]
            },
            {
              "name": "InsufficientLiquidityMinted",
              "fields": [],
              "index": 14,
              "docs": [
                "Insufficient liquidity minted."
              ]
            },
            {
              "name": "ZeroLiquidity",
              "fields": [],
              "index": 15,
              "docs": [
                "Requested liquidity can't be zero."
              ]
            },
            {
              "name": "ZeroAmount",
              "fields": [],
              "index": 16,
              "docs": [
                "Amount can't be zero."
              ]
            },
            {
              "name": "ProvidedMinimumNotSufficientForSwap",
              "fields": [],
              "index": 17,
              "docs": [
                "Calculated amount out is less than provided minimum amount."
              ]
            },
            {
              "name": "ProvidedMaximumNotSufficientForSwap",
              "fields": [],
              "index": 18,
              "docs": [
                "Provided maximum amount is not sufficient for swap."
              ]
            },
            {
              "name": "InvalidPath",
              "fields": [],
              "index": 19,
              "docs": [
                "The provided path must consists of 2 assets at least."
              ]
            },
            {
              "name": "NonUniquePath",
              "fields": [],
              "index": 20,
              "docs": [
                "The provided path must consists of unique assets."
              ]
            },
            {
              "name": "IncorrectPoolAssetId",
              "fields": [],
              "index": 21,
              "docs": [
                "It was not possible to get or increment the Id of the pool."
              ]
            },
            {
              "name": "BelowMinimum",
              "fields": [],
              "index": 22,
              "docs": [
                "The destination account cannot exist with the swapped funds."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 455,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          456,
          457,
          458,
          459,
          460,
          462,
          463,
          464,
          465
        ]
      },
      "docs": []
    }
  },
  {
    "id": 456,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_non_zero_sender",
        "CheckNonZeroSender"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 457,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_spec_version",
        "CheckSpecVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 458,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_tx_version",
        "CheckTxVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 459,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_genesis",
        "CheckGenesis"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 460,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_mortality",
        "CheckMortality"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 461,
              "typeName": "Era",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 461,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "era",
        "Era"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Immortal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Mortal1",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mortal2",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Mortal3",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Mortal4",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Mortal5",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Mortal6",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Mortal7",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Mortal8",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Mortal9",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Mortal10",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Mortal11",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Mortal12",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Mortal13",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Mortal14",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Mortal15",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Mortal16",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Mortal17",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Mortal18",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Mortal19",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Mortal20",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Mortal21",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Mortal22",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Mortal23",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Mortal24",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Mortal25",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Mortal26",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Mortal27",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Mortal28",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Mortal29",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Mortal30",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Mortal31",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Mortal32",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Mortal33",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Mortal34",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Mortal35",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Mortal36",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Mortal37",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "Mortal38",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Mortal39",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Mortal40",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Mortal41",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Mortal42",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Mortal43",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "Mortal44",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "Mortal45",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 45,
              "docs": []
            },
            {
              "name": "Mortal46",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "Mortal47",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            },
            {
              "name": "Mortal48",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 48,
              "docs": []
            },
            {
              "name": "Mortal49",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 49,
              "docs": []
            },
            {
              "name": "Mortal50",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Mortal51",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Mortal52",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "Mortal53",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "Mortal54",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Mortal55",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "Mortal56",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Mortal57",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 57,
              "docs": []
            },
            {
              "name": "Mortal58",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 58,
              "docs": []
            },
            {
              "name": "Mortal59",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 59,
              "docs": []
            },
            {
              "name": "Mortal60",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Mortal61",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "Mortal62",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "Mortal63",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Mortal64",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Mortal65",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 65,
              "docs": []
            },
            {
              "name": "Mortal66",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 66,
              "docs": []
            },
            {
              "name": "Mortal67",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 67,
              "docs": []
            },
            {
              "name": "Mortal68",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 68,
              "docs": []
            },
            {
              "name": "Mortal69",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 69,
              "docs": []
            },
            {
              "name": "Mortal70",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Mortal71",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Mortal72",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Mortal73",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Mortal74",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "Mortal75",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 75,
              "docs": []
            },
            {
              "name": "Mortal76",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 76,
              "docs": []
            },
            {
              "name": "Mortal77",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 77,
              "docs": []
            },
            {
              "name": "Mortal78",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 78,
              "docs": []
            },
            {
              "name": "Mortal79",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 79,
              "docs": []
            },
            {
              "name": "Mortal80",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 80,
              "docs": []
            },
            {
              "name": "Mortal81",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 81,
              "docs": []
            },
            {
              "name": "Mortal82",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 82,
              "docs": []
            },
            {
              "name": "Mortal83",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 83,
              "docs": []
            },
            {
              "name": "Mortal84",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 84,
              "docs": []
            },
            {
              "name": "Mortal85",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 85,
              "docs": []
            },
            {
              "name": "Mortal86",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 86,
              "docs": []
            },
            {
              "name": "Mortal87",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 87,
              "docs": []
            },
            {
              "name": "Mortal88",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 88,
              "docs": []
            },
            {
              "name": "Mortal89",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 89,
              "docs": []
            },
            {
              "name": "Mortal90",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 90,
              "docs": []
            },
            {
              "name": "Mortal91",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 91,
              "docs": []
            },
            {
              "name": "Mortal92",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 92,
              "docs": []
            },
            {
              "name": "Mortal93",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 93,
              "docs": []
            },
            {
              "name": "Mortal94",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 94,
              "docs": []
            },
            {
              "name": "Mortal95",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 95,
              "docs": []
            },
            {
              "name": "Mortal96",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 96,
              "docs": []
            },
            {
              "name": "Mortal97",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 97,
              "docs": []
            },
            {
              "name": "Mortal98",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "Mortal99",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "Mortal100",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "Mortal101",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Mortal102",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 102,
              "docs": []
            },
            {
              "name": "Mortal103",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 103,
              "docs": []
            },
            {
              "name": "Mortal104",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 104,
              "docs": []
            },
            {
              "name": "Mortal105",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 105,
              "docs": []
            },
            {
              "name": "Mortal106",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 106,
              "docs": []
            },
            {
              "name": "Mortal107",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 107,
              "docs": []
            },
            {
              "name": "Mortal108",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 108,
              "docs": []
            },
            {
              "name": "Mortal109",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 109,
              "docs": []
            },
            {
              "name": "Mortal110",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 110,
              "docs": []
            },
            {
              "name": "Mortal111",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 111,
              "docs": []
            },
            {
              "name": "Mortal112",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 112,
              "docs": []
            },
            {
              "name": "Mortal113",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 113,
              "docs": []
            },
            {
              "name": "Mortal114",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 114,
              "docs": []
            },
            {
              "name": "Mortal115",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 115,
              "docs": []
            },
            {
              "name": "Mortal116",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 116,
              "docs": []
            },
            {
              "name": "Mortal117",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 117,
              "docs": []
            },
            {
              "name": "Mortal118",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 118,
              "docs": []
            },
            {
              "name": "Mortal119",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 119,
              "docs": []
            },
            {
              "name": "Mortal120",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 120,
              "docs": []
            },
            {
              "name": "Mortal121",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 121,
              "docs": []
            },
            {
              "name": "Mortal122",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 122,
              "docs": []
            },
            {
              "name": "Mortal123",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 123,
              "docs": []
            },
            {
              "name": "Mortal124",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 124,
              "docs": []
            },
            {
              "name": "Mortal125",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 125,
              "docs": []
            },
            {
              "name": "Mortal126",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 126,
              "docs": []
            },
            {
              "name": "Mortal127",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 127,
              "docs": []
            },
            {
              "name": "Mortal128",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 128,
              "docs": []
            },
            {
              "name": "Mortal129",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 129,
              "docs": []
            },
            {
              "name": "Mortal130",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 130,
              "docs": []
            },
            {
              "name": "Mortal131",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 131,
              "docs": []
            },
            {
              "name": "Mortal132",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 132,
              "docs": []
            },
            {
              "name": "Mortal133",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 133,
              "docs": []
            },
            {
              "name": "Mortal134",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 134,
              "docs": []
            },
            {
              "name": "Mortal135",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 135,
              "docs": []
            },
            {
              "name": "Mortal136",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 136,
              "docs": []
            },
            {
              "name": "Mortal137",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 137,
              "docs": []
            },
            {
              "name": "Mortal138",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 138,
              "docs": []
            },
            {
              "name": "Mortal139",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 139,
              "docs": []
            },
            {
              "name": "Mortal140",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 140,
              "docs": []
            },
            {
              "name": "Mortal141",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 141,
              "docs": []
            },
            {
              "name": "Mortal142",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 142,
              "docs": []
            },
            {
              "name": "Mortal143",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 143,
              "docs": []
            },
            {
              "name": "Mortal144",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 144,
              "docs": []
            },
            {
              "name": "Mortal145",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 145,
              "docs": []
            },
            {
              "name": "Mortal146",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 146,
              "docs": []
            },
            {
              "name": "Mortal147",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 147,
              "docs": []
            },
            {
              "name": "Mortal148",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 148,
              "docs": []
            },
            {
              "name": "Mortal149",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 149,
              "docs": []
            },
            {
              "name": "Mortal150",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 150,
              "docs": []
            },
            {
              "name": "Mortal151",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 151,
              "docs": []
            },
            {
              "name": "Mortal152",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 152,
              "docs": []
            },
            {
              "name": "Mortal153",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 153,
              "docs": []
            },
            {
              "name": "Mortal154",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 154,
              "docs": []
            },
            {
              "name": "Mortal155",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 155,
              "docs": []
            },
            {
              "name": "Mortal156",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 156,
              "docs": []
            },
            {
              "name": "Mortal157",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 157,
              "docs": []
            },
            {
              "name": "Mortal158",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 158,
              "docs": []
            },
            {
              "name": "Mortal159",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 159,
              "docs": []
            },
            {
              "name": "Mortal160",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 160,
              "docs": []
            },
            {
              "name": "Mortal161",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 161,
              "docs": []
            },
            {
              "name": "Mortal162",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 162,
              "docs": []
            },
            {
              "name": "Mortal163",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 163,
              "docs": []
            },
            {
              "name": "Mortal164",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 164,
              "docs": []
            },
            {
              "name": "Mortal165",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 165,
              "docs": []
            },
            {
              "name": "Mortal166",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 166,
              "docs": []
            },
            {
              "name": "Mortal167",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 167,
              "docs": []
            },
            {
              "name": "Mortal168",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 168,
              "docs": []
            },
            {
              "name": "Mortal169",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 169,
              "docs": []
            },
            {
              "name": "Mortal170",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 170,
              "docs": []
            },
            {
              "name": "Mortal171",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 171,
              "docs": []
            },
            {
              "name": "Mortal172",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 172,
              "docs": []
            },
            {
              "name": "Mortal173",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 173,
              "docs": []
            },
            {
              "name": "Mortal174",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 174,
              "docs": []
            },
            {
              "name": "Mortal175",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 175,
              "docs": []
            },
            {
              "name": "Mortal176",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 176,
              "docs": []
            },
            {
              "name": "Mortal177",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 177,
              "docs": []
            },
            {
              "name": "Mortal178",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 178,
              "docs": []
            },
            {
              "name": "Mortal179",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 179,
              "docs": []
            },
            {
              "name": "Mortal180",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 180,
              "docs": []
            },
            {
              "name": "Mortal181",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 181,
              "docs": []
            },
            {
              "name": "Mortal182",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 182,
              "docs": []
            },
            {
              "name": "Mortal183",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 183,
              "docs": []
            },
            {
              "name": "Mortal184",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 184,
              "docs": []
            },
            {
              "name": "Mortal185",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 185,
              "docs": []
            },
            {
              "name": "Mortal186",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 186,
              "docs": []
            },
            {
              "name": "Mortal187",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 187,
              "docs": []
            },
            {
              "name": "Mortal188",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 188,
              "docs": []
            },
            {
              "name": "Mortal189",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 189,
              "docs": []
            },
            {
              "name": "Mortal190",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 190,
              "docs": []
            },
            {
              "name": "Mortal191",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 191,
              "docs": []
            },
            {
              "name": "Mortal192",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 192,
              "docs": []
            },
            {
              "name": "Mortal193",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 193,
              "docs": []
            },
            {
              "name": "Mortal194",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 194,
              "docs": []
            },
            {
              "name": "Mortal195",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 195,
              "docs": []
            },
            {
              "name": "Mortal196",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 196,
              "docs": []
            },
            {
              "name": "Mortal197",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 197,
              "docs": []
            },
            {
              "name": "Mortal198",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 198,
              "docs": []
            },
            {
              "name": "Mortal199",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 199,
              "docs": []
            },
            {
              "name": "Mortal200",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            },
            {
              "name": "Mortal201",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 201,
              "docs": []
            },
            {
              "name": "Mortal202",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 202,
              "docs": []
            },
            {
              "name": "Mortal203",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 203,
              "docs": []
            },
            {
              "name": "Mortal204",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 204,
              "docs": []
            },
            {
              "name": "Mortal205",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 205,
              "docs": []
            },
            {
              "name": "Mortal206",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 206,
              "docs": []
            },
            {
              "name": "Mortal207",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 207,
              "docs": []
            },
            {
              "name": "Mortal208",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 208,
              "docs": []
            },
            {
              "name": "Mortal209",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 209,
              "docs": []
            },
            {
              "name": "Mortal210",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 210,
              "docs": []
            },
            {
              "name": "Mortal211",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 211,
              "docs": []
            },
            {
              "name": "Mortal212",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 212,
              "docs": []
            },
            {
              "name": "Mortal213",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 213,
              "docs": []
            },
            {
              "name": "Mortal214",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 214,
              "docs": []
            },
            {
              "name": "Mortal215",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 215,
              "docs": []
            },
            {
              "name": "Mortal216",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 216,
              "docs": []
            },
            {
              "name": "Mortal217",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 217,
              "docs": []
            },
            {
              "name": "Mortal218",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 218,
              "docs": []
            },
            {
              "name": "Mortal219",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 219,
              "docs": []
            },
            {
              "name": "Mortal220",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 220,
              "docs": []
            },
            {
              "name": "Mortal221",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 221,
              "docs": []
            },
            {
              "name": "Mortal222",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 222,
              "docs": []
            },
            {
              "name": "Mortal223",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 223,
              "docs": []
            },
            {
              "name": "Mortal224",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 224,
              "docs": []
            },
            {
              "name": "Mortal225",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 225,
              "docs": []
            },
            {
              "name": "Mortal226",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 226,
              "docs": []
            },
            {
              "name": "Mortal227",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 227,
              "docs": []
            },
            {
              "name": "Mortal228",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 228,
              "docs": []
            },
            {
              "name": "Mortal229",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 229,
              "docs": []
            },
            {
              "name": "Mortal230",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 230,
              "docs": []
            },
            {
              "name": "Mortal231",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 231,
              "docs": []
            },
            {
              "name": "Mortal232",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 232,
              "docs": []
            },
            {
              "name": "Mortal233",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 233,
              "docs": []
            },
            {
              "name": "Mortal234",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 234,
              "docs": []
            },
            {
              "name": "Mortal235",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 235,
              "docs": []
            },
            {
              "name": "Mortal236",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 236,
              "docs": []
            },
            {
              "name": "Mortal237",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 237,
              "docs": []
            },
            {
              "name": "Mortal238",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 238,
              "docs": []
            },
            {
              "name": "Mortal239",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 239,
              "docs": []
            },
            {
              "name": "Mortal240",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 240,
              "docs": []
            },
            {
              "name": "Mortal241",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 241,
              "docs": []
            },
            {
              "name": "Mortal242",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 242,
              "docs": []
            },
            {
              "name": "Mortal243",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 243,
              "docs": []
            },
            {
              "name": "Mortal244",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 244,
              "docs": []
            },
            {
              "name": "Mortal245",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 245,
              "docs": []
            },
            {
              "name": "Mortal246",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 246,
              "docs": []
            },
            {
              "name": "Mortal247",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 247,
              "docs": []
            },
            {
              "name": "Mortal248",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 248,
              "docs": []
            },
            {
              "name": "Mortal249",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 249,
              "docs": []
            },
            {
              "name": "Mortal250",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 250,
              "docs": []
            },
            {
              "name": "Mortal251",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 251,
              "docs": []
            },
            {
              "name": "Mortal252",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 252,
              "docs": []
            },
            {
              "name": "Mortal253",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 253,
              "docs": []
            },
            {
              "name": "Mortal254",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 254,
              "docs": []
            },
            {
              "name": "Mortal255",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 255,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 462,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_nonce",
        "CheckNonce"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 40,
              "typeName": "T::Nonce",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 463,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_weight",
        "CheckWeight"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 464,
    "type": {
      "path": [
        "pallet_asset_conversion_tx_payment",
        "ChargeAssetTxPayment"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "tip",
              "type": 44,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "asset_id",
              "type": 317,
              "typeName": "Option<ChargeAssetIdOf<T>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 465,
    "type": {
      "path": [
        "frame_metadata_hash_extension",
        "CheckMetadataHash"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "mode",
              "type": 466,
              "typeName": "Mode",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 466,
    "type": {
      "path": [
        "frame_metadata_hash_extension",
        "Mode"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Disabled",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Enabled",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 467,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "Runtime"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 468,
    "type": {
      "path": [
        "sp_consensus_slots",
        "SlotDuration"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 469,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "block",
        "Block"
      ],
      "params": [
        {
          "name": "Header",
          "type": 470
        },
        {
          "name": "Extrinsic",
          "type": 471
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "header",
              "type": 470,
              "typeName": "Header",
              "docs": []
            },
            {
              "name": "extrinsics",
              "type": 472,
              "typeName": "Vec<Extrinsic>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 470,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "header",
        "Header"
      ],
      "params": [
        {
          "name": "Number",
          "type": 4
        },
        {
          "name": "Hash",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_hash",
              "type": 13,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "number",
              "type": 40,
              "typeName": "Number",
              "docs": []
            },
            {
              "name": "state_root",
              "type": 13,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "extrinsics_root",
              "type": 13,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "digest",
              "type": 15,
              "typeName": "Digest",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 471,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "unchecked_extrinsic",
        "UncheckedExtrinsic"
      ],
      "params": [
        {
          "name": "Address",
          "type": 233
        },
        {
          "name": "Call",
          "type": 348
        },
        {
          "name": "Signature",
          "type": 375
        },
        {
          "name": "Extra",
          "type": 455
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 472,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 471
        }
      },
      "docs": []
    }
  },
  {
    "id": 473,
    "type": {
      "path": [
        "sp_runtime",
        "ExtrinsicInclusionMode"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AllExtrinsics",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "OnlyInherents",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 474,
    "type": {
      "path": [
        "sp_core",
        "OpaqueMetadata"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 475,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 474
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 474,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 476,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 123
        },
        {
          "name": "E",
          "type": 477
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 123,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 477,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 477,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "TransactionValidityError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Invalid",
              "fields": [
                {
                  "name": null,
                  "type": 478,
                  "typeName": "InvalidTransaction",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unknown",
              "fields": [
                {
                  "name": null,
                  "type": 479,
                  "typeName": "UnknownTransaction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 478,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "InvalidTransaction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Call",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Payment",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Future",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Stale",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "BadProof",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "AncientBirthBlock",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "ExhaustsResources",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Custom",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "BadMandatory",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "MandatoryValidation",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "BadSigner",
              "fields": [],
              "index": 10,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 479,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "UnknownTransaction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NoUnsignedValidator",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Custom",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 480,
    "type": {
      "path": [
        "sp_inherents",
        "InherentData"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "data",
              "type": 481,
              "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 481,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 77
        },
        {
          "name": "V",
          "type": 14
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 482,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 482,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 483
        }
      },
      "docs": []
    }
  },
  {
    "id": 483,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          77,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 484,
    "type": {
      "path": [
        "sp_inherents",
        "CheckInherentsResult"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "okay",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "fatal_error",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "errors",
              "type": 480,
              "typeName": "InherentData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 485,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "TransactionSource"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InBlock",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Local",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "External",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 486,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 487
        },
        {
          "name": "E",
          "type": 477
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 487,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 477,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 487,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "ValidTransaction"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "priority",
              "type": 12,
              "typeName": "TransactionPriority",
              "docs": []
            },
            {
              "name": "requires",
              "type": 162,
              "typeName": "Vec<TransactionTag>",
              "docs": []
            },
            {
              "name": "provides",
              "type": 162,
              "typeName": "Vec<TransactionTag>",
              "docs": []
            },
            {
              "name": "longevity",
              "type": 12,
              "typeName": "TransactionLongevity",
              "docs": []
            },
            {
              "name": "propagate",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 488,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 489
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 489,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 489,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 490
        }
      },
      "docs": []
    }
  },
  {
    "id": 490,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          14,
          255
        ]
      },
      "docs": []
    }
  },
  {
    "id": 491,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "types",
        "RuntimeDispatchInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "Weight",
          "type": 10
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "type": 24,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "partial_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 492,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "types",
        "FeeDetails"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "inclusion_fee",
              "type": 493,
              "typeName": "Option<InclusionFee<Balance>>",
              "docs": []
            },
            {
              "name": "tip",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 493,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 494
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 494,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 494,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "types",
        "InclusionFee"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "len_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "adjusted_weight_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 495,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 496
        },
        {
          "name": "E",
          "type": 497
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 496,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 497,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 496,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 296
        }
      },
      "docs": []
    }
  },
  {
    "id": 497,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "fees",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionedConversionFailed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 498,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        },
        {
          "name": "E",
          "type": 497
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 497,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 499,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 6
        },
        {
          "name": "E",
          "type": 497
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 497,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 500,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 96
        },
        {
          "name": "E",
          "type": 497
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 96,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 497,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 501,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 502
        },
        {
          "name": "E",
          "type": 511
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 502,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 511,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 502,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "dry_run",
        "CallDryRunEffects"
      ],
      "params": [
        {
          "name": "Event",
          "type": 21
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "execution_result",
              "type": 503,
              "typeName": "DispatchResultWithPostInfo",
              "docs": []
            },
            {
              "name": "emitted_events",
              "type": 506,
              "typeName": "Vec<Event>",
              "docs": []
            },
            {
              "name": "local_xcm",
              "type": 507,
              "typeName": "Option<VersionedXcm<()>>",
              "docs": []
            },
            {
              "name": "forwarded_xcms",
              "type": 508,
              "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 503,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 504
        },
        {
          "name": "E",
          "type": 505
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 504,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 505,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 504,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PostDispatchInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "actual_weight",
              "type": 166,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "pays_fee",
              "type": 25,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 505,
    "type": {
      "path": [
        "sp_runtime",
        "DispatchErrorWithPostInfo"
      ],
      "params": [
        {
          "name": "Info",
          "type": 504
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "post_info",
              "type": 504,
              "typeName": "Info",
              "docs": []
            },
            {
              "name": "error",
              "type": 26,
              "typeName": "DispatchError",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 506,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 21
        }
      },
      "docs": []
    }
  },
  {
    "id": 507,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 305
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 305,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 508,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 509
        }
      },
      "docs": []
    }
  },
  {
    "id": 509,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          116,
          510
        ]
      },
      "docs": []
    }
  },
  {
    "id": 510,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 305
        }
      },
      "docs": []
    }
  },
  {
    "id": 511,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "dry_run",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionedConversionFailed",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 512,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 513
        },
        {
          "name": "E",
          "type": 511
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 513,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 511,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 513,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "dry_run",
        "XcmDryRunEffects"
      ],
      "params": [
        {
          "name": "Event",
          "type": 21
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "execution_result",
              "type": 53,
              "typeName": "Outcome",
              "docs": []
            },
            {
              "name": "emitted_events",
              "type": 506,
              "typeName": "Vec<Event>",
              "docs": []
            },
            {
              "name": "forwarded_xcms",
              "type": 508,
              "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 514,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "E",
          "type": 515
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 515,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 515,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "conversions",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unsupported",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionedConversionFailed",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 516,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 96
        },
        {
          "name": "E",
          "type": 517
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 96,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 517,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 517,
    "type": {
      "path": [
        "assets_common",
        "runtime_api",
        "FungiblesAccessError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AssetIdConversionFailed",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AmountToBalanceConversionFailed",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 518,
    "type": {
      "path": [
        "cumulus_primitives_core",
        "CollationInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "upward_messages",
              "type": 162,
              "typeName": "Vec<UpwardMessage>",
              "docs": []
            },
            {
              "name": "horizontal_messages",
              "type": 203,
              "typeName": "Vec<OutboundHrmpMessage>",
              "docs": []
            },
            {
              "name": "new_validation_code",
              "type": 519,
              "typeName": "Option<relay_chain::ValidationCode>",
              "docs": []
            },
            {
              "name": "processed_downward_messages",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_watermark",
              "type": 4,
              "typeName": "relay_chain::BlockNumber",
              "docs": []
            },
            {
              "name": "head_data",
              "type": 187,
              "typeName": "HeadData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 519,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 520
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 520,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 520,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "ValidationCode"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 521,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 124
        },
        {
          "name": "E",
          "type": 157
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 124,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 157,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 522,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 157
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 157,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 523,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 157
        }
      },
      "docs": []
    }
  },
  {
    "id": 524,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 525
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 525,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 525,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 526,
    "type": {
      "path": [
        "asset_hub_polkadot_runtime",
        "RuntimeError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 174,
                  "typeName": "frame_system::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ParachainSystem",
              "fields": [
                {
                  "name": null,
                  "type": 215,
                  "typeName": "cumulus_pallet_parachain_system::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 236,
                  "typeName": "pallet_balances::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 243,
                  "typeName": "pallet_vesting::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "CollatorSelection",
              "fields": [
                {
                  "name": null,
                  "type": 249,
                  "typeName": "pallet_collator_selection::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 257,
                  "typeName": "pallet_session::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "XcmpQueue",
              "fields": [
                {
                  "name": null,
                  "type": 273,
                  "typeName": "cumulus_pallet_xcmp_queue::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "PolkadotXcm",
              "fields": [
                {
                  "name": null,
                  "type": 334,
                  "typeName": "pallet_xcm::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "MessageQueue",
              "fields": [
                {
                  "name": null,
                  "type": 345,
                  "typeName": "pallet_message_queue::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 388,
                  "typeName": "pallet_utility::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 392,
                  "typeName": "pallet_multisig::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 401,
                  "typeName": "pallet_proxy::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 412,
                  "typeName": "pallet_assets::Error<Runtime, pallet_assets::Instance1>",
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Uniques",
              "fields": [
                {
                  "name": null,
                  "type": 422,
                  "typeName": "pallet_uniques::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Nfts",
              "fields": [
                {
                  "name": null,
                  "type": 443,
                  "typeName": "pallet_nfts::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "ForeignAssets",
              "fields": [
                {
                  "name": null,
                  "type": 448,
                  "typeName": "pallet_assets::Error<Runtime, pallet_assets::Instance2>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "PoolAssets",
              "fields": [
                {
                  "name": null,
                  "type": 451,
                  "typeName": "pallet_assets::Error<Runtime, pallet_assets::Instance3>",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "AssetConversion",
              "fields": [
                {
                  "name": null,
                  "type": 454,
                  "typeName": "pallet_asset_conversion::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  }
]