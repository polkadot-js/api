[
  {
    "id": 0,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "AccountId32"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 1,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 32,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 2,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U8"
      },
      "docs": []
    }
  },
  {
    "id": 3,
    "type": {
      "path": [
        "frame_system",
        "AccountInfo"
      ],
      "params": [
        {
          "name": "Nonce",
          "type": 4
        },
        {
          "name": "AccountData",
          "type": 5
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "nonce",
              "type": 4,
              "typeName": "Nonce",
              "docs": []
            },
            {
              "name": "consumers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "providers",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "sufficients",
              "type": 4,
              "typeName": "RefCount",
              "docs": []
            },
            {
              "name": "data",
              "type": 5,
              "typeName": "AccountData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 4,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U32"
      },
      "docs": []
    }
  },
  {
    "id": 5,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "AccountData"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "free",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "frozen",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "flags",
              "type": 7,
              "typeName": "ExtraFlags",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 6,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U128"
      },
      "docs": []
    }
  },
  {
    "id": 7,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "ExtraFlags"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 8,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Bool"
      },
      "docs": []
    }
  },
  {
    "id": 9,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 10,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 10,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 10,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 10,
    "type": {
      "path": [
        "sp_weights",
        "weight_v2",
        "Weight"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ref_time",
              "type": 11,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "proof_size",
              "type": 11,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 11,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 12
        }
      },
      "docs": []
    }
  },
  {
    "id": 12,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U64"
      },
      "docs": []
    }
  },
  {
    "id": 13,
    "type": {
      "path": [
        "primitive_types",
        "H256"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 14,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 15,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "Digest"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "logs",
              "type": 16,
              "typeName": "Vec<DigestItem>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 16,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 17
        }
      },
      "docs": []
    }
  },
  {
    "id": 17,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "digest",
        "DigestItem"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PreRuntime",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Consensus",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Seal",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "ConsensusEngineId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Other",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "RuntimeEnvironmentUpdated",
              "fields": [],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 18,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 19,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 20
        }
      },
      "docs": []
    }
  },
  {
    "id": 20,
    "type": {
      "path": [
        "frame_system",
        "EventRecord"
      ],
      "params": [
        {
          "name": "E",
          "type": 21
        },
        {
          "name": "T",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "phase",
              "type": 497,
              "typeName": "Phase",
              "docs": []
            },
            {
              "name": "event",
              "type": 21,
              "typeName": "E",
              "docs": []
            },
            {
              "name": "topics",
              "type": 101,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 21,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeEvent"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 22,
                  "typeName": "frame_system::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Scheduler",
              "fields": [
                {
                  "name": null,
                  "type": 31,
                  "typeName": "pallet_scheduler::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Preimage",
              "fields": [
                {
                  "name": null,
                  "type": 36,
                  "typeName": "pallet_preimage::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Indices",
              "fields": [
                {
                  "name": null,
                  "type": 37,
                  "typeName": "pallet_indices::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 38,
                  "typeName": "pallet_balances::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "TransactionPayment",
              "fields": [
                {
                  "name": null,
                  "type": 40,
                  "typeName": "pallet_transaction_payment::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [
                {
                  "name": null,
                  "type": 41,
                  "typeName": "pallet_staking::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Offences",
              "fields": [
                {
                  "name": null,
                  "type": 47,
                  "typeName": "pallet_offences::Event",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 49,
                  "typeName": "pallet_session::Event",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "name": null,
                  "type": 50,
                  "typeName": "pallet_grandpa::Event",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [
                {
                  "name": null,
                  "type": 54,
                  "typeName": "pallet_treasury::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "ConvictionVoting",
              "fields": [
                {
                  "name": null,
                  "type": 89,
                  "typeName": "pallet_conviction_voting::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Referenda",
              "fields": [
                {
                  "name": null,
                  "type": 90,
                  "typeName": "pallet_referenda::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Whitelist",
              "fields": [
                {
                  "name": null,
                  "type": 449,
                  "typeName": "pallet_whitelist::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Parameters",
              "fields": [
                {
                  "name": null,
                  "type": 454,
                  "typeName": "pallet_parameters::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Claims",
              "fields": [
                {
                  "name": null,
                  "type": 460,
                  "typeName": "claims::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 461,
                  "typeName": "pallet_vesting::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 462,
                  "typeName": "pallet_utility::Event",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 463,
                  "typeName": "pallet_proxy::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 464,
                  "typeName": "pallet_multisig::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Bounties",
              "fields": [
                {
                  "name": null,
                  "type": 465,
                  "typeName": "pallet_bounties::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ChildBounties",
              "fields": [
                {
                  "name": null,
                  "type": 466,
                  "typeName": "pallet_child_bounties::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "ElectionProviderMultiPhase",
              "fields": [
                {
                  "name": null,
                  "type": 467,
                  "typeName": "pallet_election_provider_multi_phase::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "VoterList",
              "fields": [
                {
                  "name": null,
                  "type": 471,
                  "typeName": "pallet_bags_list::Event<Runtime, pallet_bags_list::Instance1>",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "NominationPools",
              "fields": [
                {
                  "name": null,
                  "type": 472,
                  "typeName": "pallet_nomination_pools::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "FastUnstake",
              "fields": [
                {
                  "name": null,
                  "type": 473,
                  "typeName": "pallet_fast_unstake::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "ParaInclusion",
              "fields": [
                {
                  "name": null,
                  "type": 474,
                  "typeName": "parachains_inclusion::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "Paras",
              "fields": [
                {
                  "name": null,
                  "type": 478,
                  "typeName": "parachains_paras::Event",
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Hrmp",
              "fields": [
                {
                  "name": null,
                  "type": 479,
                  "typeName": "parachains_hrmp::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "ParasDisputes",
              "fields": [
                {
                  "name": null,
                  "type": 480,
                  "typeName": "parachains_disputes::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "OnDemand",
              "fields": [
                {
                  "name": null,
                  "type": 483,
                  "typeName": "parachains_assigner_on_demand::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Registrar",
              "fields": [
                {
                  "name": null,
                  "type": 484,
                  "typeName": "paras_registrar::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Slots",
              "fields": [
                {
                  "name": null,
                  "type": 485,
                  "typeName": "slots::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Auctions",
              "fields": [
                {
                  "name": null,
                  "type": 486,
                  "typeName": "auctions::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Crowdloan",
              "fields": [
                {
                  "name": null,
                  "type": 487,
                  "typeName": "crowdloan::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Coretime",
              "fields": [
                {
                  "name": null,
                  "type": 488,
                  "typeName": "coretime::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "StateTrieMigration",
              "fields": [
                {
                  "name": null,
                  "type": 489,
                  "typeName": "pallet_state_trie_migration::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "XcmPallet",
              "fields": [
                {
                  "name": null,
                  "type": 492,
                  "typeName": "pallet_xcm::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "MessageQueue",
              "fields": [
                {
                  "name": null,
                  "type": 494,
                  "typeName": "pallet_message_queue::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "AssetRate",
              "fields": [
                {
                  "name": null,
                  "type": 496,
                  "typeName": "pallet_asset_rate::Event<Runtime>",
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 22,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ExtrinsicSuccess",
              "fields": [
                {
                  "name": "dispatch_info",
                  "type": 23,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An extrinsic completed successfully."
              ]
            },
            {
              "name": "ExtrinsicFailed",
              "fields": [
                {
                  "name": "dispatch_error",
                  "type": 26,
                  "typeName": "DispatchError",
                  "docs": []
                },
                {
                  "name": "dispatch_info",
                  "type": 23,
                  "typeName": "DispatchInfo",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An extrinsic failed."
              ]
            },
            {
              "name": "CodeUpdated",
              "fields": [],
              "index": 2,
              "docs": [
                "`:code` was updated."
              ]
            },
            {
              "name": "NewAccount",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A new account was created."
              ]
            },
            {
              "name": "KilledAccount",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An account was reaped."
              ]
            },
            {
              "name": "Remarked",
              "fields": [
                {
                  "name": "sender",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "On on-chain remark happened."
              ]
            },
            {
              "name": "UpgradeAuthorized",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "check_version",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An upgrade was authorized."
              ]
            }
          ]
        }
      },
      "docs": [
        "Event for the System pallet."
      ]
    }
  },
  {
    "id": 23,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "DispatchInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "type": 24,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "pays_fee",
              "type": 25,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 24,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "DispatchClass"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Normal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Operational",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mandatory",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 25,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "Pays"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Yes",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "No",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 26,
    "type": {
      "path": [
        "sp_runtime",
        "DispatchError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Other",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Module",
              "fields": [
                {
                  "name": null,
                  "type": 27,
                  "typeName": "ModuleError",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "ConsumerRemaining",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "NoProviders",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "TooManyConsumers",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Token",
              "fields": [
                {
                  "name": null,
                  "type": 28,
                  "typeName": "TokenError",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Arithmetic",
              "fields": [
                {
                  "name": null,
                  "type": 29,
                  "typeName": "ArithmeticError",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Transactional",
              "fields": [
                {
                  "name": null,
                  "type": 30,
                  "typeName": "TransactionalError",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Exhausted",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "Corruption",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "Unavailable",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "RootNotAllowed",
              "fields": [],
              "index": 13,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 27,
    "type": {
      "path": [
        "sp_runtime",
        "ModuleError"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "error",
              "type": 18,
              "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 28,
    "type": {
      "path": [
        "sp_runtime",
        "TokenError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "FundsUnavailable",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "OnlyProvider",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "BelowMinimum",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CannotCreate",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "UnknownAsset",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Frozen",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "CannotCreateHold",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "NotExpendable",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Blocked",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 29,
    "type": {
      "path": [
        "sp_arithmetic",
        "ArithmeticError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Underflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DivisionByZero",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 30,
    "type": {
      "path": [
        "sp_runtime",
        "TransactionalError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "LimitReached",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NoLayer",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 31,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Scheduled",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Scheduled some task."
              ]
            },
            {
              "name": "Canceled",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Canceled some task."
              ]
            },
            {
              "name": "Dispatched",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 33,
                  "typeName": "Option<TaskName>",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 34,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Dispatched some task."
              ]
            },
            {
              "name": "RetrySet",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 33,
                  "typeName": "Option<TaskName>",
                  "docs": []
                },
                {
                  "name": "period",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "retries",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set a retry configuration for some task."
              ]
            },
            {
              "name": "RetryCancelled",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 33,
                  "typeName": "Option<TaskName>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Cancel a retry configuration for some task."
              ]
            },
            {
              "name": "CallUnavailable",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 33,
                  "typeName": "Option<TaskName>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The call for the provided hash was not found so the task has been aborted."
              ]
            },
            {
              "name": "PeriodicFailed",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 33,
                  "typeName": "Option<TaskName>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "The given task was unable to be renewed since the agenda is full at that block."
              ]
            },
            {
              "name": "RetryFailed",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 33,
                  "typeName": "Option<TaskName>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "The given task was unable to be retried since the agenda is full at that block or there",
                "was not enough weight to reschedule it."
              ]
            },
            {
              "name": "PermanentlyOverweight",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 33,
                  "typeName": "Option<TaskName>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "The given task can never be executed since it is overweight."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events type."
      ]
    }
  },
  {
    "id": 32,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 33,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 1
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 34,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 35
        },
        {
          "name": "E",
          "type": 26
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 35,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 26,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 35,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": []
      },
      "docs": []
    }
  },
  {
    "id": 36,
    "type": {
      "path": [
        "pallet_preimage",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noted",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A preimage has been noted."
              ]
            },
            {
              "name": "Requested",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A preimage has been requested."
              ]
            },
            {
              "name": "Cleared",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A preimage has ben cleared."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 37,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "IndexAssigned",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A account index was assigned."
              ]
            },
            {
              "name": "IndexFreed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A account index has been freed up (unassigned)."
              ]
            },
            {
              "name": "IndexFrozen",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A account index has been frozen to its current account ID."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 38,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Endowed",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free_balance",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An account was created with some free balance."
              ]
            },
            {
              "name": "DustLost",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                "resulting in an outright loss."
              ]
            },
            {
              "name": "Transfer",
              "fields": [
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer succeeded."
              ]
            },
            {
              "name": "BalanceSet",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "free",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A balance was set by root."
              ]
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some balance was reserved (moved from free to reserved)."
              ]
            },
            {
              "name": "Unreserved",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Some balance was unreserved (moved from reserved to free)."
              ]
            },
            {
              "name": "ReserveRepatriated",
              "fields": [
                {
                  "name": "from",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "destination_status",
                  "type": 39,
                  "typeName": "Status",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Some balance was moved from the reserve of the first account to the second account.",
                "Final argument indicates the destination balance type."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Some amount was deposited (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Withdraw",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Some amount was withdrawn from the account (e.g. for transaction fees)."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Some amount was removed from the account (e.g. for misbehavior)."
              ]
            },
            {
              "name": "Minted",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Some amount was minted into an account."
              ]
            },
            {
              "name": "Burned",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Some amount was burned from an account."
              ]
            },
            {
              "name": "Suspended",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Some amount was suspended from an account (it can be restored later)."
              ]
            },
            {
              "name": "Restored",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Some amount was restored into an account."
              ]
            },
            {
              "name": "Upgraded",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "An account was upgraded."
              ]
            },
            {
              "name": "Issued",
              "fields": [
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Total issuance was increased by `amount`, creating a credit to be balanced."
              ]
            },
            {
              "name": "Rescinded",
              "fields": [
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Total issuance was decreased by `amount`, creating a debt to be balanced."
              ]
            },
            {
              "name": "Locked",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Some balance was locked."
              ]
            },
            {
              "name": "Unlocked",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Some balance was unlocked."
              ]
            },
            {
              "name": "Frozen",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Some balance was frozen."
              ]
            },
            {
              "name": "Thawed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Some balance was thawed."
              ]
            },
            {
              "name": "TotalIssuanceForced",
              "fields": [
                {
                  "name": "old",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "The `TotalIssuance` was forcefully changed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 39,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "BalanceStatus"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Free",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Reserved",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 40,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TransactionFeePaid",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "actual_fee",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "tip",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                "has been paid by `who`."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 41,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "EraPaid",
              "fields": [
                {
                  "name": "era_index",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "validator_payout",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "remainder",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The era payout has been set; the first balance is the validator-payout; the second is",
                "the remainder from the maximum amount of reward."
              ]
            },
            {
              "name": "Rewarded",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 42,
                  "typeName": "RewardDestination<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The nominator has been rewarded by this amount to this destination."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "staker",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A staker (validator or nominator) has been slashed by the given amount."
              ]
            },
            {
              "name": "SlashReported",
              "fields": [
                {
                  "name": "validator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "fraction",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "slash_era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A slash for the given validator, for the given percentage of their stake, at the given",
                "era as been reported."
              ]
            },
            {
              "name": "OldSlashingReportDiscarded",
              "fields": [
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An old slashing report from a prior era was discarded because it could",
                "not be processed."
              ]
            },
            {
              "name": "StakersElected",
              "fields": [],
              "index": 5,
              "docs": [
                "A new set of stakers was elected."
              ]
            },
            {
              "name": "Bonded",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An account has bonded this amount. \\[stash, amount\\]",
                "",
                "NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                "it will not be emitted for staking rewards when they are added to stake."
              ]
            },
            {
              "name": "Unbonded",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "An account has unbonded this amount."
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                "from the unlocking queue."
              ]
            },
            {
              "name": "Kicked",
              "fields": [
                {
                  "name": "nominator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A nominator has been kicked from a validator."
              ]
            },
            {
              "name": "StakingElectionFailed",
              "fields": [],
              "index": 10,
              "docs": [
                "The election failed. No new era is planned."
              ]
            },
            {
              "name": "Chilled",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "An account has stopped participating as either a validator or nominator."
              ]
            },
            {
              "name": "PayoutStarted",
              "fields": [
                {
                  "name": "era_index",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "validator_stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "The stakers' rewards are getting paid."
              ]
            },
            {
              "name": "ValidatorPrefsSet",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "prefs",
                  "type": 44,
                  "typeName": "ValidatorPrefs",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "A validator has set their preferences."
              ]
            },
            {
              "name": "SnapshotVotersSizeExceeded",
              "fields": [
                {
                  "name": "size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Voters size limit reached."
              ]
            },
            {
              "name": "SnapshotTargetsSizeExceeded",
              "fields": [
                {
                  "name": "size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Targets size limit reached."
              ]
            },
            {
              "name": "ForceEra",
              "fields": [
                {
                  "name": "mode",
                  "type": 46,
                  "typeName": "Forcing",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "A new force era mode was set."
              ]
            },
            {
              "name": "ControllerBatchDeprecated",
              "fields": [
                {
                  "name": "failures",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Report of a controller batch deprecation."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 42,
    "type": {
      "path": [
        "pallet_staking",
        "RewardDestination"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Staked",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Stash",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Controller",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Account",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 43,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perbill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 44,
    "type": {
      "path": [
        "pallet_staking",
        "ValidatorPrefs"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "commission",
              "type": 45,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "blocked",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 45,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 43
        }
      },
      "docs": []
    }
  },
  {
    "id": 46,
    "type": {
      "path": [
        "pallet_staking",
        "Forcing"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotForcing",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "ForceNew",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "ForceNone",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "ForceAlways",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 47,
    "type": {
      "path": [
        "pallet_offences",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Offence",
              "fields": [
                {
                  "name": "kind",
                  "type": 48,
                  "typeName": "Kind",
                  "docs": []
                },
                {
                  "name": "timeslot",
                  "type": 14,
                  "typeName": "OpaqueTimeSlot",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "There is an offence reported of the given `kind` happened at the `session_index` and",
                "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                "\\[kind, timeslot\\]."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events type."
      ]
    }
  },
  {
    "id": 48,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 16,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 49,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewSession",
              "fields": [
                {
                  "name": "session_index",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New session has happened. Note that the argument is the session index, not the",
                "block number as the type might suggest."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 50,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewAuthorities",
              "fields": [
                {
                  "name": "authority_set",
                  "type": 51,
                  "typeName": "AuthorityList",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New authority set has been applied."
              ]
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 1,
              "docs": [
                "Current authority set has been paused."
              ]
            },
            {
              "name": "Resumed",
              "fields": [],
              "index": 2,
              "docs": [
                "Current authority set has been resumed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 51,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 52
        }
      },
      "docs": []
    }
  },
  {
    "id": 52,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          53,
          12
        ]
      },
      "docs": []
    }
  },
  {
    "id": 53,
    "type": {
      "path": [
        "sp_consensus_grandpa",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "ed25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 54,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Spending",
              "fields": [
                {
                  "name": "budget_remaining",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "We have ended a spend period and will now allocate funds."
              ]
            },
            {
              "name": "Awarded",
              "fields": [
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "award",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some funds have been allocated."
              ]
            },
            {
              "name": "Burnt",
              "fields": [
                {
                  "name": "burnt_funds",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Some of our funds have been burnt."
              ]
            },
            {
              "name": "Rollover",
              "fields": [
                {
                  "name": "rollover_balance",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Spending has finished; this is the amount that rolls over until next spend."
              ]
            },
            {
              "name": "Deposit",
              "fields": [
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Some funds have been deposited."
              ]
            },
            {
              "name": "SpendApproved",
              "fields": [
                {
                  "name": "proposal_index",
                  "type": 4,
                  "typeName": "ProposalIndex",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A new spend proposal has been approved."
              ]
            },
            {
              "name": "UpdatedInactive",
              "fields": [
                {
                  "name": "reactivated",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "deactivated",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "The inactive funds of the pallet have been updated."
              ]
            },
            {
              "name": "AssetSpendApproved",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                },
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "T::AssetKind",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "AssetBalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "T::Beneficiary",
                  "docs": []
                },
                {
                  "name": "valid_from",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "expire_at",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A new asset spend proposal has been approved."
              ]
            },
            {
              "name": "AssetSpendVoided",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "An approved spend was voided."
              ]
            },
            {
              "name": "Paid",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                },
                {
                  "name": "payment_id",
                  "type": 12,
                  "typeName": "<T::Paymaster as Pay>::Id",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A payment happened."
              ]
            },
            {
              "name": "PaymentFailed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                },
                {
                  "name": "payment_id",
                  "type": 12,
                  "typeName": "<T::Paymaster as Pay>::Id",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "A payment failed and can be retried."
              ]
            },
            {
              "name": "SpendProcessed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "A spend was processed and removed from the storage. It might have been successfully",
                "paid or it may have expired."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 55,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "impls",
        "VersionedLocatableAsset"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V3",
              "fields": [
                {
                  "name": "location",
                  "type": 56,
                  "typeName": "xcm::v3::Location",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "type": 66,
                  "typeName": "xcm::v3::AssetId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": "location",
                  "type": 67,
                  "typeName": "xcm::v4::Location",
                  "docs": []
                },
                {
                  "name": "asset_id",
                  "type": 80,
                  "typeName": "xcm::v4::AssetId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 56,
    "type": {
      "path": [
        "staging_xcm",
        "v3",
        "multilocation",
        "MultiLocation"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parents",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "type": 57,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 57,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junctions",
        "Junctions"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 58,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "Junction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "name": null,
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "type": 60,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "type": 60,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "type": 60,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 62,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "name": "length",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "type": 64,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "type": 65,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "GlobalConsensus",
              "fields": [
                {
                  "name": null,
                  "type": 61,
                  "typeName": "NetworkId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 59,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 60,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 61
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 61,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 61,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "NetworkId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ByGenesis",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ByFork",
              "fields": [
                {
                  "name": "block_number",
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "block_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Westend",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Rococo",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Wococo",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "name": "chain_id",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "BitcoinCore",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "BitcoinCash",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "PolkadotBulletin",
              "fields": [],
              "index": 10,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 62,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 20,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 63,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 6
        }
      },
      "docs": []
    }
  },
  {
    "id": 64,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "BodyId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unit",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Moniker",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Executive",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Technical",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Legislative",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Judicial",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Defense",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Administration",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 65,
    "type": {
      "path": [
        "xcm",
        "v3",
        "junction",
        "BodyPart"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Voice",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Members",
              "fields": [
                {
                  "name": "count",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Fraction",
              "fields": [
                {
                  "name": "nom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AtLeastProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "MoreThanProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 66,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "AssetId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Concrete",
              "fields": [
                {
                  "name": null,
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Abstract",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 67,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "location",
        "Location"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parents",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "type": 68,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 68,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "junctions",
        "Junctions"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "name": null,
                  "type": 69,
                  "typeName": "Arc<[Junction; 1]>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "name": null,
                  "type": 73,
                  "typeName": "Arc<[Junction; 2]>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "name": null,
                  "type": 74,
                  "typeName": "Arc<[Junction; 3]>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "name": null,
                  "type": 75,
                  "typeName": "Arc<[Junction; 4]>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "name": null,
                  "type": 76,
                  "typeName": "Arc<[Junction; 5]>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "name": null,
                  "type": 77,
                  "typeName": "Arc<[Junction; 6]>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "name": null,
                  "type": 78,
                  "typeName": "Arc<[Junction; 7]>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "name": null,
                  "type": 79,
                  "typeName": "Arc<[Junction; 8]>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 69,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 1,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 70,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "junction",
        "Junction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "name": null,
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "type": 71,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "type": 71,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "type": 71,
                  "typeName": "Option<NetworkId>",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 62,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "name": "length",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "data",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "type": 64,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "type": 65,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "GlobalConsensus",
              "fields": [
                {
                  "name": null,
                  "type": 72,
                  "typeName": "NetworkId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 71,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 72
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 72,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 72,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "junction",
        "NetworkId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ByGenesis",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ByFork",
              "fields": [
                {
                  "name": "block_number",
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "block_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Westend",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Rococo",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Wococo",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Ethereum",
              "fields": [
                {
                  "name": "chain_id",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "BitcoinCore",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "BitcoinCash",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "PolkadotBulletin",
              "fields": [],
              "index": 10,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 73,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 74,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 75,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 76,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 5,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 77,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 6,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 78,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 7,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 79,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 70
        }
      },
      "docs": []
    }
  },
  {
    "id": 80,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "AssetId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 67,
              "typeName": "Location",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 81,
    "type": {
      "path": [
        "xcm",
        "VersionedLocation"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 82,
                  "typeName": "v2::MultiLocation",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 56,
                  "typeName": "v3::MultiLocation",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": "v4::Location",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 82,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multilocation",
        "MultiLocation"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parents",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "interior",
              "type": 83,
              "typeName": "Junctions",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 83,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multilocation",
        "Junctions"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Here",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "X1",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "X2",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "X3",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "X4",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "X5",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "X6",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "X7",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "X8",
              "fields": [
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 84,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 84,
    "type": {
      "path": [
        "xcm",
        "v2",
        "junction",
        "Junction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "name": null,
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AccountId32",
              "fields": [
                {
                  "name": "network",
                  "type": 85,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AccountIndex64",
              "fields": [
                {
                  "name": "network",
                  "type": 85,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AccountKey20",
              "fields": [
                {
                  "name": "network",
                  "type": 85,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "key",
                  "type": 62,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletInstance",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "GeneralIndex",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "GeneralKey",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "OnlyChild",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Plurality",
              "fields": [
                {
                  "name": "id",
                  "type": 87,
                  "typeName": "BodyId",
                  "docs": []
                },
                {
                  "name": "part",
                  "type": 88,
                  "typeName": "BodyPart",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 85,
    "type": {
      "path": [
        "xcm",
        "v2",
        "NetworkId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Named",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Polkadot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Kusama",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 86,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 87,
    "type": {
      "path": [
        "xcm",
        "v2",
        "BodyId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unit",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Named",
              "fields": [
                {
                  "name": null,
                  "type": 86,
                  "typeName": "WeakBoundedVec<u8, ConstU32<32>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Executive",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Technical",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Legislative",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Judicial",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Defense",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "Administration",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 88,
    "type": {
      "path": [
        "xcm",
        "v2",
        "BodyPart"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Voice",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Members",
              "fields": [
                {
                  "name": "count",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Fraction",
              "fields": [
                {
                  "name": "nom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AtLeastProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "MoreThanProportion",
              "fields": [
                {
                  "name": "nom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "denom",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 89,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Delegated",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An account has delegated their vote to another account. \\[who, target\\]"
              ]
            },
            {
              "name": "Undelegated",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An \\[account\\] has cancelled a previous delegation operation."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 90,
    "type": {
      "path": [
        "pallet_referenda",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Submitted",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "track",
                  "type": 91,
                  "typeName": "TrackIdOf<T, I>",
                  "docs": [
                    "The track (and by extension proposal dispatch origin) of this referendum."
                  ]
                },
                {
                  "name": "proposal",
                  "type": 92,
                  "typeName": "BoundedCallOf<T, I>",
                  "docs": [
                    "The proposal for the referendum."
                  ]
                }
              ],
              "index": 0,
              "docs": [
                "A referendum has been submitted."
              ]
            },
            {
              "name": "DecisionDepositPlaced",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account who placed the deposit."
                  ]
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": [
                    "The amount placed by the account."
                  ]
                }
              ],
              "index": 1,
              "docs": [
                "The decision deposit has been placed."
              ]
            },
            {
              "name": "DecisionDepositRefunded",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account who placed the deposit."
                  ]
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": [
                    "The amount placed by the account."
                  ]
                }
              ],
              "index": 2,
              "docs": [
                "The decision deposit has been refunded."
              ]
            },
            {
              "name": "DepositSlashed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account who placed the deposit."
                  ]
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": [
                    "The amount placed by the account."
                  ]
                }
              ],
              "index": 3,
              "docs": [
                "A deposit has been slashed."
              ]
            },
            {
              "name": "DecisionStarted",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "track",
                  "type": 91,
                  "typeName": "TrackIdOf<T, I>",
                  "docs": [
                    "The track (and by extension proposal dispatch origin) of this referendum."
                  ]
                },
                {
                  "name": "proposal",
                  "type": 92,
                  "typeName": "BoundedCallOf<T, I>",
                  "docs": [
                    "The proposal for the referendum."
                  ]
                },
                {
                  "name": "tally",
                  "type": 448,
                  "typeName": "T::Tally",
                  "docs": [
                    "The current tally of votes in this referendum."
                  ]
                }
              ],
              "index": 4,
              "docs": [
                "A referendum has moved into the deciding phase."
              ]
            },
            {
              "name": "ConfirmStarted",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "ConfirmAborted",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Confirmed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "tally",
                  "type": 448,
                  "typeName": "T::Tally",
                  "docs": [
                    "The final tally of votes in this referendum."
                  ]
                }
              ],
              "index": 7,
              "docs": [
                "A referendum has ended its confirmation phase and is ready for approval."
              ]
            },
            {
              "name": "Approved",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                }
              ],
              "index": 8,
              "docs": [
                "A referendum has been approved and its proposal has been scheduled."
              ]
            },
            {
              "name": "Rejected",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "tally",
                  "type": 448,
                  "typeName": "T::Tally",
                  "docs": [
                    "The final tally of votes in this referendum."
                  ]
                }
              ],
              "index": 9,
              "docs": [
                "A proposal has been rejected by referendum."
              ]
            },
            {
              "name": "TimedOut",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "tally",
                  "type": 448,
                  "typeName": "T::Tally",
                  "docs": [
                    "The final tally of votes in this referendum."
                  ]
                }
              ],
              "index": 10,
              "docs": [
                "A referendum has been timed out without being decided."
              ]
            },
            {
              "name": "Cancelled",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "tally",
                  "type": 448,
                  "typeName": "T::Tally",
                  "docs": [
                    "The final tally of votes in this referendum."
                  ]
                }
              ],
              "index": 11,
              "docs": [
                "A referendum has been cancelled."
              ]
            },
            {
              "name": "Killed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "tally",
                  "type": 448,
                  "typeName": "T::Tally",
                  "docs": [
                    "The final tally of votes in this referendum."
                  ]
                }
              ],
              "index": 12,
              "docs": [
                "A referendum has been killed."
              ]
            },
            {
              "name": "SubmissionDepositRefunded",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": [
                    "The account who placed the deposit."
                  ]
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": [
                    "The amount placed by the account."
                  ]
                }
              ],
              "index": 13,
              "docs": [
                "The submission deposit has been refunded."
              ]
            },
            {
              "name": "MetadataSet",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": [
                    "Preimage hash."
                  ]
                }
              ],
              "index": 14,
              "docs": [
                "Metadata for a referendum has been set."
              ]
            },
            {
              "name": "MetadataCleared",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": [
                    "Index of the referendum."
                  ]
                },
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": [
                    "Preimage hash."
                  ]
                }
              ],
              "index": 15,
              "docs": [
                "Metadata for a referendum has been cleared."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 91,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "U16"
      },
      "docs": []
    }
  },
  {
    "id": 92,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "preimages",
        "Bounded"
      ],
      "params": [
        {
          "name": "T",
          "type": 93
        },
        {
          "name": "H",
          "type": 446
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Legacy",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "H::Output",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Inline",
              "fields": [
                {
                  "name": null,
                  "type": 447,
                  "typeName": "BoundedInline",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Lookup",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "H::Output",
                  "docs": []
                },
                {
                  "name": "len",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 93,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeCall"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 94,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Scheduler",
              "fields": [
                {
                  "name": null,
                  "type": 98,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Scheduler, Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Preimage",
              "fields": [
                {
                  "name": null,
                  "type": 100,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Preimage, Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Babe",
              "fields": [
                {
                  "name": null,
                  "type": 102,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Babe, Runtime>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Timestamp",
              "fields": [
                {
                  "name": null,
                  "type": 111,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Indices",
              "fields": [
                {
                  "name": null,
                  "type": 112,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Indices, Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 115,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [
                {
                  "name": null,
                  "type": 118,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Staking, Runtime>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 133,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Session, Runtime>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "name": null,
                  "type": 140,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [
                {
                  "name": null,
                  "type": 151,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Treasury, Runtime>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "ConvictionVoting",
              "fields": [
                {
                  "name": null,
                  "type": 153,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ConvictionVoting, Runtime>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Referenda",
              "fields": [
                {
                  "name": null,
                  "type": 158,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Referenda, Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Whitelist",
              "fields": [
                {
                  "name": null,
                  "type": 168,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Whitelist, Runtime>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Parameters",
              "fields": [
                {
                  "name": null,
                  "type": 169,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Parameters, Runtime>",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Claims",
              "fields": [
                {
                  "name": null,
                  "type": 180,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Claims, Runtime>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 188,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 190,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 192,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Proxy, Runtime>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 195,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Multisig, Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Bounties",
              "fields": [
                {
                  "name": null,
                  "type": 198,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Bounties, Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ChildBounties",
              "fields": [
                {
                  "name": null,
                  "type": 199,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ChildBounties, Runtime>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "ElectionProviderMultiPhase",
              "fields": [
                {
                  "name": null,
                  "type": 200,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ElectionProviderMultiPhase, Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "VoterList",
              "fields": [
                {
                  "name": null,
                  "type": 261,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VoterList, Runtime>",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "NominationPools",
              "fields": [
                {
                  "name": null,
                  "type": 262,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<NominationPools, Runtime>",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "FastUnstake",
              "fields": [
                {
                  "name": null,
                  "type": 275,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<FastUnstake, Runtime>",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Configuration",
              "fields": [
                {
                  "name": null,
                  "type": 276,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Configuration, Runtime>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "ParasShared",
              "fields": [
                {
                  "name": null,
                  "type": 285,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasShared, Runtime>",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "ParaInclusion",
              "fields": [
                {
                  "name": null,
                  "type": 286,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInclusion, Runtime>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "ParaInherent",
              "fields": [
                {
                  "name": null,
                  "type": 287,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParaInherent, Runtime>",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Paras",
              "fields": [
                {
                  "name": null,
                  "type": 322,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Paras, Runtime>",
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Initializer",
              "fields": [
                {
                  "name": null,
                  "type": 324,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Initializer, Runtime>",
                  "docs": []
                }
              ],
              "index": 57,
              "docs": []
            },
            {
              "name": "Hrmp",
              "fields": [
                {
                  "name": null,
                  "type": 325,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Hrmp, Runtime>",
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "ParasDisputes",
              "fields": [
                {
                  "name": null,
                  "type": 327,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasDisputes, Runtime>",
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "ParasSlashing",
              "fields": [
                {
                  "name": null,
                  "type": 328,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ParasSlashing, Runtime>",
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "OnDemand",
              "fields": [
                {
                  "name": null,
                  "type": 332,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<OnDemand, Runtime>",
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Registrar",
              "fields": [
                {
                  "name": null,
                  "type": 333,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Registrar, Runtime>",
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Slots",
              "fields": [
                {
                  "name": null,
                  "type": 334,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Slots, Runtime>",
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Auctions",
              "fields": [
                {
                  "name": null,
                  "type": 335,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Auctions, Runtime>",
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Crowdloan",
              "fields": [
                {
                  "name": null,
                  "type": 337,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Crowdloan, Runtime>",
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Coretime",
              "fields": [
                {
                  "name": null,
                  "type": 342,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Coretime, Runtime>",
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "StateTrieMigration",
              "fields": [
                {
                  "name": null,
                  "type": 347,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StateTrieMigration, Runtime>",
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "XcmPallet",
              "fields": [
                {
                  "name": null,
                  "type": 353,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<XcmPallet, Runtime>",
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "MessageQueue",
              "fields": [
                {
                  "name": null,
                  "type": 432,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<MessageQueue, Runtime>",
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "AssetRate",
              "fields": [
                {
                  "name": null,
                  "type": 435,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<AssetRate, Runtime>",
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Beefy",
              "fields": [
                {
                  "name": null,
                  "type": 437,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Beefy, Runtime>",
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 94,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "remark",
              "fields": [
                {
                  "name": "remark",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Make some on-chain remark.",
                "",
                "Can be executed by every `origin`."
              ]
            },
            {
              "name": "set_heap_pages",
              "fields": [
                {
                  "name": "pages",
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the number of pages in the WebAssembly environment's heap."
              ]
            },
            {
              "name": "set_code",
              "fields": [
                {
                  "name": "code",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the new runtime code."
              ]
            },
            {
              "name": "set_code_without_checks",
              "fields": [
                {
                  "name": "code",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set the new runtime code without doing any checks of the given `code`.",
                "",
                "Note that runtime upgrades will not run if this is called with a not-increasing spec",
                "version!"
              ]
            },
            {
              "name": "set_storage",
              "fields": [
                {
                  "name": "items",
                  "type": 95,
                  "typeName": "Vec<KeyValue>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Set some items of storage."
              ]
            },
            {
              "name": "kill_storage",
              "fields": [
                {
                  "name": "keys",
                  "type": 97,
                  "typeName": "Vec<Key>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Kill some items from storage."
              ]
            },
            {
              "name": "kill_prefix",
              "fields": [
                {
                  "name": "prefix",
                  "type": 14,
                  "typeName": "Key",
                  "docs": []
                },
                {
                  "name": "subkeys",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Kill all storage items with a key that starts with the given prefix.",
                "",
                "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                "the prefix we are removing to accurately calculate the weight of this function."
              ]
            },
            {
              "name": "remark_with_event",
              "fields": [
                {
                  "name": "remark",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Make some on-chain remark and emit event."
              ]
            },
            {
              "name": "authorize_upgrade",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                "later.",
                "",
                "This call requires Root origin."
              ]
            },
            {
              "name": "authorize_upgrade_without_checks",
              "fields": [
                {
                  "name": "code_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied",
                "later.",
                "",
                "WARNING: This authorizes an upgrade that will take place without any safety checks, for",
                "example that the spec name remains the same and that the version number increases. Not",
                "recommended for normal use. Use `authorize_upgrade` instead.",
                "",
                "This call requires Root origin."
              ]
            },
            {
              "name": "apply_authorized_upgrade",
              "fields": [
                {
                  "name": "code",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized.",
                "",
                "If the authorization required a version check, this call will ensure the spec name",
                "remains unchanged and that the spec version has increased.",
                "",
                "Depending on the runtime's `OnSetCode` configuration, this function may directly apply",
                "the new `code` in the same block or attempt to schedule the upgrade.",
                "",
                "All origins are allowed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 95,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 96
        }
      },
      "docs": []
    }
  },
  {
    "id": 96,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          14,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 97,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 14
        }
      },
      "docs": []
    }
  },
  {
    "id": 98,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "schedule",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 99,
                  "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Anonymously schedule a task."
              ]
            },
            {
              "name": "cancel",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Cancel an anonymously scheduled task."
              ]
            },
            {
              "name": "schedule_named",
              "fields": [
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "TaskName",
                  "docs": []
                },
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 99,
                  "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Schedule a named task."
              ]
            },
            {
              "name": "cancel_named",
              "fields": [
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "TaskName",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a named scheduled task."
              ]
            },
            {
              "name": "schedule_after",
              "fields": [
                {
                  "name": "after",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 99,
                  "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Anonymously schedule a task after a delay."
              ]
            },
            {
              "name": "schedule_named_after",
              "fields": [
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "TaskName",
                  "docs": []
                },
                {
                  "name": "after",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "maybe_periodic",
                  "type": 99,
                  "typeName": "Option<schedule::Period<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "priority",
                  "type": 2,
                  "typeName": "schedule::Priority",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Schedule a named task after a delay."
              ]
            },
            {
              "name": "set_retry",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "retries",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "period",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Set a retry configuration for a task so that, in case its scheduled run fails, it will",
                "be retried after `period` blocks, for a total amount of `retries` retries or until it",
                "succeeds.",
                "",
                "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                "normally while the task is retrying.",
                "",
                "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                "clones of the original task. Their retry configuration will be derived from the",
                "original task's configuration, but will have a lower value for `remaining` than the",
                "original `total_retries`."
              ]
            },
            {
              "name": "set_retry_named",
              "fields": [
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "TaskName",
                  "docs": []
                },
                {
                  "name": "retries",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "period",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Set a retry configuration for a named task so that, in case its scheduled run fails, it",
                "will be retried after `period` blocks, for a total amount of `retries` retries or until",
                "it succeeds.",
                "",
                "Tasks which need to be scheduled for a retry are still subject to weight metering and",
                "agenda space, same as a regular task. If a periodic task fails, it will be scheduled",
                "normally while the task is retrying.",
                "",
                "Tasks scheduled as a result of a retry for a periodic task are unnamed, non-periodic",
                "clones of the original task. Their retry configuration will be derived from the",
                "original task's configuration, but will have a lower value for `remaining` than the",
                "original `total_retries`."
              ]
            },
            {
              "name": "cancel_retry",
              "fields": [
                {
                  "name": "task",
                  "type": 32,
                  "typeName": "TaskAddress<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Removes the retry configuration of a task."
              ]
            },
            {
              "name": "cancel_retry_named",
              "fields": [
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "TaskName",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Cancel the retry configuration of a named task."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 99,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 32
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 32,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 100,
    "type": {
      "path": [
        "pallet_preimage",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "note_preimage",
              "fields": [
                {
                  "name": "bytes",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Register a preimage on-chain.",
                "",
                "If the preimage was previously requested, no fees or deposits are taken for providing",
                "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."
              ]
            },
            {
              "name": "unnote_preimage",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Clear an unrequested preimage from the runtime storage.",
                "",
                "If `len` is provided, then it will be a much cheaper operation.",
                "",
                "- `hash`: The hash of the preimage to be removed from the store.",
                "- `len`: The length of the preimage of `hash`."
              ]
            },
            {
              "name": "request_preimage",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Request a preimage be uploaded to the chain without paying any fees or deposits.",
                "",
                "If the preimage requests has already been provided on-chain, we unreserve any deposit",
                "a user may have paid, and take the control of the preimage out of their hands."
              ]
            },
            {
              "name": "unrequest_preimage",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Clear a previously made request for a preimage.",
                "",
                "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."
              ]
            },
            {
              "name": "ensure_updated",
              "fields": [
                {
                  "name": "hashes",
                  "type": 101,
                  "typeName": "Vec<T::Hash>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Ensure that the a bulk of pre-images is upgraded.",
                "",
                "The caller pays no fee if at least 90% of pre-images were successfully updated."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 101,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 13
        }
      },
      "docs": []
    }
  },
  {
    "id": 102,
    "type": {
      "path": [
        "pallet_babe",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 103,
                  "typeName": "Box<EquivocationProof<HeaderFor<T>>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 107,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report authority equivocation/misbehavior. This method will verify",
                "the equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence will",
                "be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 103,
                  "typeName": "Box<EquivocationProof<HeaderFor<T>>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 107,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report authority equivocation/misbehavior. This method will verify",
                "the equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence will",
                "be reported.",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "plan_config_change",
              "fields": [
                {
                  "name": "config",
                  "type": 108,
                  "typeName": "NextConfigDescriptor",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                "the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                "Multiple calls to this method will replace any existing planned config change that had",
                "not been enacted yet."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 103,
    "type": {
      "path": [
        "sp_consensus_slots",
        "EquivocationProof"
      ],
      "params": [
        {
          "name": "Header",
          "type": 104
        },
        {
          "name": "Id",
          "type": 105
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "offender",
              "type": 105,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "slot",
              "type": 106,
              "typeName": "Slot",
              "docs": []
            },
            {
              "name": "first_header",
              "type": 104,
              "typeName": "Header",
              "docs": []
            },
            {
              "name": "second_header",
              "type": 104,
              "typeName": "Header",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 104,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "header",
        "Header"
      ],
      "params": [
        {
          "name": "Number",
          "type": 4
        },
        {
          "name": "Hash",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_hash",
              "type": 13,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "number",
              "type": 59,
              "typeName": "Number",
              "docs": []
            },
            {
              "name": "state_root",
              "type": 13,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "extrinsics_root",
              "type": 13,
              "typeName": "Hash::Output",
              "docs": []
            },
            {
              "name": "digest",
              "type": 15,
              "typeName": "Digest",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 105,
    "type": {
      "path": [
        "sp_consensus_babe",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 106,
    "type": {
      "path": [
        "sp_consensus_slots",
        "Slot"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 107,
    "type": {
      "path": [
        "sp_session",
        "MembershipProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "session",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "trie_nodes",
              "type": 97,
              "typeName": "Vec<Vec<u8>>",
              "docs": []
            },
            {
              "name": "validator_count",
              "type": 4,
              "typeName": "ValidatorCount",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 108,
    "type": {
      "path": [
        "sp_consensus_babe",
        "digests",
        "NextConfigDescriptor"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1",
              "fields": [
                {
                  "name": "c",
                  "type": 109,
                  "typeName": "(u64, u64)",
                  "docs": []
                },
                {
                  "name": "allowed_slots",
                  "type": 110,
                  "typeName": "AllowedSlots",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 109,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          12,
          12
        ]
      },
      "docs": []
    }
  },
  {
    "id": 110,
    "type": {
      "path": [
        "sp_consensus_babe",
        "AllowedSlots"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PrimarySlots",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PrimaryAndSecondaryPlainSlots",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "PrimaryAndSecondaryVRFSlots",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 111,
    "type": {
      "path": [
        "pallet_timestamp",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set",
              "fields": [
                {
                  "name": "now",
                  "type": 11,
                  "typeName": "T::Moment",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the current time.",
                "",
                "This call should be invoked exactly once per block. It will panic at the finalization",
                "phase, if this call hasn't been invoked by that time.",
                "",
                "The timestamp should be greater than the previous one by the amount specified by",
                "[`Config::MinimumPeriod`].",
                "",
                "The dispatch origin for this call must be _None_.",
                "",
                "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware",
                "that changing the complexity of this call could result exhausting the resources in a",
                "block to execute any other calls.",
                "",
                "## Complexity",
                "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in",
                "  `on_finalize`)",
                "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 112,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "claim",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Assign an previously unassigned index.",
                "",
                "Payment: `Deposit` is reserved from the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `index`: the index to be claimed. This must not be in use.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "transfer",
              "fields": [
                {
                  "name": "new",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Assign an index already owned by the sender to another account. The balance reservation",
                "is effectively transferred to the new account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `index`: the index to be re-assigned. This must be owned by the sender.",
                "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "free",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Free up an index owned by the sender.",
                "",
                "Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                "",
                "- `index`: the index to be freed. This must be owned by the sender.",
                "",
                "Emits `IndexFreed` if successful.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "new",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                },
                {
                  "name": "freeze",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force an index to an account. This doesn't require a deposit. If the index is already",
                "held, then any deposit is reimbursed to its current owner.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `index`: the index to be (re-)assigned.",
                "- `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                "- `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                "",
                "Emits `IndexAssigned` if successful.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "freeze",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::AccountIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Freeze an index so it will always point to the sender account. This consumes the",
                "deposit.",
                "",
                "The dispatch origin for this call must be _Signed_ and the signing account must have a",
                "non-frozen account `index`.",
                "",
                "- `index`: the index to be frozen in place.",
                "",
                "Emits `IndexFrozen` if successful.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 113,
    "type": {
      "path": [
        "sp_runtime",
        "multiaddress",
        "MultiAddress"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "AccountIndex",
          "type": 35
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Id",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 114,
                  "typeName": "AccountIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Raw",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Address32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Address20",
              "fields": [
                {
                  "name": null,
                  "type": 62,
                  "typeName": "[u8; 20]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 114,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 35
        }
      },
      "docs": []
    }
  },
  {
    "id": 115,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "transfer_allow_death",
              "fields": [
                {
                  "name": "dest",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Transfer some liquid free balance to another account.",
                "",
                "`transfer_allow_death` will set the `FreeBalance` of the sender and receiver.",
                "If the sender's account is below the existential deposit as a result",
                "of the transfer, the account will be reaped.",
                "",
                "The dispatch origin for this call must be `Signed` by the transactor."
              ]
            },
            {
              "name": "force_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Exactly as `transfer_allow_death`, except the origin must be root and the source account",
                "may be specified."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "fields": [
                {
                  "name": "dest",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Same as the [`transfer_allow_death`] call, but with a check that the transfer will not",
                "kill the origin account.",
                "",
                "99% of the time you want [`transfer_allow_death`] instead.",
                "",
                "[`transfer_allow_death`]: struct.Pallet.html#method.transfer"
              ]
            },
            {
              "name": "transfer_all",
              "fields": [
                {
                  "name": "dest",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Transfer the entire transferable balance from the caller account.",
                "",
                "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                "transferred by this function. To ensure that this function results in a killed account,",
                "you might need to prepare the account by removing any reference counters, storage",
                "deposits, etc...",
                "",
                "The dispatch origin of this call must be Signed.",
                "",
                "- `dest`: The recipient of the transfer.",
                "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                "  of the funds the account has, causing the sender account to be killed (false), or",
                "  transfer everything except at least the existential deposit, which will guarantee to",
                "  keep the sender account alive (true)."
              ]
            },
            {
              "name": "force_unreserve",
              "fields": [
                {
                  "name": "who",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Unreserve some balance from a user by force.",
                "",
                "Can only be called by ROOT."
              ]
            },
            {
              "name": "upgrade_accounts",
              "fields": [
                {
                  "name": "who",
                  "type": 116,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Upgrade a specified account.",
                "",
                "- `origin`: Must be `Signed`.",
                "- `who`: The account to be upgraded.",
                "",
                "This will waive the transaction fee if at least all but 10% of the accounts needed to",
                "be upgraded. (We let some not have to be upgraded just in order to allow for the",
                "possibility of churn)."
              ]
            },
            {
              "name": "force_set_balance",
              "fields": [
                {
                  "name": "who",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "new_free",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the regular balance of a given account.",
                "",
                "The dispatch origin for this call is `root`."
              ]
            },
            {
              "name": "force_adjust_total_issuance",
              "fields": [
                {
                  "name": "direction",
                  "type": 117,
                  "typeName": "AdjustmentDirection",
                  "docs": []
                },
                {
                  "name": "delta",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Adjust the total issuance in a saturating way.",
                "",
                "Can only be called by root and always needs a positive `delta`.",
                "",
                "# Example"
              ]
            },
            {
              "name": "burn",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "T::Balance",
                  "docs": []
                },
                {
                  "name": "keep_alive",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Burn the specified liquid free balance from the origin account.",
                "",
                "If the origin's account ends up below the existential deposit as a result",
                "of the burn and `keep_alive` is false, the account will be reaped.",
                "",
                "Unlike sending funds to a _burn_ address, which merely makes the funds inaccessible,",
                "this `burn` operation will reduce total issuance by the amount _burned_."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 116,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 0
        }
      },
      "docs": []
    }
  },
  {
    "id": 117,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "AdjustmentDirection"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Increase",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Decrease",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 118,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "bond",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "payee",
                  "type": 42,
                  "typeName": "RewardDestination<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                "be the account that controls it.",
                "",
                "`value` must be more than the `minimum_balance` specified by `T::Currency`.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash account.",
                "",
                "Emits `Bonded`.",
                "## Complexity",
                "- Independent of the arguments. Moderate complexity.",
                "- O(1).",
                "- Three extra DB entries.",
                "",
                "NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                "unless the `origin` falls below _existential deposit_ (or equal to 0) and gets removed",
                "as dust."
              ]
            },
            {
              "name": "bond_extra",
              "fields": [
                {
                  "name": "max_additional",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                "for staking.",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                "Use this if there are additional funds in your stash account that you wish to bond.",
                "Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose",
                "any limitation on the amount that can be added.",
                "",
                "Emits `Bonded`.",
                "",
                "## Complexity",
                "- Independent of the arguments. Insignificant complexity.",
                "- O(1)."
              ]
            },
            {
              "name": "unbond",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                "period ends. If this leaves an amount actively bonded less than",
                "T::Currency::minimum_balance(), then it is increased to the full amount.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                "the funds out of management ready for transfer.",
                "",
                "No more than a limited number of unlocking chunks (see `MaxUnlockingChunks`)",
                "can co-exists at the same time. If there are no unlocking chunks slots available",
                "[`Call::withdraw_unbonded`] is called to remove some of the chunks (if possible).",
                "",
                "If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                "they should call `chill` first in order to free up their bonded funds.",
                "",
                "Emits `Unbonded`.",
                "",
                "See also [`Call::withdraw_unbonded`]."
              ]
            },
            {
              "name": "withdraw_unbonded",
              "fields": [
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Remove any unlocked chunks from the `unlocking` queue from our management.",
                "",
                "This essentially frees up that balance to be used by the stash account to do whatever",
                "it wants.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller.",
                "",
                "Emits `Withdrawn`.",
                "",
                "See also [`Call::unbond`].",
                "",
                "## Parameters",
                "",
                "- `num_slashing_spans` indicates the number of metadata slashing spans to clear when",
                "this call results in a complete removal of all the data related to the stash account.",
                "In this case, the `num_slashing_spans` must be larger or equal to the number of",
                "slashing spans associated with the stash account in the [`SlashingSpans`] storage type,",
                "otherwise the call will fail. The call weight is directly proportional to",
                "`num_slashing_spans`.",
                "",
                "## Complexity",
                "O(S) where S is the number of slashing spans to remove",
                "NOTE: Weight annotation is the kill scenario, we refund otherwise."
              ]
            },
            {
              "name": "validate",
              "fields": [
                {
                  "name": "prefs",
                  "type": 44,
                  "typeName": "ValidatorPrefs",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Declare the desire to validate for the origin controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash."
              ]
            },
            {
              "name": "nominate",
              "fields": [
                {
                  "name": "targets",
                  "type": 119,
                  "typeName": "Vec<AccountIdLookupOf<T>>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Declare the desire to nominate `targets` for the origin controller.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "## Complexity",
                "- The transaction's complexity is proportional to the size of `targets` (N)",
                "which is capped at CompactAssignments::LIMIT (T::MaxNominations).",
                "- Both the reads and writes follow a similar pattern."
              ]
            },
            {
              "name": "chill",
              "fields": [],
              "index": 6,
              "docs": [
                "Declare no desire to either validate or nominate.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "## Complexity",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains one read.",
                "- Writes are limited to the `origin` account key."
              ]
            },
            {
              "name": "set_payee",
              "fields": [
                {
                  "name": "payee",
                  "type": 42,
                  "typeName": "RewardDestination<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "(Re-)set the payment target for a controller.",
                "",
                "Effects will be felt instantly (as soon as this function is completed successfully).",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "## Complexity",
                "- O(1)",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains a limited number of reads.",
                "- Writes are limited to the `origin` account key.",
                "---------"
              ]
            },
            {
              "name": "set_controller",
              "fields": [],
              "index": 8,
              "docs": [
                "(Re-)sets the controller of a stash to the stash itself. This function previously",
                "accepted a `controller` argument to set the controller to an account other than the",
                "stash itself. This functionality has now been removed, now only setting the controller",
                "to the stash, if it is not already.",
                "",
                "Effects will be felt instantly (as soon as this function is completed successfully).",
                "",
                "The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                "## Complexity",
                "O(1)",
                "- Independent of the arguments. Insignificant complexity.",
                "- Contains a limited number of reads.",
                "- Writes are limited to the `origin` account key."
              ]
            },
            {
              "name": "set_validator_count",
              "fields": [
                {
                  "name": "new",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Sets the ideal number of validators.",
                "",
                "The dispatch origin must be Root.",
                "",
                "## Complexity",
                "O(1)"
              ]
            },
            {
              "name": "increase_validator_count",
              "fields": [
                {
                  "name": "additional",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Increments the ideal number of validators up to maximum of",
                "`ElectionProviderBase::MaxWinners`.",
                "",
                "The dispatch origin must be Root.",
                "",
                "## Complexity",
                "Same as [`Self::set_validator_count`]."
              ]
            },
            {
              "name": "scale_validator_count",
              "fields": [
                {
                  "name": "factor",
                  "type": 120,
                  "typeName": "Percent",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Scale up the ideal number of validators by a factor up to maximum of",
                "`ElectionProviderBase::MaxWinners`.",
                "",
                "The dispatch origin must be Root.",
                "",
                "## Complexity",
                "Same as [`Self::set_validator_count`]."
              ]
            },
            {
              "name": "force_no_eras",
              "fields": [],
              "index": 12,
              "docs": [
                "Force there to be no new eras indefinitely.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "Thus the election process may be ongoing when this is called. In this case the",
                "election will continue until the next era is triggered.",
                "",
                "## Complexity",
                "- No arguments.",
                "- Weight: O(1)"
              ]
            },
            {
              "name": "force_new_era",
              "fields": [],
              "index": 13,
              "docs": [
                "Force there to be a new era at the end of the next session. After this, it will be",
                "reset to normal (non-forced) behaviour.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "If this is called just before a new era is triggered, the election process may not",
                "have enough blocks to get a result.",
                "",
                "## Complexity",
                "- No arguments.",
                "- Weight: O(1)"
              ]
            },
            {
              "name": "set_invulnerables",
              "fields": [
                {
                  "name": "invulnerables",
                  "type": 116,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Set the validators who cannot be slashed (if any).",
                "",
                "The dispatch origin must be Root."
              ]
            },
            {
              "name": "force_unstake",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Force a current staker to become completely unstaked, immediately.",
                "",
                "The dispatch origin must be Root.",
                "",
                "## Parameters",
                "",
                "- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more",
                "details."
              ]
            },
            {
              "name": "force_new_era_always",
              "fields": [],
              "index": 16,
              "docs": [
                "Force there to be a new era at the end of sessions indefinitely.",
                "",
                "The dispatch origin must be Root.",
                "",
                "# Warning",
                "",
                "The election process starts multiple blocks before the end of the era.",
                "If this is called just before a new era is triggered, the election process may not",
                "have enough blocks to get a result."
              ]
            },
            {
              "name": "cancel_deferred_slash",
              "fields": [
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "slash_indices",
                  "type": 121,
                  "typeName": "Vec<u32>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Cancel enactment of a deferred slash.",
                "",
                "Can be called by the `T::AdminOrigin`.",
                "",
                "Parameters: era and indices of the slashes for that era to kill."
              ]
            },
            {
              "name": "payout_stakers",
              "fields": [
                {
                  "name": "validator_stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Pay out next page of the stakers behind a validator for the given era.",
                "",
                "- `validator_stash` is the stash account of the validator.",
                "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                "",
                "The origin of this call must be _Signed_. Any account can call this function, even if",
                "it is not one of the stakers.",
                "",
                "The reward payout could be paged in case there are too many nominators backing the",
                "`validator_stash`. This call will payout unpaid pages in an ascending order. To claim a",
                "specific page, use `payout_stakers_by_page`.`",
                "",
                "If all pages are claimed, it returns an error `InvalidPage`."
              ]
            },
            {
              "name": "rebond",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Rebond a portion of the stash scheduled to be unlocked.",
                "",
                "The dispatch origin must be signed by the controller.",
                "",
                "## Complexity",
                "- Time complexity: O(L), where L is unlocking chunks",
                "- Bounded by `MaxUnlockingChunks`."
              ]
            },
            {
              "name": "reap_stash",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Remove all data structures concerning a staker/stash once it is at a state where it can",
                "be considered `dust` in the staking system. The requirements are:",
                "",
                "1. the `total_balance` of the stash is below existential deposit.",
                "2. or, the `ledger.total` of the stash is below existential deposit.",
                "3. or, existential deposit is zero and either `total_balance` or `ledger.total` is zero.",
                "",
                "The former can happen in cases like a slash; the latter when a fully unbonded account",
                "is still receiving staking rewards in `RewardDestination::Staked`.",
                "",
                "It can be called by anyone, as long as `stash` meets the above requirements.",
                "",
                "Refunds the transaction fees upon successful execution.",
                "",
                "## Parameters",
                "",
                "- `num_slashing_spans`: Refer to comments on [`Call::withdraw_unbonded`] for more",
                "details."
              ]
            },
            {
              "name": "kick",
              "fields": [
                {
                  "name": "who",
                  "type": 119,
                  "typeName": "Vec<AccountIdLookupOf<T>>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Remove the given nominations from the calling validator.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                "- `who`: A list of nominator stash accounts who are nominating this validator which",
                "  should no longer be nominating this validator.",
                "",
                "Note: Making this call only makes sense if you first set the validator preferences to",
                "block any further nominations."
              ]
            },
            {
              "name": "set_staking_configs",
              "fields": [
                {
                  "name": "min_nominator_bond",
                  "type": 122,
                  "typeName": "ConfigOp<BalanceOf<T>>",
                  "docs": []
                },
                {
                  "name": "min_validator_bond",
                  "type": 122,
                  "typeName": "ConfigOp<BalanceOf<T>>",
                  "docs": []
                },
                {
                  "name": "max_nominator_count",
                  "type": 123,
                  "typeName": "ConfigOp<u32>",
                  "docs": []
                },
                {
                  "name": "max_validator_count",
                  "type": 123,
                  "typeName": "ConfigOp<u32>",
                  "docs": []
                },
                {
                  "name": "chill_threshold",
                  "type": 124,
                  "typeName": "ConfigOp<Percent>",
                  "docs": []
                },
                {
                  "name": "min_commission",
                  "type": 125,
                  "typeName": "ConfigOp<Perbill>",
                  "docs": []
                },
                {
                  "name": "max_staked_rewards",
                  "type": 124,
                  "typeName": "ConfigOp<Percent>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Update the various staking configurations .",
                "",
                "* `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                "* `min_validator_bond`: The minimum active bond needed to be a validator.",
                "* `max_nominator_count`: The max number of users who can be a nominator at once. When",
                "  set to `None`, no limit is enforced.",
                "* `max_validator_count`: The max number of users who can be a validator at once. When",
                "  set to `None`, no limit is enforced.",
                "* `chill_threshold`: The ratio of `max_nominator_count` or `max_validator_count` which",
                "  should be filled in order for the `chill_other` transaction to work.",
                "* `min_commission`: The minimum amount of commission that each validators must maintain.",
                "  This is checked only upon calling `validate`. Existing validators are not affected.",
                "",
                "RuntimeOrigin must be Root to call this function.",
                "",
                "NOTE: Existing nominators and validators will not be affected by this update.",
                "to kick people under the new limits, `chill_other` should be called."
              ]
            },
            {
              "name": "chill_other",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Declare a `controller` to stop participating as either a validator or nominator.",
                "",
                "Effects will be felt at the beginning of the next era.",
                "",
                "The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                "",
                "If the caller is the same as the controller being targeted, then no further checks are",
                "enforced, and this function behaves just like `chill`.",
                "",
                "If the caller is different than the controller being targeted, the following conditions",
                "must be met:",
                "",
                "* `controller` must belong to a nominator who has become non-decodable,",
                "",
                "Or:",
                "",
                "* A `ChillThreshold` must be set and checked which defines how close to the max",
                "  nominators or validators we must reach before users can start chilling one-another.",
                "* A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                "  how close we are to the threshold.",
                "* A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                "  if this is a person that should be chilled because they have not met the threshold",
                "  bond required.",
                "",
                "This can be helpful if bond requirements are updated, and we need to remove old users",
                "who do not satisfy these requirements."
              ]
            },
            {
              "name": "force_apply_min_commission",
              "fields": [
                {
                  "name": "validator_stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Force a validator to have at least the minimum commission. This will not affect a",
                "validator who already has a commission greater than or equal to the minimum. Any account",
                "can call this."
              ]
            },
            {
              "name": "set_min_commission",
              "fields": [
                {
                  "name": "new",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Sets the minimum amount of commission that each validators must maintain.",
                "",
                "This call has lower privilege requirements than `set_staking_config` and can be called",
                "by the `T::AdminOrigin`. Root can always call this."
              ]
            },
            {
              "name": "payout_stakers_by_page",
              "fields": [
                {
                  "name": "validator_stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "page",
                  "type": 4,
                  "typeName": "Page",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": [
                "Pay out a page of the stakers behind a validator for the given era and page.",
                "",
                "- `validator_stash` is the stash account of the validator.",
                "- `era` may be any era between `[current_era - history_depth; current_era]`.",
                "- `page` is the page index of nominators to pay out with value between 0 and",
                "  `num_nominators / T::MaxExposurePageSize`.",
                "",
                "The origin of this call must be _Signed_. Any account can call this function, even if",
                "it is not one of the stakers.",
                "",
                "If a validator has more than [`Config::MaxExposurePageSize`] nominators backing",
                "them, then the list of nominators is paged, with each page being capped at",
                "[`Config::MaxExposurePageSize`.] If a validator has more than one page of nominators,",
                "the call needs to be made for each page separately in order for all the nominators",
                "backing a validator to receive the reward. The nominators are not sorted across pages",
                "and so it should not be assumed the highest staker would be on the topmost page and vice",
                "versa. If rewards are not claimed in [`Config::HistoryDepth`] eras, they are lost."
              ]
            },
            {
              "name": "update_payee",
              "fields": [
                {
                  "name": "controller",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Migrates an account's `RewardDestination::Controller` to",
                "`RewardDestination::Account(controller)`.",
                "",
                "Effects will be felt instantly (as soon as this function is completed successfully).",
                "",
                "This will waive the transaction fee if the `payee` is successfully migrated."
              ]
            },
            {
              "name": "deprecate_controller_batch",
              "fields": [
                {
                  "name": "controllers",
                  "type": 126,
                  "typeName": "BoundedVec<T::AccountId, T::MaxControllersInDeprecationBatch>",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Updates a batch of controller accounts to their corresponding stash account if they are",
                "not the same. Ignores any controller accounts that do not exist, and does not operate if",
                "the stash and controller are already the same.",
                "",
                "Effects will be felt instantly (as soon as this function is completed successfully).",
                "",
                "The dispatch origin must be `T::AdminOrigin`."
              ]
            },
            {
              "name": "restore_ledger",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "maybe_controller",
                  "type": 127,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_total",
                  "type": 128,
                  "typeName": "Option<BalanceOf<T>>",
                  "docs": []
                },
                {
                  "name": "maybe_unlocking",
                  "type": 129,
                  "typeName": "Option<BoundedVec<UnlockChunk<BalanceOf<T>>, T::\nMaxUnlockingChunks>>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "Restores the state of a ledger which is in an inconsistent state.",
                "",
                "The requirements to restore a ledger are the following:",
                "* The stash is bonded; or",
                "* The stash is not bonded but it has a staking lock left behind; or",
                "* If the stash has an associated ledger and its state is inconsistent; or",
                "* If the ledger is not corrupted *but* its staking lock is out of sync.",
                "",
                "The `maybe_*` input parameters will overwrite the corresponding data and metadata of the",
                "ledger associated with the stash. If the input parameters are not set, the ledger will",
                "be reset values from on-chain state."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 119,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 113
        }
      },
      "docs": []
    }
  },
  {
    "id": 120,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Percent"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 121,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 4
        }
      },
      "docs": []
    }
  },
  {
    "id": 122,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 123,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 124,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 120
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 120,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 125,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 43
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 43,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 126,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 116,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 127,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 128,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 129,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 130
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 130,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 130,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 131
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 132,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 131,
    "type": {
      "path": [
        "pallet_staking",
        "UnlockChunk"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "value",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "era",
              "type": 59,
              "typeName": "EraIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 132,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 131
        }
      },
      "docs": []
    }
  },
  {
    "id": 133,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_keys",
              "fields": [
                {
                  "name": "keys",
                  "type": 134,
                  "typeName": "T::Keys",
                  "docs": []
                },
                {
                  "name": "proof",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Sets the session key(s) of the function caller to `keys`.",
                "Allows an account to set its session key prior to becoming a validator.",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be signed.",
                "",
                "## Complexity",
                "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is",
                "  fixed."
              ]
            },
            {
              "name": "purge_keys",
              "fields": [],
              "index": 1,
              "docs": [
                "Removes any session key(s) of the function caller.",
                "",
                "This doesn't take effect until the next session.",
                "",
                "The dispatch origin of this function must be Signed and the account must be either be",
                "convertible to a validator ID using the chain's typical addressing system (this usually",
                "means being a controller account) or directly convertible into a validator ID (which",
                "usually means being a stash account).",
                "",
                "## Complexity",
                "- `O(1)` in number of key types. Actual cost depends on the number of length of",
                "  `T::Keys::key_ids()` which is fixed."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 134,
    "type": {
      "path": [
        "polkadot_runtime",
        "SessionKeys"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "grandpa",
              "type": 53,
              "typeName": "<Grandpa as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "babe",
              "type": 105,
              "typeName": "<Babe as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "para_validator",
              "type": 135,
              "typeName": "<Initializer as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "para_assignment",
              "type": 136,
              "typeName": "<ParaSessionInfo as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "authority_discovery",
              "type": 137,
              "typeName": "<AuthorityDiscovery as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            },
            {
              "name": "beefy",
              "type": 138,
              "typeName": "<Beefy as $crate::BoundToRuntimeAppPublic>::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 135,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "validator_app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 136,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "assignment_app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 137,
    "type": {
      "path": [
        "sp_authority_discovery",
        "app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 138,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "ecdsa_crypto",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 139,
              "typeName": "ecdsa::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 139,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 33,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 140,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 141,
                  "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 107,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 141,
                  "typeName": "Box<EquivocationProof<T::Hash, BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 107,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported.",
                "",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "note_stalled",
              "fields": [
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "best_finalized_block_number",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                "",
                "This will trigger a forced authority set change at the beginning of the next session, to",
                "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                "The block production rate (which may be slowed down because of finality lagging) should",
                "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                "authority will start voting on top of `best_finalized_block_number` for new finalized",
                "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                "block of all validators of the new authority set.",
                "",
                "Only callable by root."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 141,
    "type": {
      "path": [
        "sp_consensus_grandpa",
        "EquivocationProof"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "set_id",
              "type": 12,
              "typeName": "SetId",
              "docs": []
            },
            {
              "name": "equivocation",
              "type": 142,
              "typeName": "Equivocation<H, N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 142,
    "type": {
      "path": [
        "sp_consensus_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Prevote",
              "fields": [
                {
                  "name": null,
                  "type": 143,
                  "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Prevote<\nH, N>, AuthoritySignature,>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Precommit",
              "fields": [
                {
                  "name": null,
                  "type": 148,
                  "typeName": "finality_grandpa::Equivocation<AuthorityId, finality_grandpa::Precommit\n<H, N>, AuthoritySignature,>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 143,
    "type": {
      "path": [
        "finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "Id",
          "type": 53
        },
        {
          "name": "V",
          "type": 144
        },
        {
          "name": "S",
          "type": 145
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "round_number",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "type": 53,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "type": 147,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "type": 147,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 144,
    "type": {
      "path": [
        "finality_grandpa",
        "Prevote"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "target_hash",
              "type": 13,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 145,
    "type": {
      "path": [
        "sp_consensus_grandpa",
        "app",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 146,
              "typeName": "ed25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 146,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 64,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 147,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          144,
          145
        ]
      },
      "docs": []
    }
  },
  {
    "id": 148,
    "type": {
      "path": [
        "finality_grandpa",
        "Equivocation"
      ],
      "params": [
        {
          "name": "Id",
          "type": 53
        },
        {
          "name": "V",
          "type": 149
        },
        {
          "name": "S",
          "type": 145
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "round_number",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "identity",
              "type": 53,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "first",
              "type": 150,
              "typeName": "(V, S)",
              "docs": []
            },
            {
              "name": "second",
              "type": 150,
              "typeName": "(V, S)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 149,
    "type": {
      "path": [
        "finality_grandpa",
        "Precommit"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "target_hash",
              "type": 13,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "target_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 150,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          149,
          145
        ]
      },
      "docs": []
    }
  },
  {
    "id": 151,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "spend_local",
              "fields": [
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Propose and approve a spend of treasury funds.",
                "",
                "## Dispatch Origin",
                "",
                "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`.",
                "",
                "### Details",
                "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the",
                "beneficiary.",
                "",
                "### Parameters",
                "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                "- `beneficiary`: The destination account for the transfer.",
                "",
                "## Events",
                "",
                "Emits [`Event::SpendApproved`] if successful."
              ]
            },
            {
              "name": "remove_approval",
              "fields": [
                {
                  "name": "proposal_id",
                  "type": 59,
                  "typeName": "ProposalIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Force a previously approved proposal to be removed from the approval queue.",
                "",
                "## Dispatch Origin",
                "",
                "Must be [`Config::RejectOrigin`].",
                "",
                "## Details",
                "",
                "The original deposit will no longer be returned.",
                "",
                "### Parameters",
                "- `proposal_id`: The index of a proposal",
                "",
                "### Complexity",
                "- O(A) where `A` is the number of approvals",
                "",
                "### Errors",
                "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the",
                "  approval queue, i.e., the proposal has not been approved. This could also mean the",
                "  proposal does not exist altogether, thus there is no way it would have been approved",
                "  in the first place."
              ]
            },
            {
              "name": "spend",
              "fields": [
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "AssetBalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "Box<BeneficiaryLookupOf<T, I>>",
                  "docs": []
                },
                {
                  "name": "valid_from",
                  "type": 152,
                  "typeName": "Option<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Propose and approve a spend of treasury funds.",
                "",
                "## Dispatch Origin",
                "",
                "Must be [`Config::SpendOrigin`] with the `Success` value being at least",
                "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted",
                "for assertion using the [`Config::BalanceConverter`].",
                "",
                "## Details",
                "",
                "Create an approved spend for transferring a specific `amount` of `asset_kind` to a",
                "designated beneficiary. The spend must be claimed using the `payout` dispatchable within",
                "the [`Config::PayoutPeriod`].",
                "",
                "### Parameters",
                "- `asset_kind`: An indicator of the specific asset class to be spent.",
                "- `amount`: The amount to be transferred from the treasury to the `beneficiary`.",
                "- `beneficiary`: The beneficiary of the spend.",
                "- `valid_from`: The block number from which the spend can be claimed. It can refer to",
                "  the past if the resulting spend has not yet expired according to the",
                "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after",
                "  approval.",
                "",
                "## Events",
                "",
                "Emits [`Event::AssetSpendApproved`] if successful."
              ]
            },
            {
              "name": "payout",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Claim a spend.",
                "",
                "## Dispatch Origin",
                "",
                "Must be signed",
                "",
                "## Details",
                "",
                "Spends must be claimed within some temporal bounds. A spend may be claimed within one",
                "[`Config::PayoutPeriod`] from the `valid_from` block.",
                "In case of a payout failure, the spend status must be updated with the `check_status`",
                "dispatchable before retrying with the current function.",
                "",
                "### Parameters",
                "- `index`: The spend index.",
                "",
                "## Events",
                "",
                "Emits [`Event::Paid`] if successful."
              ]
            },
            {
              "name": "check_status",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Check the status of the spend and remove it from the storage if processed.",
                "",
                "## Dispatch Origin",
                "",
                "Must be signed.",
                "",
                "## Details",
                "",
                "The status check is a prerequisite for retrying a failed payout.",
                "If a spend has either succeeded or expired, it is removed from the storage by this",
                "function. In such instances, transaction fees are refunded.",
                "",
                "### Parameters",
                "- `index`: The spend index.",
                "",
                "## Events",
                "",
                "Emits [`Event::PaymentFailed`] if the spend payout has failed.",
                "Emits [`Event::SpendProcessed`] if the spend payout has succeed."
              ]
            },
            {
              "name": "void_spend",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "SpendIndex",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Void previously approved spend.",
                "",
                "## Dispatch Origin",
                "",
                "Must be [`Config::RejectOrigin`].",
                "",
                "## Details",
                "",
                "A spend void is only possible if the payout has not been attempted yet.",
                "",
                "### Parameters",
                "- `index`: The spend index.",
                "",
                "## Events",
                "",
                "Emits [`Event::AssetSpendVoided`] if successful."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 152,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 153,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "vote",
              "fields": [
                {
                  "name": "poll_index",
                  "type": 59,
                  "typeName": "PollIndexOf<T, I>",
                  "docs": []
                },
                {
                  "name": "vote",
                  "type": 154,
                  "typeName": "AccountVote<BalanceOf<T, I>>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Vote in a poll. If `vote.is_aye()`, the vote is to enact the proposal;",
                "otherwise it is a vote to keep the status quo.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `poll_index`: The index of the poll to vote for.",
                "- `vote`: The vote configuration.",
                "",
                "Weight: `O(R)` where R is the number of polls the voter has voted on."
              ]
            },
            {
              "name": "delegate",
              "fields": [
                {
                  "name": "class",
                  "type": 91,
                  "typeName": "ClassOf<T, I>",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "conviction",
                  "type": 156,
                  "typeName": "Conviction",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Delegate the voting power (with some given conviction) of the sending account for a",
                "particular class of polls.",
                "",
                "The balance delegated is locked for as long as it's delegated, and thereafter for the",
                "time appropriate for the conviction's lock period.",
                "",
                "The dispatch origin of this call must be _Signed_, and the signing account must either:",
                "  - be delegating already; or",
                "  - have no voting activity (if there is, then it will need to be removed through",
                "    `remove_vote`).",
                "",
                "- `to`: The account whose voting the `target` account's voting power will follow.",
                "- `class`: The class of polls to delegate. To delegate multiple classes, multiple calls",
                "  to this function are required.",
                "- `conviction`: The conviction that will be attached to the delegated votes. When the",
                "  account is undelegated, the funds will be locked for the corresponding period.",
                "- `balance`: The amount of the account's balance to be used in delegating. This must not",
                "  be more than the account's current balance.",
                "",
                "Emits `Delegated`.",
                "",
                "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
              ]
            },
            {
              "name": "undelegate",
              "fields": [
                {
                  "name": "class",
                  "type": 91,
                  "typeName": "ClassOf<T, I>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Undelegate the voting power of the sending account for a particular class of polls.",
                "",
                "Tokens may be unlocked following once an amount of time consistent with the lock period",
                "of the conviction with which the delegation was issued has passed.",
                "",
                "The dispatch origin of this call must be _Signed_ and the signing account must be",
                "currently delegating.",
                "",
                "- `class`: The class of polls to remove the delegation from.",
                "",
                "Emits `Undelegated`.",
                "",
                "Weight: `O(R)` where R is the number of polls the voter delegating to has",
                "  voted on. Weight is initially charged as if maximum votes, but is refunded later."
              ]
            },
            {
              "name": "unlock",
              "fields": [
                {
                  "name": "class",
                  "type": 91,
                  "typeName": "ClassOf<T, I>",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Remove the lock caused by prior voting/delegating which has expired within a particular",
                "class.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `class`: The class of polls to unlock.",
                "- `target`: The account to remove the lock on.",
                "",
                "Weight: `O(R)` with R number of vote of target."
              ]
            },
            {
              "name": "remove_vote",
              "fields": [
                {
                  "name": "class",
                  "type": 157,
                  "typeName": "Option<ClassOf<T, I>>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "PollIndexOf<T, I>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Remove a vote for a poll.",
                "",
                "If:",
                "- the poll was cancelled, or",
                "- the poll is ongoing, or",
                "- the poll has ended such that",
                "  - the vote of the account was in opposition to the result; or",
                "  - there was no conviction to the account's vote; or",
                "  - the account made a split vote",
                "...then the vote is removed cleanly and a following call to `unlock` may result in more",
                "funds being available.",
                "",
                "If, however, the poll has ended and:",
                "- it finished corresponding to the vote of the account, and",
                "- the account made a standard vote with conviction, and",
                "- the lock period of the conviction is not over",
                "...then the lock will be aggregated into the overall account's lock, which may involve",
                "*overlocking* (where the two locks are combined into a single lock that is the maximum",
                "of both the amount locked and the time is it locked for).",
                "",
                "The dispatch origin of this call must be _Signed_, and the signer must have a vote",
                "registered for poll `index`.",
                "",
                "- `index`: The index of poll of the vote to be removed.",
                "- `class`: Optional parameter, if given it indicates the class of the poll. For polls",
                "  which have finished or are cancelled, this must be `Some`.",
                "",
                "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                "  Weight is calculated for the maximum number of vote."
              ]
            },
            {
              "name": "remove_other_vote",
              "fields": [
                {
                  "name": "target",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "class",
                  "type": 91,
                  "typeName": "ClassOf<T, I>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "PollIndexOf<T, I>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Remove a vote for a poll.",
                "",
                "If the `target` is equal to the signer, then this function is exactly equivalent to",
                "`remove_vote`. If not equal to the signer, then the vote must have expired,",
                "either because the poll was cancelled, because the voter lost the poll or",
                "because the conviction period is over.",
                "",
                "The dispatch origin of this call must be _Signed_.",
                "",
                "- `target`: The account of the vote to be removed; this account must have voted for poll",
                "  `index`.",
                "- `index`: The index of poll of the vote to be removed.",
                "- `class`: The class of the poll.",
                "",
                "Weight: `O(R + log R)` where R is the number of polls that `target` has voted on.",
                "  Weight is calculated for the maximum number of vote."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 154,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "vote",
        "AccountVote"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Standard",
              "fields": [
                {
                  "name": "vote",
                  "type": 155,
                  "typeName": "Vote",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Split",
              "fields": [
                {
                  "name": "aye",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "nay",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "SplitAbstain",
              "fields": [
                {
                  "name": "aye",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "nay",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                },
                {
                  "name": "abstain",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 155,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "vote",
        "Vote"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 2,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 156,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "conviction",
        "Conviction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Locked1x",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Locked2x",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Locked3x",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Locked4x",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Locked5x",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "Locked6x",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 157,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 91
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 91,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 158,
    "type": {
      "path": [
        "pallet_referenda",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "submit",
              "fields": [
                {
                  "name": "proposal_origin",
                  "type": 159,
                  "typeName": "Box<PalletsOriginOf<T>>",
                  "docs": []
                },
                {
                  "name": "proposal",
                  "type": 92,
                  "typeName": "BoundedCallOf<T, I>",
                  "docs": []
                },
                {
                  "name": "enactment_moment",
                  "type": 166,
                  "typeName": "DispatchTime<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Propose a referendum on a privileged action.",
                "",
                "- `origin`: must be `SubmitOrigin` and the account must have `SubmissionDeposit` funds",
                "  available.",
                "- `proposal_origin`: The origin from which the proposal should be executed.",
                "- `proposal`: The proposal.",
                "- `enactment_moment`: The moment that the proposal should be enacted.",
                "",
                "Emits `Submitted`."
              ]
            },
            {
              "name": "place_decision_deposit",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Post the Decision Deposit for a referendum.",
                "",
                "- `origin`: must be `Signed` and the account must have funds available for the",
                "  referendum's track's Decision Deposit.",
                "- `index`: The index of the submitted referendum whose Decision Deposit is yet to be",
                "  posted.",
                "",
                "Emits `DecisionDepositPlaced`."
              ]
            },
            {
              "name": "refund_decision_deposit",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Refund the Decision Deposit for a closed referendum back to the depositor.",
                "",
                "- `origin`: must be `Signed` or `Root`.",
                "- `index`: The index of a closed referendum whose Decision Deposit has not yet been",
                "  refunded.",
                "",
                "Emits `DecisionDepositRefunded`."
              ]
            },
            {
              "name": "cancel",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel an ongoing referendum.",
                "",
                "- `origin`: must be the `CancelOrigin`.",
                "- `index`: The index of the referendum to be cancelled.",
                "",
                "Emits `Cancelled`."
              ]
            },
            {
              "name": "kill",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Cancel an ongoing referendum and slash the deposits.",
                "",
                "- `origin`: must be the `KillOrigin`.",
                "- `index`: The index of the referendum to be cancelled.",
                "",
                "Emits `Killed` and `DepositSlashed`."
              ]
            },
            {
              "name": "nudge_referendum",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Advance a referendum onto its next logical state. Only used internally.",
                "",
                "- `origin`: must be `Root`.",
                "- `index`: the referendum to be advanced."
              ]
            },
            {
              "name": "one_fewer_deciding",
              "fields": [
                {
                  "name": "track",
                  "type": 91,
                  "typeName": "TrackIdOf<T, I>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Advance a track onto its next logical state. Only used internally.",
                "",
                "- `origin`: must be `Root`.",
                "- `track`: the track to be advanced.",
                "",
                "Action item for when there is now one fewer referendum in the deciding phase and the",
                "`DecidingCount` is not yet updated. This means that we should either:",
                "- begin deciding another referendum (and leave `DecidingCount` alone); or",
                "- decrement `DecidingCount`."
              ]
            },
            {
              "name": "refund_submission_deposit",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Refund the Submission Deposit for a closed referendum back to the depositor.",
                "",
                "- `origin`: must be `Signed` or `Root`.",
                "- `index`: The index of a closed referendum whose Submission Deposit has not yet been",
                "  refunded.",
                "",
                "Emits `SubmissionDepositRefunded`."
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "ReferendumIndex",
                  "docs": []
                },
                {
                  "name": "maybe_hash",
                  "type": 167,
                  "typeName": "Option<T::Hash>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set or clear metadata of a referendum.",
                "",
                "Parameters:",
                "- `origin`: Must be `Signed` by a creator of a referendum or by anyone to clear a",
                "  metadata of a finished referendum.",
                "- `index`:  The index of a referendum to set or clear metadata for.",
                "- `maybe_hash`: The hash of an on-chain stored preimage. `None` to clear a metadata."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 159,
    "type": {
      "path": [
        "polkadot_runtime",
        "OriginCaller"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "system",
              "fields": [
                {
                  "name": null,
                  "type": 160,
                  "typeName": "frame_system::Origin<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Origins",
              "fields": [
                {
                  "name": null,
                  "type": 161,
                  "typeName": "pallet_custom_origins::Origin",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ParachainsOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 162,
                  "typeName": "parachains_origin::Origin",
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "XcmPallet",
              "fields": [
                {
                  "name": null,
                  "type": 164,
                  "typeName": "pallet_xcm::Origin",
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "Void",
              "fields": [
                {
                  "name": null,
                  "type": 165,
                  "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 160,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "RawOrigin"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Root",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "None",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 161,
    "type": {
      "path": [
        "polkadot_runtime",
        "governance",
        "origins",
        "pallet_custom_origins",
        "Origin"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "StakingAdmin",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Treasurer",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "FellowshipAdmin",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "GeneralAdmin",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "AuctionAdmin",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "LeaseAdmin",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "ReferendumCanceller",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "ReferendumKiller",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "SmallTipper",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "BigTipper",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "SmallSpender",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "MediumSpender",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "BigSpender",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "WhitelistedCaller",
              "fields": [],
              "index": 13,
              "docs": []
            },
            {
              "name": "WishForChange",
              "fields": [],
              "index": 14,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 162,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "origin",
        "pallet",
        "Origin"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Parachain",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 163,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "Id"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 164,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Origin"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Xcm",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Response",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 165,
    "type": {
      "path": [
        "sp_core",
        "Void"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 166,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "schedule",
        "DispatchTime"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "At",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "After",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 167,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 13
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 13,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 168,
    "type": {
      "path": [
        "pallet_whitelist",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "whitelist_call",
              "fields": [
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "remove_whitelisted_call",
              "fields": [
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "dispatch_whitelisted_call",
              "fields": [
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "call_encoded_len",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "call_weight_witness",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "dispatch_whitelisted_call_with_preimage",
              "fields": [
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 169,
    "type": {
      "path": [
        "pallet_parameters",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_parameter",
              "fields": [
                {
                  "name": "key_value",
                  "type": 170,
                  "typeName": "T::RuntimeParameters",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the value of a parameter.",
                "",
                "The dispatch origin of this call must be `AdminOrigin` for the given `key`. Values be",
                "deleted by setting them to `None`."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 170,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeParameters"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Inflation",
              "fields": [
                {
                  "name": null,
                  "type": 171,
                  "typeName": "dynamic_params::inflation::Parameters",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 171,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "Parameters"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MinInflation",
              "fields": [
                {
                  "name": null,
                  "type": 172,
                  "typeName": "MinInflation",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 173,
                  "typeName": "Option<Perquintill>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "MaxInflation",
              "fields": [
                {
                  "name": null,
                  "type": 175,
                  "typeName": "MaxInflation",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 173,
                  "typeName": "Option<Perquintill>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "IdealStake",
              "fields": [
                {
                  "name": null,
                  "type": 176,
                  "typeName": "IdealStake",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 173,
                  "typeName": "Option<Perquintill>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Falloff",
              "fields": [
                {
                  "name": null,
                  "type": 177,
                  "typeName": "Falloff",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 173,
                  "typeName": "Option<Perquintill>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "UseAuctionSlots",
              "fields": [
                {
                  "name": null,
                  "type": 178,
                  "typeName": "UseAuctionSlots",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 179,
                  "typeName": "Option<bool>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 172,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "MinInflation"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 173,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 174
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 174,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 174,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Perquintill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 175,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "MaxInflation"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 176,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "IdealStake"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 177,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "Falloff"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 178,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "UseAuctionSlots"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 179,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 8
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 8,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 180,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "claim",
              "fields": [
                {
                  "name": "dest",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "ethereum_signature",
                  "type": 181,
                  "typeName": "EcdsaSignature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Make a claim to collect your DOTs.",
                "",
                "The dispatch origin for this call must be _None_.",
                "",
                "Unsigned Validation:",
                "A call to claim is deemed valid if the signature provided matches",
                "the expected signed message of:",
                "",
                "> Ethereum Signed Message:",
                "> (configured prefix string)(address)",
                "",
                "and `address` matches the `dest` account.",
                "",
                "Parameters:",
                "- `dest`: The destination account to payout the claim.",
                "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                "  described above.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "Weight includes logic to validate unsigned `claim` call.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "mint_claim",
              "fields": [
                {
                  "name": "who",
                  "type": 183,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "vesting_schedule",
                  "type": 184,
                  "typeName": "Option<(BalanceOf<T>, BalanceOf<T>, BlockNumberFor<T>)>",
                  "docs": []
                },
                {
                  "name": "statement",
                  "type": 186,
                  "typeName": "Option<StatementKind>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Mint a new claim to collect DOTs.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "Parameters:",
                "- `who`: The Ethereum address allowed to collect this claim.",
                "- `value`: The number of DOTs that will be claimed.",
                "- `vesting_schedule`: An optional vesting schedule for these DOTs.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "We assume worst case that both vesting and statement is being inserted.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "claim_attest",
              "fields": [
                {
                  "name": "dest",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "ethereum_signature",
                  "type": 181,
                  "typeName": "EcdsaSignature",
                  "docs": []
                },
                {
                  "name": "statement",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Make a claim to collect your DOTs by signing a statement.",
                "",
                "The dispatch origin for this call must be _None_.",
                "",
                "Unsigned Validation:",
                "A call to `claim_attest` is deemed valid if the signature provided matches",
                "the expected signed message of:",
                "",
                "> Ethereum Signed Message:",
                "> (configured prefix string)(address)(statement)",
                "",
                "and `address` matches the `dest` account; the `statement` must match that which is",
                "expected according to your purchase arrangement.",
                "",
                "Parameters:",
                "- `dest`: The destination account to payout the claim.",
                "- `ethereum_signature`: The signature of an ethereum signed message matching the format",
                "  described above.",
                "- `statement`: The identity of the statement which is being attested to in the",
                "  signature.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "Weight includes logic to validate unsigned `claim_attest` call.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "attest",
              "fields": [
                {
                  "name": "statement",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Attest to a statement, needed to finalize the claims process.",
                "",
                "WARNING: Insecure unless your chain includes `PrevalidateAttests` as a",
                "`SignedExtension`.",
                "",
                "Unsigned Validation:",
                "A call to attest is deemed valid if the sender has a `Preclaim` registered",
                "and provides a `statement` which is expected for the account.",
                "",
                "Parameters:",
                "- `statement`: The identity of the statement which is being attested to in the",
                "  signature.",
                "",
                "<weight>",
                "The weight of this call is invariant over the input parameters.",
                "Weight includes logic to do pre-validation on `attest` call.",
                "",
                "Total Complexity: O(1)",
                "</weight>"
              ]
            },
            {
              "name": "move_claim",
              "fields": [
                {
                  "name": "old",
                  "type": 183,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 183,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": "maybe_preclaim",
                  "type": 127,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 181,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "EcdsaSignature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 182,
              "typeName": "[u8; 65]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 182,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 65,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 183,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "EthereumAddress"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 62,
              "typeName": "[u8; 20]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 184,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 185
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 185,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 185,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          6,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 186,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 187
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 187,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 187,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "StatementKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Regular",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Saft",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 188,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "vest",
              "fields": [],
              "index": 0,
              "docs": [
                "Unlock any vested funds of the sender account.",
                "",
                "The dispatch origin for this call must be _Signed_ and the sender must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "vest_other",
              "fields": [
                {
                  "name": "target",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Unlock any vested funds of a `target` account.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account whose vested funds should be unlocked. Must have funds still",
                "locked under this pallet.",
                "",
                "Emits either `VestingCompleted` or `VestingUpdated`.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "vested_transfer",
              "fields": [
                {
                  "name": "target",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 189,
                  "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Create a vested transfer.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `target`: The account receiving the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "force_vested_transfer",
              "fields": [
                {
                  "name": "source",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "schedule",
                  "type": 189,
                  "typeName": "VestingInfo<BalanceOf<T>, BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Force a vested transfer.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `source`: The account whose funds should be transferred.",
                "- `target`: The account that should be transferred the vested funds.",
                "- `schedule`: The vesting schedule attached to the transfer.",
                "",
                "Emits `VestingCreated`.",
                "",
                "NOTE: This will unlock all schedules through the current block.",
                "",
                "## Complexity",
                "- `O(1)`."
              ]
            },
            {
              "name": "merge_schedules",
              "fields": [
                {
                  "name": "schedule1_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "schedule2_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Merge two vesting schedules together, creating a new vesting schedule that unlocks over",
                "the highest possible start and end blocks. If both schedules have already started the",
                "current block will be used as the schedule start; with the caveat that if one schedule",
                "is finished by the current block, the other will be treated as the new merged schedule,",
                "unmodified.",
                "",
                "NOTE: If `schedule1_index == schedule2_index` this is a no-op.",
                "NOTE: This will unlock all schedules through the current block prior to merging.",
                "NOTE: If both schedules have ended by the current block, no new schedule will be created",
                "and both will be removed.",
                "",
                "Merged schedule attributes:",
                "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,",
                "  current_block)`.",
                "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`.",
                "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `schedule1_index`: index of the first schedule to merge.",
                "- `schedule2_index`: index of the second schedule to merge."
              ]
            },
            {
              "name": "force_remove_vesting_schedule",
              "fields": [
                {
                  "name": "target",
                  "type": 113,
                  "typeName": "<T::Lookup as StaticLookup>::Source",
                  "docs": []
                },
                {
                  "name": "schedule_index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Force remove a vesting schedule",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "- `target`: An account that has a vesting schedule",
                "- `schedule_index`: The vesting schedule index that should be removed"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 189,
    "type": {
      "path": [
        "pallet_vesting",
        "vesting_info",
        "VestingInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "locked",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "per_block",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "starting_block",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 190,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "batch",
              "fields": [
                {
                  "name": "calls",
                  "type": 191,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Send a batch of dispatch calls.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatched without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched.",
                "",
                "This will return `Ok` in all circumstances. To determine the success of the batch, an",
                "event is deposited. If a call failed and the batch was interrupted, then the",
                "`BatchInterrupted` event is deposited, along with the number of successful calls made",
                "and the error of the failed call. If all were successful, then the `BatchCompleted`",
                "event is deposited."
              ]
            },
            {
              "name": "as_derivative",
              "fields": [
                {
                  "name": "index",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Send a call through an indexed pseudonym of the sender.",
                "",
                "Filter from origin are passed along. The call will be dispatched with an origin which",
                "use the same filter as the origin of this call.",
                "",
                "NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                "because you expect `proxy` to have been used prior in the call stack and you do not want",
                "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                "in the Multisig pallet instead.",
                "",
                "NOTE: Prior to version *12, this was called `as_limited_sub`.",
                "",
                "The dispatch origin for this call must be _Signed_."
              ]
            },
            {
              "name": "batch_all",
              "fields": [
                {
                  "name": "calls",
                  "type": 191,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Send a batch of dispatch calls and atomically execute them.",
                "The whole transaction will rollback and fail if any of the calls failed.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatched without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched."
              ]
            },
            {
              "name": "dispatch_as",
              "fields": [
                {
                  "name": "as_origin",
                  "type": 159,
                  "typeName": "Box<T::PalletsOrigin>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Dispatches a function call with a provided origin.",
                "",
                "The dispatch origin for this call must be _Root_.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "force_batch",
              "fields": [
                {
                  "name": "calls",
                  "type": 191,
                  "typeName": "Vec<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Send a batch of dispatch calls.",
                "Unlike `batch`, it allows errors and won't interrupt.",
                "",
                "May be called from any origin except `None`.",
                "",
                "- `calls`: The calls to be dispatched from the same origin. The number of call must not",
                "  exceed the constant: `batched_calls_limit` (available in constant metadata).",
                "",
                "If origin is root then the calls are dispatch without checking origin filter. (This",
                "includes bypassing `frame_system::Config::BaseCallFilter`).",
                "",
                "## Complexity",
                "- O(C) where C is the number of calls to be batched."
              ]
            },
            {
              "name": "with_weight",
              "fields": [
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Dispatch a function call with a specified weight.",
                "",
                "This function does not check the weight of the call, and instead allows the",
                "Root origin to specify the weight of the call.",
                "",
                "The dispatch origin for this call must be _Root_."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 191,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 93
        }
      },
      "docs": []
    }
  },
  {
    "id": 192,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "proxy",
              "fields": [
                {
                  "name": "real",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 193,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorised for through",
                "`add_proxy`.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account."
              ]
            },
            {
              "name": "add_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 194,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register a proxy account for the sender that is able to make calls on its behalf.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to make a proxy.",
                "- `proxy_type`: The permissions allowed for this proxy account.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero."
              ]
            },
            {
              "name": "remove_proxy",
              "fields": [
                {
                  "name": "delegate",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 194,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Unregister a proxy account for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `proxy`: The account that the `caller` would like to remove as a proxy.",
                "- `proxy_type`: The permissions currently enabled for the removed proxy account."
              ]
            },
            {
              "name": "remove_proxies",
              "fields": [],
              "index": 3,
              "docs": [
                "Unregister all proxy accounts for the sender.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "WARNING: This may be called on accounts created by `pure`, however if done, then",
                "the unreserved fees will be inaccessible. **All access to this account will be lost.**"
              ]
            },
            {
              "name": "create_pure",
              "fields": [
                {
                  "name": "proxy_type",
                  "type": 194,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and",
                "initialize it with a proxy of `proxy_type` for `origin` sender.",
                "",
                "Requires a `Signed` origin.",
                "",
                "- `proxy_type`: The type of the proxy that the sender will be registered as over the",
                "new account. This will almost always be the most permissive `ProxyType` possible to",
                "allow for maximum flexibility.",
                "- `index`: A disambiguation index, in case this is called multiple times in the same",
                "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just",
                "want to use `0`.",
                "- `delay`: The announcement period required of the initial proxy. Will generally be",
                "zero.",
                "",
                "Fails with `Duplicate` if this has already been called in this transaction, from the",
                "same sender, with the same parameters.",
                "",
                "Fails if there are insufficient funds to pay for deposit."
              ]
            },
            {
              "name": "kill_pure",
              "fields": [
                {
                  "name": "spawner",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 194,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "height",
                  "type": 59,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "ext_index",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Removes a previously spawned pure proxy.",
                "",
                "WARNING: **All access to this account will be lost.** Any funds held in it will be",
                "inaccessible.",
                "",
                "Requires a `Signed` origin, and the sender account must have been created by a call to",
                "`pure` with corresponding parameters.",
                "",
                "- `spawner`: The account that originally called `pure` to create this account.",
                "- `index`: The disambiguation index originally passed to `pure`. Probably `0`.",
                "- `proxy_type`: The proxy type originally passed to `pure`.",
                "- `height`: The height of the chain when the call to `pure` was processed.",
                "- `ext_index`: The extrinsic index in which the call to `pure` was processed.",
                "",
                "Fails with `NoPermission` in case the caller is not a previously created pure",
                "account whose `pure` call has corresponding parameters."
              ]
            },
            {
              "name": "announce",
              "fields": [
                {
                  "name": "real",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Publish the hash of a proxy-call that will be made in the future.",
                "",
                "This must be called some number of blocks before the corresponding `proxy` is attempted",
                "if the delay associated with the proxy relationship is greater than zero.",
                "",
                "No more than `MaxPending` announcements may be made at any one time.",
                "",
                "This will take a deposit of `AnnouncementDepositFactor` as well as",
                "`AnnouncementDepositBase` if there are no other pending announcements.",
                "",
                "The dispatch origin for this call must be _Signed_ and a proxy of `real`.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account."
              ]
            },
            {
              "name": "remove_announcement",
              "fields": [
                {
                  "name": "real",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Remove a given announcement.",
                "",
                "May be called by a proxy account to remove a call they previously announced and return",
                "the deposit.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `call_hash`: The hash of the call to be made by the `real` account."
              ]
            },
            {
              "name": "reject_announcement",
              "fields": [
                {
                  "name": "delegate",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Remove the given announcement of a delegate.",
                "",
                "May be called by a target (proxied) account to remove a call that one of their delegates",
                "(`delegate`) has announced they want to execute. The deposit is returned.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `delegate`: The account that previously announced the call.",
                "- `call_hash`: The hash of the call to be made."
              ]
            },
            {
              "name": "proxy_announced",
              "fields": [
                {
                  "name": "delegate",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "real",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "force_proxy_type",
                  "type": 193,
                  "typeName": "Option<T::ProxyType>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Dispatch the given `call` from an account that the sender is authorized for through",
                "`add_proxy`.",
                "",
                "Removes any corresponding announcement(s).",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Parameters:",
                "- `real`: The account that the proxy will make a call on behalf of.",
                "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call.",
                "- `call`: The call to be made by the `real` account."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 193,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 194
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 194,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 194,
    "type": {
      "path": [
        "polkadot_runtime",
        "ProxyType"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Any",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonTransfer",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Governance",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "CancelProxy",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Auction",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "NominationPools",
              "fields": [],
              "index": 8,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 195,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "as_multi_threshold_1",
              "fields": [
                {
                  "name": "other_signatories",
                  "type": 116,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Immediately dispatch a multi-signature call using a single approval from the caller.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `other_signatories`: The accounts (other than the sender) who are part of the",
                "multi-signature, but do not participate in the approval process.",
                "- `call`: The call to be executed.",
                "",
                "Result is equivalent to the dispatched result.",
                "",
                "## Complexity",
                "O(Z + C) where Z is the length of the call and C its execution weight."
              ]
            },
            {
              "name": "as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 116,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 196,
                  "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 93,
                  "typeName": "Box<<T as Config>::RuntimeCall>",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "If there are enough, then dispatch the call.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call`: The call to be executed.",
                "",
                "NOTE: Unless this is the final approval, you will generally want to use",
                "`approve_as_multi` instead, since it only requires a hash of the call.",
                "",
                "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                "on success, result is `Ok` and the result from the interior call, if it was executed,",
                "may be found in the deposited `MultisigExecuted` event.",
                "",
                "## Complexity",
                "- `O(S + Z + Call)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- The weight of the `call`.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
              ]
            },
            {
              "name": "approve_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 116,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "maybe_timepoint",
                  "type": 196,
                  "typeName": "Option<Timepoint<BlockNumberFor<T>>>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Register approval for a dispatch to be made from a deterministic composite account if",
                "approved by a total of `threshold - 1` of `other_signatories`.",
                "",
                "Payment: `DepositBase` will be reserved if this is the first approval, plus",
                "`threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                "is cancelled.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                "not the first approval, then it must be `Some`, with the timepoint (block number and",
                "transaction index) of the first approval transaction.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                "",
                "## Complexity",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- Up to one binary search and insert (`O(logS + S)`).",
                "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                "- One event.",
                "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit",
                "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."
              ]
            },
            {
              "name": "cancel_as_multi",
              "fields": [
                {
                  "name": "threshold",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                },
                {
                  "name": "other_signatories",
                  "type": 116,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 197,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                "for this operation will be unreserved on success.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "- `threshold`: The total number of approvals for this dispatch before it is executed.",
                "- `other_signatories`: The accounts (other than the sender) who can approve this",
                "dispatch. May not be empty.",
                "- `timepoint`: The timepoint (block number and transaction index) of the first approval",
                "transaction for this dispatch.",
                "- `call_hash`: The hash of the call to be executed.",
                "",
                "## Complexity",
                "- `O(S)`.",
                "- Up to one balance-reserve or unreserve operation.",
                "- One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                "- One encode & hash, both of complexity `O(S)`.",
                "- One event.",
                "- I/O: 1 read `O(S)`, one remove.",
                "- Storage: removes one item."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 196,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 197
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 197,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 197,
    "type": {
      "path": [
        "pallet_multisig",
        "Timepoint"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "index",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 198,
    "type": {
      "path": [
        "pallet_bounties",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "propose_bounty",
              "fields": [
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "description",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Propose a new bounty.",
                "",
                "The dispatch origin for this call must be _Signed_.",
                "",
                "Payment: `TipReportDepositBase` will be reserved from the origin account, as well as",
                "`DataDepositPerByte` for each byte in `reason`. It will be unreserved upon approval,",
                "or slashed when rejected.",
                "",
                "- `curator`: The curator account whom will manage this bounty.",
                "- `fee`: The curator fee.",
                "- `value`: The total payment amount of this bounty, curator fee included.",
                "- `description`: The description of this bounty."
              ]
            },
            {
              "name": "approve_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Approve a bounty proposal. At a later time, the bounty will be funded and become active",
                "and the original deposit will be returned.",
                "",
                "May only be called from `T::SpendOrigin`.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "propose_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "curator",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 63,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Propose a curator to a funded bounty.",
                "",
                "May only be called from `T::SpendOrigin`.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "unassign_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Unassign curator from a bounty.",
                "",
                "This function can only be called by the `RejectOrigin` a signed origin.",
                "",
                "If this function is called by the `RejectOrigin`, we assume that the curator is",
                "malicious or inactive. As a result, we will slash the curator when possible.",
                "",
                "If the origin is the curator, we take this as a sign they are unable to do their job and",
                "they willingly give up. We could slash them, but for now we allow them to recover their",
                "deposit and exit without issue. (We may want to change this if it is abused.)",
                "",
                "Finally, the origin can be anyone if and only if the curator is \"inactive\". This allows",
                "anyone in the community to call out that a curator is not doing their due diligence, and",
                "we should pick a new curator. In this case the curator should also be slashed.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "accept_curator",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Accept the curator role for a bounty.",
                "A deposit will be reserved from curator and refund upon successful payout.",
                "",
                "May only be called from the curator.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "award_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Award bounty to a beneficiary account. The beneficiary will be able to claim the funds",
                "after a delay.",
                "",
                "The dispatch origin for this call must be the curator of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to award.",
                "- `beneficiary`: The beneficiary account whom will receive the payout.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "claim_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Claim the payout from an awarded bounty after payout delay.",
                "",
                "The dispatch origin for this call must be the beneficiary of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to claim.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "close_bounty",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Cancel a proposed or active bounty. All the funds will be sent to treasury and",
                "the curator deposit will be unreserved if possible.",
                "",
                "Only `T::RejectOrigin` is able to cancel a bounty.",
                "",
                "- `bounty_id`: Bounty ID to cancel.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            },
            {
              "name": "extend_bounty_expiry",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "remark",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Extend the expiry time of an active bounty.",
                "",
                "The dispatch origin for this call must be the curator of this bounty.",
                "",
                "- `bounty_id`: Bounty ID to extend.",
                "- `remark`: additional information.",
                "",
                "## Complexity",
                "- O(1)."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 199,
    "type": {
      "path": [
        "pallet_child_bounties",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "add_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "description",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Add a new child-bounty.",
                "",
                "The dispatch origin for this call must be the curator of parent",
                "bounty and the parent bounty must be in \"active\" state.",
                "",
                "Child-bounty gets added successfully & fund gets transferred from",
                "parent bounty to child-bounty account, if parent bounty has enough",
                "funds, else the call fails.",
                "",
                "Upper bound to maximum number of active  child bounties that can be",
                "added are managed via runtime trait config",
                "[`Config::MaxActiveChildBountyCount`].",
                "",
                "If the call is success, the status of child-bounty is updated to",
                "\"Added\".",
                "",
                "- `parent_bounty_id`: Index of parent bounty for which child-bounty is being added.",
                "- `value`: Value for executing the proposal.",
                "- `description`: Text description for the child-bounty."
              ]
            },
            {
              "name": "propose_curator",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "curator",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "fee",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Propose curator for funded child-bounty.",
                "",
                "The dispatch origin for this call must be curator of parent bounty.",
                "",
                "Parent bounty must be in active state, for this child-bounty call to",
                "work.",
                "",
                "Child-bounty must be in \"Added\" state, for processing the call. And",
                "state of child-bounty is moved to \"CuratorProposed\" on successful",
                "call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty.",
                "- `curator`: Address of child-bounty curator.",
                "- `fee`: payment fee to child-bounty curator for execution."
              ]
            },
            {
              "name": "accept_curator",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Accept the curator role for the child-bounty.",
                "",
                "The dispatch origin for this call must be the curator of this",
                "child-bounty.",
                "",
                "A deposit will be reserved from the curator and refund upon",
                "successful payout or cancellation.",
                "",
                "Fee for curator is deducted from curator fee of parent bounty.",
                "",
                "Parent bounty must be in active state, for this child-bounty call to",
                "work.",
                "",
                "Child-bounty must be in \"CuratorProposed\" state, for processing the",
                "call. And state of child-bounty is moved to \"Active\" on successful",
                "call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            },
            {
              "name": "unassign_curator",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Unassign curator from a child-bounty.",
                "",
                "The dispatch origin for this call can be either `RejectOrigin`, or",
                "the curator of the parent bounty, or any signed origin.",
                "",
                "For the origin other than T::RejectOrigin and the child-bounty",
                "curator, parent bounty must be in active state, for this call to",
                "work. We allow child-bounty curator and T::RejectOrigin to execute",
                "this call irrespective of the parent bounty state.",
                "",
                "If this function is called by the `RejectOrigin` or the",
                "parent bounty curator, we assume that the child-bounty curator is",
                "malicious or inactive. As a result, child-bounty curator deposit is",
                "slashed.",
                "",
                "If the origin is the child-bounty curator, we take this as a sign",
                "that they are unable to do their job, and are willingly giving up.",
                "We could slash the deposit, but for now we allow them to unreserve",
                "their deposit and exit without issue. (We may want to change this if",
                "it is abused.)",
                "",
                "Finally, the origin can be anyone iff the child-bounty curator is",
                "\"inactive\". Expiry update due of parent bounty is used to estimate",
                "inactive state of child-bounty curator.",
                "",
                "This allows anyone in the community to call out that a child-bounty",
                "curator is not doing their due diligence, and we should pick a new",
                "one. In this case the child-bounty curator deposit is slashed.",
                "",
                "State of child-bounty is moved to Added state on successful call",
                "completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            },
            {
              "name": "award_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Award child-bounty to a beneficiary.",
                "",
                "The beneficiary will be able to claim the funds after a delay.",
                "",
                "The dispatch origin for this call must be the parent curator or",
                "curator of this child-bounty.",
                "",
                "Parent bounty must be in active state, for this child-bounty call to",
                "work.",
                "",
                "Child-bounty must be in active state, for processing the call. And",
                "state of child-bounty is moved to \"PendingPayout\" on successful call",
                "completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty.",
                "- `beneficiary`: Beneficiary account."
              ]
            },
            {
              "name": "claim_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Claim the payout from an awarded child-bounty after payout delay.",
                "",
                "The dispatch origin for this call may be any signed origin.",
                "",
                "Call works independent of parent bounty state, No need for parent",
                "bounty to be in active state.",
                "",
                "The Beneficiary is paid out with agreed bounty value. Curator fee is",
                "paid & curator deposit is unreserved.",
                "",
                "Child-bounty must be in \"PendingPayout\" state, for processing the",
                "call. And instance of child-bounty is removed from the state on",
                "successful call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            },
            {
              "name": "close_child_bounty",
              "fields": [
                {
                  "name": "parent_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_bounty_id",
                  "type": 59,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Cancel a proposed or active child-bounty. Child-bounty account funds",
                "are transferred to parent bounty account. The child-bounty curator",
                "deposit may be unreserved if possible.",
                "",
                "The dispatch origin for this call must be either parent curator or",
                "`T::RejectOrigin`.",
                "",
                "If the state of child-bounty is `Active`, curator deposit is",
                "unreserved.",
                "",
                "If the state of child-bounty is `PendingPayout`, call fails &",
                "returns `PendingPayout` error.",
                "",
                "For the origin other than T::RejectOrigin, parent bounty must be in",
                "active state, for this child-bounty call to work. For origin",
                "T::RejectOrigin execution is forced.",
                "",
                "Instance of child-bounty is removed from the state on successful",
                "call completion.",
                "",
                "- `parent_bounty_id`: Index of parent bounty.",
                "- `child_bounty_id`: Index of child bounty."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 200,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "submit_unsigned",
              "fields": [
                {
                  "name": "raw_solution",
                  "type": 201,
                  "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                  "docs": []
                },
                {
                  "name": "witness",
                  "type": 254,
                  "typeName": "SolutionOrSnapshotSize",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Submit a solution for the unsigned phase.",
                "",
                "The dispatch origin fo this call must be __none__.",
                "",
                "This submission is checked on the fly. Moreover, this unsigned solution is only",
                "validated when submitted to the pool from the **local** node. Effectively, this means",
                "that only active validators can submit this transaction when authoring a block (similar",
                "to an inherent).",
                "",
                "To prevent any incorrect solution (and thus wasted time/weight), this transaction will",
                "panic if the solution submitted by the validator is invalid in any way, effectively",
                "putting their authoring reward at risk.",
                "",
                "No deposit or reward is associated with this submission."
              ]
            },
            {
              "name": "set_minimum_untrusted_score",
              "fields": [
                {
                  "name": "maybe_next_score",
                  "type": 255,
                  "typeName": "Option<ElectionScore>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set a new value for `MinimumUntrustedScore`.",
                "",
                "Dispatch origin must be aligned with `T::ForceOrigin`.",
                "",
                "This check can be turned off by setting the value to `None`."
              ]
            },
            {
              "name": "set_emergency_election_result",
              "fields": [
                {
                  "name": "supports",
                  "type": 256,
                  "typeName": "Supports<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set a solution in the queue, to be handed out to the client of this pallet in the next",
                "call to `ElectionProvider::elect`.",
                "",
                "This can only be set by `T::ForceOrigin`, and only when the phase is `Emergency`.",
                "",
                "The solution is not checked for any feasibility and is assumed to be trustworthy, as any",
                "feasibility check itself can in principle cause the election process to fail (due to",
                "memory/weight constrains)."
              ]
            },
            {
              "name": "submit",
              "fields": [
                {
                  "name": "raw_solution",
                  "type": 201,
                  "typeName": "Box<RawSolution<SolutionOf<T::MinerConfig>>>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Submit a solution for the signed phase.",
                "",
                "The dispatch origin fo this call must be __signed__.",
                "",
                "The solution is potentially queued, based on the claimed score and processed at the end",
                "of the signed phase.",
                "",
                "A deposit is reserved and recorded for the solution. Based on the outcome, the solution",
                "might be rewarded, slashed, or get all or a part of the deposit back."
              ]
            },
            {
              "name": "governance_fallback",
              "fields": [
                {
                  "name": "maybe_max_voters",
                  "type": 152,
                  "typeName": "Option<u32>",
                  "docs": []
                },
                {
                  "name": "maybe_max_targets",
                  "type": 152,
                  "typeName": "Option<u32>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Trigger the governance fallback.",
                "",
                "This can only be called when [`Phase::Emergency`] is enabled, as an alternative to",
                "calling [`Call::set_emergency_election_result`]."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 201,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "RawSolution"
      ],
      "params": [
        {
          "name": "S",
          "type": 202
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "solution",
              "type": 202,
              "typeName": "S",
              "docs": []
            },
            {
              "name": "score",
              "type": 253,
              "typeName": "ElectionScore",
              "docs": []
            },
            {
              "name": "round",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 202,
    "type": {
      "path": [
        "polkadot_runtime",
        "NposCompactSolution16"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes1",
              "type": 203,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes2",
              "type": 206,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes3",
              "type": 211,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes4",
              "type": 214,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes5",
              "type": 217,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes6",
              "type": 220,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes7",
              "type": 223,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes8",
              "type": 226,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes9",
              "type": 229,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes10",
              "type": 232,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes11",
              "type": 235,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes12",
              "type": 238,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes13",
              "type": 241,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes14",
              "type": 244,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes15",
              "type": 247,
              "typeName": null,
              "docs": []
            },
            {
              "name": "votes16",
              "type": 250,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 203,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 204
        }
      },
      "docs": []
    }
  },
  {
    "id": 204,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 205,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 91
        }
      },
      "docs": []
    }
  },
  {
    "id": 206,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 207
        }
      },
      "docs": []
    }
  },
  {
    "id": 207,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          208,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 208,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          205,
          209
        ]
      },
      "docs": []
    }
  },
  {
    "id": 209,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 210
        }
      },
      "docs": []
    }
  },
  {
    "id": 210,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "PerU16"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 91,
              "typeName": "u16",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 211,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 212
        }
      },
      "docs": []
    }
  },
  {
    "id": 212,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          213,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 213,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 214,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 215
        }
      },
      "docs": []
    }
  },
  {
    "id": 215,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          216,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 216,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 3,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 217,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 218
        }
      },
      "docs": []
    }
  },
  {
    "id": 218,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          219,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 219,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 4,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 220,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 221
        }
      },
      "docs": []
    }
  },
  {
    "id": 221,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          222,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 222,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 5,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 223,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 224
        }
      },
      "docs": []
    }
  },
  {
    "id": 224,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          225,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 225,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 6,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 226,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 227
        }
      },
      "docs": []
    }
  },
  {
    "id": 227,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          228,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 228,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 7,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 229,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 230
        }
      },
      "docs": []
    }
  },
  {
    "id": 230,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          231,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 231,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 232,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 233
        }
      },
      "docs": []
    }
  },
  {
    "id": 233,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          234,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 234,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 9,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 235,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 236
        }
      },
      "docs": []
    }
  },
  {
    "id": 236,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          237,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 237,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 10,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 238,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 239
        }
      },
      "docs": []
    }
  },
  {
    "id": 239,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          240,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 240,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 11,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 241,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 242
        }
      },
      "docs": []
    }
  },
  {
    "id": 242,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          243,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 243,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 12,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 244,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 245
        }
      },
      "docs": []
    }
  },
  {
    "id": 245,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          246,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 246,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 13,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 247,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 248
        }
      },
      "docs": []
    }
  },
  {
    "id": 248,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          249,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 249,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 14,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 250,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 251
        }
      },
      "docs": []
    }
  },
  {
    "id": 251,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          59,
          252,
          205
        ]
      },
      "docs": []
    }
  },
  {
    "id": 252,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 15,
          "type": 208
        }
      },
      "docs": []
    }
  },
  {
    "id": 253,
    "type": {
      "path": [
        "sp_npos_elections",
        "ElectionScore"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "minimal_stake",
              "type": 6,
              "typeName": "ExtendedBalance",
              "docs": []
            },
            {
              "name": "sum_stake",
              "type": 6,
              "typeName": "ExtendedBalance",
              "docs": []
            },
            {
              "name": "sum_stake_squared",
              "type": 6,
              "typeName": "ExtendedBalance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 254,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "SolutionOrSnapshotSize"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "voters",
              "type": 59,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "targets",
              "type": 59,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 255,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 253
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 253,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 256,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 257
        }
      },
      "docs": []
    }
  },
  {
    "id": 257,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          258
        ]
      },
      "docs": []
    }
  },
  {
    "id": 258,
    "type": {
      "path": [
        "sp_npos_elections",
        "Support"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 6,
              "typeName": "ExtendedBalance",
              "docs": []
            },
            {
              "name": "voters",
              "type": 259,
              "typeName": "Vec<(AccountId, ExtendedBalance)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 259,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 260
        }
      },
      "docs": []
    }
  },
  {
    "id": 260,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 261,
    "type": {
      "path": [
        "pallet_bags_list",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "rebag",
              "fields": [
                {
                  "name": "dislocated",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Declare that some `dislocated` account has, through rewards or penalties, sufficiently",
                "changed its score that it should properly fall into a different bag than its current",
                "one.",
                "",
                "Anyone can call this function about any potentially dislocated account.",
                "",
                "Will always update the stored score of `dislocated` to the correct score, based on",
                "`ScoreProvider`.",
                "",
                "If `dislocated` does not exists, it returns an error."
              ]
            },
            {
              "name": "put_in_front_of",
              "fields": [
                {
                  "name": "lighter",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Move the caller's Id directly in front of `lighter`.",
                "",
                "The dispatch origin for this call must be _Signed_ and can only be called by the Id of",
                "the account going in front of `lighter`. Fee is payed by the origin under all",
                "circumstances.",
                "",
                "Only works if:",
                "",
                "- both nodes are within the same bag,",
                "- and `origin` has a greater `Score` than `lighter`."
              ]
            },
            {
              "name": "put_in_front_of_other",
              "fields": [
                {
                  "name": "heavier",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "lighter",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Same as [`Pallet::put_in_front_of`], but it can be called by anyone.",
                "",
                "Fee is paid by the origin under all circumstances."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 262,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "join",
              "fields": [
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Stake funds with a pool. The amount to bond is transferred from the member to the",
                "pools account and immediately increases the pools bond.",
                "",
                "# Note",
                "",
                "* An account can only be a member of a single pool.",
                "* An account cannot join the same pool multiple times.",
                "* This call will *not* dust the member account, so the member must have at least",
                "  `existential deposit + amount` in their account.",
                "* Only a pool with [`PoolState::Open`] can be joined"
              ]
            },
            {
              "name": "bond_extra",
              "fields": [
                {
                  "name": "extra",
                  "type": 263,
                  "typeName": "BondExtra<BalanceOf<T>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Bond `extra` more funds from `origin` into the pool to which they already belong.",
                "",
                "Additional funds can come from either the free balance of the account, of from the",
                "accumulated rewards, see [`BondExtra`].",
                "",
                "Bonding extra funds implies an automatic payout of all pending rewards as well.",
                "See `bond_extra_other` to bond pending rewards of `other` members."
              ]
            },
            {
              "name": "claim_payout",
              "fields": [],
              "index": 2,
              "docs": [
                "A bonded member can use this to claim their payout based on the rewards that the pool",
                "has accumulated since their last claimed payout (OR since joining if this is their first",
                "time claiming rewards). The payout will be transferred to the member's account.",
                "",
                "The member will earn rewards pro rata based on the members stake vs the sum of the",
                "members in the pools stake. Rewards do not \"expire\".",
                "",
                "See `claim_payout_other` to claim rewards on behalf of some `other` pool member."
              ]
            },
            {
              "name": "unbond",
              "fields": [
                {
                  "name": "member_account",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "unbonding_points",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Unbond up to `unbonding_points` of the `member_account`'s funds from the pool. It",
                "implicitly collects the rewards one last time, since not doing so would mean some",
                "rewards would be forfeited.",
                "",
                "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                "account).",
                "",
                "# Conditions for a permissionless dispatch.",
                "",
                "* The pool is blocked and the caller is either the root or bouncer. This is refereed to",
                "  as a kick.",
                "* The pool is destroying and the member is not the depositor.",
                "* The pool is destroying, the member is the depositor and no other members are in the",
                "  pool.",
                "",
                "## Conditions for permissioned dispatch (i.e. the caller is also the",
                "`member_account`):",
                "",
                "* The caller is not the depositor.",
                "* The caller is the depositor, the pool is destroying and no other members are in the",
                "  pool.",
                "",
                "# Note",
                "",
                "If there are too many unlocking chunks to unbond with the pool account,",
                "[`Call::pool_withdraw_unbonded`] can be called to try and minimize unlocking chunks.",
                "The [`StakingInterface::unbond`] will implicitly call [`Call::pool_withdraw_unbonded`]",
                "to try to free chunks if necessary (ie. if unbound was called and no unlocking chunks",
                "are available). However, it may not be possible to release the current unlocking chunks,",
                "in which case, the result of this call will likely be the `NoMoreChunks` error from the",
                "staking system."
              ]
            },
            {
              "name": "pool_withdraw_unbonded",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Call `withdraw_unbonded` for the pools account. This call can be made by any account.",
                "",
                "This is useful if there are too many unlocking chunks to call `unbond`, and some",
                "can be cleared by withdrawing. In the case there are too many unlocking chunks, the user",
                "would probably see an error like `NoMoreChunks` emitted from the staking system when",
                "they attempt to unbond."
              ]
            },
            {
              "name": "withdraw_unbonded",
              "fields": [
                {
                  "name": "member_account",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "num_slashing_spans",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Withdraw unbonded funds from `member_account`. If no bonded funds can be unbonded, an",
                "error is returned.",
                "",
                "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                "account).",
                "",
                "# Conditions for a permissionless dispatch",
                "",
                "* The pool is in destroy mode and the target is not the depositor.",
                "* The target is the depositor and they are the only member in the sub pools.",
                "* The pool is blocked and the caller is either the root or bouncer.",
                "",
                "# Conditions for permissioned dispatch",
                "",
                "* The caller is the target and they are not the depositor.",
                "",
                "# Note",
                "",
                "- If the target is the depositor, the pool will be destroyed.",
                "- If the pool has any pending slash, we also try to slash the member before letting them",
                "withdraw. This calculation adds some weight overhead and is only defensive. In reality,",
                "pool slashes must have been already applied via permissionless [`Call::apply_slash`]."
              ]
            },
            {
              "name": "create",
              "fields": [
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "root",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "nominator",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "bouncer",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Create a new delegation pool.",
                "",
                "# Arguments",
                "",
                "* `amount` - The amount of funds to delegate to the pool. This also acts of a sort of",
                "  deposit since the pools creator cannot fully unbond funds until the pool is being",
                "  destroyed.",
                "* `index` - A disambiguation index for creating the account. Likely only useful when",
                "  creating multiple pools in the same extrinsic.",
                "* `root` - The account to set as [`PoolRoles::root`].",
                "* `nominator` - The account to set as the [`PoolRoles::nominator`].",
                "* `bouncer` - The account to set as the [`PoolRoles::bouncer`].",
                "",
                "# Note",
                "",
                "In addition to `amount`, the caller will transfer the existential deposit; so the caller",
                "needs at have at least `amount + existential_deposit` transferable."
              ]
            },
            {
              "name": "create_with_pool_id",
              "fields": [
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "root",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "nominator",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "bouncer",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Create a new delegation pool with a previously used pool id",
                "",
                "# Arguments",
                "",
                "same as `create` with the inclusion of",
                "* `pool_id` - `A valid PoolId."
              ]
            },
            {
              "name": "nominate",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "validators",
                  "type": 116,
                  "typeName": "Vec<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Nominate on behalf of the pool.",
                "",
                "The dispatch origin of this call must be signed by the pool nominator or the pool",
                "root role.",
                "",
                "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                "account.",
                "",
                "# Note",
                "",
                "In addition to a `root` or `nominator` role of `origin`, pool's depositor needs to have",
                "at least `depositor_min_bond` in the pool to start nominating."
              ]
            },
            {
              "name": "set_state",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "state",
                  "type": 264,
                  "typeName": "PoolState",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Set a new state for the pool.",
                "",
                "If a pool is already in the `Destroying` state, then under no condition can its state",
                "change again.",
                "",
                "The dispatch origin of this call must be either:",
                "",
                "1. signed by the bouncer, or the root role of the pool,",
                "2. if the pool conditions to be open are NOT met (as described by `ok_to_be_open`), and",
                "   then the state of the pool can be permissionlessly changed to `Destroying`."
              ]
            },
            {
              "name": "set_metadata",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "metadata",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Set a new metadata for the pool.",
                "",
                "The dispatch origin of this call must be signed by the bouncer, or the root role of the",
                "pool."
              ]
            },
            {
              "name": "set_configs",
              "fields": [
                {
                  "name": "min_join_bond",
                  "type": 265,
                  "typeName": "ConfigOp<BalanceOf<T>>",
                  "docs": []
                },
                {
                  "name": "min_create_bond",
                  "type": 265,
                  "typeName": "ConfigOp<BalanceOf<T>>",
                  "docs": []
                },
                {
                  "name": "max_pools",
                  "type": 266,
                  "typeName": "ConfigOp<u32>",
                  "docs": []
                },
                {
                  "name": "max_members",
                  "type": 266,
                  "typeName": "ConfigOp<u32>",
                  "docs": []
                },
                {
                  "name": "max_members_per_pool",
                  "type": 266,
                  "typeName": "ConfigOp<u32>",
                  "docs": []
                },
                {
                  "name": "global_max_commission",
                  "type": 267,
                  "typeName": "ConfigOp<Perbill>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Update configurations for the nomination pools. The origin for this call must be",
                "[`Config::AdminOrigin`].",
                "",
                "# Arguments",
                "",
                "* `min_join_bond` - Set [`MinJoinBond`].",
                "* `min_create_bond` - Set [`MinCreateBond`].",
                "* `max_pools` - Set [`MaxPools`].",
                "* `max_members` - Set [`MaxPoolMembers`].",
                "* `max_members_per_pool` - Set [`MaxPoolMembersPerPool`].",
                "* `global_max_commission` - Set [`GlobalMaxCommission`]."
              ]
            },
            {
              "name": "update_roles",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "new_root",
                  "type": 268,
                  "typeName": "ConfigOp<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "new_nominator",
                  "type": 268,
                  "typeName": "ConfigOp<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "new_bouncer",
                  "type": 268,
                  "typeName": "ConfigOp<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Update the roles of the pool.",
                "",
                "The root is the only entity that can change any of the roles, including itself,",
                "excluding the depositor, who can never change.",
                "",
                "It emits an event, notifying UIs of the role change. This event is quite relevant to",
                "most pool members and they should be informed of changes to pool roles."
              ]
            },
            {
              "name": "chill",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Chill on behalf of the pool.",
                "",
                "The dispatch origin of this call can be signed by the pool nominator or the pool",
                "root role, same as [`Pallet::nominate`].",
                "",
                "Under certain conditions, this call can be dispatched permissionlessly (i.e. by any",
                "account).",
                "",
                "# Conditions for a permissionless dispatch:",
                "* When pool depositor has less than `MinNominatorBond` staked, otherwise  pool members",
                "  are unable to unbond.",
                "",
                "# Conditions for permissioned dispatch:",
                "* The caller has a nominator or root role of the pool.",
                "This directly forward the call to the staking pallet, on behalf of the pool bonded",
                "account."
              ]
            },
            {
              "name": "bond_extra_other",
              "fields": [
                {
                  "name": "member",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                },
                {
                  "name": "extra",
                  "type": 263,
                  "typeName": "BondExtra<BalanceOf<T>>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "`origin` bonds funds from `extra` for some pool member `member` into their respective",
                "pools.",
                "",
                "`origin` can bond extra funds from free balance or pending rewards when `origin ==",
                "other`.",
                "",
                "In the case of `origin != other`, `origin` can only bond extra pending rewards of",
                "`other` members assuming set_claim_permission for the given member is",
                "`PermissionlessCompound` or `PermissionlessAll`."
              ]
            },
            {
              "name": "set_claim_permission",
              "fields": [
                {
                  "name": "permission",
                  "type": 269,
                  "typeName": "ClaimPermission",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Allows a pool member to set a claim permission to allow or disallow permissionless",
                "bonding and withdrawing.",
                "",
                "# Arguments",
                "",
                "* `origin` - Member of a pool.",
                "* `permission` - The permission to be applied."
              ]
            },
            {
              "name": "claim_payout_other",
              "fields": [
                {
                  "name": "other",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "`origin` can claim payouts on some pool member `other`'s behalf.",
                "",
                "Pool member `other` must have a `PermissionlessWithdraw` or `PermissionlessAll` claim",
                "permission for this call to be successful."
              ]
            },
            {
              "name": "set_commission",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "new_commission",
                  "type": 270,
                  "typeName": "Option<(Perbill, T::AccountId)>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Set the commission of a pool.",
                "Both a commission percentage and a commission payee must be provided in the `current`",
                "tuple. Where a `current` of `None` is provided, any current commission will be removed.",
                "",
                "- If a `None` is supplied to `new_commission`, existing commission will be removed."
              ]
            },
            {
              "name": "set_commission_max",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "max_commission",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Set the maximum commission of a pool.",
                "",
                "- Initial max can be set to any `Perbill`, and only smaller values thereafter.",
                "- Current commission will be lowered in the event it is higher than a new max",
                "  commission."
              ]
            },
            {
              "name": "set_commission_change_rate",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "change_rate",
                  "type": 272,
                  "typeName": "CommissionChangeRate<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Set the commission change rate for a pool.",
                "",
                "Initial change rate is not bounded, whereas subsequent updates can only be more",
                "restrictive than the current."
              ]
            },
            {
              "name": "claim_commission",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Claim pending commission.",
                "",
                "The dispatch origin of this call must be signed by the `root` role of the pool. Pending",
                "commission is paid out and added to total claimed commission`. Total pending commission",
                "is reset to zero. the current."
              ]
            },
            {
              "name": "adjust_pool_deposit",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Top up the deficit or withdraw the excess ED from the pool.",
                "",
                "When a pool is created, the pool depositor transfers ED to the reward account of the",
                "pool. ED is subject to change and over time, the deposit in the reward account may be",
                "insufficient to cover the ED deficit of the pool or vice-versa where there is excess",
                "deposit to the pool. This call allows anyone to adjust the ED deposit of the",
                "pool by either topping up the deficit or claiming the excess."
              ]
            },
            {
              "name": "set_commission_claim_permission",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "permission",
                  "type": 273,
                  "typeName": "Option<CommissionClaimPermission<T::AccountId>>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Set or remove a pool's commission claim permission.",
                "",
                "Determines who can claim the pool's pending commission. Only the `Root` role of the pool",
                "is able to configure commission claim permissions."
              ]
            },
            {
              "name": "apply_slash",
              "fields": [
                {
                  "name": "member_account",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Apply a pending slash on a member.",
                "",
                "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                "[`adapter::StakeStrategyType::Delegate`].",
                "",
                "This call can be dispatched permissionlessly (i.e. by any account). If the member has",
                "slash to be applied, caller may be rewarded with the part of the slash."
              ]
            },
            {
              "name": "migrate_delegation",
              "fields": [
                {
                  "name": "member_account",
                  "type": 113,
                  "typeName": "AccountIdLookupOf<T>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Migrates delegated funds from the pool account to the `member_account`.",
                "",
                "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                "[`adapter::StakeStrategyType::Delegate`].",
                "",
                "This is a permission-less call and refunds any fee if claim is successful.",
                "",
                "If the pool has migrated to delegation based staking, the staked tokens of pool members",
                "can be moved and held in their own account. See [`adapter::DelegateStake`]"
              ]
            },
            {
              "name": "migrate_pool_to_delegate_stake",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Migrate pool from [`adapter::StakeStrategyType::Transfer`] to",
                "[`adapter::StakeStrategyType::Delegate`].",
                "",
                "Fails unless [`crate::pallet::Config::StakeAdapter`] is of strategy type:",
                "[`adapter::StakeStrategyType::Delegate`].",
                "",
                "This call can be dispatched permissionlessly, and refunds any fee if successful.",
                "",
                "If the pool has already migrated to delegation based staking, this call will fail."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 263,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "BondExtra"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "FreeBalance",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Rewards",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 264,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "PoolState"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Open",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Blocked",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Destroying",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 265,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 266,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 267,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 43
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 43,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 268,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "ConfigOp"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Noop",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Set",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "T",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Remove",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 269,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "ClaimPermission"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Permissioned",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PermissionlessCompound",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "PermissionlessWithdraw",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "PermissionlessAll",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 270,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 271
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 271,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 271,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          43,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 272,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "CommissionChangeRate"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_increase",
              "type": 43,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "min_delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 273,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 274
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 274,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 274,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "CommissionClaimPermission"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Permissionless",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Account",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 275,
    "type": {
      "path": [
        "pallet_fast_unstake",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "register_fast_unstake",
              "fields": [],
              "index": 0,
              "docs": [
                "Register oneself for fast-unstake.",
                "",
                "## Dispatch Origin",
                "",
                "The dispatch origin of this call must be *signed* by whoever is permitted to call",
                "unbond funds by the staking system. See [`Config::Staking`].",
                "",
                "## Details",
                "",
                "The stash associated with the origin must have no ongoing unlocking chunks. If",
                "successful, this will fully unbond and chill the stash. Then, it will enqueue the stash",
                "to be checked in further blocks.",
                "",
                "If by the time this is called, the stash is actually eligible for fast-unstake, then",
                "they are guaranteed to remain eligible, because the call will chill them as well.",
                "",
                "If the check works, the entire staking data is removed, i.e. the stash is fully",
                "unstaked.",
                "",
                "If the check fails, the stash remains chilled and waiting for being unbonded as in with",
                "the normal staking system, but they lose part of their unbonding chunks due to consuming",
                "the chain's resources.",
                "",
                "## Events",
                "",
                "Some events from the staking and currency system might be emitted."
              ]
            },
            {
              "name": "deregister",
              "fields": [],
              "index": 1,
              "docs": [
                "Deregister oneself from the fast-unstake.",
                "",
                "## Dispatch Origin",
                "",
                "The dispatch origin of this call must be *signed* by whoever is permitted to call",
                "unbond funds by the staking system. See [`Config::Staking`].",
                "",
                "## Details",
                "",
                "This is useful if one is registered, they are still waiting, and they change their mind.",
                "",
                "Note that the associated stash is still fully unbonded and chilled as a consequence of",
                "calling [`Pallet::register_fast_unstake`]. Therefore, this should probably be followed",
                "by a call to `rebond` in the staking system.",
                "",
                "## Events",
                "",
                "Some events from the staking and currency system might be emitted."
              ]
            },
            {
              "name": "control",
              "fields": [
                {
                  "name": "eras_to_check",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Control the operation of this pallet.",
                "",
                "## Dispatch Origin",
                "",
                "The dispatch origin of this call must be [`Config::ControlOrigin`].",
                "",
                "## Details",
                "",
                "Can set the number of eras to check per block, and potentially other admin work.",
                "",
                "## Events",
                "",
                "No events are emitted from this dispatch."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 276,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "configuration",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "set_validation_upgrade_cooldown",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the validation upgrade cooldown."
              ]
            },
            {
              "name": "set_validation_upgrade_delay",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the validation upgrade delay."
              ]
            },
            {
              "name": "set_code_retention_period",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Set the acceptance period for an included candidate."
              ]
            },
            {
              "name": "set_max_code_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Set the max validation code size for incoming upgrades."
              ]
            },
            {
              "name": "set_max_pov_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Set the max POV block size for incoming upgrades."
              ]
            },
            {
              "name": "set_max_head_data_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set the max head data size for paras."
              ]
            },
            {
              "name": "set_coretime_cores",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Set the number of coretime execution cores.",
                "",
                "NOTE: that this configuration is managed by the coretime chain. Only manually change",
                "this, if you really know what you are doing!"
              ]
            },
            {
              "name": "set_max_availability_timeouts",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Set the max number of times a claim may timeout on a core before it is abandoned"
              ]
            },
            {
              "name": "set_group_rotation_frequency",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the parachain validator-group rotation frequency"
              ]
            },
            {
              "name": "set_paras_availability_period",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Set the availability period for paras."
              ]
            },
            {
              "name": "set_scheduling_lookahead",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Set the scheduling lookahead, in expected number of blocks at peak throughput."
              ]
            },
            {
              "name": "set_max_validators_per_core",
              "fields": [
                {
                  "name": "new",
                  "type": 152,
                  "typeName": "Option<u32>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Set the maximum number of validators to assign to any core."
              ]
            },
            {
              "name": "set_max_validators",
              "fields": [
                {
                  "name": "new",
                  "type": 152,
                  "typeName": "Option<u32>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Set the maximum number of validators to use in parachain consensus."
              ]
            },
            {
              "name": "set_dispute_period",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Set the dispute period, in number of sessions to keep for disputes."
              ]
            },
            {
              "name": "set_dispute_post_conclusion_acceptance_period",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Set the dispute post conclusion acceptance period."
              ]
            },
            {
              "name": "set_no_show_slots",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "Set the no show slots, in number of number of consensus slots.",
                "Must be at least 1."
              ]
            },
            {
              "name": "set_n_delay_tranches",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Set the total number of delay tranches."
              ]
            },
            {
              "name": "set_zeroth_delay_tranche_width",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "Set the zeroth delay tranche width."
              ]
            },
            {
              "name": "set_needed_approvals",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Set the number of validators needed to approve a block."
              ]
            },
            {
              "name": "set_relay_vrf_modulo_samples",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Set the number of samples to do of the `RelayVRFModulo` approval assignment criterion."
              ]
            },
            {
              "name": "set_max_upward_queue_count",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "Sets the maximum items that can present in a upward dispatch queue at once."
              ]
            },
            {
              "name": "set_max_upward_queue_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": [
                "Sets the maximum total size of items that can present in a upward dispatch queue at",
                "once."
              ]
            },
            {
              "name": "set_max_downward_message_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": [
                "Set the critical downward message size."
              ]
            },
            {
              "name": "set_max_upward_message_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 27,
              "docs": [
                "Sets the maximum size of an upward message that can be sent by a candidate."
              ]
            },
            {
              "name": "set_max_upward_message_num_per_candidate",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": [
                "Sets the maximum number of messages that a candidate can contain."
              ]
            },
            {
              "name": "set_hrmp_open_request_ttl",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": [
                "Sets the number of sessions after which an HRMP open channel request expires."
              ]
            },
            {
              "name": "set_hrmp_sender_deposit",
              "fields": [
                {
                  "name": "new",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": [
                "Sets the amount of funds that the sender should provide for opening an HRMP channel."
              ]
            },
            {
              "name": "set_hrmp_recipient_deposit",
              "fields": [
                {
                  "name": "new",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": [
                "Sets the amount of funds that the recipient should provide for accepting opening an HRMP",
                "channel."
              ]
            },
            {
              "name": "set_hrmp_channel_max_capacity",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": [
                "Sets the maximum number of messages allowed in an HRMP channel at once."
              ]
            },
            {
              "name": "set_hrmp_channel_max_total_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": [
                "Sets the maximum total size of messages in bytes allowed in an HRMP channel at once."
              ]
            },
            {
              "name": "set_hrmp_max_parachain_inbound_channels",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": [
                "Sets the maximum number of inbound HRMP channels a parachain is allowed to accept."
              ]
            },
            {
              "name": "set_hrmp_channel_max_message_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": [
                "Sets the maximum size of a message that could ever be put into an HRMP channel."
              ]
            },
            {
              "name": "set_hrmp_max_parachain_outbound_channels",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": [
                "Sets the maximum number of outbound HRMP channels a parachain is allowed to open."
              ]
            },
            {
              "name": "set_hrmp_max_message_num_per_candidate",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": [
                "Sets the maximum number of outbound HRMP messages can be sent by a candidate."
              ]
            },
            {
              "name": "set_pvf_voting_ttl",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": [
                "Set the number of session changes after which a PVF pre-checking voting is rejected."
              ]
            },
            {
              "name": "set_minimum_validation_upgrade_delay",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": [
                "Sets the minimum delay between announcing the upgrade block for a parachain until the",
                "upgrade taking place.",
                "",
                "See the field documentation for information and constraints for the new value."
              ]
            },
            {
              "name": "set_bypass_consistency_check",
              "fields": [
                {
                  "name": "new",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": [
                "Setting this to true will disable consistency checks for the configuration setters.",
                "Use with caution."
              ]
            },
            {
              "name": "set_async_backing_params",
              "fields": [
                {
                  "name": "new",
                  "type": 277,
                  "typeName": "AsyncBackingParams",
                  "docs": []
                }
              ],
              "index": 45,
              "docs": [
                "Set the asynchronous backing parameters."
              ]
            },
            {
              "name": "set_executor_params",
              "fields": [
                {
                  "name": "new",
                  "type": 278,
                  "typeName": "ExecutorParams",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": [
                "Set PVF executor parameters."
              ]
            },
            {
              "name": "set_on_demand_base_fee",
              "fields": [
                {
                  "name": "new",
                  "type": 6,
                  "typeName": "Balance",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": [
                "Set the on demand (parathreads) base fee."
              ]
            },
            {
              "name": "set_on_demand_fee_variability",
              "fields": [
                {
                  "name": "new",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 48,
              "docs": [
                "Set the on demand (parathreads) fee variability."
              ]
            },
            {
              "name": "set_on_demand_queue_max_size",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 49,
              "docs": [
                "Set the on demand (parathreads) queue max size."
              ]
            },
            {
              "name": "set_on_demand_target_queue_utilization",
              "fields": [
                {
                  "name": "new",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 50,
              "docs": [
                "Set the on demand (parathreads) fee variability."
              ]
            },
            {
              "name": "set_on_demand_ttl",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": [
                "Set the on demand (parathreads) ttl in the claimqueue."
              ]
            },
            {
              "name": "set_minimum_backing_votes",
              "fields": [
                {
                  "name": "new",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 52,
              "docs": [
                "Set the minimum backing votes threshold."
              ]
            },
            {
              "name": "set_node_feature",
              "fields": [
                {
                  "name": "index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": [
                "Set/Unset a node feature."
              ]
            },
            {
              "name": "set_approval_voting_params",
              "fields": [
                {
                  "name": "new",
                  "type": 283,
                  "typeName": "ApprovalVotingParams",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": [
                "Set approval-voting-params."
              ]
            },
            {
              "name": "set_scheduler_params",
              "fields": [
                {
                  "name": "new",
                  "type": 284,
                  "typeName": "SchedulerParams<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 55,
              "docs": [
                "Set scheduler-params."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 277,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "async_backing",
        "AsyncBackingParams"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_candidate_depth",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "allowed_ancestry_len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 278,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "executor_params",
        "ExecutorParams"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 279,
              "typeName": "Vec<ExecutorParam>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 279,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 280
        }
      },
      "docs": []
    }
  },
  {
    "id": 280,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "executor_params",
        "ExecutorParam"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MaxMemoryPages",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "StackLogicalMax",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "StackNativeMax",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PrecheckingMaxMemory",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "PvfPrepTimeout",
              "fields": [
                {
                  "name": null,
                  "type": 281,
                  "typeName": "PvfPrepKind",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "PvfExecTimeout",
              "fields": [
                {
                  "name": null,
                  "type": 282,
                  "typeName": "PvfExecKind",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "WasmExtBulkMemory",
              "fields": [],
              "index": 7,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 281,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "PvfPrepKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Precheck",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Prepare",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 282,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "PvfExecKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Backing",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Approval",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 283,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "ApprovalVotingParams"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_approval_coalesce_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 284,
    "type": {
      "path": [
        "polkadot_primitives",
        "vstaging",
        "SchedulerParams"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "group_rotation_frequency",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "paras_availability_period",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "max_validators_per_core",
              "type": 152,
              "typeName": "Option<u32>",
              "docs": []
            },
            {
              "name": "lookahead",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "num_cores",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_availability_timeouts",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "on_demand_queue_max_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "on_demand_target_queue_utilization",
              "type": 43,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "on_demand_fee_variability",
              "type": 43,
              "typeName": "Perbill",
              "docs": []
            },
            {
              "name": "on_demand_base_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "ttl",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 285,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "shared",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 286,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "inclusion",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": []
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 287,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras_inherent",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "enter",
              "fields": [
                {
                  "name": "data",
                  "type": 288,
                  "typeName": "ParachainsInherentData<HeaderFor<T>>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Enter the paras inherent. This will process bitfields and backed candidates."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 288,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "InherentData"
      ],
      "params": [
        {
          "name": "HDR",
          "type": 104
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "bitfields",
              "type": 289,
              "typeName": "UncheckedSignedAvailabilityBitfields",
              "docs": []
            },
            {
              "name": "backed_candidates",
              "type": 296,
              "typeName": "Vec<BackedCandidate<HDR::Hash>>",
              "docs": []
            },
            {
              "name": "disputes",
              "type": 313,
              "typeName": "MultiDisputeStatementSet",
              "docs": []
            },
            {
              "name": "parent_header",
              "type": 104,
              "typeName": "HDR",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 289,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 290
        }
      },
      "docs": []
    }
  },
  {
    "id": 290,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "signed",
        "UncheckedSigned"
      ],
      "params": [
        {
          "name": "Payload",
          "type": 291
        },
        {
          "name": "RealPayload",
          "type": 291
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "payload",
              "type": 291,
              "typeName": "Payload",
              "docs": []
            },
            {
              "name": "validator_index",
              "type": 294,
              "typeName": "ValidatorIndex",
              "docs": []
            },
            {
              "name": "signature",
              "type": 295,
              "typeName": "ValidatorSignature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 291,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "AvailabilityBitfield"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 292,
              "typeName": "BitVec<u8, bitvec::order::Lsb0>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 292,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "bitSequence": {
          "bitStoreType": 2,
          "bitOrderType": 293
        }
      },
      "docs": []
    }
  },
  {
    "id": 293,
    "type": {
      "path": [
        "bitvec",
        "order",
        "Lsb0"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 294,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "ValidatorIndex"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 295,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "validator_app",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 146,
              "typeName": "sr25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 296,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 297
        }
      },
      "docs": []
    }
  },
  {
    "id": 297,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "BackedCandidate"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "candidate",
              "type": 298,
              "typeName": "CommittedCandidateReceipt<H>",
              "docs": []
            },
            {
              "name": "validity_votes",
              "type": 311,
              "typeName": "Vec<ValidityAttestation>",
              "docs": []
            },
            {
              "name": "validator_indices",
              "type": 292,
              "typeName": "BitVec<u8, bitvec::order::Lsb0>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 298,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "CommittedCandidateReceipt"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "descriptor",
              "type": 299,
              "typeName": "CandidateDescriptor<H>",
              "docs": []
            },
            {
              "name": "commitments",
              "type": 303,
              "typeName": "CandidateCommitments",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 299,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "CandidateDescriptor"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "para_id",
              "type": 163,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "relay_parent",
              "type": 13,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "collator",
              "type": 300,
              "typeName": "CollatorId",
              "docs": []
            },
            {
              "name": "persisted_validation_data_hash",
              "type": 13,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "pov_hash",
              "type": 13,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "erasure_root",
              "type": 13,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "signature",
              "type": 301,
              "typeName": "CollatorSignature",
              "docs": []
            },
            {
              "name": "para_head",
              "type": 13,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "validation_code_hash",
              "type": 302,
              "typeName": "ValidationCodeHash",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 300,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "collator_app",
        "Public"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 1,
              "typeName": "sr25519::Public",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 301,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "collator_app",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 146,
              "typeName": "sr25519::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 302,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "ValidationCodeHash"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 13,
              "typeName": "Hash",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 303,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "CandidateCommitments"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "upward_messages",
              "type": 304,
              "typeName": "UpwardMessages",
              "docs": []
            },
            {
              "name": "horizontal_messages",
              "type": 305,
              "typeName": "HorizontalMessages",
              "docs": []
            },
            {
              "name": "new_validation_code",
              "type": 308,
              "typeName": "Option<ValidationCode>",
              "docs": []
            },
            {
              "name": "head_data",
              "type": 310,
              "typeName": "HeadData",
              "docs": []
            },
            {
              "name": "processed_downward_messages",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_watermark",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 304,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 14
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 97,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 305,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 306
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 307,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 306,
    "type": {
      "path": [
        "polkadot_core_primitives",
        "OutboundHrmpMessage"
      ],
      "params": [
        {
          "name": "Id",
          "type": 163
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "recipient",
              "type": 163,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "data",
              "type": 14,
              "typeName": "sp_std::vec::Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 307,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 306
        }
      },
      "docs": []
    }
  },
  {
    "id": 308,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 309
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 309,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 309,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "ValidationCode"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 310,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "HeadData"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 311,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 312
        }
      },
      "docs": []
    }
  },
  {
    "id": 312,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "ValidityAttestation"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Implicit",
              "fields": [
                {
                  "name": null,
                  "type": 295,
                  "typeName": "ValidatorSignature",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Explicit",
              "fields": [
                {
                  "name": null,
                  "type": 295,
                  "typeName": "ValidatorSignature",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 313,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 314
        }
      },
      "docs": []
    }
  },
  {
    "id": 314,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "DisputeStatementSet"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "candidate_hash",
              "type": 315,
              "typeName": "CandidateHash",
              "docs": []
            },
            {
              "name": "session",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "statements",
              "type": 316,
              "typeName": "Vec<(DisputeStatement, ValidatorIndex, ValidatorSignature)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 315,
    "type": {
      "path": [
        "polkadot_core_primitives",
        "CandidateHash"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 13,
              "typeName": "Hash",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 316,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 317
        }
      },
      "docs": []
    }
  },
  {
    "id": 317,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          318,
          294,
          295
        ]
      },
      "docs": []
    }
  },
  {
    "id": 318,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "DisputeStatement"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Valid",
              "fields": [
                {
                  "name": null,
                  "type": 319,
                  "typeName": "ValidDisputeStatementKind",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Invalid",
              "fields": [
                {
                  "name": null,
                  "type": 321,
                  "typeName": "InvalidDisputeStatementKind",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 319,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "ValidDisputeStatementKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Explicit",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "BackingSeconded",
              "fields": [
                {
                  "name": null,
                  "type": 13,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "BackingValid",
              "fields": [
                {
                  "name": null,
                  "type": 13,
                  "typeName": "Hash",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "ApprovalChecking",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "ApprovalCheckingMultipleCandidates",
              "fields": [
                {
                  "name": null,
                  "type": 320,
                  "typeName": "Vec<CandidateHash>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 320,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 315
        }
      },
      "docs": []
    }
  },
  {
    "id": 321,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "InvalidDisputeStatementKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Explicit",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 322,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "force_set_current_code",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "new_code",
                  "type": 309,
                  "typeName": "ValidationCode",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Set the storage for the parachain validation code immediately."
              ]
            },
            {
              "name": "force_set_current_head",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "new_head",
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Set the storage for the current parachain head data immediately."
              ]
            },
            {
              "name": "force_schedule_code_upgrade",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "new_code",
                  "type": 309,
                  "typeName": "ValidationCode",
                  "docs": []
                },
                {
                  "name": "relay_parent_number",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Schedule an upgrade as if it was scheduled in the given relay parent block."
              ]
            },
            {
              "name": "force_note_new_head",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "new_head",
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Note a new block head for para within the context of the current block."
              ]
            },
            {
              "name": "force_queue_action",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Put a parachain directly into the next session's action queue.",
                "We can't queue it any sooner than this without going into the",
                "initializer..."
              ]
            },
            {
              "name": "add_trusted_validation_code",
              "fields": [
                {
                  "name": "validation_code",
                  "type": 309,
                  "typeName": "ValidationCode",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Adds the validation code to the storage.",
                "",
                "The code will not be added if it is already present. Additionally, if PVF pre-checking",
                "is running for that code, it will be instantly accepted.",
                "",
                "Otherwise, the code will be added into the storage. Note that the code will be added",
                "into storage with reference count 0. This is to account the fact that there are no users",
                "for this code yet. The caller will have to make sure that this code eventually gets",
                "used by some parachain or removed from the storage to avoid storage leaks. For the",
                "latter prefer to use the `poke_unused_validation_code` dispatchable to raw storage",
                "manipulation.",
                "",
                "This function is mainly meant to be used for upgrading parachains that do not follow",
                "the go-ahead signal while the PVF pre-checking feature is enabled."
              ]
            },
            {
              "name": "poke_unused_validation_code",
              "fields": [
                {
                  "name": "validation_code_hash",
                  "type": 302,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Remove the validation code from the storage iff the reference count is 0.",
                "",
                "This is better than removing the storage directly, because it will not remove the code",
                "that was suddenly got used by some parachain while this dispatchable was pending",
                "dispatching."
              ]
            },
            {
              "name": "include_pvf_check_statement",
              "fields": [
                {
                  "name": "stmt",
                  "type": 323,
                  "typeName": "PvfCheckStatement",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 295,
                  "typeName": "ValidatorSignature",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Includes a statement for a PVF pre-checking vote. Potentially, finalizes the vote and",
                "enacts the results if that was the last vote before achieving the supermajority."
              ]
            },
            {
              "name": "force_set_most_recent_context",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "context",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the storage for the current parachain head data immediately."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 323,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "PvfCheckStatement"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "accept",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "subject",
              "type": 302,
              "typeName": "ValidationCodeHash",
              "docs": []
            },
            {
              "name": "session_index",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "validator_index",
              "type": 294,
              "typeName": "ValidatorIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 324,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "initializer",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "force_approve",
              "fields": [
                {
                  "name": "up_to",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Issue a signal to the consensus engine to forcibly act as though all parachain",
                "blocks in all relay chain blocks up to and including the given number in the current",
                "chain are valid and should be finalized."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 325,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "hrmp",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "hrmp_init_open_channel",
              "fields": [
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "proposed_max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "proposed_max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Initiate opening a channel from a parachain to a given recipient with given channel",
                "parameters.",
                "",
                "- `proposed_max_capacity` - specifies how many messages can be in the channel at once.",
                "- `proposed_max_message_size` - specifies the maximum size of the messages.",
                "",
                "These numbers are a subject to the relay-chain configuration limits.",
                "",
                "The channel can be opened only after the recipient confirms it and only on a session",
                "change."
              ]
            },
            {
              "name": "hrmp_accept_open_channel",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Accept a pending open channel request from the given sender.",
                "",
                "The channel will be opened only on the next session boundary."
              ]
            },
            {
              "name": "hrmp_close_channel",
              "fields": [
                {
                  "name": "channel_id",
                  "type": 326,
                  "typeName": "HrmpChannelId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Initiate unilateral closing of a channel. The origin must be either the sender or the",
                "recipient in the channel being closed.",
                "",
                "The closure can only happen on a session change."
              ]
            },
            {
              "name": "force_clean_hrmp",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "num_inbound",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "num_outbound",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "This extrinsic triggers the cleanup of all the HRMP storage items that a para may have.",
                "Normally this happens once per session, but this allows you to trigger the cleanup",
                "immediately for a specific parachain.",
                "",
                "Number of inbound and outbound channels for `para` must be provided as witness data.",
                "",
                "Origin must be the `ChannelManager`."
              ]
            },
            {
              "name": "force_process_hrmp_open",
              "fields": [
                {
                  "name": "channels",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Force process HRMP open channel requests.",
                "",
                "If there are pending HRMP open channel requests, you can use this function to process",
                "all of those requests immediately.",
                "",
                "Total number of opening channels must be provided as witness data.",
                "",
                "Origin must be the `ChannelManager`."
              ]
            },
            {
              "name": "force_process_hrmp_close",
              "fields": [
                {
                  "name": "channels",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Force process HRMP close channel requests.",
                "",
                "If there are pending HRMP close channel requests, you can use this function to process",
                "all of those requests immediately.",
                "",
                "Total number of closing channels must be provided as witness data.",
                "",
                "Origin must be the `ChannelManager`."
              ]
            },
            {
              "name": "hrmp_cancel_open_request",
              "fields": [
                {
                  "name": "channel_id",
                  "type": 326,
                  "typeName": "HrmpChannelId",
                  "docs": []
                },
                {
                  "name": "open_requests",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "This cancels a pending open channel request. It can be canceled by either of the sender",
                "or the recipient for that request. The origin must be either of those.",
                "",
                "The cancellation happens immediately. It is not possible to cancel the request if it is",
                "already accepted.",
                "",
                "Total number of open requests (i.e. `HrmpOpenChannelRequestsList`) must be provided as",
                "witness data."
              ]
            },
            {
              "name": "force_open_hrmp_channel",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Open a channel from a `sender` to a `recipient` `ParaId`. Although opened by governance,",
                "the `max_capacity` and `max_message_size` are still subject to the Relay Chain's",
                "configured limits.",
                "",
                "Expected use is when one (and only one) of the `ParaId`s involved in the channel is",
                "governed by the system, e.g. a system parachain.",
                "",
                "Origin must be the `ChannelManager`."
              ]
            },
            {
              "name": "establish_system_channel",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Establish an HRMP channel between two system chains. If the channel does not already",
                "exist, the transaction fees will be refunded to the caller. The system does not take",
                "deposits for channels between system chains, and automatically sets the message number",
                "and size limits to the maximum allowed by the network's configuration.",
                "",
                "Arguments:",
                "",
                "- `sender`: A system chain, `ParaId`.",
                "- `recipient`: A system chain, `ParaId`.",
                "",
                "Any signed origin can call this function, but _both_ inputs MUST be system chains. If",
                "the channel does not exist yet, there is no fee."
              ]
            },
            {
              "name": "poke_channel_deposits",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Update the deposits held for an HRMP channel to the latest `Configuration`. Channels",
                "with system chains do not require a deposit.",
                "",
                "Arguments:",
                "",
                "- `sender`: A chain, `ParaId`.",
                "- `recipient`: A chain, `ParaId`.",
                "",
                "Any signed origin can call this function."
              ]
            },
            {
              "name": "establish_channel_with_system",
              "fields": [
                {
                  "name": "target_system_chain",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Establish a bidirectional HRMP channel between a parachain and a system chain.",
                "",
                "Arguments:",
                "",
                "- `target_system_chain`: A system chain, `ParaId`.",
                "",
                "The origin needs to be the parachain origin."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 326,
    "type": {
      "path": [
        "polkadot_parachain_primitives",
        "primitives",
        "HrmpChannelId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "sender",
              "type": 163,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "recipient",
              "type": 163,
              "typeName": "Id",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 327,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "disputes",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "force_unfreeze",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 328,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "disputes",
        "slashing",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_dispute_lost_unsigned",
              "fields": [
                {
                  "name": "dispute_proof",
                  "type": 329,
                  "typeName": "Box<DisputeProof>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 107,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 329,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "slashing",
        "DisputeProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "time_slot",
              "type": 330,
              "typeName": "DisputesTimeSlot",
              "docs": []
            },
            {
              "name": "kind",
              "type": 331,
              "typeName": "SlashingOffenceKind",
              "docs": []
            },
            {
              "name": "validator_index",
              "type": 294,
              "typeName": "ValidatorIndex",
              "docs": []
            },
            {
              "name": "validator_id",
              "type": 135,
              "typeName": "ValidatorId",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 330,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "slashing",
        "DisputesTimeSlot"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "session_index",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "candidate_hash",
              "type": 315,
              "typeName": "CandidateHash",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 331,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "slashing",
        "SlashingOffenceKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ForInvalid",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AgainstValid",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 332,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "place_order_allow_death",
              "fields": [
                {
                  "name": "max_amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Create a single on demand core order.",
                "Will use the spot price for the current block and will reap the account if needed.",
                "",
                "Parameters:",
                "- `origin`: The sender of the call, funds will be withdrawn from this account.",
                "- `max_amount`: The maximum balance to withdraw from the origin to place an order.",
                "- `para_id`: A `ParaId` the origin wants to provide blockspace for.",
                "",
                "Errors:",
                "- `InsufficientBalance`: from the Currency implementation",
                "- `QueueFull`",
                "- `SpotPriceHigherThanMaxAmount`",
                "",
                "Events:",
                "- `OnDemandOrderPlaced`"
              ]
            },
            {
              "name": "place_order_keep_alive",
              "fields": [
                {
                  "name": "max_amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Same as the [`place_order_allow_death`](Self::place_order_allow_death) call , but with a",
                "check that placing the order will not reap the account.",
                "",
                "Parameters:",
                "- `origin`: The sender of the call, funds will be withdrawn from this account.",
                "- `max_amount`: The maximum balance to withdraw from the origin to place an order.",
                "- `para_id`: A `ParaId` the origin wants to provide blockspace for.",
                "",
                "Errors:",
                "- `InsufficientBalance`: from the Currency implementation",
                "- `QueueFull`",
                "- `SpotPriceHigherThanMaxAmount`",
                "",
                "Events:",
                "- `OnDemandOrderPlaced`"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 333,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "paras_registrar",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "register",
              "fields": [
                {
                  "name": "id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "genesis_head",
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "validation_code",
                  "type": 309,
                  "typeName": "ValidationCode",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Register head data and validation code for a reserved Para Id.",
                "",
                "## Arguments",
                "- `origin`: Must be called by a `Signed` origin.",
                "- `id`: The para ID. Must be owned/managed by the `origin` signing account.",
                "- `genesis_head`: The genesis head data of the parachain/thread.",
                "- `validation_code`: The initial validation code of the parachain/thread.",
                "",
                "## Deposits/Fees",
                "The account with the originating signature must reserve a deposit.",
                "",
                "The deposit is required to cover the costs associated with storing the genesis head",
                "data and the validation code.",
                "This accounts for the potential to store validation code of a size up to the",
                "`max_code_size`, as defined in the configuration pallet",
                "",
                "Anything already reserved previously for this para ID is accounted for.",
                "",
                "## Events",
                "The `Registered` event is emitted in case of success."
              ]
            },
            {
              "name": "force_register",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "deposit",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "genesis_head",
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": "validation_code",
                  "type": 309,
                  "typeName": "ValidationCode",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Force the registration of a Para Id on the relay chain.",
                "",
                "This function must be called by a Root origin.",
                "",
                "The deposit taken can be specified for this registration. Any `ParaId`",
                "can be registered, including sub-1000 IDs which are System Parachains."
              ]
            },
            {
              "name": "deregister",
              "fields": [
                {
                  "name": "id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Deregister a Para Id, freeing all data and returning any deposit.",
                "",
                "The caller must be Root, the `para` owner, or the `para` itself. The para must be an",
                "on-demand parachain."
              ]
            },
            {
              "name": "swap",
              "fields": [
                {
                  "name": "id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "other",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Swap a lease holding parachain with another parachain, either on-demand or lease",
                "holding.",
                "",
                "The origin must be Root, the `para` owner, or the `para` itself.",
                "",
                "The swap will happen only if there is already an opposite swap pending. If there is not,",
                "the swap will be stored in the pending swaps map, ready for a later confirmatory swap.",
                "",
                "The `ParaId`s remain mapped to the same head data and code so external code can rely on",
                "`ParaId` to be a long-term identifier of a notional \"parachain\". However, their",
                "scheduling info (i.e. whether they're an on-demand parachain or lease holding",
                "parachain), auction information and the auction deposit are switched."
              ]
            },
            {
              "name": "remove_lock",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Remove a manager lock from a para. This will allow the manager of a",
                "previously locked para to deregister or swap a para without using governance.",
                "",
                "Can only be called by the Root origin or the parachain."
              ]
            },
            {
              "name": "reserve",
              "fields": [],
              "index": 5,
              "docs": [
                "Reserve a Para Id on the relay chain.",
                "",
                "This function will reserve a new Para Id to be owned/managed by the origin account.",
                "The origin account is able to register head data and validation code using `register` to",
                "create an on-demand parachain. Using the Slots pallet, an on-demand parachain can then",
                "be upgraded to a lease holding parachain.",
                "",
                "## Arguments",
                "- `origin`: Must be called by a `Signed` origin. Becomes the manager/owner of the new",
                "  para ID.",
                "",
                "## Deposits/Fees",
                "The origin must reserve a deposit of `ParaDeposit` for the registration.",
                "",
                "## Events",
                "The `Reserved` event is emitted in case of success, which provides the ID reserved for",
                "use."
              ]
            },
            {
              "name": "add_lock",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Add a manager lock from a para. This will prevent the manager of a",
                "para to deregister or swap a para.",
                "",
                "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                "unlocked."
              ]
            },
            {
              "name": "schedule_code_upgrade",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "new_code",
                  "type": 309,
                  "typeName": "ValidationCode",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Schedule a parachain upgrade.",
                "",
                "This will kick off a check of `new_code` by all validators. After the majority of the",
                "validators have reported on the validity of the code, the code will either be enacted",
                "or the upgrade will be rejected. If the code will be enacted, the current code of the",
                "parachain will be overwritten directly. This means that any PoV will be checked by this",
                "new code. The parachain itself will not be informed explicitly that the validation code",
                "has changed.",
                "",
                "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                "unlocked."
              ]
            },
            {
              "name": "set_current_head",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "new_head",
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Set the parachain's current head.",
                "",
                "Can be called by Root, the parachain, or the parachain manager if the parachain is",
                "unlocked."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 334,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "slots",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "force_lease",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "leaser",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "period_begin",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "period_count",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Just a connect into the `lease_out` call, in case Root wants to force some lease to",
                "happen independently of any other on-chain mechanism to use it.",
                "",
                "The dispatch origin for this call must match `T::ForceOrigin`."
              ]
            },
            {
              "name": "clear_all_leases",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Clear all leases for a Para Id, refunding any deposits back to the original owners.",
                "",
                "The dispatch origin for this call must match `T::ForceOrigin`."
              ]
            },
            {
              "name": "trigger_onboard",
              "fields": [
                {
                  "name": "para",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Try to onboard a parachain that has a lease for the current lease period.",
                "",
                "This function can be useful if there was some state issue with a para that should",
                "have onboarded, but was unable to. As long as they have a lease period, we can",
                "let them onboard from here.",
                "",
                "Origin must be signed, but can be called by anyone."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 335,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "auctions",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "new_auction",
              "fields": [
                {
                  "name": "duration",
                  "type": 59,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "lease_period_index",
                  "type": 59,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Create a new auction.",
                "",
                "This can only happen when there isn't already an auction in progress and may only be",
                "called by the root origin. Accepts the `duration` of this auction and the",
                "`lease_period_index` of the initial lease period of the four that are to be auctioned."
              ]
            },
            {
              "name": "bid",
              "fields": [
                {
                  "name": "para",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "auction_index",
                  "type": 59,
                  "typeName": "AuctionIndex",
                  "docs": []
                },
                {
                  "name": "first_slot",
                  "type": 59,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "last_slot",
                  "type": 59,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Make a new bid from an account (including a parachain account) for deploying a new",
                "parachain.",
                "",
                "Multiple simultaneous bids from the same bidder are allowed only as long as all active",
                "bids overlap each other (i.e. are mutually exclusive). Bids cannot be redacted.",
                "",
                "- `sub` is the sub-bidder ID, allowing for multiple competing bids to be made by (and",
                "funded by) the same account.",
                "- `auction_index` is the index of the auction to bid on. Should just be the present",
                "value of `AuctionCounter`.",
                "- `first_slot` is the first lease period index of the range to bid on. This is the",
                "absolute lease period index value, not an auction-specific offset.",
                "- `last_slot` is the last lease period index of the range to bid on. This is the",
                "absolute lease period index value, not an auction-specific offset.",
                "- `amount` is the amount to bid to be held as deposit for the parachain should the",
                "bid win. This amount is held throughout the range."
              ]
            },
            {
              "name": "cancel_auction",
              "fields": [],
              "index": 2,
              "docs": [
                "Cancel an in-progress auction.",
                "",
                "Can only be called by Root origin."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 336,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "compact": {
          "type": 163
        }
      },
      "docs": []
    }
  },
  {
    "id": 337,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "crowdloan",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "index",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "cap",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "first_period",
                  "type": 59,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "last_period",
                  "type": 59,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 59,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "verifier",
                  "type": 338,
                  "typeName": "Option<MultiSigner>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Create a new crowdloaning campaign for a parachain slot with the given lease period",
                "range.",
                "",
                "This applies a lock to your parachain configuration, ensuring that it cannot be changed",
                "by the parachain manager."
              ]
            },
            {
              "name": "contribute",
              "fields": [
                {
                  "name": "index",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 340,
                  "typeName": "Option<MultiSignature>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Contribute to a crowd sale. This will transfer some balance over to fund a parachain",
                "slot. It will be withdrawable when the crowdloan has ended and the funds are unused."
              ]
            },
            {
              "name": "withdraw",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Withdraw full balance of a specific contributor.",
                "",
                "Origin must be signed, but can come from anyone.",
                "",
                "The fund must be either in, or ready for, retirement. For a fund to be *in* retirement,",
                "then the retirement flag must be set. For a fund to be ready for retirement, then:",
                "- it must not already be in retirement;",
                "- the amount of raised funds must be bigger than the _free_ balance of the account;",
                "- and either:",
                "  - the block number must be at least `end`; or",
                "  - the current lease period must be greater than the fund's `last_period`.",
                "",
                "In this case, the fund's retirement flag is set and its `end` is reset to the current",
                "block number.",
                "",
                "- `who`: The account whose contribution should be withdrawn.",
                "- `index`: The parachain to whose crowdloan the contribution was made."
              ]
            },
            {
              "name": "refund",
              "fields": [
                {
                  "name": "index",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Automatically refund contributors of an ended crowdloan.",
                "Due to weight restrictions, this function may need to be called multiple",
                "times to fully refund all users. We will refund `RemoveKeysLimit` users at a time.",
                "",
                "Origin must be signed, but can come from anyone."
              ]
            },
            {
              "name": "dissolve",
              "fields": [
                {
                  "name": "index",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Remove a fund after the retirement period has ended and all funds have been returned."
              ]
            },
            {
              "name": "edit",
              "fields": [
                {
                  "name": "index",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "cap",
                  "type": 63,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "first_period",
                  "type": 59,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "last_period",
                  "type": 59,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 59,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "verifier",
                  "type": 338,
                  "typeName": "Option<MultiSigner>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Edit the configuration for an in-progress crowdloan.",
                "",
                "Can only be called by Root origin."
              ]
            },
            {
              "name": "add_memo",
              "fields": [
                {
                  "name": "index",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "memo",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Add an optional memo to an existing crowdloan contribution.",
                "",
                "Origin must be Signed, and the user must have contributed to the crowdloan."
              ]
            },
            {
              "name": "poke",
              "fields": [
                {
                  "name": "index",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Poke the fund into `NewRaise`",
                "",
                "Origin must be Signed, and the fund has non-zero raise."
              ]
            },
            {
              "name": "contribute_all",
              "fields": [
                {
                  "name": "index",
                  "type": 336,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "signature",
                  "type": 340,
                  "typeName": "Option<MultiSignature>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Contribute your entire balance to a crowd sale. This will transfer the entire balance of",
                "a user over to fund a parachain slot. It will be withdrawable when the crowdloan has",
                "ended and the funds are unused."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 338,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 339
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 339,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 339,
    "type": {
      "path": [
        "sp_runtime",
        "MultiSigner"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ed25519",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "ed25519::Public",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sr25519",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "sr25519::Public",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ecdsa",
              "fields": [
                {
                  "name": null,
                  "type": 139,
                  "typeName": "ecdsa::Public",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 340,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 341
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 341,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 341,
    "type": {
      "path": [
        "sp_runtime",
        "MultiSignature"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ed25519",
              "fields": [
                {
                  "name": null,
                  "type": 146,
                  "typeName": "ed25519::Signature",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Sr25519",
              "fields": [
                {
                  "name": null,
                  "type": 146,
                  "typeName": "sr25519::Signature",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ecdsa",
              "fields": [
                {
                  "name": null,
                  "type": 182,
                  "typeName": "ecdsa::Signature",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 342,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "coretime",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "request_core_count",
              "fields": [
                {
                  "name": "count",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Request the configuration to be updated with the specified number of cores. Warning:",
                "Since this only schedules a configuration update, it takes two sessions to come into",
                "effect.",
                "",
                "- `origin`: Root or the Coretime Chain",
                "- `count`: total number of cores"
              ]
            },
            {
              "name": "request_revenue_at",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Request to claim the instantaneous coretime sales revenue starting from the block it was",
                "last claimed until and up to the block specified. The claimed amount value is sent back",
                "to the Coretime chain in a `notify_revenue` message. At the same time, the amount is",
                "teleported to the Coretime chain."
              ]
            },
            {
              "name": "assign_core",
              "fields": [
                {
                  "name": "core",
                  "type": 91,
                  "typeName": "BrokerCoreIndex",
                  "docs": []
                },
                {
                  "name": "begin",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                },
                {
                  "name": "assignment",
                  "type": 343,
                  "typeName": "Vec<(CoreAssignment, PartsOf57600)>",
                  "docs": []
                },
                {
                  "name": "end_hint",
                  "type": 152,
                  "typeName": "Option<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Receive instructions from the `ExternalBrokerOrigin`, detailing how a specific core is",
                "to be used.",
                "",
                "Parameters:",
                "-`origin`: The `ExternalBrokerOrigin`, assumed to be the coretime chain.",
                "-`core`: The core that should be scheduled.",
                "-`begin`: The starting blockheight of the instruction.",
                "-`assignment`: How the blockspace should be utilised.",
                "-`end_hint`: An optional hint as to when this particular set of instructions will end."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 343,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 344
        }
      },
      "docs": []
    }
  },
  {
    "id": 344,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          345,
          346
        ]
      },
      "docs": []
    }
  },
  {
    "id": 345,
    "type": {
      "path": [
        "pallet_broker",
        "coretime_interface",
        "CoreAssignment"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Idle",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Pool",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Task",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "TaskId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 346,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_coretime",
        "PartsOf57600"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 91,
              "typeName": "u16",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 347,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "control_auto_migration",
              "fields": [
                {
                  "name": "maybe_config",
                  "type": 348,
                  "typeName": "Option<MigrationLimits>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Control the automatic migration.",
                "",
                "The dispatch origin of this call must be [`Config::ControlOrigin`]."
              ]
            },
            {
              "name": "continue_migrate",
              "fields": [
                {
                  "name": "limits",
                  "type": 349,
                  "typeName": "MigrationLimits",
                  "docs": []
                },
                {
                  "name": "real_size_upper",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "witness_task",
                  "type": 350,
                  "typeName": "MigrationTask<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Continue the migration for the given `limits`.",
                "",
                "The dispatch origin of this call can be any signed account.",
                "",
                "This transaction has NO MONETARY INCENTIVES. calling it will not reward anyone. Albeit,",
                "Upon successful execution, the transaction fee is returned.",
                "",
                "The (potentially over-estimated) of the byte length of all the data read must be",
                "provided for up-front fee-payment and weighing. In essence, the caller is guaranteeing",
                "that executing the current `MigrationTask` with the given `limits` will not exceed",
                "`real_size_upper` bytes of read data.",
                "",
                "The `witness_task` is merely a helper to prevent the caller from being slashed or",
                "generally trigger a migration that they do not intend. This parameter is just a message",
                "from caller, saying that they believed `witness_task` was the last state of the",
                "migration, and they only wish for their transaction to do anything, if this assumption",
                "holds. In case `witness_task` does not match, the transaction fails.",
                "",
                "Based on the documentation of [`MigrationTask::migrate_until_exhaustion`], the",
                "recommended way of doing this is to pass a `limit` that only bounds `count`, as the",
                "`size` limit can always be overwritten."
              ]
            },
            {
              "name": "migrate_custom_top",
              "fields": [
                {
                  "name": "keys",
                  "type": 97,
                  "typeName": "Vec<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "witness_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Migrate the list of top keys by iterating each of them one by one.",
                "",
                "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                "should only be used in case any keys are leftover due to a bug."
              ]
            },
            {
              "name": "migrate_custom_child",
              "fields": [
                {
                  "name": "root",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "child_keys",
                  "type": 97,
                  "typeName": "Vec<Vec<u8>>",
                  "docs": []
                },
                {
                  "name": "total_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Migrate the list of child keys by iterating each of them one by one.",
                "",
                "All of the given child keys must be present under one `child_root`.",
                "",
                "This does not affect the global migration process tracker ([`MigrationProcess`]), and",
                "should only be used in case any keys are leftover due to a bug."
              ]
            },
            {
              "name": "set_signed_max_limits",
              "fields": [
                {
                  "name": "limits",
                  "type": 349,
                  "typeName": "MigrationLimits",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Set the maximum limit of the signed migration."
              ]
            },
            {
              "name": "force_set_progress",
              "fields": [
                {
                  "name": "progress_top",
                  "type": 351,
                  "typeName": "ProgressOf<T>",
                  "docs": []
                },
                {
                  "name": "progress_child",
                  "type": 351,
                  "typeName": "ProgressOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Forcefully set the progress the running migration.",
                "",
                "This is only useful in one case: the next key to migrate is too big to be migrated with",
                "a signed account, in a parachain context, and we simply want to skip it. A reasonable",
                "example of this would be `:code:`, which is both very expensive to migrate, and commonly",
                "used, so probably it is already migrated.",
                "",
                "In case you mess things up, you can also, in principle, use this to reset the migration",
                "process."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 348,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 349
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 349,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 349,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "MigrationLimits"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "item",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 350,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "MigrationTask"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "progress_top",
              "type": 351,
              "typeName": "ProgressOf<T>",
              "docs": []
            },
            {
              "name": "progress_child",
              "type": 351,
              "typeName": "ProgressOf<T>",
              "docs": []
            },
            {
              "name": "size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "top_items",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "child_items",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 351,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "Progress"
      ],
      "params": [
        {
          "name": "MaxKeyLen",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ToStart",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "LastKey",
              "fields": [
                {
                  "name": null,
                  "type": 352,
                  "typeName": "BoundedVec<u8, MaxKeyLen>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Complete",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 352,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 353,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "send",
              "fields": [
                {
                  "name": "dest",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "message",
                  "type": 354,
                  "typeName": "Box<VersionedXcm<()>>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "teleport_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Teleport some assets from the local chain to some destination chain.",
                "",
                "**This function is deprecated: Use `limited_teleport_assets` instead.**",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` chain.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees."
              ]
            },
            {
              "name": "reserve_transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Transfer some assets from the local chain to the destination chain through their local,",
                "destination or remote reserve.",
                "",
                "`assets` must have same reserve location and may not be teleportable to `dest`.",
                " - `assets` have local reserve: transfer assets to sovereign account of destination",
                "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                "   assets to `beneficiary`.",
                " - `assets` have destination reserve: burn local assets and forward a notification to",
                "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                "   deposit them to `beneficiary`.",
                " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                "   to mint and deposit reserve-based assets to `beneficiary`.",
                "",
                "**This function is deprecated: Use `limited_reserve_transfer_assets` instead.**",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`. The weight limit for fees is not provided and thus is unlimited,",
                "with all fees taken as needed from the asset.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees."
              ]
            },
            {
              "name": "execute",
              "fields": [
                {
                  "name": "message",
                  "type": 419,
                  "typeName": "Box<VersionedXcm<<T as Config>::RuntimeCall>>",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Execute an XCM message from a local, signed, origin.",
                "",
                "An event is deposited indicating whether `msg` could be executed completely or only",
                "partially.",
                "",
                "No more than `max_weight` will be used in its attempted execution. If this is less than",
                "the maximum amount of weight that the message could take to be executed, then no",
                "execution attempt will be made."
              ]
            },
            {
              "name": "force_xcm_version",
              "fields": [
                {
                  "name": "location",
                  "type": 67,
                  "typeName": "Box<Location>",
                  "docs": []
                },
                {
                  "name": "version",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Extoll that a particular destination can be communicated with through a particular",
                "version of XCM.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `location`: The destination that is being described.",
                "- `xcm_version`: The latest version of XCM that `location` supports."
              ]
            },
            {
              "name": "force_default_xcm_version",
              "fields": [
                {
                  "name": "maybe_xcm_version",
                  "type": 152,
                  "typeName": "Option<XcmVersion>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Set a safe XCM version (the version that XCM should be encoded with if the most recent",
                "version a destination can accept is unknown).",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `maybe_xcm_version`: The default XCM encoding version, or `None` to disable."
              ]
            },
            {
              "name": "force_subscribe_version_notify",
              "fields": [
                {
                  "name": "location",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Ask a location to notify us regarding their XCM version and any changes to it.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `location`: The location to which we should subscribe for XCM version notifications."
              ]
            },
            {
              "name": "force_unsubscribe_version_notify",
              "fields": [
                {
                  "name": "location",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Require that a particular destination should no longer notify us regarding any XCM",
                "version changes.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `location`: The location to which we are currently subscribed for XCM version",
                "  notifications which we no longer desire."
              ]
            },
            {
              "name": "limited_reserve_transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Transfer some assets from the local chain to the destination chain through their local,",
                "destination or remote reserve.",
                "",
                "`assets` must have same reserve location and may not be teleportable to `dest`.",
                " - `assets` have local reserve: transfer assets to sovereign account of destination",
                "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                "   assets to `beneficiary`.",
                " - `assets` have destination reserve: burn local assets and forward a notification to",
                "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                "   deposit them to `beneficiary`.",
                " - `assets` have remote reserve: burn local assets, forward XCM to reserve chain to move",
                "   reserves from this chain's SA to `dest` chain's SA, and forward another XCM to `dest`",
                "   to mint and deposit reserve-based assets to `beneficiary`.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                "at risk.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "limited_teleport_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Teleport some assets from the local chain to some destination chain.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item`, up to enough to pay for `weight_limit` of weight. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                "at risk.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` chain.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "force_suspension",
              "fields": [
                {
                  "name": "suspended",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Set or unset the global suspension state of the XCM executor.",
                "",
                "- `origin`: Must be an origin specified by AdminOrigin.",
                "- `suspended`: `true` to suspend, `false` to resume."
              ]
            },
            {
              "name": "transfer_assets",
              "fields": [
                {
                  "name": "dest",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "fee_asset_item",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Transfer some assets from the local chain to the destination chain through their local,",
                "destination or remote reserve, or through teleports.",
                "",
                "Fee payment on the destination side is made from the asset in the `assets` vector of",
                "index `fee_asset_item` (hence referred to as `fees`), up to enough to pay for",
                "`weight_limit` of weight. If more weight is needed than `weight_limit`, then the",
                "operation will fail and the sent assets may be at risk.",
                "",
                "`assets` (excluding `fees`) must have same reserve location or otherwise be teleportable",
                "to `dest`, no limitations imposed on `fees`.",
                " - for local reserve: transfer assets to sovereign account of destination chain and",
                "   forward a notification XCM to `dest` to mint and deposit reserve-based assets to",
                "   `beneficiary`.",
                " - for destination reserve: burn local assets and forward a notification to `dest` chain",
                "   to withdraw the reserve assets from this chain's sovereign account and deposit them",
                "   to `beneficiary`.",
                " - for remote reserve: burn local assets, forward XCM to reserve chain to move reserves",
                "   from this chain's SA to `dest` chain's SA, and forward another XCM to `dest` to mint",
                "   and deposit reserve-based assets to `beneficiary`.",
                " - for teleports: burn local assets and forward XCM to `dest` chain to mint/teleport",
                "   assets and deposit them to `beneficiary`.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `X2(Parent,",
                "  Parachain(..))` to send from parachain to parachain, or `X1(Parachain(..))` to send",
                "  from relay to parachain.",
                "- `beneficiary`: A beneficiary location for the assets in the context of `dest`. Will",
                "  generally be an `AccountId32` value.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `fee_asset_item`: The index into `assets` of the item which should be used to pay",
                "  fees.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            },
            {
              "name": "claim_assets",
              "fields": [
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "Claims assets trapped on this pallet because of leftover assets during XCM execution.",
                "",
                "- `origin`: Anyone can call this extrinsic.",
                "- `assets`: The exact assets that were trapped. Use the version to specify what version",
                "was the latest when they were trapped.",
                "- `beneficiary`: The location/account where the claimed assets will be deposited."
              ]
            },
            {
              "name": "transfer_assets_using_type_and_then",
              "fields": [
                {
                  "name": "dest",
                  "type": 81,
                  "typeName": "Box<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "Box<VersionedAssets>",
                  "docs": []
                },
                {
                  "name": "assets_transfer_type",
                  "type": 430,
                  "typeName": "Box<TransferType>",
                  "docs": []
                },
                {
                  "name": "remote_fees_id",
                  "type": 431,
                  "typeName": "Box<VersionedAssetId>",
                  "docs": []
                },
                {
                  "name": "fees_transfer_type",
                  "type": 430,
                  "typeName": "Box<TransferType>",
                  "docs": []
                },
                {
                  "name": "custom_xcm_on_dest",
                  "type": 354,
                  "typeName": "Box<VersionedXcm<()>>",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "Transfer assets from the local chain to the destination chain using explicit transfer",
                "types for assets and fees.",
                "",
                "`assets` must have same reserve location or may be teleportable to `dest`. Caller must",
                "provide the `assets_transfer_type` to be used for `assets`:",
                " - `TransferType::LocalReserve`: transfer assets to sovereign account of destination",
                "   chain and forward a notification XCM to `dest` to mint and deposit reserve-based",
                "   assets to `beneficiary`.",
                " - `TransferType::DestinationReserve`: burn local assets and forward a notification to",
                "   `dest` chain to withdraw the reserve assets from this chain's sovereign account and",
                "   deposit them to `beneficiary`.",
                " - `TransferType::RemoteReserve(reserve)`: burn local assets, forward XCM to `reserve`",
                "   chain to move reserves from this chain's SA to `dest` chain's SA, and forward another",
                "   XCM to `dest` to mint and deposit reserve-based assets to `beneficiary`. Typically",
                "   the remote `reserve` is Asset Hub.",
                " - `TransferType::Teleport`: burn local assets and forward XCM to `dest` chain to",
                "   mint/teleport assets and deposit them to `beneficiary`.",
                "",
                "On the destination chain, as well as any intermediary hops, `BuyExecution` is used to",
                "buy execution using transferred `assets` identified by `remote_fees_id`.",
                "Make sure enough of the specified `remote_fees_id` asset is included in the given list",
                "of `assets`. `remote_fees_id` should be enough to pay for `weight_limit`. If more weight",
                "is needed than `weight_limit`, then the operation will fail and the sent assets may be",
                "at risk.",
                "",
                "`remote_fees_id` may use different transfer type than rest of `assets` and can be",
                "specified through `fees_transfer_type`.",
                "",
                "The caller needs to specify what should happen to the transferred assets once they reach",
                "the `dest` chain. This is done through the `custom_xcm_on_dest` parameter, which",
                "contains the instructions to execute on `dest` as a final step.",
                "  This is usually as simple as:",
                "  `Xcm(vec![DepositAsset { assets: Wild(AllCounted(assets.len())), beneficiary }])`,",
                "  but could be something more exotic like sending the `assets` even further.",
                "",
                "- `origin`: Must be capable of withdrawing the `assets` and executing XCM.",
                "- `dest`: Destination context for the assets. Will typically be `[Parent,",
                "  Parachain(..)]` to send from parachain to parachain, or `[Parachain(..)]` to send from",
                "  relay to parachain, or `(parents: 2, (GlobalConsensus(..), ..))` to send from",
                "  parachain across a bridge to another ecosystem destination.",
                "- `assets`: The assets to be withdrawn. This should include the assets used to pay the",
                "  fee on the `dest` (and possibly reserve) chains.",
                "- `assets_transfer_type`: The XCM `TransferType` used to transfer the `assets`.",
                "- `remote_fees_id`: One of the included `assets` to be used to pay fees.",
                "- `fees_transfer_type`: The XCM `TransferType` used to transfer the `fees` assets.",
                "- `custom_xcm_on_dest`: The XCM to be executed on `dest` chain as the last step of the",
                "  transfer, which also determines what happens to the assets on the destination chain.",
                "- `weight_limit`: The remote-side weight limit, if any, for the XCM fee purchase."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 354,
    "type": {
      "path": [
        "xcm",
        "VersionedXcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 355,
                  "typeName": "v2::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 375,
                  "typeName": "v3::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 400,
                  "typeName": "v4::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 355,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Xcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 356,
              "typeName": "Vec<Instruction<RuntimeCall>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 356,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 357
        }
      },
      "docs": []
    }
  },
  {
    "id": 357,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Instruction"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 365,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_type",
                  "type": 369,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 370,
                  "typeName": "DoubleEncoded<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 83,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "receive",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "QueryHolding",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 360,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 374,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 355,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 355,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 358,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAssets"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 359,
              "typeName": "Vec<MultiAsset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 359,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 360
        }
      },
      "docs": []
    }
  },
  {
    "id": 360,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAsset"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 361,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "type": 362,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 361,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "AssetId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Concrete",
              "fields": [
                {
                  "name": null,
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Abstract",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 362,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "Fungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "name": null,
                  "type": 363,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 363,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "AssetInstance"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "name": null,
                  "type": 364,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "name": null,
                  "type": 48,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Blob",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 364,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 8,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 365,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Response"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "name": null,
                  "type": 366,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 366,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 367
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 367,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 367,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          368
        ]
      },
      "docs": []
    }
  },
  {
    "id": 368,
    "type": {
      "path": [
        "xcm",
        "v2",
        "traits",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Overflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UntrustedReserveLocation",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UntrustedTeleportLocation",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "MultiLocationFull",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "MultiLocationNotInvertible",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "InvalidLocation",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "FailedToTransactAsset",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "NotWithdrawable",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "LocationCannotHold",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "ExceedsMaxMessageSize",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "DestinationUnsupported",
              "fields": [],
              "index": 13,
              "docs": []
            },
            {
              "name": "Transport",
              "fields": [],
              "index": 14,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 15,
              "docs": []
            },
            {
              "name": "UnknownClaim",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "FailedToDecode",
              "fields": [],
              "index": 17,
              "docs": []
            },
            {
              "name": "MaxWeightInvalid",
              "fields": [],
              "index": 18,
              "docs": []
            },
            {
              "name": "NotHoldingFees",
              "fields": [],
              "index": 19,
              "docs": []
            },
            {
              "name": "TooExpensive",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 22,
              "docs": []
            },
            {
              "name": "WeightLimitReached",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Barrier",
              "fields": [],
              "index": 24,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 25,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 369,
    "type": {
      "path": [
        "xcm",
        "v2",
        "OriginKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Native",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SovereignAccount",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Superuser",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Xcm",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 370,
    "type": {
      "path": [
        "xcm",
        "double_encoded",
        "DoubleEncoded"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "encoded",
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 371,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "MultiAssetFilter"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Definite",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "name": null,
                  "type": 372,
                  "typeName": "WildMultiAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 372,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "WildMultiAsset"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "type": 361,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 373,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 373,
    "type": {
      "path": [
        "xcm",
        "v2",
        "multiasset",
        "WildFungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 374,
    "type": {
      "path": [
        "xcm",
        "v2",
        "WeightLimit"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unlimited",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Limited",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 375,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 376,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 376,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 377
        }
      },
      "docs": []
    }
  },
  {
    "id": 377,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 383,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 393,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 394,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 370,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 57,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 375,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 375,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 393,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 384,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 391,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 61,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 57,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 393,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 378,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAssets"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 379,
              "typeName": "Vec<MultiAsset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 379,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 380
        }
      },
      "docs": []
    }
  },
  {
    "id": 380,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAsset"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 66,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "type": 381,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 381,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "Fungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "name": null,
                  "type": 382,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 382,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "AssetInstance"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "name": null,
                  "type": 364,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "name": null,
                  "type": 48,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 383,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Response"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "name": null,
                  "type": 384,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletsInfo",
              "fields": [
                {
                  "name": null,
                  "type": 387,
                  "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "DispatchResult",
              "fields": [
                {
                  "name": null,
                  "type": 391,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 384,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 385
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 385,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 385,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          386
        ]
      },
      "docs": []
    }
  },
  {
    "id": 386,
    "type": {
      "path": [
        "xcm",
        "v3",
        "traits",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Overflow",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "UntrustedReserveLocation",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UntrustedTeleportLocation",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "LocationFull",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "LocationNotInvertible",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "BadOrigin",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "InvalidLocation",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "FailedToTransactAsset",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "NotWithdrawable",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "LocationCannotHold",
              "fields": [],
              "index": 11,
              "docs": []
            },
            {
              "name": "ExceedsMaxMessageSize",
              "fields": [],
              "index": 12,
              "docs": []
            },
            {
              "name": "DestinationUnsupported",
              "fields": [],
              "index": 13,
              "docs": []
            },
            {
              "name": "Transport",
              "fields": [],
              "index": 14,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 15,
              "docs": []
            },
            {
              "name": "UnknownClaim",
              "fields": [],
              "index": 16,
              "docs": []
            },
            {
              "name": "FailedToDecode",
              "fields": [],
              "index": 17,
              "docs": []
            },
            {
              "name": "MaxWeightInvalid",
              "fields": [],
              "index": 18,
              "docs": []
            },
            {
              "name": "NotHoldingFees",
              "fields": [],
              "index": 19,
              "docs": []
            },
            {
              "name": "TooExpensive",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "ExpectationFalse",
              "fields": [],
              "index": 22,
              "docs": []
            },
            {
              "name": "PalletNotFound",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "NameMismatch",
              "fields": [],
              "index": 24,
              "docs": []
            },
            {
              "name": "VersionIncompatible",
              "fields": [],
              "index": 25,
              "docs": []
            },
            {
              "name": "HoldingWouldOverflow",
              "fields": [],
              "index": 26,
              "docs": []
            },
            {
              "name": "ExportError",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "ReanchorFailed",
              "fields": [],
              "index": 28,
              "docs": []
            },
            {
              "name": "NoDeal",
              "fields": [],
              "index": 29,
              "docs": []
            },
            {
              "name": "FeesNotMet",
              "fields": [],
              "index": 30,
              "docs": []
            },
            {
              "name": "LockError",
              "fields": [],
              "index": 31,
              "docs": []
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 32,
              "docs": []
            },
            {
              "name": "Unanchored",
              "fields": [],
              "index": 33,
              "docs": []
            },
            {
              "name": "NotDepositable",
              "fields": [],
              "index": 34,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 35,
              "docs": []
            },
            {
              "name": "WeightLimitReached",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Barrier",
              "fields": [],
              "index": 37,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 38,
              "docs": []
            },
            {
              "name": "ExceedsStackLimit",
              "fields": [],
              "index": 39,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 387,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 388
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 390,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 388,
    "type": {
      "path": [
        "xcm",
        "v3",
        "PalletInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 59,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "name",
              "type": 389,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "module_name",
              "type": 389,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "major",
              "type": 59,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "minor",
              "type": 59,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "patch",
              "type": 59,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 389,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 390,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 388
        }
      },
      "docs": []
    }
  },
  {
    "id": 391,
    "type": {
      "path": [
        "xcm",
        "v3",
        "MaybeErrorCode"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Success",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Error",
              "fields": [
                {
                  "name": null,
                  "type": 392,
                  "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "TruncatedError",
              "fields": [
                {
                  "name": null,
                  "type": 392,
                  "typeName": "BoundedVec<u8, MaxDispatchErrorLen>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 392,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 393,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 56
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 56,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 394,
    "type": {
      "path": [
        "xcm",
        "v3",
        "OriginKind"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Native",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "SovereignAccount",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Superuser",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Xcm",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 395,
    "type": {
      "path": [
        "xcm",
        "v3",
        "QueryResponseInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "destination",
              "type": 56,
              "typeName": "MultiLocation",
              "docs": []
            },
            {
              "name": "query_id",
              "type": 11,
              "typeName": "QueryId",
              "docs": []
            },
            {
              "name": "max_weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 396,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "MultiAssetFilter"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Definite",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "name": null,
                  "type": 397,
                  "typeName": "WildMultiAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 397,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "WildMultiAsset"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "type": 66,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 398,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AllCounted",
              "fields": [
                {
                  "name": null,
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AllOfCounted",
              "fields": [
                {
                  "name": "id",
                  "type": 66,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 398,
                  "typeName": "WildFungibility",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 398,
    "type": {
      "path": [
        "xcm",
        "v3",
        "multiasset",
        "WildFungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 399,
    "type": {
      "path": [
        "xcm",
        "v3",
        "WeightLimit"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unlimited",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Limited",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 400,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 401,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 401,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 402
        }
      },
      "docs": []
    }
  },
  {
    "id": 402,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 408,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 394,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 370,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 68,
                  "typeName": "InteriorLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 400,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 400,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 384,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 391,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 70,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 72,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 68,
                  "typeName": "InteriorLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 403,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "Assets"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 404,
              "typeName": "Vec<Asset>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 404,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 405
        }
      },
      "docs": []
    }
  },
  {
    "id": 405,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "Asset"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 80,
              "typeName": "AssetId",
              "docs": []
            },
            {
              "name": "fun",
              "type": 406,
              "typeName": "Fungibility",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 406,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "Fungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [
                {
                  "name": null,
                  "type": 407,
                  "typeName": "AssetInstance",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 407,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "AssetInstance"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Undefined",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Index",
              "fields": [
                {
                  "name": null,
                  "type": 63,
                  "typeName": "u128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Array4",
              "fields": [
                {
                  "name": null,
                  "type": 18,
                  "typeName": "[u8; 4]",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Array8",
              "fields": [
                {
                  "name": null,
                  "type": 364,
                  "typeName": "[u8; 8]",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Array16",
              "fields": [
                {
                  "name": null,
                  "type": 48,
                  "typeName": "[u8; 16]",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Array32",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 408,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Response"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Null",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Assets",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ExecutionResult",
              "fields": [
                {
                  "name": null,
                  "type": 384,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Version",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "super::Version",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "PalletsInfo",
              "fields": [
                {
                  "name": null,
                  "type": 409,
                  "typeName": "BoundedVec<PalletInfo, MaxPalletsInfo>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "DispatchResult",
              "fields": [
                {
                  "name": null,
                  "type": 391,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 409,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 410
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 412,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 410,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "PalletInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 59,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "name",
              "type": 411,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "module_name",
              "type": 411,
              "typeName": "BoundedVec<u8, MaxPalletNameLen>",
              "docs": []
            },
            {
              "name": "major",
              "type": 59,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "minor",
              "type": 59,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "patch",
              "type": 59,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 411,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 412,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 410
        }
      },
      "docs": []
    }
  },
  {
    "id": 413,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 67
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 414,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "QueryResponseInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "destination",
              "type": 67,
              "typeName": "Location",
              "docs": []
            },
            {
              "name": "query_id",
              "type": 11,
              "typeName": "QueryId",
              "docs": []
            },
            {
              "name": "max_weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 415,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "AssetFilter"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Definite",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Wild",
              "fields": [
                {
                  "name": null,
                  "type": 416,
                  "typeName": "WildAsset",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 416,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "WildAsset"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "All",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "AllOf",
              "fields": [
                {
                  "name": "id",
                  "type": 80,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 417,
                  "typeName": "WildFungibility",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AllCounted",
              "fields": [
                {
                  "name": null,
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "AllOfCounted",
              "fields": [
                {
                  "name": "id",
                  "type": 80,
                  "typeName": "AssetId",
                  "docs": []
                },
                {
                  "name": "fun",
                  "type": 417,
                  "typeName": "WildFungibility",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 417,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "asset",
        "WildFungibility"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fungible",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NonFungible",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 418,
    "type": {
      "path": [
        "xcm",
        "VersionedAssets"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "v2::MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "v3::MultiAssets",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "v4::Assets",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 419,
    "type": {
      "path": [
        "xcm",
        "VersionedXcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 420,
                  "typeName": "v2::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 424,
                  "typeName": "v3::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 427,
                  "typeName": "v4::Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 420,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Xcm"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 421,
              "typeName": "Vec<Instruction<RuntimeCall>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 421,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 422
        }
      },
      "docs": []
    }
  },
  {
    "id": 422,
    "type": {
      "path": [
        "xcm",
        "v2",
        "Instruction"
      ],
      "params": [
        {
          "name": "RuntimeCall",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 365,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_type",
                  "type": 369,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 423,
                  "typeName": "DoubleEncoded<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 83,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_assets",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "receive",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 355,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "QueryHolding",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 371,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 360,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 374,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 420,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 420,
                  "typeName": "Xcm<RuntimeCall>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 358,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 82,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 423,
    "type": {
      "path": [
        "xcm",
        "double_encoded",
        "DoubleEncoded"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "encoded",
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 424,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 425,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 425,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 426
        }
      },
      "docs": []
    }
  },
  {
    "id": 426,
    "type": {
      "path": [
        "xcm",
        "v3",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 383,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 393,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 394,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 423,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 57,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 396,
                  "typeName": "MultiAssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 424,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 424,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 378,
                  "typeName": "MultiAssets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 393,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 384,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 391,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 395,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 58,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 61,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 57,
                  "typeName": "InteriorMultiLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 375,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 380,
                  "typeName": "MultiAsset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 56,
                  "typeName": "MultiLocation",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 393,
                  "typeName": "Option<MultiLocation>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 427,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Xcm"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 428,
              "typeName": "Vec<Instruction<Call>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 428,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 429
        }
      },
      "docs": []
    }
  },
  {
    "id": 429,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "Instruction"
      ],
      "params": [
        {
          "name": "Call",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "WithdrawAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "ReserveAssetDeposited",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "ReceiveTeleportedAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "QueryResponse",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 408,
                  "typeName": "Response",
                  "docs": []
                },
                {
                  "name": "max_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "querier",
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TransferAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "TransferReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Transact",
              "fields": [
                {
                  "name": "origin_kind",
                  "type": 394,
                  "typeName": "OriginKind",
                  "docs": []
                },
                {
                  "name": "require_weight_at_most",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "call",
                  "type": 423,
                  "typeName": "DoubleEncoded<Call>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "HrmpNewChannelOpenRequest",
              "fields": [
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_message_size",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "max_capacity",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "HrmpChannelAccepted",
              "fields": [
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "HrmpChannelClosing",
              "fields": [
                {
                  "name": "initiator",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "sender",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "ClearOrigin",
              "fields": [],
              "index": 10,
              "docs": []
            },
            {
              "name": "DescendOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 68,
                  "typeName": "InteriorLocation",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "ReportError",
              "fields": [
                {
                  "name": null,
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "DepositAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "DepositReserveAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "ExchangeAsset",
              "fields": [
                {
                  "name": "give",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "want",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "maximal",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "InitiateReserveWithdraw",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "reserve",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "InitiateTeleport",
              "fields": [
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                },
                {
                  "name": "dest",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "ReportHolding",
              "fields": [
                {
                  "name": "response_info",
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 415,
                  "typeName": "AssetFilter",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "BuyExecution",
              "fields": [
                {
                  "name": "fees",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "RefundSurplus",
              "fields": [],
              "index": 20,
              "docs": []
            },
            {
              "name": "SetErrorHandler",
              "fields": [
                {
                  "name": null,
                  "type": 427,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "SetAppendix",
              "fields": [
                {
                  "name": null,
                  "type": 427,
                  "typeName": "Xcm<Call>",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "ClearError",
              "fields": [],
              "index": 23,
              "docs": []
            },
            {
              "name": "ClaimAsset",
              "fields": [
                {
                  "name": "assets",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "ticket",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Trap",
              "fields": [
                {
                  "name": null,
                  "type": 11,
                  "typeName": "u64",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "SubscribeVersion",
              "fields": [
                {
                  "name": "query_id",
                  "type": 11,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "max_response_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "UnsubscribeVersion",
              "fields": [],
              "index": 27,
              "docs": []
            },
            {
              "name": "BurnAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "ExpectAsset",
              "fields": [
                {
                  "name": null,
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "ExpectOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "ExpectError",
              "fields": [
                {
                  "name": null,
                  "type": 384,
                  "typeName": "Option<(u32, Error)>",
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "ExpectTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 391,
                  "typeName": "MaybeErrorCode",
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "QueryPallet",
              "fields": [
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "response_info",
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "ExpectPallet",
              "fields": [
                {
                  "name": "index",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "module_name",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                },
                {
                  "name": "crate_major",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "min_crate_minor",
                  "type": 59,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ReportTransactStatus",
              "fields": [
                {
                  "name": null,
                  "type": 414,
                  "typeName": "QueryResponseInfo",
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "ClearTransactStatus",
              "fields": [],
              "index": 36,
              "docs": []
            },
            {
              "name": "UniversalOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 70,
                  "typeName": "Junction",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "ExportMessage",
              "fields": [
                {
                  "name": "network",
                  "type": 72,
                  "typeName": "NetworkId",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 68,
                  "typeName": "InteriorLocation",
                  "docs": []
                },
                {
                  "name": "xcm",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "LockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "unlocker",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "UnlockAsset",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "target",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "NoteUnlockable",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "owner",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "RequestUnlock",
              "fields": [
                {
                  "name": "asset",
                  "type": 405,
                  "typeName": "Asset",
                  "docs": []
                },
                {
                  "name": "locker",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "SetFeesMode",
              "fields": [
                {
                  "name": "jit_withdraw",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "SetTopic",
              "fields": [
                {
                  "name": null,
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "ClearTopic",
              "fields": [],
              "index": 45,
              "docs": []
            },
            {
              "name": "AliasOrigin",
              "fields": [
                {
                  "name": null,
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "UnpaidExecution",
              "fields": [
                {
                  "name": "weight_limit",
                  "type": 399,
                  "typeName": "WeightLimit",
                  "docs": []
                },
                {
                  "name": "check_origin",
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 430,
    "type": {
      "path": [
        "staging_xcm_executor",
        "traits",
        "asset_transfer",
        "TransferType"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Teleport",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "LocalReserve",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "DestinationReserve",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "RemoteReserve",
              "fields": [
                {
                  "name": null,
                  "type": 81,
                  "typeName": "VersionedLocation",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 431,
    "type": {
      "path": [
        "xcm",
        "VersionedAssetId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 66,
                  "typeName": "v3::AssetId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 80,
                  "typeName": "v4::AssetId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 432,
    "type": {
      "path": [
        "pallet_message_queue",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "reap_page",
              "fields": [
                {
                  "name": "message_origin",
                  "type": 433,
                  "typeName": "MessageOriginOf<T>",
                  "docs": []
                },
                {
                  "name": "page_index",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Remove a page which has no more messages remaining to be processed or is stale."
              ]
            },
            {
              "name": "execute_overweight",
              "fields": [
                {
                  "name": "message_origin",
                  "type": 433,
                  "typeName": "MessageOriginOf<T>",
                  "docs": []
                },
                {
                  "name": "page",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": []
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "T::Size",
                  "docs": []
                },
                {
                  "name": "weight_limit",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Execute an overweight message.",
                "",
                "Temporary processing errors will be propagated whereas permanent errors are treated",
                "as success condition.",
                "",
                "- `origin`: Must be `Signed`.",
                "- `message_origin`: The origin from which the message to be executed arrived.",
                "- `page`: The page in the queue in which the message to be executed is sitting.",
                "- `index`: The index into the queue of the message to be executed.",
                "- `weight_limit`: The maximum amount of weight allowed to be consumed in the execution",
                "  of the message.",
                "",
                "Benchmark complexity considerations: O(index + weight_limit)."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 433,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "inclusion",
        "AggregateMessageOrigin"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ump",
              "fields": [
                {
                  "name": null,
                  "type": 434,
                  "typeName": "UmpQueueId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 434,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "inclusion",
        "UmpQueueId"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Para",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 435,
    "type": {
      "path": [
        "pallet_asset_rate",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "create",
              "fields": [
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "rate",
                  "type": 436,
                  "typeName": "FixedU128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Initialize a conversion rate to native balance for the given asset.",
                "",
                "## Complexity",
                "- O(1)"
              ]
            },
            {
              "name": "update",
              "fields": [
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                },
                {
                  "name": "rate",
                  "type": 436,
                  "typeName": "FixedU128",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Update the conversion rate to native balance for the given asset.",
                "",
                "## Complexity",
                "- O(1)"
              ]
            },
            {
              "name": "remove",
              "fields": [
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "Box<T::AssetKind>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Remove an existing conversion rate to native balance for the given asset.",
                "",
                "## Complexity",
                "- O(1)"
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 436,
    "type": {
      "path": [
        "sp_arithmetic",
        "fixed_point",
        "FixedU128"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 6,
              "typeName": "u128",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 437,
    "type": {
      "path": [
        "pallet_beefy",
        "pallet",
        "Call"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "report_equivocation",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 438,
                  "typeName": "Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 107,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported."
              ]
            },
            {
              "name": "report_equivocation_unsigned",
              "fields": [
                {
                  "name": "equivocation_proof",
                  "type": 438,
                  "typeName": "Box<DoubleVotingProof<BlockNumberFor<T>, T::BeefyId,<T::BeefyId\nas RuntimeAppPublic>::Signature,>,>",
                  "docs": []
                },
                {
                  "name": "key_owner_proof",
                  "type": 107,
                  "typeName": "T::KeyOwnerProof",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Report voter equivocation/misbehavior. This method will verify the",
                "equivocation proof and validate the given key ownership proof",
                "against the extracted offender. If both are valid, the offence",
                "will be reported.",
                "",
                "This extrinsic must be called unsigned and it is expected that only",
                "block authors will call it (validated in `ValidateUnsigned`), as such",
                "if the block author is defined it will be defined as the equivocation",
                "reporter."
              ]
            },
            {
              "name": "set_new_genesis",
              "fields": [
                {
                  "name": "delay_in_blocks",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Reset BEEFY consensus by setting a new BEEFY genesis at `delay_in_blocks` blocks in the",
                "future.",
                "",
                "Note: `delay_in_blocks` has to be at least 1."
              ]
            }
          ]
        }
      },
      "docs": [
        "Contains a variant per dispatchable extrinsic that this pallet has."
      ]
    }
  },
  {
    "id": 438,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "DoubleVotingProof"
      ],
      "params": [
        {
          "name": "Number",
          "type": 4
        },
        {
          "name": "Id",
          "type": 138
        },
        {
          "name": "Signature",
          "type": 439
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "first",
              "type": 440,
              "typeName": "VoteMessage<Number, Id, Signature>",
              "docs": []
            },
            {
              "name": "second",
              "type": 440,
              "typeName": "VoteMessage<Number, Id, Signature>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 439,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "ecdsa_crypto",
        "Signature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 182,
              "typeName": "ecdsa::Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 440,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "VoteMessage"
      ],
      "params": [
        {
          "name": "Number",
          "type": 4
        },
        {
          "name": "Id",
          "type": 138
        },
        {
          "name": "Signature",
          "type": 439
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "commitment",
              "type": 441,
              "typeName": "Commitment<Number>",
              "docs": []
            },
            {
              "name": "id",
              "type": 138,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "signature",
              "type": 439,
              "typeName": "Signature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 441,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "commitment",
        "Commitment"
      ],
      "params": [
        {
          "name": "TBlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "payload",
              "type": 442,
              "typeName": "Payload",
              "docs": []
            },
            {
              "name": "block_number",
              "type": 4,
              "typeName": "TBlockNumber",
              "docs": []
            },
            {
              "name": "validator_set_id",
              "type": 12,
              "typeName": "ValidatorSetId",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 442,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "payload",
        "Payload"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 443,
              "typeName": "Vec<(BeefyPayloadId, Vec<u8>)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 443,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 444
        }
      },
      "docs": []
    }
  },
  {
    "id": 444,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          445,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 445,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 2,
          "type": 2
        }
      },
      "docs": []
    }
  },
  {
    "id": 446,
    "type": {
      "path": [
        "sp_runtime",
        "traits",
        "BlakeTwo256"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 447,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 448,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "types",
        "Tally"
      ],
      "params": [
        {
          "name": "Votes",
          "type": 6
        },
        {
          "name": "Total",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ayes",
              "type": 6,
              "typeName": "Votes",
              "docs": []
            },
            {
              "name": "nays",
              "type": 6,
              "typeName": "Votes",
              "docs": []
            },
            {
              "name": "support",
              "type": 6,
              "typeName": "Votes",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 449,
    "type": {
      "path": [
        "pallet_whitelist",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "CallWhitelisted",
              "fields": [
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "WhitelistedCallRemoved",
              "fields": [
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "WhitelistedCallDispatched",
              "fields": [
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "T::Hash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 450,
                  "typeName": "DispatchResultWithPostInfo",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 450,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 451
        },
        {
          "name": "E",
          "type": 453
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 451,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 453,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 451,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PostDispatchInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "actual_weight",
              "type": 452,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "pays_fee",
              "type": 25,
              "typeName": "Pays",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 452,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 453,
    "type": {
      "path": [
        "sp_runtime",
        "DispatchErrorWithPostInfo"
      ],
      "params": [
        {
          "name": "Info",
          "type": 451
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "post_info",
              "type": 451,
              "typeName": "Info",
              "docs": []
            },
            {
              "name": "error",
              "type": 26,
              "typeName": "DispatchError",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 454,
    "type": {
      "path": [
        "pallet_parameters",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Updated",
              "fields": [
                {
                  "name": "key",
                  "type": 455,
                  "typeName": "<T::RuntimeParameters as AggregatedKeyValue>::Key",
                  "docs": [
                    "The key that was updated."
                  ]
                },
                {
                  "name": "old_value",
                  "type": 457,
                  "typeName": "Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>",
                  "docs": [
                    "The old value before this call."
                  ]
                },
                {
                  "name": "new_value",
                  "type": 457,
                  "typeName": "Option<<T::RuntimeParameters as AggregatedKeyValue>::Value>",
                  "docs": [
                    "The new value after this call."
                  ]
                }
              ],
              "index": 0,
              "docs": [
                "A Parameter was set.",
                "",
                "Is also emitted when the value was not changed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 455,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeParametersKey"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Inflation",
              "fields": [
                {
                  "name": null,
                  "type": 456,
                  "typeName": "<dynamic_params::inflation::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Key",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 456,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "ParametersKey"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MinInflation",
              "fields": [
                {
                  "name": null,
                  "type": 172,
                  "typeName": "MinInflation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "MaxInflation",
              "fields": [
                {
                  "name": null,
                  "type": 175,
                  "typeName": "MaxInflation",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "IdealStake",
              "fields": [
                {
                  "name": null,
                  "type": 176,
                  "typeName": "IdealStake",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Falloff",
              "fields": [
                {
                  "name": null,
                  "type": 177,
                  "typeName": "Falloff",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "UseAuctionSlots",
              "fields": [
                {
                  "name": null,
                  "type": 178,
                  "typeName": "UseAuctionSlots",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 457,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 458
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 458,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 458,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeParametersValue"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Inflation",
              "fields": [
                {
                  "name": null,
                  "type": 459,
                  "typeName": "<dynamic_params::inflation::Parameters as frame_support::traits::\ndynamic_params::AggregatedKeyValue>::Value",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 459,
    "type": {
      "path": [
        "polkadot_runtime",
        "dynamic_params",
        "inflation",
        "ParametersValue"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MinInflation",
              "fields": [
                {
                  "name": null,
                  "type": 174,
                  "typeName": "Perquintill",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "MaxInflation",
              "fields": [
                {
                  "name": null,
                  "type": 174,
                  "typeName": "Perquintill",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "IdealStake",
              "fields": [
                {
                  "name": null,
                  "type": 174,
                  "typeName": "Perquintill",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Falloff",
              "fields": [
                {
                  "name": null,
                  "type": 174,
                  "typeName": "Perquintill",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "UseAuctionSlots",
              "fields": [
                {
                  "name": null,
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 460,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Claimed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "ethereum_address",
                  "type": 183,
                  "typeName": "EthereumAddress",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Someone claimed some DOTs."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 461,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingUpdated",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "unvested",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The amount vested has been updated. This could indicate a change in funds available.",
                "The balance given is the amount which is left unvested (and thus locked)."
              ]
            },
            {
              "name": "VestingCompleted",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An \\[account\\] has become fully vested."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 462,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BatchInterrupted",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 26,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                "well as the error."
              ]
            },
            {
              "name": "BatchCompleted",
              "fields": [],
              "index": 1,
              "docs": [
                "Batch of dispatches completed fully with no error."
              ]
            },
            {
              "name": "BatchCompletedWithErrors",
              "fields": [],
              "index": 2,
              "docs": [
                "Batch of dispatches completed but has errors."
              ]
            },
            {
              "name": "ItemCompleted",
              "fields": [],
              "index": 3,
              "docs": [
                "A single item within a Batch of dispatches has completed with no error."
              ]
            },
            {
              "name": "ItemFailed",
              "fields": [
                {
                  "name": "error",
                  "type": 26,
                  "typeName": "DispatchError",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A single item within a Batch of dispatches has completed with error."
              ]
            },
            {
              "name": "DispatchedAs",
              "fields": [
                {
                  "name": "result",
                  "type": 34,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A call was dispatched."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 463,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ProxyExecuted",
              "fields": [
                {
                  "name": "result",
                  "type": 34,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A proxy was executed correctly, with the given."
              ]
            },
            {
              "name": "PureCreated",
              "fields": [
                {
                  "name": "pure",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 194,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "disambiguation_index",
                  "type": 91,
                  "typeName": "u16",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A pure account has been created by new proxy with given",
                "disambiguation index and proxy type."
              ]
            },
            {
              "name": "Announced",
              "fields": [
                {
                  "name": "real",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 13,
                  "typeName": "CallHashOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "An announcement was placed to make a call in the future."
              ]
            },
            {
              "name": "ProxyAdded",
              "fields": [
                {
                  "name": "delegator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegatee",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 194,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A proxy was added."
              ]
            },
            {
              "name": "ProxyRemoved",
              "fields": [
                {
                  "name": "delegator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "delegatee",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "proxy_type",
                  "type": 194,
                  "typeName": "T::ProxyType",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A proxy was removed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 464,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewMultisig",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new multisig operation has begun."
              ]
            },
            {
              "name": "MultisigApproval",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 197,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A multisig operation has been approved by someone."
              ]
            },
            {
              "name": "MultisigExecuted",
              "fields": [
                {
                  "name": "approving",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 197,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 34,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A multisig operation has been executed."
              ]
            },
            {
              "name": "MultisigCancelled",
              "fields": [
                {
                  "name": "cancelling",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "timepoint",
                  "type": 197,
                  "typeName": "Timepoint<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "multisig",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "call_hash",
                  "type": 1,
                  "typeName": "CallHash",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A multisig operation has been cancelled."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 465,
    "type": {
      "path": [
        "pallet_bounties",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BountyProposed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "New bounty proposal."
              ]
            },
            {
              "name": "BountyRejected",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "bond",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A bounty proposal was rejected; funds were slashed."
              ]
            },
            {
              "name": "BountyBecameActive",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A bounty proposal is funded and became active."
              ]
            },
            {
              "name": "BountyAwarded",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A bounty is awarded to a beneficiary."
              ]
            },
            {
              "name": "BountyClaimed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "payout",
                  "type": 6,
                  "typeName": "BalanceOf<T, I>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A bounty is claimed by beneficiary."
              ]
            },
            {
              "name": "BountyCanceled",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A bounty is cancelled."
              ]
            },
            {
              "name": "BountyExtended",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "A bounty expiry is extended."
              ]
            },
            {
              "name": "BountyApproved",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A bounty is approved."
              ]
            },
            {
              "name": "CuratorProposed",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A bounty curator is proposed."
              ]
            },
            {
              "name": "CuratorUnassigned",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A bounty curator is unassigned."
              ]
            },
            {
              "name": "CuratorAccepted",
              "fields": [
                {
                  "name": "bounty_id",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "A bounty curator is accepted."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 466,
    "type": {
      "path": [
        "pallet_child_bounties",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Added",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A child-bounty is added."
              ]
            },
            {
              "name": "Awarded",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A child-bounty is awarded to a beneficiary."
              ]
            },
            {
              "name": "Claimed",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "payout",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A child-bounty is claimed by beneficiary."
              ]
            },
            {
              "name": "Canceled",
              "fields": [
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                },
                {
                  "name": "child_index",
                  "type": 4,
                  "typeName": "BountyIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A child-bounty is cancelled."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 467,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "SolutionStored",
              "fields": [
                {
                  "name": "compute",
                  "type": 468,
                  "typeName": "ElectionCompute",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 127,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "prev_ejected",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A solution was stored with the given compute.",
                "",
                "The `origin` indicates the origin of the solution. If `origin` is `Some(AccountId)`,",
                "the stored solution was submitted in the signed phase by a miner with the `AccountId`.",
                "Otherwise, the solution was stored either during the unsigned phase or by",
                "`T::ForceOrigin`. The `bool` is `true` when a previous solution was ejected to make",
                "room for this one."
              ]
            },
            {
              "name": "ElectionFinalized",
              "fields": [
                {
                  "name": "compute",
                  "type": 468,
                  "typeName": "ElectionCompute",
                  "docs": []
                },
                {
                  "name": "score",
                  "type": 253,
                  "typeName": "ElectionScore",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The election has been finalized, with the given computation and score."
              ]
            },
            {
              "name": "ElectionFailed",
              "fields": [],
              "index": 2,
              "docs": [
                "An election failed.",
                "",
                "Not much can be said about which computes failed in the process."
              ]
            },
            {
              "name": "Rewarded",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "An account has been rewarded for their signed submission being finalized."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "account",
                  "type": 0,
                  "typeName": "<T as frame_system::Config>::AccountId",
                  "docs": []
                },
                {
                  "name": "value",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An account has been slashed for submitting an invalid signed submission."
              ]
            },
            {
              "name": "PhaseTransitioned",
              "fields": [
                {
                  "name": "from",
                  "type": 469,
                  "typeName": "Phase<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 469,
                  "typeName": "Phase<BlockNumberFor<T>>",
                  "docs": []
                },
                {
                  "name": "round",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "There was a phase transition in a given round."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 468,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "ElectionCompute"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "OnChain",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsigned",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Fallback",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "Emergency",
              "fields": [],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 469,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "Phase"
      ],
      "params": [
        {
          "name": "Bn",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Off",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Signed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsigned",
              "fields": [
                {
                  "name": null,
                  "type": 470,
                  "typeName": "(bool, Bn)",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Emergency",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 470,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          8,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 471,
    "type": {
      "path": [
        "pallet_bags_list",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Rebagged",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "from",
                  "type": 12,
                  "typeName": "T::Score",
                  "docs": []
                },
                {
                  "name": "to",
                  "type": 12,
                  "typeName": "T::Score",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Moved an account from one bag to another."
              ]
            },
            {
              "name": "ScoreUpdated",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "new_score",
                  "type": 12,
                  "typeName": "T::Score",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Updated the score of some account to the given amount."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 472,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "depositor",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A pool has been created."
              ]
            },
            {
              "name": "Bonded",
              "fields": [
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "bonded",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "joined",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A member has became bonded in a pool."
              ]
            },
            {
              "name": "PaidOut",
              "fields": [
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "payout",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A payout has been made to a member."
              ]
            },
            {
              "name": "Unbonded",
              "fields": [
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "points",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A member has unbonded from their pool.",
                "",
                "- `balance` is the corresponding balance of the number of points that has been",
                "  requested to be unbonded (the argument of the `unbond` transaction) from the bonded",
                "  pool.",
                "- `points` is the number of points that are issued as a result of `balance` being",
                "dissolved into the corresponding unbonding pool.",
                "- `era` is the era in which the balance will be unbonded.",
                "In the absence of slashing, these values will match. In the presence of slashing, the",
                "number of points that are issued in the unbonding pool will be less than the amount",
                "requested to be unbonded."
              ]
            },
            {
              "name": "Withdrawn",
              "fields": [
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "points",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A member has withdrawn from their pool.",
                "",
                "The given number of `points` have been dissolved in return of `balance`.",
                "",
                "Similar to `Unbonded` event, in the absence of slashing, the ratio of point to balance",
                "will be 1."
              ]
            },
            {
              "name": "Destroyed",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A pool has been destroyed."
              ]
            },
            {
              "name": "StateChanged",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "new_state",
                  "type": 264,
                  "typeName": "PoolState",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "The state of a pool has changed"
              ]
            },
            {
              "name": "MemberRemoved",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "member",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "A member has been removed from a pool.",
                "",
                "The removal can be voluntary (withdrawn all unbonded funds) or involuntary (kicked)."
              ]
            },
            {
              "name": "RolesUpdated",
              "fields": [
                {
                  "name": "root",
                  "type": 127,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "bouncer",
                  "type": 127,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                },
                {
                  "name": "nominator",
                  "type": 127,
                  "typeName": "Option<T::AccountId>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "The roles of a pool have been updated to the given new roles. Note that the depositor",
                "can never change."
              ]
            },
            {
              "name": "PoolSlashed",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "The active balance of pool `pool_id` has been slashed to `balance`."
              ]
            },
            {
              "name": "UnbondingPoolSlashed",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "era",
                  "type": 4,
                  "typeName": "EraIndex",
                  "docs": []
                },
                {
                  "name": "balance",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "The unbond pool at `era` of pool `pool_id` has been slashed to `balance`."
              ]
            },
            {
              "name": "PoolCommissionUpdated",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "current",
                  "type": 270,
                  "typeName": "Option<(Perbill, T::AccountId)>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "A pool's commission setting has been changed."
              ]
            },
            {
              "name": "PoolMaxCommissionUpdated",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "max_commission",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "A pool's maximum commission setting has been changed."
              ]
            },
            {
              "name": "PoolCommissionChangeRateUpdated",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "change_rate",
                  "type": 272,
                  "typeName": "CommissionChangeRate<BlockNumberFor<T>>",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "A pool's commission `change_rate` has been changed."
              ]
            },
            {
              "name": "PoolCommissionClaimPermissionUpdated",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "permission",
                  "type": 273,
                  "typeName": "Option<CommissionClaimPermission<T::AccountId>>",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "Pool commission claim permission has been updated."
              ]
            },
            {
              "name": "PoolCommissionClaimed",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "commission",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "Pool commission has been claimed."
              ]
            },
            {
              "name": "MinBalanceDeficitAdjusted",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Topped up deficit in frozen ED of the reward pool."
              ]
            },
            {
              "name": "MinBalanceExcessAdjusted",
              "fields": [
                {
                  "name": "pool_id",
                  "type": 4,
                  "typeName": "PoolId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Claimed excess frozen ED of af the reward pool."
              ]
            }
          ]
        }
      },
      "docs": [
        "Events of this pallet."
      ]
    }
  },
  {
    "id": 473,
    "type": {
      "path": [
        "pallet_fast_unstake",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unstaked",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 34,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A staker was unstaked."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "stash",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A staker was slashed for requesting fast-unstake whilst being exposed."
              ]
            },
            {
              "name": "BatchChecked",
              "fields": [
                {
                  "name": "eras",
                  "type": 121,
                  "typeName": "Vec<EraIndex>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A batch was partially checked for the given eras, but the process did not finish."
              ]
            },
            {
              "name": "BatchFinished",
              "fields": [
                {
                  "name": "size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A batch of a given size was terminated.",
                "",
                "This is always follows by a number of `Unstaked` or `Slashed` events, marking the end",
                "of the batch. A new batch will be created upon next block."
              ]
            },
            {
              "name": "InternalError",
              "fields": [],
              "index": 4,
              "docs": [
                "An internal error happened. Operations will be paused now."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 474,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "inclusion",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "CandidateBacked",
              "fields": [
                {
                  "name": null,
                  "type": 475,
                  "typeName": "CandidateReceipt<T::Hash>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 477,
                  "typeName": "GroupIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A candidate was backed. `[candidate, head_data]`"
              ]
            },
            {
              "name": "CandidateIncluded",
              "fields": [
                {
                  "name": null,
                  "type": 475,
                  "typeName": "CandidateReceipt<T::Hash>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 477,
                  "typeName": "GroupIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A candidate was included. `[candidate, head_data]`"
              ]
            },
            {
              "name": "CandidateTimedOut",
              "fields": [
                {
                  "name": null,
                  "type": 475,
                  "typeName": "CandidateReceipt<T::Hash>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A candidate timed out. `[candidate, head_data]`"
              ]
            },
            {
              "name": "UpwardMessagesReceived",
              "fields": [
                {
                  "name": "from",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Some upward messages have been received and will be processed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 475,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "CandidateReceipt"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "descriptor",
              "type": 299,
              "typeName": "CandidateDescriptor<H>",
              "docs": []
            },
            {
              "name": "commitments_hash",
              "type": 13,
              "typeName": "Hash",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 476,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "CoreIndex"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 477,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "GroupIndex"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 478,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "pallet",
        "Event"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "CurrentCodeUpdated",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Current code has been updated for a Para. `para_id`"
              ]
            },
            {
              "name": "CurrentHeadUpdated",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Current head has been updated for a Para. `para_id`"
              ]
            },
            {
              "name": "CodeUpgradeScheduled",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A code upgrade has been scheduled for a Para. `para_id`"
              ]
            },
            {
              "name": "NewHeadNoted",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "A new head has been noted for a Para. `para_id`"
              ]
            },
            {
              "name": "ActionQueued",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 4,
                  "typeName": "SessionIndex",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "A para has been queued to execute pending actions. `para_id`"
              ]
            },
            {
              "name": "PvfCheckStarted",
              "fields": [
                {
                  "name": null,
                  "type": 302,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "The given para either initiated or subscribed to a PVF check for the given validation",
                "code. `code_hash` `para_id`"
              ]
            },
            {
              "name": "PvfCheckAccepted",
              "fields": [
                {
                  "name": null,
                  "type": 302,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "The given validation code was accepted by the PVF pre-checking vote.",
                "`code_hash` `para_id`"
              ]
            },
            {
              "name": "PvfCheckRejected",
              "fields": [
                {
                  "name": null,
                  "type": 302,
                  "typeName": "ValidationCodeHash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "The given validation code was rejected by the PVF pre-checking vote.",
                "`code_hash` `para_id`"
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 479,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "hrmp",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "OpenChannelRequested",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "proposed_max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "proposed_max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Open HRMP channel requested."
              ]
            },
            {
              "name": "OpenChannelCanceled",
              "fields": [
                {
                  "name": "by_parachain",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "channel_id",
                  "type": 326,
                  "typeName": "HrmpChannelId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An HRMP channel request sent by the receiver was canceled by either party."
              ]
            },
            {
              "name": "OpenChannelAccepted",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Open HRMP channel accepted."
              ]
            },
            {
              "name": "ChannelClosed",
              "fields": [
                {
                  "name": "by_parachain",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "channel_id",
                  "type": 326,
                  "typeName": "HrmpChannelId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "HRMP channel closed."
              ]
            },
            {
              "name": "HrmpChannelForceOpened",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "proposed_max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "proposed_max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "An HRMP channel was opened via Root origin."
              ]
            },
            {
              "name": "HrmpSystemChannelOpened",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "proposed_max_capacity",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "proposed_max_message_size",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "An HRMP channel was opened with a system chain."
              ]
            },
            {
              "name": "OpenChannelDepositsUpdated",
              "fields": [
                {
                  "name": "sender",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "recipient",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "An HRMP channel's deposits were updated."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 480,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "disputes",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "DisputeInitiated",
              "fields": [
                {
                  "name": null,
                  "type": 315,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 481,
                  "typeName": "DisputeLocation",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A dispute has been initiated. \\[candidate hash, dispute location\\]"
              ]
            },
            {
              "name": "DisputeConcluded",
              "fields": [
                {
                  "name": null,
                  "type": 315,
                  "typeName": "CandidateHash",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 482,
                  "typeName": "DisputeResult",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A dispute has concluded for or against a candidate.",
                "`\\[para id, candidate hash, dispute result\\]`"
              ]
            },
            {
              "name": "Revert",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "A dispute has concluded with supermajority against a candidate.",
                "Block authors should no longer build on top of this head and should",
                "instead revert the block at the given height. This should be the",
                "number of the child of the last known valid block in the chain."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 481,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "disputes",
        "DisputeLocation"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Local",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Remote",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 482,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "disputes",
        "DisputeResult"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Valid",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Invalid",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 483,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "OnDemandOrderPlaced",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "spot_price",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "ordered_by",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An order was placed at some spot price amount by orderer ordered_by"
              ]
            },
            {
              "name": "SpotPriceSet",
              "fields": [
                {
                  "name": "spot_price",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "The value of the spot price has likely changed"
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 484,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "paras_registrar",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Registered",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "manager",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Deregistered",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Swapped",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "other_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 485,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "slots",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NewLeasePeriod",
              "fields": [
                {
                  "name": "lease_period",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A new `[lease_period]` is beginning."
              ]
            },
            {
              "name": "Leased",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "leaser",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "period_begin",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "period_count",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "extra_reserved",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A para has won the right to a continuous set of lease periods as a parachain.",
                "First balance is any extra amount reserved on top of the para's existing deposit.",
                "Second balance is the total amount reserved."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 486,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "auctions",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AuctionStarted",
              "fields": [
                {
                  "name": "auction_index",
                  "type": 4,
                  "typeName": "AuctionIndex",
                  "docs": []
                },
                {
                  "name": "lease_period",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "ending",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "An auction started. Provides its index and the block number where it will begin to",
                "close and the first lease period of the quadruplet that is auctioned."
              ]
            },
            {
              "name": "AuctionClosed",
              "fields": [
                {
                  "name": "auction_index",
                  "type": 4,
                  "typeName": "AuctionIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "An auction ended. All funds become unreserved."
              ]
            },
            {
              "name": "Reserved",
              "fields": [
                {
                  "name": "bidder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "extra_reserved",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "total_amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Funds were reserved for a winning bid. First balance is the extra amount reserved.",
                "Second is the total."
              ]
            },
            {
              "name": "Unreserved",
              "fields": [
                {
                  "name": "bidder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Funds were unreserved since bidder is no longer active. `[bidder, amount]`"
              ]
            },
            {
              "name": "ReserveConfiscated",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "leaser",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Someone attempted to lease the same slot twice for a parachain. The amount is held in",
                "reserve but no parachain slot has been leased."
              ]
            },
            {
              "name": "BidAccepted",
              "fields": [
                {
                  "name": "bidder",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                },
                {
                  "name": "first_slot",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                },
                {
                  "name": "last_slot",
                  "type": 4,
                  "typeName": "LeasePeriodOf<T>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "A new bid has been accepted as the current winner."
              ]
            },
            {
              "name": "WinningOffset",
              "fields": [
                {
                  "name": "auction_index",
                  "type": 4,
                  "typeName": "AuctionIndex",
                  "docs": []
                },
                {
                  "name": "block_number",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "The winning offset was chosen for an auction. This will map into the `Winning` storage",
                "map."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 487,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "crowdloan",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Created",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Create a new crowdloaning campaign."
              ]
            },
            {
              "name": "Contributed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "fund_index",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Contributed to a crowd sale."
              ]
            },
            {
              "name": "Withdrew",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "fund_index",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Withdrew full balance of a contributor."
              ]
            },
            {
              "name": "PartiallyRefunded",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "The loans in a fund have been partially dissolved, i.e. there are some left",
                "over child keys that still need to be killed."
              ]
            },
            {
              "name": "AllRefunded",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "All loans in a fund have been refunded."
              ]
            },
            {
              "name": "Dissolved",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Fund is dissolved."
              ]
            },
            {
              "name": "HandleBidResult",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 34,
                  "typeName": "DispatchResult",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "The result of trying to submit a new bid to the Slots pallet."
              ]
            },
            {
              "name": "Edited",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "The configuration to a crowdloan has been edited."
              ]
            },
            {
              "name": "MemoUpdated",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "memo",
                  "type": 14,
                  "typeName": "Vec<u8>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "A memo has been updated."
              ]
            },
            {
              "name": "AddedToNewRaise",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "A parachain has been moved to `NewRaise`"
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 488,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "coretime",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "RevenueInfoRequested",
              "fields": [
                {
                  "name": "when",
                  "type": 4,
                  "typeName": "BlockNumberFor<T>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "The broker chain has asked for revenue information for a specific block."
              ]
            },
            {
              "name": "CoreAssigned",
              "fields": [
                {
                  "name": "core",
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A core has received a new assignment from the broker chain."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 489,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Migrated",
              "fields": [
                {
                  "name": "top",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "child",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "compute",
                  "type": 490,
                  "typeName": "MigrationCompute",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Given number of `(top, child)` keys were migrated respectively, with the given",
                "`compute`."
              ]
            },
            {
              "name": "Slashed",
              "fields": [
                {
                  "name": "who",
                  "type": 0,
                  "typeName": "T::AccountId",
                  "docs": []
                },
                {
                  "name": "amount",
                  "type": 6,
                  "typeName": "BalanceOf<T>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "Some account got slashed by the given amount."
              ]
            },
            {
              "name": "AutoMigrationFinished",
              "fields": [],
              "index": 2,
              "docs": [
                "The auto migration task finished."
              ]
            },
            {
              "name": "Halted",
              "fields": [
                {
                  "name": "error",
                  "type": 491,
                  "typeName": "Error<T>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Migration got halted due to an error or miss-configuration."
              ]
            }
          ]
        }
      },
      "docs": [
        "Inner events of this pallet."
      ]
    }
  },
  {
    "id": 490,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "MigrationCompute"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Signed",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Auto",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 491,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MaxSignedLimits",
              "fields": [],
              "index": 0,
              "docs": [
                "Max signed limits not respected."
              ]
            },
            {
              "name": "KeyTooLong",
              "fields": [],
              "index": 1,
              "docs": [
                "A key was longer than the configured maximum.",
                "",
                "This means that the migration halted at the current [`Progress`] and",
                "can be resumed with a larger [`crate::Config::MaxKeyLen`] value.",
                "Retrying with the same [`crate::Config::MaxKeyLen`] value will not work.",
                "The value should only be increased to avoid a storage migration for the currently",
                "stored [`crate::Progress::LastKey`]."
              ]
            },
            {
              "name": "NotEnoughFunds",
              "fields": [],
              "index": 2,
              "docs": [
                "submitter does not have enough funds."
              ]
            },
            {
              "name": "BadWitness",
              "fields": [],
              "index": 3,
              "docs": [
                "Bad witness data provided."
              ]
            },
            {
              "name": "SignedMigrationNotAllowed",
              "fields": [],
              "index": 4,
              "docs": [
                "Signed migration is not allowed because the maximum limit is not set yet."
              ]
            },
            {
              "name": "BadChildRoot",
              "fields": [],
              "index": 5,
              "docs": [
                "Bad child root provided."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 492,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Attempted",
              "fields": [
                {
                  "name": "outcome",
                  "type": 493,
                  "typeName": "xcm::latest::Outcome",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "Execution of an XCM message was attempted."
              ]
            },
            {
              "name": "Sent",
              "fields": [
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "destination",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "message",
                  "type": 400,
                  "typeName": "Xcm<()>",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": [
                "A XCM message was sent."
              ]
            },
            {
              "name": "UnexpectedResponse",
              "fields": [
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": [
                "Query response received which does not match a registered query. This may be because a",
                "matching query was never registered, it may be because it is a duplicate response, or",
                "because the query timed out."
              ]
            },
            {
              "name": "ResponseReady",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "response",
                  "type": 408,
                  "typeName": "Response",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": [
                "Query response has been received and is ready for taking with `take_response`. There is",
                "no registered notification call."
              ]
            },
            {
              "name": "Notified",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": [
                "Query response has been received and query is removed. The registered notification has",
                "been dispatched and executed successfully."
              ]
            },
            {
              "name": "NotifyOverweight",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "actual_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "max_budgeted_weight",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": [
                "Query response has been received and query is removed. The registered notification",
                "could not be dispatched because the dispatch weight is greater than the maximum weight",
                "originally budgeted by this runtime for the query result."
              ]
            },
            {
              "name": "NotifyDispatchError",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 6,
              "docs": [
                "Query response has been received and query is removed. There was a general error with",
                "dispatching the notification call."
              ]
            },
            {
              "name": "NotifyDecodeFailed",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "pallet_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                },
                {
                  "name": "call_index",
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": [
                "Query response has been received and query is removed. The dispatch was unable to be",
                "decoded into a `Call`; this might be due to dispatch function having a signature which",
                "is not `(origin, QueryId, Response)`."
              ]
            },
            {
              "name": "InvalidResponder",
              "fields": [
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "expected_location",
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 8,
              "docs": [
                "Expected query response has been received but the origin location of the response does",
                "not match that expected. The query remains registered for a later, valid, response to",
                "be received and acted upon."
              ]
            },
            {
              "name": "InvalidResponderVersion",
              "fields": [
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": [
                "Expected query response has been received but the expected origin location placed in",
                "storage by this runtime previously cannot be decoded. The query remains registered.",
                "",
                "This is unexpected (since a location placed in storage in a previously executing",
                "runtime should be readable prior to query timeout) and dangerous since the possibly",
                "valid response will be dropped. Manual governance intervention is probably going to be",
                "needed."
              ]
            },
            {
              "name": "ResponseTaken",
              "fields": [
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": [
                "Received query response has been read and removed."
              ]
            },
            {
              "name": "AssetsTrapped",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "VersionedAssets",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": [
                "Some assets have been placed in an asset trap."
              ]
            },
            {
              "name": "VersionChangeNotified",
              "fields": [
                {
                  "name": "destination",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "result",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 12,
              "docs": [
                "An XCM version change notification message has been attempted to be sent.",
                "",
                "The cost of sending it (borne by the chain) is included."
              ]
            },
            {
              "name": "SupportedVersionChanged",
              "fields": [
                {
                  "name": "location",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "version",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 13,
              "docs": [
                "The supported version of a location has been changed. This might be through an",
                "automatic notification or a manual intervention."
              ]
            },
            {
              "name": "NotifyTargetSendFail",
              "fields": [
                {
                  "name": "location",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 386,
                  "typeName": "XcmError",
                  "docs": []
                }
              ],
              "index": 14,
              "docs": [
                "A given location which had a version change subscription was dropped owing to an error",
                "sending the notification to it."
              ]
            },
            {
              "name": "NotifyTargetMigrationFail",
              "fields": [
                {
                  "name": "location",
                  "type": 81,
                  "typeName": "VersionedLocation",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 15,
              "docs": [
                "A given location which had a version change subscription was dropped owing to an error",
                "migrating the location to our new XCM format."
              ]
            },
            {
              "name": "InvalidQuerierVersion",
              "fields": [
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                }
              ],
              "index": 16,
              "docs": [
                "Expected query response has been received but the expected querier location placed in",
                "storage by this runtime previously cannot be decoded. The query remains registered.",
                "",
                "This is unexpected (since a location placed in storage in a previously executing",
                "runtime should be readable prior to query timeout) and dangerous since the possibly",
                "valid response will be dropped. Manual governance intervention is probably going to be",
                "needed."
              ]
            },
            {
              "name": "InvalidQuerier",
              "fields": [
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "query_id",
                  "type": 12,
                  "typeName": "QueryId",
                  "docs": []
                },
                {
                  "name": "expected_querier",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "maybe_actual_querier",
                  "type": 413,
                  "typeName": "Option<Location>",
                  "docs": []
                }
              ],
              "index": 17,
              "docs": [
                "Expected query response has been received but the querier location of the response does",
                "not match the expected. The query remains registered for a later, valid, response to",
                "be received and acted upon."
              ]
            },
            {
              "name": "VersionNotifyStarted",
              "fields": [
                {
                  "name": "destination",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 18,
              "docs": [
                "A remote has requested XCM version change notification from us and we have honored it.",
                "A version information message is sent to them and its cost is included."
              ]
            },
            {
              "name": "VersionNotifyRequested",
              "fields": [
                {
                  "name": "destination",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "We have requested that a remote chain send us XCM version change notifications."
              ]
            },
            {
              "name": "VersionNotifyUnrequested",
              "fields": [
                {
                  "name": "destination",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "cost",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                },
                {
                  "name": "message_id",
                  "type": 1,
                  "typeName": "XcmHash",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": [
                "We have requested that a remote chain stops sending us XCM version change",
                "notifications."
              ]
            },
            {
              "name": "FeesPaid",
              "fields": [
                {
                  "name": "paying",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "fees",
                  "type": 403,
                  "typeName": "Assets",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": [
                "Fees were paid from a location for an operation (often for using `SendXcm`)."
              ]
            },
            {
              "name": "AssetsClaimed",
              "fields": [
                {
                  "name": "hash",
                  "type": 13,
                  "typeName": "H256",
                  "docs": []
                },
                {
                  "name": "origin",
                  "type": 67,
                  "typeName": "Location",
                  "docs": []
                },
                {
                  "name": "assets",
                  "type": 418,
                  "typeName": "VersionedAssets",
                  "docs": []
                }
              ],
              "index": 22,
              "docs": [
                "Some assets have been claimed from an asset trap"
              ]
            },
            {
              "name": "VersionMigrationFinished",
              "fields": [
                {
                  "name": "version",
                  "type": 4,
                  "typeName": "XcmVersion",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": [
                "A XCM version migration finished."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 493,
    "type": {
      "path": [
        "staging_xcm",
        "v4",
        "traits",
        "Outcome"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Complete",
              "fields": [
                {
                  "name": "used",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Incomplete",
              "fields": [
                {
                  "name": "used",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                },
                {
                  "name": "error",
                  "type": 386,
                  "typeName": "Error",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Error",
              "fields": [
                {
                  "name": "error",
                  "type": 386,
                  "typeName": "Error",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 494,
    "type": {
      "path": [
        "pallet_message_queue",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ProcessingFailed",
              "fields": [
                {
                  "name": "id",
                  "type": 13,
                  "typeName": "H256",
                  "docs": [
                    "The `blake2_256` hash of the message."
                  ]
                },
                {
                  "name": "origin",
                  "type": 433,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the message."
                  ]
                },
                {
                  "name": "error",
                  "type": 495,
                  "typeName": "ProcessMessageError",
                  "docs": [
                    "The error that occurred.",
                    "",
                    "This error is pretty opaque. More fine-grained errors need to be emitted as events",
                    "by the `MessageProcessor`."
                  ]
                }
              ],
              "index": 0,
              "docs": [
                "Message discarded due to an error in the `MessageProcessor` (usually a format error)."
              ]
            },
            {
              "name": "Processed",
              "fields": [
                {
                  "name": "id",
                  "type": 13,
                  "typeName": "H256",
                  "docs": [
                    "The `blake2_256` hash of the message."
                  ]
                },
                {
                  "name": "origin",
                  "type": 433,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the message."
                  ]
                },
                {
                  "name": "weight_used",
                  "type": 10,
                  "typeName": "Weight",
                  "docs": [
                    "How much weight was used to process the message."
                  ]
                },
                {
                  "name": "success",
                  "type": 8,
                  "typeName": "bool",
                  "docs": [
                    "Whether the message was processed.",
                    "",
                    "Note that this does not mean that the underlying `MessageProcessor` was internally",
                    "successful. It *solely* means that the MQ pallet will treat this as a success",
                    "condition and discard the message. Any internal error needs to be emitted as events",
                    "by the `MessageProcessor`."
                  ]
                }
              ],
              "index": 1,
              "docs": [
                "Message is processed."
              ]
            },
            {
              "name": "OverweightEnqueued",
              "fields": [
                {
                  "name": "id",
                  "type": 1,
                  "typeName": "[u8; 32]",
                  "docs": [
                    "The `blake2_256` hash of the message."
                  ]
                },
                {
                  "name": "origin",
                  "type": 433,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the message."
                  ]
                },
                {
                  "name": "page_index",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": [
                    "The page of the message."
                  ]
                },
                {
                  "name": "message_index",
                  "type": 4,
                  "typeName": "T::Size",
                  "docs": [
                    "The index of the message within the page."
                  ]
                }
              ],
              "index": 2,
              "docs": [
                "Message placed in overweight queue."
              ]
            },
            {
              "name": "PageReaped",
              "fields": [
                {
                  "name": "origin",
                  "type": 433,
                  "typeName": "MessageOriginOf<T>",
                  "docs": [
                    "The queue of the page."
                  ]
                },
                {
                  "name": "index",
                  "type": 4,
                  "typeName": "PageIndex",
                  "docs": [
                    "The index of the page."
                  ]
                }
              ],
              "index": 3,
              "docs": [
                "This page was reaped."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 495,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "messages",
        "ProcessMessageError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "BadFormat",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Corrupt",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Unsupported",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Overweight",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": "Weight",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Yield",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "StackLimitReached",
              "fields": [],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 496,
    "type": {
      "path": [
        "pallet_asset_rate",
        "pallet",
        "Event"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AssetRateCreated",
              "fields": [
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "T::AssetKind",
                  "docs": []
                },
                {
                  "name": "rate",
                  "type": 436,
                  "typeName": "FixedU128",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "AssetRateRemoved",
              "fields": [
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "T::AssetKind",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "AssetRateUpdated",
              "fields": [
                {
                  "name": "asset_kind",
                  "type": 55,
                  "typeName": "T::AssetKind",
                  "docs": []
                },
                {
                  "name": "old",
                  "type": 436,
                  "typeName": "FixedU128",
                  "docs": []
                },
                {
                  "name": "new",
                  "type": 436,
                  "typeName": "FixedU128",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": [
        "The `Event` enum of this pallet"
      ]
    }
  },
  {
    "id": 497,
    "type": {
      "path": [
        "frame_system",
        "Phase"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ApplyExtrinsic",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Finalization",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Initialization",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 498,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 32
        }
      },
      "docs": []
    }
  },
  {
    "id": 499,
    "type": {
      "path": [
        "frame_system",
        "LastRuntimeUpgradeInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_version",
              "type": 59,
              "typeName": "codec::Compact<u32>",
              "docs": []
            },
            {
              "name": "spec_name",
              "type": 500,
              "typeName": "sp_runtime::RuntimeString",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 500,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "Str"
      },
      "docs": []
    }
  },
  {
    "id": 501,
    "type": {
      "path": [
        "frame_system",
        "CodeUpgradeAuthorization"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "code_hash",
              "type": 13,
              "typeName": "T::Hash",
              "docs": []
            },
            {
              "name": "check_version",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 502,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockWeights"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_block",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_block",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "per_class",
              "type": 503,
              "typeName": "PerDispatchClass<WeightsPerClass>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 503,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 504
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 504,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 504,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 504,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 504,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "WeightsPerClass"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_extrinsic",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "max_extrinsic",
              "type": 452,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "max_total",
              "type": 452,
              "typeName": "Option<Weight>",
              "docs": []
            },
            {
              "name": "reserved",
              "type": 452,
              "typeName": "Option<Weight>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 505,
    "type": {
      "path": [
        "frame_system",
        "limits",
        "BlockLength"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max",
              "type": 506,
              "typeName": "PerDispatchClass<u32>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 506,
    "type": {
      "path": [
        "frame_support",
        "dispatch",
        "PerDispatchClass"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "normal",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "operational",
              "type": 4,
              "typeName": "T",
              "docs": []
            },
            {
              "name": "mandatory",
              "type": 4,
              "typeName": "T",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 507,
    "type": {
      "path": [
        "sp_weights",
        "RuntimeDbWeight"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "read",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "write",
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 508,
    "type": {
      "path": [
        "sp_version",
        "RuntimeVersion"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "spec_name",
              "type": 500,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "impl_name",
              "type": 500,
              "typeName": "RuntimeString",
              "docs": []
            },
            {
              "name": "authoring_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "spec_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "impl_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "apis",
              "type": 509,
              "typeName": "ApisVec",
              "docs": []
            },
            {
              "name": "transaction_version",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "state_version",
              "type": 2,
              "typeName": "u8",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 509,
    "type": {
      "path": [
        "Cow"
      ],
      "params": [
        {
          "name": "T",
          "type": 510
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 510,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 510,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 511
        }
      },
      "docs": []
    }
  },
  {
    "id": 511,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          364,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 512,
    "type": {
      "path": [
        "frame_system",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidSpecName",
              "fields": [],
              "index": 0,
              "docs": [
                "The name of specification does not match between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "SpecVersionNeedsToIncrease",
              "fields": [],
              "index": 1,
              "docs": [
                "The specification version is not allowed to decrease between the current runtime",
                "and the new runtime."
              ]
            },
            {
              "name": "FailedToExtractRuntimeVersion",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to extract the runtime version from the new runtime.",
                "",
                "Either calling `Core_version` or decoding `RuntimeVersion` failed."
              ]
            },
            {
              "name": "NonDefaultComposite",
              "fields": [],
              "index": 3,
              "docs": [
                "Suicide called when the account has non-default composite data."
              ]
            },
            {
              "name": "NonZeroRefCount",
              "fields": [],
              "index": 4,
              "docs": [
                "There is a non-zero reference count preventing the account from being purged."
              ]
            },
            {
              "name": "CallFiltered",
              "fields": [],
              "index": 5,
              "docs": [
                "The origin filter prevent the call to be dispatched."
              ]
            },
            {
              "name": "MultiBlockMigrationsOngoing",
              "fields": [],
              "index": 6,
              "docs": [
                "A multi-block migration is ongoing and prevents the current code from being replaced."
              ]
            },
            {
              "name": "NothingAuthorized",
              "fields": [],
              "index": 7,
              "docs": [
                "No upgrade authorized."
              ]
            },
            {
              "name": "Unauthorized",
              "fields": [],
              "index": 8,
              "docs": [
                "The submitted code is not authorized."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the System pallet"
      ]
    }
  },
  {
    "id": 513,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 514
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 516,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 514,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 515
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 515,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 515,
    "type": {
      "path": [
        "pallet_scheduler",
        "Scheduled"
      ],
      "params": [
        {
          "name": "Name",
          "type": 1
        },
        {
          "name": "Call",
          "type": 92
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "PalletsOrigin",
          "type": 159
        },
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "maybe_id",
              "type": 33,
              "typeName": "Option<Name>",
              "docs": []
            },
            {
              "name": "priority",
              "type": 2,
              "typeName": "schedule::Priority",
              "docs": []
            },
            {
              "name": "call",
              "type": 92,
              "typeName": "Call",
              "docs": []
            },
            {
              "name": "maybe_periodic",
              "type": 99,
              "typeName": "Option<schedule::Period<BlockNumber>>",
              "docs": []
            },
            {
              "name": "origin",
              "type": 159,
              "typeName": "PalletsOrigin",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 516,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 514
        }
      },
      "docs": []
    }
  },
  {
    "id": 517,
    "type": {
      "path": [
        "pallet_scheduler",
        "RetryConfig"
      ],
      "params": [
        {
          "name": "Period",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total_retries",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "remaining",
              "type": 2,
              "typeName": "u8",
              "docs": []
            },
            {
              "name": "period",
              "type": 4,
              "typeName": "Period",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 518,
    "type": {
      "path": [
        "pallet_scheduler",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "FailedToSchedule",
              "fields": [],
              "index": 0,
              "docs": [
                "Failed to schedule a call"
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Cannot find the scheduled call."
              ]
            },
            {
              "name": "TargetBlockNumberInPast",
              "fields": [],
              "index": 2,
              "docs": [
                "Given target block number is in the past."
              ]
            },
            {
              "name": "RescheduleNoChange",
              "fields": [],
              "index": 3,
              "docs": [
                "Reschedule failed because it does not change scheduled time."
              ]
            },
            {
              "name": "Named",
              "fields": [],
              "index": 4,
              "docs": [
                "Attempt to use a non-named function on a named task."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 519,
    "type": {
      "path": [
        "pallet_preimage",
        "OldRequestStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unrequested",
              "fields": [
                {
                  "name": "deposit",
                  "type": 260,
                  "typeName": "(AccountId, Balance)",
                  "docs": []
                },
                {
                  "name": "len",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Requested",
              "fields": [
                {
                  "name": "deposit",
                  "type": 520,
                  "typeName": "Option<(AccountId, Balance)>",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "len",
                  "type": 152,
                  "typeName": "Option<u32>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 520,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 260
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 260,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 521,
    "type": {
      "path": [
        "pallet_preimage",
        "RequestStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Ticket",
          "type": 522
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unrequested",
              "fields": [
                {
                  "name": "ticket",
                  "type": 523,
                  "typeName": "(AccountId, Ticket)",
                  "docs": []
                },
                {
                  "name": "len",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Requested",
              "fields": [
                {
                  "name": "maybe_ticket",
                  "type": 524,
                  "typeName": "Option<(AccountId, Ticket)>",
                  "docs": []
                },
                {
                  "name": "count",
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                },
                {
                  "name": "maybe_len",
                  "type": 152,
                  "typeName": "Option<u32>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 522,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "fungible",
        "HoldConsideration"
      ],
      "params": [
        {
          "name": "A",
          "type": null
        },
        {
          "name": "F",
          "type": null
        },
        {
          "name": "R",
          "type": null
        },
        {
          "name": "D",
          "type": null
        },
        {
          "name": "Fp",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 6,
              "typeName": "F::Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 523,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          522
        ]
      },
      "docs": []
    }
  },
  {
    "id": 524,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 523
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 523,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 525,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          13,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 526,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 527,
    "type": {
      "path": [
        "pallet_preimage",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooBig",
              "fields": [],
              "index": 0,
              "docs": [
                "Preimage is too large to store on-chain."
              ]
            },
            {
              "name": "AlreadyNoted",
              "fields": [],
              "index": 1,
              "docs": [
                "Preimage has already been noted on-chain."
              ]
            },
            {
              "name": "NotAuthorized",
              "fields": [],
              "index": 2,
              "docs": [
                "The user is not authorized to perform this action."
              ]
            },
            {
              "name": "NotNoted",
              "fields": [],
              "index": 3,
              "docs": [
                "The preimage cannot be removed since it has not yet been noted."
              ]
            },
            {
              "name": "Requested",
              "fields": [],
              "index": 4,
              "docs": [
                "A preimage may not be removed when there are outstanding requests."
              ]
            },
            {
              "name": "NotRequested",
              "fields": [],
              "index": 5,
              "docs": [
                "The preimage request cannot be removed since no outstanding requests exist."
              ]
            },
            {
              "name": "TooMany",
              "fields": [],
              "index": 6,
              "docs": [
                "More than `MAX_HASH_UPGRADE_BULK_COUNT` hashes were requested to be upgraded at once."
              ]
            },
            {
              "name": "TooFew",
              "fields": [],
              "index": 7,
              "docs": [
                "Too few hashes were requested to be upgraded (i.e. zero)."
              ]
            },
            {
              "name": "NoCost",
              "fields": [],
              "index": 8,
              "docs": [
                "No ticket with a cost was returned by [`Config::Consideration`] to store the preimage."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 528,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 529
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 530,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 529,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          105,
          12
        ]
      },
      "docs": []
    }
  },
  {
    "id": 530,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 529
        }
      },
      "docs": []
    }
  },
  {
    "id": 531,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 1
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 532,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 532,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 1
        }
      },
      "docs": []
    }
  },
  {
    "id": 533,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 534
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 534,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 534,
    "type": {
      "path": [
        "sp_consensus_babe",
        "digests",
        "PreDigest"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Primary",
              "fields": [
                {
                  "name": null,
                  "type": 535,
                  "typeName": "PrimaryPreDigest",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "SecondaryPlain",
              "fields": [
                {
                  "name": null,
                  "type": 537,
                  "typeName": "SecondaryPlainPreDigest",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "SecondaryVRF",
              "fields": [
                {
                  "name": null,
                  "type": 538,
                  "typeName": "SecondaryVRFPreDigest",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 535,
    "type": {
      "path": [
        "sp_consensus_babe",
        "digests",
        "PrimaryPreDigest"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "authority_index",
              "type": 4,
              "typeName": "super::AuthorityIndex",
              "docs": []
            },
            {
              "name": "slot",
              "type": 106,
              "typeName": "Slot",
              "docs": []
            },
            {
              "name": "vrf_signature",
              "type": 536,
              "typeName": "VrfSignature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 536,
    "type": {
      "path": [
        "sp_core",
        "sr25519",
        "vrf",
        "VrfSignature"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "pre_output",
              "type": 1,
              "typeName": "VrfPreOutput",
              "docs": []
            },
            {
              "name": "proof",
              "type": 146,
              "typeName": "VrfProof",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 537,
    "type": {
      "path": [
        "sp_consensus_babe",
        "digests",
        "SecondaryPlainPreDigest"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "authority_index",
              "type": 4,
              "typeName": "super::AuthorityIndex",
              "docs": []
            },
            {
              "name": "slot",
              "type": 106,
              "typeName": "Slot",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 538,
    "type": {
      "path": [
        "sp_consensus_babe",
        "digests",
        "SecondaryVRFPreDigest"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "authority_index",
              "type": 4,
              "typeName": "super::AuthorityIndex",
              "docs": []
            },
            {
              "name": "slot",
              "type": 106,
              "typeName": "Slot",
              "docs": []
            },
            {
              "name": "vrf_signature",
              "type": 536,
              "typeName": "VrfSignature",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 539,
    "type": {
      "path": [
        "sp_consensus_babe",
        "BabeEpochConfiguration"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "c",
              "type": 109,
              "typeName": "(u64, u64)",
              "docs": []
            },
            {
              "name": "allowed_slots",
              "type": 110,
              "typeName": "AllowedSlots",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 540,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 541
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 542,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 541,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          12,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 542,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 541
        }
      },
      "docs": []
    }
  },
  {
    "id": 543,
    "type": {
      "path": [
        "pallet_babe",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 0,
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 1,
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 2,
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ]
            },
            {
              "name": "InvalidConfiguration",
              "fields": [],
              "index": 3,
              "docs": [
                "Submitted configuration is invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 544,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          6,
          8
        ]
      },
      "docs": []
    }
  },
  {
    "id": 545,
    "type": {
      "path": [
        "pallet_indices",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotAssigned",
              "fields": [],
              "index": 0,
              "docs": [
                "The index was not already assigned."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 1,
              "docs": [
                "The index is assigned to another account."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 2,
              "docs": [
                "The index was not available."
              ]
            },
            {
              "name": "NotTransfer",
              "fields": [],
              "index": 3,
              "docs": [
                "The source and destination accounts are identical."
              ]
            },
            {
              "name": "Permanent",
              "fields": [],
              "index": 4,
              "docs": [
                "The index is permanent and may not be freed/changed."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 546,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 547
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 549,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 547,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "BalanceLock"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 364,
              "typeName": "LockIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "reasons",
              "type": 548,
              "typeName": "Reasons",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 548,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "Reasons"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Fee",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Misc",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "All",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 549,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 547
        }
      },
      "docs": []
    }
  },
  {
    "id": 550,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 551
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 552,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 551,
    "type": {
      "path": [
        "pallet_balances",
        "types",
        "ReserveData"
      ],
      "params": [
        {
          "name": "ReserveIdentifier",
          "type": 364
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 364,
              "typeName": "ReserveIdentifier",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 552,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 551
        }
      },
      "docs": []
    }
  },
  {
    "id": 553,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 554
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 558,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 554,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "IdAmount"
      ],
      "params": [
        {
          "name": "Id",
          "type": 555
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 555,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 555,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeHoldReason"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Preimage",
              "fields": [
                {
                  "name": null,
                  "type": 556,
                  "typeName": "pallet_preimage::HoldReason",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "StateTrieMigration",
              "fields": [
                {
                  "name": null,
                  "type": 557,
                  "typeName": "pallet_state_trie_migration::HoldReason",
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 556,
    "type": {
      "path": [
        "pallet_preimage",
        "pallet",
        "HoldReason"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Preimage",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 557,
    "type": {
      "path": [
        "pallet_state_trie_migration",
        "pallet",
        "HoldReason"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "SlashForMigrate",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 558,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 554
        }
      },
      "docs": []
    }
  },
  {
    "id": 559,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 560
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 563,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 560,
    "type": {
      "path": [
        "frame_support",
        "traits",
        "tokens",
        "misc",
        "IdAmount"
      ],
      "params": [
        {
          "name": "Id",
          "type": 561
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 561,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 561,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeFreezeReason"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NominationPools",
              "fields": [
                {
                  "name": null,
                  "type": 562,
                  "typeName": "pallet_nomination_pools::FreezeReason",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 562,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "pallet",
        "FreezeReason"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PoolMinBalance",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 563,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 560
        }
      },
      "docs": []
    }
  },
  {
    "id": 564,
    "type": {
      "path": [
        "pallet_balances",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "VestingBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Vesting balance too high to send value."
              ]
            },
            {
              "name": "LiquidityRestrictions",
              "fields": [],
              "index": 1,
              "docs": [
                "Account liquidity restrictions prevent withdrawal."
              ]
            },
            {
              "name": "InsufficientBalance",
              "fields": [],
              "index": 2,
              "docs": [
                "Balance too low to send value."
              ]
            },
            {
              "name": "ExistentialDeposit",
              "fields": [],
              "index": 3,
              "docs": [
                "Value too low to create account due to existential deposit."
              ]
            },
            {
              "name": "Expendability",
              "fields": [],
              "index": 4,
              "docs": [
                "Transfer/payment would kill account."
              ]
            },
            {
              "name": "ExistingVestingSchedule",
              "fields": [],
              "index": 5,
              "docs": [
                "A vesting schedule already exists for this account."
              ]
            },
            {
              "name": "DeadAccount",
              "fields": [],
              "index": 6,
              "docs": [
                "Beneficiary account must pre-exist."
              ]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 7,
              "docs": [
                "Number of named reserves exceed `MaxReserves`."
              ]
            },
            {
              "name": "TooManyHolds",
              "fields": [],
              "index": 8,
              "docs": [
                "Number of holds exceed `VariantCountOf<T::RuntimeHoldReason>`."
              ]
            },
            {
              "name": "TooManyFreezes",
              "fields": [],
              "index": 9,
              "docs": [
                "Number of freezes exceed `MaxFreezes`."
              ]
            },
            {
              "name": "IssuanceDeactivated",
              "fields": [],
              "index": 10,
              "docs": [
                "The issuance cannot be modified since it is already deactivated."
              ]
            },
            {
              "name": "DeltaZero",
              "fields": [],
              "index": 11,
              "docs": [
                "The delta cannot be zero."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 565,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V1Ancient",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V2",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 566,
    "type": {
      "path": [
        "pallet_staking",
        "StakingLedger"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "stash",
              "type": 0,
              "typeName": "T::AccountId",
              "docs": []
            },
            {
              "name": "total",
              "type": 63,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "active",
              "type": 63,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "unlocking",
              "type": 130,
              "typeName": "BoundedVec<UnlockChunk<BalanceOf<T>>, T::MaxUnlockingChunks>",
              "docs": []
            },
            {
              "name": "legacy_claimed_rewards",
              "type": 567,
              "typeName": "BoundedVec<EraIndex, T::HistoryDepth>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 567,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 121,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 568,
    "type": {
      "path": [
        "pallet_staking",
        "Nominations"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "targets",
              "type": 569,
              "typeName": "BoundedVec<T::AccountId, MaxNominationsOf<T>>",
              "docs": []
            },
            {
              "name": "submitted_in",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "suppressed",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 569,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 116,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 570,
    "type": {
      "path": [
        "pallet_staking",
        "ActiveEraInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "index",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "start",
              "type": 571,
              "typeName": "Option<u64>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 571,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 12
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 572,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0
        ]
      },
      "docs": []
    }
  },
  {
    "id": 573,
    "type": {
      "path": [
        "sp_staking",
        "Exposure"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "own",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "others",
              "type": 574,
              "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 574,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 575
        }
      },
      "docs": []
    }
  },
  {
    "id": 575,
    "type": {
      "path": [
        "sp_staking",
        "IndividualExposure"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 576,
    "type": {
      "path": [
        "sp_staking",
        "PagedExposureMetadata"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "own",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "nominator_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "page_count",
              "type": 4,
              "typeName": "Page",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 577,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 578,
    "type": {
      "path": [
        "sp_staking",
        "ExposurePage"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "page_total",
              "type": 63,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "others",
              "type": 574,
              "typeName": "Vec<IndividualExposure<AccountId, Balance>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 579,
    "type": {
      "path": [
        "pallet_staking",
        "EraRewardPoints"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "total",
              "type": 4,
              "typeName": "RewardPoint",
              "docs": []
            },
            {
              "name": "individual",
              "type": 580,
              "typeName": "BTreeMap<AccountId, RewardPoint>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 580,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 0
        },
        {
          "name": "V",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 581,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 581,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 582
        }
      },
      "docs": []
    }
  },
  {
    "id": 582,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 583,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 584
        }
      },
      "docs": []
    }
  },
  {
    "id": 584,
    "type": {
      "path": [
        "pallet_staking",
        "UnappliedSlash"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "validator",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "own",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "others",
              "type": 259,
              "typeName": "Vec<(AccountId, Balance)>",
              "docs": []
            },
            {
              "name": "reporters",
              "type": 116,
              "typeName": "Vec<AccountId>",
              "docs": []
            },
            {
              "name": "payout",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 585,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          43,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 586,
    "type": {
      "path": [
        "pallet_staking",
        "slashing",
        "SlashingSpans"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "span_index",
              "type": 4,
              "typeName": "SpanIndex",
              "docs": []
            },
            {
              "name": "last_start",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "last_nonzero_slash",
              "type": 4,
              "typeName": "EraIndex",
              "docs": []
            },
            {
              "name": "prior",
              "type": 121,
              "typeName": "Vec<EraIndex>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 587,
    "type": {
      "path": [
        "pallet_staking",
        "slashing",
        "SpanRecord"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "slashed",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "paid_out",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 588,
    "type": {
      "path": [
        "pallet_staking",
        "pallet",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotController",
              "fields": [],
              "index": 0,
              "docs": [
                "Not a controller account."
              ]
            },
            {
              "name": "NotStash",
              "fields": [],
              "index": 1,
              "docs": [
                "Not a stash account."
              ]
            },
            {
              "name": "AlreadyBonded",
              "fields": [],
              "index": 2,
              "docs": [
                "Stash is already bonded."
              ]
            },
            {
              "name": "AlreadyPaired",
              "fields": [],
              "index": 3,
              "docs": [
                "Controller is already paired."
              ]
            },
            {
              "name": "EmptyTargets",
              "fields": [],
              "index": 4,
              "docs": [
                "Targets cannot be empty."
              ]
            },
            {
              "name": "DuplicateIndex",
              "fields": [],
              "index": 5,
              "docs": [
                "Duplicate index."
              ]
            },
            {
              "name": "InvalidSlashIndex",
              "fields": [],
              "index": 6,
              "docs": [
                "Slash record index out of bounds."
              ]
            },
            {
              "name": "InsufficientBond",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot have a validator or nominator role, with value less than the minimum defined by",
                "governance (see `MinValidatorBond` and `MinNominatorBond`). If unbonding is the",
                "intention, `chill` first to remove one's role as validator/nominator."
              ]
            },
            {
              "name": "NoMoreChunks",
              "fields": [],
              "index": 8,
              "docs": [
                "Can not schedule more unlock chunks."
              ]
            },
            {
              "name": "NoUnlockChunk",
              "fields": [],
              "index": 9,
              "docs": [
                "Can not rebond without unlocking chunks."
              ]
            },
            {
              "name": "FundedTarget",
              "fields": [],
              "index": 10,
              "docs": [
                "Attempting to target a stash that still has funds."
              ]
            },
            {
              "name": "InvalidEraToReward",
              "fields": [],
              "index": 11,
              "docs": [
                "Invalid era to reward."
              ]
            },
            {
              "name": "InvalidNumberOfNominations",
              "fields": [],
              "index": 12,
              "docs": [
                "Invalid number of nominations."
              ]
            },
            {
              "name": "NotSortedAndUnique",
              "fields": [],
              "index": 13,
              "docs": [
                "Items are not sorted and unique."
              ]
            },
            {
              "name": "AlreadyClaimed",
              "fields": [],
              "index": 14,
              "docs": [
                "Rewards for this era have already been claimed for this validator."
              ]
            },
            {
              "name": "InvalidPage",
              "fields": [],
              "index": 15,
              "docs": [
                "No nominators exist on this page."
              ]
            },
            {
              "name": "IncorrectHistoryDepth",
              "fields": [],
              "index": 16,
              "docs": [
                "Incorrect previous history depth input provided."
              ]
            },
            {
              "name": "IncorrectSlashingSpans",
              "fields": [],
              "index": 17,
              "docs": [
                "Incorrect number of slashing spans provided."
              ]
            },
            {
              "name": "BadState",
              "fields": [],
              "index": 18,
              "docs": [
                "Internal state has become somehow corrupted and the operation cannot continue."
              ]
            },
            {
              "name": "TooManyTargets",
              "fields": [],
              "index": 19,
              "docs": [
                "Too many nomination targets supplied."
              ]
            },
            {
              "name": "BadTarget",
              "fields": [],
              "index": 20,
              "docs": [
                "A nomination target was supplied that was blocked or otherwise not a validator."
              ]
            },
            {
              "name": "CannotChillOther",
              "fields": [],
              "index": 21,
              "docs": [
                "The user has enough bond and thus cannot be chilled forcefully by an external person."
              ]
            },
            {
              "name": "TooManyNominators",
              "fields": [],
              "index": 22,
              "docs": [
                "There are too many nominators in the system. Governance needs to adjust the staking",
                "settings to keep things safe for the runtime."
              ]
            },
            {
              "name": "TooManyValidators",
              "fields": [],
              "index": 23,
              "docs": [
                "There are too many validator candidates in the system. Governance needs to adjust the",
                "staking settings to keep things safe for the runtime."
              ]
            },
            {
              "name": "CommissionTooLow",
              "fields": [],
              "index": 24,
              "docs": [
                "Commission is too low. Must be at least `MinCommission`."
              ]
            },
            {
              "name": "BoundNotMet",
              "fields": [],
              "index": 25,
              "docs": [
                "Some bound is not met."
              ]
            },
            {
              "name": "ControllerDeprecated",
              "fields": [],
              "index": 26,
              "docs": [
                "Used when attempting to use deprecated controller account logic."
              ]
            },
            {
              "name": "CannotRestoreLedger",
              "fields": [],
              "index": 27,
              "docs": [
                "Cannot reset a ledger."
              ]
            },
            {
              "name": "RewardDestinationRestricted",
              "fields": [],
              "index": 28,
              "docs": [
                "Provided reward destination is not allowed."
              ]
            },
            {
              "name": "NotEnoughFunds",
              "fields": [],
              "index": 29,
              "docs": [
                "Not enough funds available to withdraw."
              ]
            },
            {
              "name": "VirtualStakerNotAllowed",
              "fields": [],
              "index": 30,
              "docs": [
                "Operation not allowed for virtual stakers."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 589,
    "type": {
      "path": [
        "sp_staking",
        "offence",
        "OffenceDetails"
      ],
      "params": [
        {
          "name": "Reporter",
          "type": 0
        },
        {
          "name": "Offender",
          "type": 590
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "offender",
              "type": 590,
              "typeName": "Offender",
              "docs": []
            },
            {
              "name": "reporters",
              "type": 116,
              "typeName": "Vec<Reporter>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 590,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          573
        ]
      },
      "docs": []
    }
  },
  {
    "id": 591,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          48,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 592,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 593
        }
      },
      "docs": []
    }
  },
  {
    "id": 593,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          134
        ]
      },
      "docs": []
    }
  },
  {
    "id": 594,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          595,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 595,
    "type": {
      "path": [
        "sp_core",
        "crypto",
        "KeyTypeId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 18,
              "typeName": "[u8; 4]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 596,
    "type": {
      "path": [
        "pallet_session",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidProof",
              "fields": [],
              "index": 0,
              "docs": [
                "Invalid ownership proof."
              ]
            },
            {
              "name": "NoAssociatedValidatorId",
              "fields": [],
              "index": 1,
              "docs": [
                "No associated validator ID for account."
              ]
            },
            {
              "name": "DuplicatedKey",
              "fields": [],
              "index": 2,
              "docs": [
                "Registered duplicate key."
              ]
            },
            {
              "name": "NoKeys",
              "fields": [],
              "index": 3,
              "docs": [
                "No keys are associated with this account."
              ]
            },
            {
              "name": "NoAccount",
              "fields": [],
              "index": 4,
              "docs": [
                "Key setting account is not live, so it's impossible to associate keys."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the session pallet."
      ]
    }
  },
  {
    "id": 597,
    "type": {
      "path": [
        "pallet_grandpa",
        "StoredState"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Live",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PendingPause",
              "fields": [
                {
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Paused",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "PendingResume",
              "fields": [
                {
                  "name": "scheduled_at",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                },
                {
                  "name": "delay",
                  "type": 4,
                  "typeName": "N",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 598,
    "type": {
      "path": [
        "pallet_grandpa",
        "StoredPendingChange"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        },
        {
          "name": "Limit",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "scheduled_at",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "next_authorities",
              "type": 599,
              "typeName": "BoundedAuthorityList<Limit>",
              "docs": []
            },
            {
              "name": "forced",
              "type": 152,
              "typeName": "Option<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 599,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 52
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 51,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 600,
    "type": {
      "path": [
        "pallet_grandpa",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PauseFailed",
              "fields": [],
              "index": 0,
              "docs": [
                "Attempt to signal GRANDPA pause when the authority set isn't live",
                "(either paused or already pending pause)."
              ]
            },
            {
              "name": "ResumeFailed",
              "fields": [],
              "index": 1,
              "docs": [
                "Attempt to signal GRANDPA resume when the authority set isn't paused",
                "(either live or already pending resume)."
              ]
            },
            {
              "name": "ChangePending",
              "fields": [],
              "index": 2,
              "docs": [
                "Attempt to signal GRANDPA change with one already pending."
              ]
            },
            {
              "name": "TooSoon",
              "fields": [],
              "index": 3,
              "docs": [
                "Cannot signal forced change so soon after last."
              ]
            },
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 4,
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 5,
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 6,
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 601,
    "type": {
      "path": [
        "bounded_collections",
        "weak_bounded_vec",
        "WeakBoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 137
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 602,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 602,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 137
        }
      },
      "docs": []
    }
  },
  {
    "id": 603,
    "type": {
      "path": [
        "pallet_treasury",
        "Proposal"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "beneficiary",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "bond",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 604,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 121,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 605,
    "type": {
      "path": [
        "pallet_treasury",
        "SpendStatus"
      ],
      "params": [
        {
          "name": "AssetKind",
          "type": 55
        },
        {
          "name": "AssetBalance",
          "type": 6
        },
        {
          "name": "Beneficiary",
          "type": 81
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "PaymentId",
          "type": 12
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "asset_kind",
              "type": 55,
              "typeName": "AssetKind",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "AssetBalance",
              "docs": []
            },
            {
              "name": "beneficiary",
              "type": 81,
              "typeName": "Beneficiary",
              "docs": []
            },
            {
              "name": "valid_from",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "expire_at",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "status",
              "type": 606,
              "typeName": "PaymentState<PaymentId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 606,
    "type": {
      "path": [
        "pallet_treasury",
        "PaymentState"
      ],
      "params": [
        {
          "name": "Id",
          "type": 12
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Pending",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Attempted",
              "fields": [
                {
                  "name": "id",
                  "type": 12,
                  "typeName": "Id",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Failed",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 607,
    "type": {
      "path": [
        "sp_arithmetic",
        "per_things",
        "Permill"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 608,
    "type": {
      "path": [
        "frame_support",
        "PalletId"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 364,
              "typeName": "[u8; 8]",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 609,
    "type": {
      "path": [
        "pallet_treasury",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 0,
              "docs": [
                "No proposal, bounty or spend at that index."
              ]
            },
            {
              "name": "TooManyApprovals",
              "fields": [],
              "index": 1,
              "docs": [
                "Too many approvals in the queue."
              ]
            },
            {
              "name": "InsufficientPermission",
              "fields": [],
              "index": 2,
              "docs": [
                "The spend origin is valid but the amount it is allowed to spend is lower than the",
                "amount to be spent."
              ]
            },
            {
              "name": "ProposalNotApproved",
              "fields": [],
              "index": 3,
              "docs": [
                "Proposal has not been approved."
              ]
            },
            {
              "name": "FailedToConvertBalance",
              "fields": [],
              "index": 4,
              "docs": [
                "The balance of the asset kind is not convertible to the balance of the native asset."
              ]
            },
            {
              "name": "SpendExpired",
              "fields": [],
              "index": 5,
              "docs": [
                "The spend has expired and cannot be claimed."
              ]
            },
            {
              "name": "EarlyPayout",
              "fields": [],
              "index": 6,
              "docs": [
                "The spend is not yet eligible for payout."
              ]
            },
            {
              "name": "AlreadyAttempted",
              "fields": [],
              "index": 7,
              "docs": [
                "The payment has already been attempted."
              ]
            },
            {
              "name": "PayoutError",
              "fields": [],
              "index": 8,
              "docs": [
                "There was some issue with the mechanism of payment."
              ]
            },
            {
              "name": "NotAttempted",
              "fields": [],
              "index": 9,
              "docs": [
                "The payout was not yet attempted/claimed."
              ]
            },
            {
              "name": "Inconclusive",
              "fields": [],
              "index": 10,
              "docs": [
                "The payment has neither failed nor succeeded yet."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the treasury pallet."
      ]
    }
  },
  {
    "id": 610,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          91
        ]
      },
      "docs": []
    }
  },
  {
    "id": 611,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "vote",
        "Voting"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "PollIndex",
          "type": 4
        },
        {
          "name": "MaxVotes",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Casting",
              "fields": [
                {
                  "name": null,
                  "type": 612,
                  "typeName": "Casting<Balance, BlockNumber, PollIndex, MaxVotes>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Delegating",
              "fields": [
                {
                  "name": null,
                  "type": 618,
                  "typeName": "Delegating<Balance, AccountId, BlockNumber>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 612,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "vote",
        "Casting"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "PollIndex",
          "type": 4
        },
        {
          "name": "MaxVotes",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes",
              "type": 613,
              "typeName": "BoundedVec<(PollIndex, AccountVote<Balance>), MaxVotes>",
              "docs": []
            },
            {
              "name": "delegations",
              "type": 616,
              "typeName": "Delegations<Balance>",
              "docs": []
            },
            {
              "name": "prior",
              "type": 617,
              "typeName": "PriorLock<BlockNumber, Balance>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 613,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 614
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 615,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 614,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          154
        ]
      },
      "docs": []
    }
  },
  {
    "id": 615,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 614
        }
      },
      "docs": []
    }
  },
  {
    "id": 616,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "types",
        "Delegations"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "capital",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 617,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "vote",
        "PriorLock"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": null,
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 618,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "vote",
        "Delegating"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "balance",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "target",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "conviction",
              "type": 156,
              "typeName": "Conviction",
              "docs": []
            },
            {
              "name": "delegations",
              "type": 616,
              "typeName": "Delegations<Balance>",
              "docs": []
            },
            {
              "name": "prior",
              "type": 617,
              "typeName": "PriorLock<BlockNumber, Balance>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 619,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 620
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 621,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 620,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          91,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 621,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 620
        }
      },
      "docs": []
    }
  },
  {
    "id": 622,
    "type": {
      "path": [
        "pallet_conviction_voting",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotOngoing",
              "fields": [],
              "index": 0,
              "docs": [
                "Poll is not ongoing."
              ]
            },
            {
              "name": "NotVoter",
              "fields": [],
              "index": 1,
              "docs": [
                "The given account did not vote on the poll."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 2,
              "docs": [
                "The actor has no permission to conduct the action."
              ]
            },
            {
              "name": "NoPermissionYet",
              "fields": [],
              "index": 3,
              "docs": [
                "The actor has no permission to conduct the action right now but will do in the future."
              ]
            },
            {
              "name": "AlreadyDelegating",
              "fields": [],
              "index": 4,
              "docs": [
                "The account is already delegating."
              ]
            },
            {
              "name": "AlreadyVoting",
              "fields": [],
              "index": 5,
              "docs": [
                "The account currently has votes attached to it and the operation cannot succeed until",
                "these are removed through `remove_vote`."
              ]
            },
            {
              "name": "InsufficientFunds",
              "fields": [],
              "index": 6,
              "docs": [
                "Too high a balance was provided that the account cannot afford."
              ]
            },
            {
              "name": "NotDelegating",
              "fields": [],
              "index": 7,
              "docs": [
                "The account is not currently delegating."
              ]
            },
            {
              "name": "Nonsense",
              "fields": [],
              "index": 8,
              "docs": [
                "Delegation to oneself makes no sense."
              ]
            },
            {
              "name": "MaxVotesReached",
              "fields": [],
              "index": 9,
              "docs": [
                "Maximum number of votes reached."
              ]
            },
            {
              "name": "ClassNeeded",
              "fields": [],
              "index": 10,
              "docs": [
                "The class must be supplied since it is not easily determinable from the state."
              ]
            },
            {
              "name": "BadClass",
              "fields": [],
              "index": 11,
              "docs": [
                "The class ID supplied is invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 623,
    "type": {
      "path": [
        "pallet_referenda",
        "types",
        "ReferendumInfo"
      ],
      "params": [
        {
          "name": "TrackId",
          "type": 91
        },
        {
          "name": "RuntimeOrigin",
          "type": 159
        },
        {
          "name": "Moment",
          "type": 4
        },
        {
          "name": "Call",
          "type": 92
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "Tally",
          "type": 448
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "ScheduleAddress",
          "type": 32
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ongoing",
              "fields": [
                {
                  "name": null,
                  "type": 624,
                  "typeName": "ReferendumStatus<TrackId, RuntimeOrigin, Moment, Call, Balance, Tally,\nAccountId, ScheduleAddress,>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Approved",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Rejected",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Cancelled",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "TimedOut",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 626,
                  "typeName": "Option<Deposit<AccountId, Balance>>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Killed",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "Moment",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 624,
    "type": {
      "path": [
        "pallet_referenda",
        "types",
        "ReferendumStatus"
      ],
      "params": [
        {
          "name": "TrackId",
          "type": 91
        },
        {
          "name": "RuntimeOrigin",
          "type": 159
        },
        {
          "name": "Moment",
          "type": 4
        },
        {
          "name": "Call",
          "type": 92
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "Tally",
          "type": 448
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "ScheduleAddress",
          "type": 32
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "track",
              "type": 91,
              "typeName": "TrackId",
              "docs": []
            },
            {
              "name": "origin",
              "type": 159,
              "typeName": "RuntimeOrigin",
              "docs": []
            },
            {
              "name": "proposal",
              "type": 92,
              "typeName": "Call",
              "docs": []
            },
            {
              "name": "enactment",
              "type": 166,
              "typeName": "DispatchTime<Moment>",
              "docs": []
            },
            {
              "name": "submitted",
              "type": 4,
              "typeName": "Moment",
              "docs": []
            },
            {
              "name": "submission_deposit",
              "type": 625,
              "typeName": "Deposit<AccountId, Balance>",
              "docs": []
            },
            {
              "name": "decision_deposit",
              "type": 626,
              "typeName": "Option<Deposit<AccountId, Balance>>",
              "docs": []
            },
            {
              "name": "deciding",
              "type": 627,
              "typeName": "Option<DecidingStatus<Moment>>",
              "docs": []
            },
            {
              "name": "tally",
              "type": 448,
              "typeName": "Tally",
              "docs": []
            },
            {
              "name": "in_queue",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "alarm",
              "type": 629,
              "typeName": "Option<(Moment, ScheduleAddress)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 625,
    "type": {
      "path": [
        "pallet_referenda",
        "types",
        "Deposit"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "amount",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 626,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 625
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 625,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 627,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 628
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 628,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 628,
    "type": {
      "path": [
        "pallet_referenda",
        "types",
        "DecidingStatus"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "since",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "confirming",
              "type": 152,
              "typeName": "Option<BlockNumber>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 629,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 630
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 630,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 630,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          32
        ]
      },
      "docs": []
    }
  },
  {
    "id": 631,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 632
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 633,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 632,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 633,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 632
        }
      },
      "docs": []
    }
  },
  {
    "id": 634,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 635
        }
      },
      "docs": []
    }
  },
  {
    "id": 635,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          91,
          636
        ]
      },
      "docs": []
    }
  },
  {
    "id": 636,
    "type": {
      "path": [
        "pallet_referenda",
        "types",
        "TrackInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "Moment",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "name",
              "type": 500,
              "typeName": "&'static str",
              "docs": []
            },
            {
              "name": "max_deciding",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "decision_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "prepare_period",
              "type": 4,
              "typeName": "Moment",
              "docs": []
            },
            {
              "name": "decision_period",
              "type": 4,
              "typeName": "Moment",
              "docs": []
            },
            {
              "name": "confirm_period",
              "type": 4,
              "typeName": "Moment",
              "docs": []
            },
            {
              "name": "min_enactment_period",
              "type": 4,
              "typeName": "Moment",
              "docs": []
            },
            {
              "name": "min_approval",
              "type": 637,
              "typeName": "Curve",
              "docs": []
            },
            {
              "name": "min_support",
              "type": 637,
              "typeName": "Curve",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 637,
    "type": {
      "path": [
        "pallet_referenda",
        "types",
        "Curve"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "LinearDecreasing",
              "fields": [
                {
                  "name": "length",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "floor",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "ceil",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "SteppedDecreasing",
              "fields": [
                {
                  "name": "begin",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "end",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "step",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                },
                {
                  "name": "period",
                  "type": 43,
                  "typeName": "Perbill",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Reciprocal",
              "fields": [
                {
                  "name": "factor",
                  "type": 638,
                  "typeName": "FixedI64",
                  "docs": []
                },
                {
                  "name": "x_offset",
                  "type": 638,
                  "typeName": "FixedI64",
                  "docs": []
                },
                {
                  "name": "y_offset",
                  "type": 638,
                  "typeName": "FixedI64",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 638,
    "type": {
      "path": [
        "sp_arithmetic",
        "fixed_point",
        "FixedI64"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 639,
              "typeName": "i64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 639,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "primitive": "I64"
      },
      "docs": []
    }
  },
  {
    "id": 640,
    "type": {
      "path": [
        "pallet_referenda",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotOngoing",
              "fields": [],
              "index": 0,
              "docs": [
                "Referendum is not ongoing."
              ]
            },
            {
              "name": "HasDeposit",
              "fields": [],
              "index": 1,
              "docs": [
                "Referendum's decision deposit is already paid."
              ]
            },
            {
              "name": "BadTrack",
              "fields": [],
              "index": 2,
              "docs": [
                "The track identifier given was invalid."
              ]
            },
            {
              "name": "Full",
              "fields": [],
              "index": 3,
              "docs": [
                "There are already a full complement of referenda in progress for this track."
              ]
            },
            {
              "name": "QueueEmpty",
              "fields": [],
              "index": 4,
              "docs": [
                "The queue of the track is empty."
              ]
            },
            {
              "name": "BadReferendum",
              "fields": [],
              "index": 5,
              "docs": [
                "The referendum index provided is invalid in this context."
              ]
            },
            {
              "name": "NothingToDo",
              "fields": [],
              "index": 6,
              "docs": [
                "There was nothing to do in the advancement."
              ]
            },
            {
              "name": "NoTrack",
              "fields": [],
              "index": 7,
              "docs": [
                "No track exists for the proposal origin."
              ]
            },
            {
              "name": "Unfinished",
              "fields": [],
              "index": 8,
              "docs": [
                "Any deposit cannot be refunded until after the decision is over."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 9,
              "docs": [
                "The deposit refunder is not the depositor."
              ]
            },
            {
              "name": "NoDeposit",
              "fields": [],
              "index": 10,
              "docs": [
                "The deposit cannot be refunded since none was made."
              ]
            },
            {
              "name": "BadStatus",
              "fields": [],
              "index": 11,
              "docs": [
                "The referendum status is invalid for this operation."
              ]
            },
            {
              "name": "PreimageNotExist",
              "fields": [],
              "index": 12,
              "docs": [
                "The preimage does not exist."
              ]
            },
            {
              "name": "PreimageStoredWithDifferentLength",
              "fields": [],
              "index": 13,
              "docs": [
                "The preimage is stored with a different length than the one provided."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 641,
    "type": {
      "path": [
        "pallet_whitelist",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "UnavailablePreImage",
              "fields": [],
              "index": 0,
              "docs": [
                "The preimage of the call hash could not be loaded."
              ]
            },
            {
              "name": "UndecodableCall",
              "fields": [],
              "index": 1,
              "docs": [
                "The call could not be decoded."
              ]
            },
            {
              "name": "InvalidCallWeightWitness",
              "fields": [],
              "index": 2,
              "docs": [
                "The weight of the decoded call was higher than the witness."
              ]
            },
            {
              "name": "CallIsNotWhitelisted",
              "fields": [],
              "index": 3,
              "docs": [
                "The call was not whitelisted."
              ]
            },
            {
              "name": "CallAlreadyWhitelisted",
              "fields": [],
              "index": 4,
              "docs": [
                "The call was already whitelisted; No-Op."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 642,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidEthereumSignature",
              "fields": [],
              "index": 0,
              "docs": [
                "Invalid Ethereum signature."
              ]
            },
            {
              "name": "SignerHasNoClaim",
              "fields": [],
              "index": 1,
              "docs": [
                "Ethereum address has no claim."
              ]
            },
            {
              "name": "SenderHasNoClaim",
              "fields": [],
              "index": 2,
              "docs": [
                "Account ID sending transaction has no claim."
              ]
            },
            {
              "name": "PotUnderflow",
              "fields": [],
              "index": 3,
              "docs": [
                "There's not enough in the pot to pay out some unvested amount. Generally implies a",
                "logic error."
              ]
            },
            {
              "name": "InvalidStatement",
              "fields": [],
              "index": 4,
              "docs": [
                "A needed statement was not included."
              ]
            },
            {
              "name": "VestedBalanceExists",
              "fields": [],
              "index": 5,
              "docs": [
                "The account already has a vested balance."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 643,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 189
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 644,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 644,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 189
        }
      },
      "docs": []
    }
  },
  {
    "id": 645,
    "type": {
      "path": [
        "pallet_vesting",
        "Releases"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V0",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "V1",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 646,
    "type": {
      "path": [
        "pallet_vesting",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotVesting",
              "fields": [],
              "index": 0,
              "docs": [
                "The account given is not vesting."
              ]
            },
            {
              "name": "AtMaxVestingSchedules",
              "fields": [],
              "index": 1,
              "docs": [
                "The account already has `MaxVestingSchedules` count of schedules and thus",
                "cannot add another one. Consider merging existing schedules in order to add another."
              ]
            },
            {
              "name": "AmountLow",
              "fields": [],
              "index": 2,
              "docs": [
                "Amount being transferred is too low to create a vesting schedule."
              ]
            },
            {
              "name": "ScheduleIndexOutOfBounds",
              "fields": [],
              "index": 3,
              "docs": [
                "An index was out of bounds of the vesting schedules."
              ]
            },
            {
              "name": "InvalidScheduleParams",
              "fields": [],
              "index": 4,
              "docs": [
                "Failed to create a new schedule because some parameter was invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error for the vesting pallet."
      ]
    }
  },
  {
    "id": 647,
    "type": {
      "path": [
        "pallet_utility",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooManyCalls",
              "fields": [],
              "index": 0,
              "docs": [
                "Too many calls batched."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 648,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          649,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 649,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 650
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 651,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 650,
    "type": {
      "path": [
        "pallet_proxy",
        "ProxyDefinition"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "ProxyType",
          "type": 194
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "delegate",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "proxy_type",
              "type": 194,
              "typeName": "ProxyType",
              "docs": []
            },
            {
              "name": "delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 651,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 650
        }
      },
      "docs": []
    }
  },
  {
    "id": 652,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          653,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 653,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 654
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 655,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 654,
    "type": {
      "path": [
        "pallet_proxy",
        "Announcement"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Hash",
          "type": 13
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "real",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "call_hash",
              "type": 13,
              "typeName": "Hash",
              "docs": []
            },
            {
              "name": "height",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 655,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 654
        }
      },
      "docs": []
    }
  },
  {
    "id": 656,
    "type": {
      "path": [
        "pallet_proxy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooMany",
              "fields": [],
              "index": 0,
              "docs": [
                "There are too many proxies registered or too many announcements pending."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "Proxy registration not found."
              ]
            },
            {
              "name": "NotProxy",
              "fields": [],
              "index": 2,
              "docs": [
                "Sender is not a proxy of the account to be proxied."
              ]
            },
            {
              "name": "Unproxyable",
              "fields": [],
              "index": 3,
              "docs": [
                "A call which is incompatible with the proxy type's filter was attempted."
              ]
            },
            {
              "name": "Duplicate",
              "fields": [],
              "index": 4,
              "docs": [
                "Account is already a proxy."
              ]
            },
            {
              "name": "NoPermission",
              "fields": [],
              "index": 5,
              "docs": [
                "Call may not be made by proxy because it may escalate its privileges."
              ]
            },
            {
              "name": "Unannounced",
              "fields": [],
              "index": 6,
              "docs": [
                "Announcement, if made at all, was made too recently."
              ]
            },
            {
              "name": "NoSelfProxy",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot add self as proxy."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 657,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          1
        ]
      },
      "docs": []
    }
  },
  {
    "id": 658,
    "type": {
      "path": [
        "pallet_multisig",
        "Multisig"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "MaxApprovals",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "when",
              "type": 197,
              "typeName": "Timepoint<BlockNumber>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "depositor",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "approvals",
              "type": 659,
              "typeName": "BoundedVec<AccountId, MaxApprovals>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 659,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 116,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 660,
    "type": {
      "path": [
        "pallet_multisig",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MinimumThreshold",
              "fields": [],
              "index": 0,
              "docs": [
                "Threshold must be 2 or greater."
              ]
            },
            {
              "name": "AlreadyApproved",
              "fields": [],
              "index": 1,
              "docs": [
                "Call is already approved by this signatory."
              ]
            },
            {
              "name": "NoApprovalsNeeded",
              "fields": [],
              "index": 2,
              "docs": [
                "Call doesn't need any (more) approvals."
              ]
            },
            {
              "name": "TooFewSignatories",
              "fields": [],
              "index": 3,
              "docs": [
                "There are too few signatories in the list."
              ]
            },
            {
              "name": "TooManySignatories",
              "fields": [],
              "index": 4,
              "docs": [
                "There are too many signatories in the list."
              ]
            },
            {
              "name": "SignatoriesOutOfOrder",
              "fields": [],
              "index": 5,
              "docs": [
                "The signatories were provided out of order; they should be ordered."
              ]
            },
            {
              "name": "SenderInSignatories",
              "fields": [],
              "index": 6,
              "docs": [
                "The sender was contained in the other signatories; it shouldn't be."
              ]
            },
            {
              "name": "NotFound",
              "fields": [],
              "index": 7,
              "docs": [
                "Multisig operation not found when attempting to cancel."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 8,
              "docs": [
                "Only the account that originally created the multisig is able to cancel it."
              ]
            },
            {
              "name": "NoTimepoint",
              "fields": [],
              "index": 9,
              "docs": [
                "No timepoint was given, yet the multisig operation is already underway."
              ]
            },
            {
              "name": "WrongTimepoint",
              "fields": [],
              "index": 10,
              "docs": [
                "A different timepoint was given to the multisig operation that is underway."
              ]
            },
            {
              "name": "UnexpectedTimepoint",
              "fields": [],
              "index": 11,
              "docs": [
                "A timepoint was given, yet no multisig operation is underway."
              ]
            },
            {
              "name": "MaxWeightTooLow",
              "fields": [],
              "index": 12,
              "docs": [
                "The maximum weight information provided was too low."
              ]
            },
            {
              "name": "AlreadyStored",
              "fields": [],
              "index": 13,
              "docs": [
                "The data to be stored is already stored."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 661,
    "type": {
      "path": [
        "pallet_bounties",
        "Bounty"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "proposer",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "curator_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "bond",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "status",
              "type": 662,
              "typeName": "BountyStatus<AccountId, BlockNumber>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 662,
    "type": {
      "path": [
        "pallet_bounties",
        "BountyStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Proposed",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Approved",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Funded",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "CuratorProposed",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Active",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "update_due",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "PendingPayout",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "unlock_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 663,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 664,
    "type": {
      "path": [
        "pallet_bounties",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InsufficientProposersBalance",
              "fields": [],
              "index": 0,
              "docs": [
                "Proposer's balance is too low."
              ]
            },
            {
              "name": "InvalidIndex",
              "fields": [],
              "index": 1,
              "docs": [
                "No proposal or bounty at that index."
              ]
            },
            {
              "name": "ReasonTooBig",
              "fields": [],
              "index": 2,
              "docs": [
                "The reason given is just too big."
              ]
            },
            {
              "name": "UnexpectedStatus",
              "fields": [],
              "index": 3,
              "docs": [
                "The bounty status is unexpected."
              ]
            },
            {
              "name": "RequireCurator",
              "fields": [],
              "index": 4,
              "docs": [
                "Require bounty curator."
              ]
            },
            {
              "name": "InvalidValue",
              "fields": [],
              "index": 5,
              "docs": [
                "Invalid bounty value."
              ]
            },
            {
              "name": "InvalidFee",
              "fields": [],
              "index": 6,
              "docs": [
                "Invalid bounty fee."
              ]
            },
            {
              "name": "PendingPayout",
              "fields": [],
              "index": 7,
              "docs": [
                "A bounty payout is pending.",
                "To cancel the bounty, you must unassign and slash the curator."
              ]
            },
            {
              "name": "Premature",
              "fields": [],
              "index": 8,
              "docs": [
                "The bounties cannot be claimed/closed because it's still in the countdown period."
              ]
            },
            {
              "name": "HasActiveChildBounty",
              "fields": [],
              "index": 9,
              "docs": [
                "The bounty cannot be closed because it has active child bounties."
              ]
            },
            {
              "name": "TooManyQueued",
              "fields": [],
              "index": 10,
              "docs": [
                "Too many approvals are already queued."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 665,
    "type": {
      "path": [
        "pallet_child_bounties",
        "ChildBounty"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_bounty",
              "type": 4,
              "typeName": "BountyIndex",
              "docs": []
            },
            {
              "name": "value",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "curator_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "status",
              "type": 666,
              "typeName": "ChildBountyStatus<AccountId, BlockNumber>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 666,
    "type": {
      "path": [
        "pallet_child_bounties",
        "ChildBountyStatus"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Added",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "CuratorProposed",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Active",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "PendingPayout",
              "fields": [
                {
                  "name": "curator",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "beneficiary",
                  "type": 0,
                  "typeName": "AccountId",
                  "docs": []
                },
                {
                  "name": "unlock_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 667,
    "type": {
      "path": [
        "pallet_child_bounties",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ParentBountyNotActive",
              "fields": [],
              "index": 0,
              "docs": [
                "The parent bounty is not in active state."
              ]
            },
            {
              "name": "InsufficientBountyBalance",
              "fields": [],
              "index": 1,
              "docs": [
                "The bounty balance is not enough to add new child-bounty."
              ]
            },
            {
              "name": "TooManyChildBounties",
              "fields": [],
              "index": 2,
              "docs": [
                "Number of child bounties exceeds limit `MaxActiveChildBountyCount`."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 668,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "ReadySolution"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": null
        },
        {
          "name": "MaxWinners",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "supports",
              "type": 669,
              "typeName": "BoundedSupports<AccountId, MaxWinners>",
              "docs": []
            },
            {
              "name": "score",
              "type": 253,
              "typeName": "ElectionScore",
              "docs": []
            },
            {
              "name": "compute",
              "type": 468,
              "typeName": "ElectionCompute",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 669,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 257
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 256,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 670,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "RoundSnapshot"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "DataProvider",
          "type": 671
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "voters",
              "type": 672,
              "typeName": "Vec<DataProvider>",
              "docs": []
            },
            {
              "name": "targets",
              "type": 116,
              "typeName": "Vec<AccountId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 671,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          12,
          569
        ]
      },
      "docs": []
    }
  },
  {
    "id": 672,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 671
        }
      },
      "docs": []
    }
  },
  {
    "id": 673,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 674
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 675,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 674,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          253,
          4,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 675,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 674
        }
      },
      "docs": []
    }
  },
  {
    "id": 676,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "signed",
        "SignedSubmission"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "Solution",
          "type": 202
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "who",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "raw_solution",
              "type": 201,
              "typeName": "RawSolution<Solution>",
              "docs": []
            },
            {
              "name": "call_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 677,
    "type": {
      "path": [
        "pallet_election_provider_multi_phase",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PreDispatchEarlySubmission",
              "fields": [],
              "index": 0,
              "docs": [
                "Submission was too early."
              ]
            },
            {
              "name": "PreDispatchWrongWinnerCount",
              "fields": [],
              "index": 1,
              "docs": [
                "Wrong number of winners presented."
              ]
            },
            {
              "name": "PreDispatchWeakSubmission",
              "fields": [],
              "index": 2,
              "docs": [
                "Submission was too weak, score-wise."
              ]
            },
            {
              "name": "SignedQueueFull",
              "fields": [],
              "index": 3,
              "docs": [
                "The queue was full, and the solution was not better than any of the existing ones."
              ]
            },
            {
              "name": "SignedCannotPayDeposit",
              "fields": [],
              "index": 4,
              "docs": [
                "The origin failed to pay the deposit."
              ]
            },
            {
              "name": "SignedInvalidWitness",
              "fields": [],
              "index": 5,
              "docs": [
                "Witness data to dispatchable is invalid."
              ]
            },
            {
              "name": "SignedTooMuchWeight",
              "fields": [],
              "index": 6,
              "docs": [
                "The signed submission consumes too much weight"
              ]
            },
            {
              "name": "OcwCallWrongEra",
              "fields": [],
              "index": 7,
              "docs": [
                "OCW submitted solution for wrong round"
              ]
            },
            {
              "name": "MissingSnapshotMetadata",
              "fields": [],
              "index": 8,
              "docs": [
                "Snapshot metadata should exist but didn't."
              ]
            },
            {
              "name": "InvalidSubmissionIndex",
              "fields": [],
              "index": 9,
              "docs": [
                "`Self::insert_submission` returned an invalid index."
              ]
            },
            {
              "name": "CallNotAllowed",
              "fields": [],
              "index": 10,
              "docs": [
                "The call is not allowed at this point."
              ]
            },
            {
              "name": "FallbackFailed",
              "fields": [],
              "index": 11,
              "docs": [
                "The fallback failed"
              ]
            },
            {
              "name": "BoundNotMet",
              "fields": [],
              "index": 12,
              "docs": [
                "Some bound not met"
              ]
            },
            {
              "name": "TooManyWinners",
              "fields": [],
              "index": 13,
              "docs": [
                "Submitted solution has too many winners"
              ]
            },
            {
              "name": "PreDispatchDifferentRound",
              "fields": [],
              "index": 14,
              "docs": [
                "Submission was prepared for a different round."
              ]
            }
          ]
        }
      },
      "docs": [
        "Error of the pallet that can be returned in response to dispatches."
      ]
    }
  },
  {
    "id": 678,
    "type": {
      "path": [
        "pallet_bags_list",
        "list",
        "Node"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 0,
              "typeName": "T::AccountId",
              "docs": []
            },
            {
              "name": "prev",
              "type": 127,
              "typeName": "Option<T::AccountId>",
              "docs": []
            },
            {
              "name": "next",
              "type": 127,
              "typeName": "Option<T::AccountId>",
              "docs": []
            },
            {
              "name": "bag_upper",
              "type": 12,
              "typeName": "T::Score",
              "docs": []
            },
            {
              "name": "score",
              "type": 12,
              "typeName": "T::Score",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 679,
    "type": {
      "path": [
        "pallet_bags_list",
        "list",
        "Bag"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "head",
              "type": 127,
              "typeName": "Option<T::AccountId>",
              "docs": []
            },
            {
              "name": "tail",
              "type": 127,
              "typeName": "Option<T::AccountId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 680,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 12
        }
      },
      "docs": []
    }
  },
  {
    "id": 681,
    "type": {
      "path": [
        "pallet_bags_list",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        },
        {
          "name": "I",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "List",
              "fields": [
                {
                  "name": null,
                  "type": 682,
                  "typeName": "ListError",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": [
                "A error in the list interface implementation."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 682,
    "type": {
      "path": [
        "pallet_bags_list",
        "list",
        "ListError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Duplicate",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NotHeavier",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "NotInSameBag",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "NodeNotFound",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 683,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "PoolMember"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "pool_id",
              "type": 4,
              "typeName": "PoolId",
              "docs": []
            },
            {
              "name": "points",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "last_recorded_reward_counter",
              "type": 436,
              "typeName": "T::RewardCounter",
              "docs": []
            },
            {
              "name": "unbonding_eras",
              "type": 684,
              "typeName": "BoundedBTreeMap<EraIndex, BalanceOf<T>, T::MaxUnbonding>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 684,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_btree_map",
        "BoundedBTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 4
        },
        {
          "name": "V",
          "type": 6
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 685,
              "typeName": "BTreeMap<K, V>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 685,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 4
        },
        {
          "name": "V",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 633,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 686,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "BondedPoolInner"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "commission",
              "type": 687,
              "typeName": "Commission<T>",
              "docs": []
            },
            {
              "name": "member_counter",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "points",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "roles",
              "type": 690,
              "typeName": "PoolRoles<T::AccountId>",
              "docs": []
            },
            {
              "name": "state",
              "type": 264,
              "typeName": "PoolState",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 687,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "Commission"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "current",
              "type": 270,
              "typeName": "Option<(Perbill, T::AccountId)>",
              "docs": []
            },
            {
              "name": "max",
              "type": 688,
              "typeName": "Option<Perbill>",
              "docs": []
            },
            {
              "name": "change_rate",
              "type": 689,
              "typeName": "Option<CommissionChangeRate<BlockNumberFor<T>>>",
              "docs": []
            },
            {
              "name": "throttle_from",
              "type": 152,
              "typeName": "Option<BlockNumberFor<T>>",
              "docs": []
            },
            {
              "name": "claim_permission",
              "type": 273,
              "typeName": "Option<CommissionClaimPermission<T::AccountId>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 688,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 43
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 43,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 689,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 272
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 272,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 690,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "PoolRoles"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "depositor",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "root",
              "type": 127,
              "typeName": "Option<AccountId>",
              "docs": []
            },
            {
              "name": "nominator",
              "type": 127,
              "typeName": "Option<AccountId>",
              "docs": []
            },
            {
              "name": "bouncer",
              "type": 127,
              "typeName": "Option<AccountId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 691,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "RewardPool"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "last_recorded_reward_counter",
              "type": 436,
              "typeName": "T::RewardCounter",
              "docs": []
            },
            {
              "name": "last_recorded_total_payouts",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "total_rewards_claimed",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "total_commission_pending",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "total_commission_claimed",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 692,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "SubPools"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "no_era",
              "type": 693,
              "typeName": "UnbondPool<T>",
              "docs": []
            },
            {
              "name": "with_era",
              "type": 694,
              "typeName": "BoundedBTreeMap<EraIndex, UnbondPool<T>, TotalUnbondingPools<T>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 693,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "UnbondPool"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "points",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            },
            {
              "name": "balance",
              "type": 6,
              "typeName": "BalanceOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 694,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_btree_map",
        "BoundedBTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 4
        },
        {
          "name": "V",
          "type": 693
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 695,
              "typeName": "BTreeMap<K, V>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 695,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 4
        },
        {
          "name": "V",
          "type": 693
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 696,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 696,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 697
        }
      },
      "docs": []
    }
  },
  {
    "id": 697,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          693
        ]
      },
      "docs": []
    }
  },
  {
    "id": 698,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 699,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "PoolNotFound",
              "fields": [],
              "index": 0,
              "docs": [
                "A (bonded) pool id does not exist."
              ]
            },
            {
              "name": "PoolMemberNotFound",
              "fields": [],
              "index": 1,
              "docs": [
                "An account is not a member."
              ]
            },
            {
              "name": "RewardPoolNotFound",
              "fields": [],
              "index": 2,
              "docs": [
                "A reward pool does not exist. In all cases this is a system logic error."
              ]
            },
            {
              "name": "SubPoolsNotFound",
              "fields": [],
              "index": 3,
              "docs": [
                "A sub pool does not exist."
              ]
            },
            {
              "name": "AccountBelongsToOtherPool",
              "fields": [],
              "index": 4,
              "docs": [
                "An account is already delegating in another pool. An account may only belong to one",
                "pool at a time."
              ]
            },
            {
              "name": "FullyUnbonding",
              "fields": [],
              "index": 5,
              "docs": [
                "The member is fully unbonded (and thus cannot access the bonded and reward pool",
                "anymore to, for example, collect rewards)."
              ]
            },
            {
              "name": "MaxUnbondingLimit",
              "fields": [],
              "index": 6,
              "docs": [
                "The member cannot unbond further chunks due to reaching the limit."
              ]
            },
            {
              "name": "CannotWithdrawAny",
              "fields": [],
              "index": 7,
              "docs": [
                "None of the funds can be withdrawn yet because the bonding duration has not passed."
              ]
            },
            {
              "name": "MinimumBondNotMet",
              "fields": [],
              "index": 8,
              "docs": [
                "The amount does not meet the minimum bond to either join or create a pool.",
                "",
                "The depositor can never unbond to a value less than `Pallet::depositor_min_bond`. The",
                "caller does not have nominating permissions for the pool. Members can never unbond to a",
                "value below `MinJoinBond`."
              ]
            },
            {
              "name": "OverflowRisk",
              "fields": [],
              "index": 9,
              "docs": [
                "The transaction could not be executed due to overflow risk for the pool."
              ]
            },
            {
              "name": "NotDestroying",
              "fields": [],
              "index": 10,
              "docs": [
                "A pool must be in [`PoolState::Destroying`] in order for the depositor to unbond or for",
                "other members to be permissionlessly unbonded."
              ]
            },
            {
              "name": "NotNominator",
              "fields": [],
              "index": 11,
              "docs": [
                "The caller does not have nominating permissions for the pool."
              ]
            },
            {
              "name": "NotKickerOrDestroying",
              "fields": [],
              "index": 12,
              "docs": [
                "Either a) the caller cannot make a valid kick or b) the pool is not destroying."
              ]
            },
            {
              "name": "NotOpen",
              "fields": [],
              "index": 13,
              "docs": [
                "The pool is not open to join"
              ]
            },
            {
              "name": "MaxPools",
              "fields": [],
              "index": 14,
              "docs": [
                "The system is maxed out on pools."
              ]
            },
            {
              "name": "MaxPoolMembers",
              "fields": [],
              "index": 15,
              "docs": [
                "Too many members in the pool or system."
              ]
            },
            {
              "name": "CanNotChangeState",
              "fields": [],
              "index": 16,
              "docs": [
                "The pools state cannot be changed."
              ]
            },
            {
              "name": "DoesNotHavePermission",
              "fields": [],
              "index": 17,
              "docs": [
                "The caller does not have adequate permissions."
              ]
            },
            {
              "name": "MetadataExceedsMaxLen",
              "fields": [],
              "index": 18,
              "docs": [
                "Metadata exceeds [`Config::MaxMetadataLen`]"
              ]
            },
            {
              "name": "Defensive",
              "fields": [
                {
                  "name": null,
                  "type": 700,
                  "typeName": "DefensiveError",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": [
                "Some error occurred that should never happen. This should be reported to the",
                "maintainers."
              ]
            },
            {
              "name": "PartialUnbondNotAllowedPermissionlessly",
              "fields": [],
              "index": 20,
              "docs": [
                "Partial unbonding now allowed permissionlessly."
              ]
            },
            {
              "name": "MaxCommissionRestricted",
              "fields": [],
              "index": 21,
              "docs": [
                "The pool's max commission cannot be set higher than the existing value."
              ]
            },
            {
              "name": "CommissionExceedsMaximum",
              "fields": [],
              "index": 22,
              "docs": [
                "The supplied commission exceeds the max allowed commission."
              ]
            },
            {
              "name": "CommissionExceedsGlobalMaximum",
              "fields": [],
              "index": 23,
              "docs": [
                "The supplied commission exceeds global maximum commission."
              ]
            },
            {
              "name": "CommissionChangeThrottled",
              "fields": [],
              "index": 24,
              "docs": [
                "Not enough blocks have surpassed since the last commission update."
              ]
            },
            {
              "name": "CommissionChangeRateNotAllowed",
              "fields": [],
              "index": 25,
              "docs": [
                "The submitted changes to commission change rate are not allowed."
              ]
            },
            {
              "name": "NoPendingCommission",
              "fields": [],
              "index": 26,
              "docs": [
                "There is no pending commission to claim."
              ]
            },
            {
              "name": "NoCommissionCurrentSet",
              "fields": [],
              "index": 27,
              "docs": [
                "No commission current has been set."
              ]
            },
            {
              "name": "PoolIdInUse",
              "fields": [],
              "index": 28,
              "docs": [
                "Pool id currently in use."
              ]
            },
            {
              "name": "InvalidPoolId",
              "fields": [],
              "index": 29,
              "docs": [
                "Pool id provided is not correct/usable."
              ]
            },
            {
              "name": "BondExtraRestricted",
              "fields": [],
              "index": 30,
              "docs": [
                "Bonding extra is restricted to the exact pending reward amount."
              ]
            },
            {
              "name": "NothingToAdjust",
              "fields": [],
              "index": 31,
              "docs": [
                "No imbalance in the ED deposit for the pool."
              ]
            },
            {
              "name": "NothingToSlash",
              "fields": [],
              "index": 32,
              "docs": [
                "No slash pending that can be applied to the member."
              ]
            },
            {
              "name": "AlreadyMigrated",
              "fields": [],
              "index": 33,
              "docs": [
                "The pool or member delegation has already migrated to delegate stake."
              ]
            },
            {
              "name": "NotMigrated",
              "fields": [],
              "index": 34,
              "docs": [
                "The pool or member delegation has not migrated yet to delegate stake."
              ]
            },
            {
              "name": "NotSupported",
              "fields": [],
              "index": 35,
              "docs": [
                "This call is not allowed in the current state of the pallet."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 700,
    "type": {
      "path": [
        "pallet_nomination_pools",
        "pallet",
        "DefensiveError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotEnoughSpaceInUnbondPool",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PoolNotFound",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "RewardPoolNotFound",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "SubPoolsNotFound",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "BondedStashKilledPrematurely",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "DelegationUnsupported",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "SlashNotApplied",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 701,
    "type": {
      "path": [
        "pallet_fast_unstake",
        "types",
        "UnstakeRequest"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "stashes",
              "type": 702,
              "typeName": "BoundedVec<(T::AccountId, BalanceOf<T>), T::BatchSize>",
              "docs": []
            },
            {
              "name": "checked",
              "type": 703,
              "typeName": "BoundedVec<EraIndex, MaxChecking<T>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 702,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 260
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 259,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 703,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 4
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 121,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 704,
    "type": {
      "path": [
        "pallet_fast_unstake",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotController",
              "fields": [],
              "index": 0,
              "docs": [
                "The provided Controller account was not found.",
                "",
                "This means that the given account is not bonded."
              ]
            },
            {
              "name": "AlreadyQueued",
              "fields": [],
              "index": 1,
              "docs": [
                "The bonded account has already been queued."
              ]
            },
            {
              "name": "NotFullyBonded",
              "fields": [],
              "index": 2,
              "docs": [
                "The bonded account has active unlocking chunks."
              ]
            },
            {
              "name": "NotQueued",
              "fields": [],
              "index": 3,
              "docs": [
                "The provided un-staker is not in the `Queue`."
              ]
            },
            {
              "name": "AlreadyHead",
              "fields": [],
              "index": 4,
              "docs": [
                "The provided un-staker is already in Head, and cannot deregister."
              ]
            },
            {
              "name": "CallNotAllowed",
              "fields": [],
              "index": 5,
              "docs": [
                "The call is not allowed at this point because the pallet is not active."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 705,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "configuration",
        "HostConfiguration"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_code_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_head_data_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_queue_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_queue_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_message_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_upward_message_num_per_candidate",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_max_message_num_per_candidate",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "validation_upgrade_cooldown",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "validation_upgrade_delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "async_backing_params",
              "type": 277,
              "typeName": "AsyncBackingParams",
              "docs": []
            },
            {
              "name": "max_pov_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_downward_message_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_max_parachain_outbound_channels",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_sender_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "hrmp_recipient_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "hrmp_channel_max_capacity",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_channel_max_total_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_max_parachain_inbound_channels",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "hrmp_channel_max_message_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "executor_params",
              "type": 278,
              "typeName": "ExecutorParams",
              "docs": []
            },
            {
              "name": "code_retention_period",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "max_validators",
              "type": 152,
              "typeName": "Option<u32>",
              "docs": []
            },
            {
              "name": "dispute_period",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "dispute_post_conclusion_acceptance_period",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "no_show_slots",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "n_delay_tranches",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "zeroth_delay_tranche_width",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "needed_approvals",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "relay_vrf_modulo_samples",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "pvf_voting_ttl",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "minimum_validation_upgrade_delay",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "minimum_backing_votes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "node_features",
              "type": 292,
              "typeName": "NodeFeatures",
              "docs": []
            },
            {
              "name": "approval_voting_params",
              "type": 283,
              "typeName": "ApprovalVotingParams",
              "docs": []
            },
            {
              "name": "scheduler_params",
              "type": 284,
              "typeName": "SchedulerParams<BlockNumber>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 706,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 707
        }
      },
      "docs": []
    }
  },
  {
    "id": 707,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          705
        ]
      },
      "docs": []
    }
  },
  {
    "id": 708,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "configuration",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidNewValue",
              "fields": [],
              "index": 0,
              "docs": [
                "The new value for a configuration parameter is invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 709,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 294
        }
      },
      "docs": []
    }
  },
  {
    "id": 710,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 135
        }
      },
      "docs": []
    }
  },
  {
    "id": 711,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "shared",
        "AllowedRelayParentsTracker"
      ],
      "params": [
        {
          "name": "Hash",
          "type": 13
        },
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "buffer",
              "type": 712,
              "typeName": "VecDeque<(Hash, Hash)>",
              "docs": []
            },
            {
              "name": "latest_number",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 712,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 713
        }
      },
      "docs": []
    }
  },
  {
    "id": 713,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          13,
          13
        ]
      },
      "docs": []
    }
  },
  {
    "id": 714,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 715
        }
      },
      "docs": []
    }
  },
  {
    "id": 715,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "inclusion",
        "CandidatePendingAvailability"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "core",
              "type": 476,
              "typeName": "CoreIndex",
              "docs": []
            },
            {
              "name": "hash",
              "type": 315,
              "typeName": "CandidateHash",
              "docs": []
            },
            {
              "name": "descriptor",
              "type": 299,
              "typeName": "CandidateDescriptor<H>",
              "docs": []
            },
            {
              "name": "commitments",
              "type": 303,
              "typeName": "CandidateCommitments",
              "docs": []
            },
            {
              "name": "availability_votes",
              "type": 292,
              "typeName": "BitVec<u8, BitOrderLsb0>",
              "docs": []
            },
            {
              "name": "backers",
              "type": 292,
              "typeName": "BitVec<u8, BitOrderLsb0>",
              "docs": []
            },
            {
              "name": "relay_parent_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "backed_in_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "backing_group",
              "type": 477,
              "typeName": "GroupIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 716,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "inclusion",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ValidatorIndexOutOfBounds",
              "fields": [],
              "index": 0,
              "docs": [
                "Validator index out of bounds."
              ]
            },
            {
              "name": "UnscheduledCandidate",
              "fields": [],
              "index": 1,
              "docs": [
                "Candidate submitted but para not scheduled."
              ]
            },
            {
              "name": "HeadDataTooLarge",
              "fields": [],
              "index": 2,
              "docs": [
                "Head data exceeds the configured maximum."
              ]
            },
            {
              "name": "PrematureCodeUpgrade",
              "fields": [],
              "index": 3,
              "docs": [
                "Code upgrade prematurely."
              ]
            },
            {
              "name": "NewCodeTooLarge",
              "fields": [],
              "index": 4,
              "docs": [
                "Output code is too large"
              ]
            },
            {
              "name": "DisallowedRelayParent",
              "fields": [],
              "index": 5,
              "docs": [
                "The candidate's relay-parent was not allowed. Either it was",
                "not recent enough or it didn't advance based on the last parachain block."
              ]
            },
            {
              "name": "InvalidAssignment",
              "fields": [],
              "index": 6,
              "docs": [
                "Failed to compute group index for the core: either it's out of bounds",
                "or the relay parent doesn't belong to the current session."
              ]
            },
            {
              "name": "InvalidGroupIndex",
              "fields": [],
              "index": 7,
              "docs": [
                "Invalid group index in core assignment."
              ]
            },
            {
              "name": "InsufficientBacking",
              "fields": [],
              "index": 8,
              "docs": [
                "Insufficient (non-majority) backing."
              ]
            },
            {
              "name": "InvalidBacking",
              "fields": [],
              "index": 9,
              "docs": [
                "Invalid (bad signature, unknown validator, etc.) backing."
              ]
            },
            {
              "name": "NotCollatorSigned",
              "fields": [],
              "index": 10,
              "docs": [
                "Collator did not sign PoV."
              ]
            },
            {
              "name": "ValidationDataHashMismatch",
              "fields": [],
              "index": 11,
              "docs": [
                "The validation data hash does not match expected."
              ]
            },
            {
              "name": "IncorrectDownwardMessageHandling",
              "fields": [],
              "index": 12,
              "docs": [
                "The downward message queue is not processed correctly."
              ]
            },
            {
              "name": "InvalidUpwardMessages",
              "fields": [],
              "index": 13,
              "docs": [
                "At least one upward message sent does not pass the acceptance criteria."
              ]
            },
            {
              "name": "HrmpWatermarkMishandling",
              "fields": [],
              "index": 14,
              "docs": [
                "The candidate didn't follow the rules of HRMP watermark advancement."
              ]
            },
            {
              "name": "InvalidOutboundHrmp",
              "fields": [],
              "index": 15,
              "docs": [
                "The HRMP messages sent by the candidate is not valid."
              ]
            },
            {
              "name": "InvalidValidationCodeHash",
              "fields": [],
              "index": 16,
              "docs": [
                "The validation code hash of the candidate is not valid."
              ]
            },
            {
              "name": "ParaHeadMismatch",
              "fields": [],
              "index": 17,
              "docs": [
                "The `para_head` hash in the candidate descriptor doesn't match the hash of the actual",
                "para head in the commitments."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 717,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "ScrapedOnChainVotes"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "session",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "backing_validators_per_candidate",
              "type": 718,
              "typeName": "Vec<(CandidateReceipt<H>, Vec<(ValidatorIndex, ValidityAttestation)>)\n>",
              "docs": []
            },
            {
              "name": "disputes",
              "type": 313,
              "typeName": "MultiDisputeStatementSet",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 718,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 719
        }
      },
      "docs": []
    }
  },
  {
    "id": 719,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          475,
          720
        ]
      },
      "docs": []
    }
  },
  {
    "id": 720,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 721
        }
      },
      "docs": []
    }
  },
  {
    "id": 721,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          294,
          312
        ]
      },
      "docs": []
    }
  },
  {
    "id": 722,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras_inherent",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "TooManyInclusionInherents",
              "fields": [],
              "index": 0,
              "docs": [
                "Inclusion inherent called more than once per block."
              ]
            },
            {
              "name": "InvalidParentHeader",
              "fields": [],
              "index": 1,
              "docs": [
                "The hash of the submitted parent header doesn't correspond to the saved block hash of",
                "the parent."
              ]
            },
            {
              "name": "InherentOverweight",
              "fields": [],
              "index": 2,
              "docs": [
                "The data given to the inherent will result in an overweight block."
              ]
            },
            {
              "name": "CandidatesFilteredDuringExecution",
              "fields": [],
              "index": 3,
              "docs": [
                "A candidate was filtered during inherent execution. This should have only been done",
                "during creation."
              ]
            },
            {
              "name": "UnscheduledCandidate",
              "fields": [],
              "index": 4,
              "docs": [
                "Too many candidates supplied."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 723,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 709
        }
      },
      "docs": []
    }
  },
  {
    "id": 724,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 725
        }
      },
      "docs": []
    }
  },
  {
    "id": 725,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "scheduler",
        "pallet",
        "CoreOccupied"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Free",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Paras",
              "fields": [
                {
                  "name": null,
                  "type": 726,
                  "typeName": "ParasEntry<N>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 726,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "scheduler",
        "pallet",
        "ParasEntry"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "assignment",
              "type": 727,
              "typeName": "Assignment",
              "docs": []
            },
            {
              "name": "availability_timeouts",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "ttl",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 727,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "scheduler",
        "common",
        "Assignment"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Pool",
              "fields": [
                {
                  "name": "para_id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "core_index",
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Bulk",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 728,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 476
        },
        {
          "name": "V",
          "type": 729
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 730,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 729,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 726
        }
      },
      "docs": []
    }
  },
  {
    "id": 730,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 731
        }
      },
      "docs": []
    }
  },
  {
    "id": 731,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          476,
          729
        ]
      },
      "docs": []
    }
  },
  {
    "id": 732,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "PvfCheckActiveVoteState"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "votes_accept",
              "type": 292,
              "typeName": "BitVec<u8, BitOrderLsb0>",
              "docs": []
            },
            {
              "name": "votes_reject",
              "type": 292,
              "typeName": "BitVec<u8, BitOrderLsb0>",
              "docs": []
            },
            {
              "name": "age",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "created_at",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "causes",
              "type": 733,
              "typeName": "Vec<PvfCheckCause<BlockNumber>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 733,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 734
        }
      },
      "docs": []
    }
  },
  {
    "id": 734,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "PvfCheckCause"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Onboarding",
              "fields": [
                {
                  "name": null,
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Upgrade",
              "fields": [
                {
                  "name": "id",
                  "type": 163,
                  "typeName": "ParaId",
                  "docs": []
                },
                {
                  "name": "included_at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                },
                {
                  "name": "upgrade_strategy",
                  "type": 735,
                  "typeName": "UpgradeStrategy",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 735,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "UpgradeStrategy"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "SetGoAheadSignal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "ApplyAtExpectedBlock",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 736,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 302
        }
      },
      "docs": []
    }
  },
  {
    "id": 737,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 163
        }
      },
      "docs": []
    }
  },
  {
    "id": 738,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "ParaLifecycle"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Onboarding",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Parathread",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Parachain",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UpgradingParathread",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "DowngradingParachain",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "OffboardingParathread",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "OffboardingParachain",
              "fields": [],
              "index": 6,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 739,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          163,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 740,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "ParaPastCodeMeta"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "upgrade_times",
              "type": 741,
              "typeName": "Vec<ReplacementTimes<N>>",
              "docs": []
            },
            {
              "name": "last_pruned",
              "type": 152,
              "typeName": "Option<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 741,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 742
        }
      },
      "docs": []
    }
  },
  {
    "id": 742,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "ReplacementTimes"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "expected_at",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "activated_at",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 743,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 739
        }
      },
      "docs": []
    }
  },
  {
    "id": 744,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "UpgradeGoAhead"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Abort",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "GoAhead",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 745,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "UpgradeRestriction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Present",
              "fields": [],
              "index": 0,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 746,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "ParaGenesisArgs"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "genesis_head",
              "type": 310,
              "typeName": "HeadData",
              "docs": []
            },
            {
              "name": "validation_code",
              "type": 309,
              "typeName": "ValidationCode",
              "docs": []
            },
            {
              "name": "para_kind",
              "type": 8,
              "typeName": "ParaKind",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 747,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "paras",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotRegistered",
              "fields": [],
              "index": 0,
              "docs": [
                "Para is not registered in our system."
              ]
            },
            {
              "name": "CannotOnboard",
              "fields": [],
              "index": 1,
              "docs": [
                "Para cannot be onboarded because it is already tracked by our system."
              ]
            },
            {
              "name": "CannotOffboard",
              "fields": [],
              "index": 2,
              "docs": [
                "Para cannot be offboarded at this time."
              ]
            },
            {
              "name": "CannotUpgrade",
              "fields": [],
              "index": 3,
              "docs": [
                "Para cannot be upgraded to a lease holding parachain."
              ]
            },
            {
              "name": "CannotDowngrade",
              "fields": [],
              "index": 4,
              "docs": [
                "Para cannot be downgraded to an on-demand parachain."
              ]
            },
            {
              "name": "PvfCheckStatementStale",
              "fields": [],
              "index": 5,
              "docs": [
                "The statement for PVF pre-checking is stale."
              ]
            },
            {
              "name": "PvfCheckStatementFuture",
              "fields": [],
              "index": 6,
              "docs": [
                "The statement for PVF pre-checking is for a future session."
              ]
            },
            {
              "name": "PvfCheckValidatorIndexOutOfBounds",
              "fields": [],
              "index": 7,
              "docs": [
                "Claimed validator index is out of bounds."
              ]
            },
            {
              "name": "PvfCheckInvalidSignature",
              "fields": [],
              "index": 8,
              "docs": [
                "The signature for the PVF pre-checking is invalid."
              ]
            },
            {
              "name": "PvfCheckDoubleVote",
              "fields": [],
              "index": 9,
              "docs": [
                "The given validator already has cast a vote."
              ]
            },
            {
              "name": "PvfCheckSubjectInvalid",
              "fields": [],
              "index": 10,
              "docs": [
                "The given PVF does not exist at the moment of process a vote."
              ]
            },
            {
              "name": "CannotUpgradeCode",
              "fields": [],
              "index": 11,
              "docs": [
                "Parachain cannot currently schedule a code upgrade."
              ]
            },
            {
              "name": "InvalidCode",
              "fields": [],
              "index": 12,
              "docs": [
                "Invalid validation code size."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 748,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 749
        }
      },
      "docs": []
    }
  },
  {
    "id": 749,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "initializer",
        "BufferedSessionChange"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "validators",
              "type": 710,
              "typeName": "Vec<ValidatorId>",
              "docs": []
            },
            {
              "name": "queued",
              "type": 710,
              "typeName": "Vec<ValidatorId>",
              "docs": []
            },
            {
              "name": "session_index",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 750,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 751
        }
      },
      "docs": []
    }
  },
  {
    "id": 751,
    "type": {
      "path": [
        "polkadot_core_primitives",
        "InboundDownwardMessage"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "sent_at",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "msg",
              "type": 14,
              "typeName": "DownwardMessage",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 752,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "hrmp",
        "HrmpOpenChannelRequest"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "confirmed",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "_age",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "sender_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "max_message_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_capacity",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_total_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 753,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 326
        }
      },
      "docs": []
    }
  },
  {
    "id": 754,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "hrmp",
        "HrmpChannel"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "max_capacity",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_total_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_message_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "msg_count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "total_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "mqc_head",
              "type": 167,
              "typeName": "Option<Hash>",
              "docs": []
            },
            {
              "name": "sender_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "recipient_deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 755,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 756
        }
      },
      "docs": []
    }
  },
  {
    "id": 756,
    "type": {
      "path": [
        "polkadot_core_primitives",
        "InboundHrmpMessage"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "sent_at",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "data",
              "type": 14,
              "typeName": "sp_std::vec::Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 757,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 758
        }
      },
      "docs": []
    }
  },
  {
    "id": 758,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          737
        ]
      },
      "docs": []
    }
  },
  {
    "id": 759,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "hrmp",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "OpenHrmpChannelToSelf",
              "fields": [],
              "index": 0,
              "docs": [
                "The sender tried to open a channel to themselves."
              ]
            },
            {
              "name": "OpenHrmpChannelInvalidRecipient",
              "fields": [],
              "index": 1,
              "docs": [
                "The recipient is not a valid para."
              ]
            },
            {
              "name": "OpenHrmpChannelZeroCapacity",
              "fields": [],
              "index": 2,
              "docs": [
                "The requested capacity is zero."
              ]
            },
            {
              "name": "OpenHrmpChannelCapacityExceedsLimit",
              "fields": [],
              "index": 3,
              "docs": [
                "The requested capacity exceeds the global limit."
              ]
            },
            {
              "name": "OpenHrmpChannelZeroMessageSize",
              "fields": [],
              "index": 4,
              "docs": [
                "The requested maximum message size is 0."
              ]
            },
            {
              "name": "OpenHrmpChannelMessageSizeExceedsLimit",
              "fields": [],
              "index": 5,
              "docs": [
                "The open request requested the message size that exceeds the global limit."
              ]
            },
            {
              "name": "OpenHrmpChannelAlreadyExists",
              "fields": [],
              "index": 6,
              "docs": [
                "The channel already exists"
              ]
            },
            {
              "name": "OpenHrmpChannelAlreadyRequested",
              "fields": [],
              "index": 7,
              "docs": [
                "There is already a request to open the same channel."
              ]
            },
            {
              "name": "OpenHrmpChannelLimitExceeded",
              "fields": [],
              "index": 8,
              "docs": [
                "The sender already has the maximum number of allowed outbound channels."
              ]
            },
            {
              "name": "AcceptHrmpChannelDoesntExist",
              "fields": [],
              "index": 9,
              "docs": [
                "The channel from the sender to the origin doesn't exist."
              ]
            },
            {
              "name": "AcceptHrmpChannelAlreadyConfirmed",
              "fields": [],
              "index": 10,
              "docs": [
                "The channel is already confirmed."
              ]
            },
            {
              "name": "AcceptHrmpChannelLimitExceeded",
              "fields": [],
              "index": 11,
              "docs": [
                "The recipient already has the maximum number of allowed inbound channels."
              ]
            },
            {
              "name": "CloseHrmpChannelUnauthorized",
              "fields": [],
              "index": 12,
              "docs": [
                "The origin tries to close a channel where it is neither the sender nor the recipient."
              ]
            },
            {
              "name": "CloseHrmpChannelDoesntExist",
              "fields": [],
              "index": 13,
              "docs": [
                "The channel to be closed doesn't exist."
              ]
            },
            {
              "name": "CloseHrmpChannelAlreadyUnderway",
              "fields": [],
              "index": 14,
              "docs": [
                "The channel close request is already requested."
              ]
            },
            {
              "name": "CancelHrmpOpenChannelUnauthorized",
              "fields": [],
              "index": 15,
              "docs": [
                "Canceling is requested by neither the sender nor recipient of the open channel request."
              ]
            },
            {
              "name": "OpenHrmpChannelDoesntExist",
              "fields": [],
              "index": 16,
              "docs": [
                "The open request doesn't exist."
              ]
            },
            {
              "name": "OpenHrmpChannelAlreadyConfirmed",
              "fields": [],
              "index": 17,
              "docs": [
                "Cannot cancel an HRMP open channel request because it is already confirmed."
              ]
            },
            {
              "name": "WrongWitness",
              "fields": [],
              "index": 18,
              "docs": [
                "The provided witness data is wrong."
              ]
            },
            {
              "name": "ChannelCreationNotAuthorized",
              "fields": [],
              "index": 19,
              "docs": [
                "The channel between these two chains cannot be authorized."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 760,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 136
        }
      },
      "docs": []
    }
  },
  {
    "id": 761,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "SessionInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "active_validator_indices",
              "type": 709,
              "typeName": "Vec<ValidatorIndex>",
              "docs": []
            },
            {
              "name": "random_seed",
              "type": 1,
              "typeName": "[u8; 32]",
              "docs": []
            },
            {
              "name": "dispute_period",
              "type": 4,
              "typeName": "SessionIndex",
              "docs": []
            },
            {
              "name": "validators",
              "type": 762,
              "typeName": "IndexedVec<ValidatorIndex, ValidatorId>",
              "docs": []
            },
            {
              "name": "discovery_keys",
              "type": 602,
              "typeName": "Vec<AuthorityDiscoveryId>",
              "docs": []
            },
            {
              "name": "assignment_keys",
              "type": 760,
              "typeName": "Vec<AssignmentId>",
              "docs": []
            },
            {
              "name": "validator_groups",
              "type": 763,
              "typeName": "IndexedVec<GroupIndex, Vec<ValidatorIndex>>",
              "docs": []
            },
            {
              "name": "n_cores",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "zeroth_delay_tranche_width",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "relay_vrf_modulo_samples",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "n_delay_tranches",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "no_show_slots",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "needed_approvals",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 762,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "IndexedVec"
      ],
      "params": [
        {
          "name": "K",
          "type": 294
        },
        {
          "name": "V",
          "type": 135
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 710,
              "typeName": "Vec<V>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 763,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "IndexedVec"
      ],
      "params": [
        {
          "name": "K",
          "type": 477
        },
        {
          "name": "V",
          "type": 709
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 723,
              "typeName": "Vec<V>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 764,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          315
        ]
      },
      "docs": []
    }
  },
  {
    "id": 765,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "DisputeState"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "validators_for",
              "type": 292,
              "typeName": "BitVec<u8, bitvec::order::Lsb0>",
              "docs": []
            },
            {
              "name": "validators_against",
              "type": 292,
              "typeName": "BitVec<u8, bitvec::order::Lsb0>",
              "docs": []
            },
            {
              "name": "start",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "concluded_at",
              "type": 152,
              "typeName": "Option<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 766,
    "type": {
      "path": [
        "BTreeSet"
      ],
      "params": [
        {
          "name": "T",
          "type": 294
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 709,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 767,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "disputes",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "DuplicateDisputeStatementSets",
              "fields": [],
              "index": 0,
              "docs": [
                "Duplicate dispute statement sets provided."
              ]
            },
            {
              "name": "AncientDisputeStatement",
              "fields": [],
              "index": 1,
              "docs": [
                "Ancient dispute statement provided."
              ]
            },
            {
              "name": "ValidatorIndexOutOfBounds",
              "fields": [],
              "index": 2,
              "docs": [
                "Validator index on statement is out of bounds for session."
              ]
            },
            {
              "name": "InvalidSignature",
              "fields": [],
              "index": 3,
              "docs": [
                "Invalid signature on statement."
              ]
            },
            {
              "name": "DuplicateStatement",
              "fields": [],
              "index": 4,
              "docs": [
                "Validator vote submitted more than once to dispute."
              ]
            },
            {
              "name": "SingleSidedDispute",
              "fields": [],
              "index": 5,
              "docs": [
                "A dispute where there are only votes on one side."
              ]
            },
            {
              "name": "MaliciousBacker",
              "fields": [],
              "index": 6,
              "docs": [
                "A dispute vote from a malicious backer."
              ]
            },
            {
              "name": "MissingBackingVotes",
              "fields": [],
              "index": 7,
              "docs": [
                "No backing votes were provides along dispute statements."
              ]
            },
            {
              "name": "UnconfirmedDispute",
              "fields": [],
              "index": 8,
              "docs": [
                "Unconfirmed dispute statement sets provided."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 768,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "slashing",
        "PendingSlashes"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "keys",
              "type": 769,
              "typeName": "BTreeMap<ValidatorIndex, ValidatorId>",
              "docs": []
            },
            {
              "name": "kind",
              "type": 331,
              "typeName": "SlashingOffenceKind",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 769,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 294
        },
        {
          "name": "V",
          "type": 135
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 770,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 770,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 771
        }
      },
      "docs": []
    }
  },
  {
    "id": 771,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          294,
          135
        ]
      },
      "docs": []
    }
  },
  {
    "id": 772,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "disputes",
        "slashing",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 0,
              "docs": [
                "The key ownership proof is invalid."
              ]
            },
            {
              "name": "InvalidSessionIndex",
              "fields": [],
              "index": 1,
              "docs": [
                "The session index is too old or invalid."
              ]
            },
            {
              "name": "InvalidCandidateHash",
              "fields": [],
              "index": 2,
              "docs": [
                "The candidate hash is invalid."
              ]
            },
            {
              "name": "InvalidValidatorIndex",
              "fields": [],
              "index": 3,
              "docs": [
                "There is no pending slash for the given validator index and time",
                "slot."
              ]
            },
            {
              "name": "ValidatorIndexIdMismatch",
              "fields": [],
              "index": 4,
              "docs": [
                "The validator index does not match the validator id."
              ]
            },
            {
              "name": "DuplicateSlashingReport",
              "fields": [],
              "index": 5,
              "docs": [
                "The given slashing report is valid but already previously reported."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 773,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "types",
        "CoreAffinityCount"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "core_index",
              "type": 476,
              "typeName": "CoreIndex",
              "docs": []
            },
            {
              "name": "count",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 774,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "types",
        "QueueStatusType"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "traffic",
              "type": 436,
              "typeName": "FixedU128",
              "docs": []
            },
            {
              "name": "next_index",
              "type": 775,
              "typeName": "QueueIndex",
              "docs": []
            },
            {
              "name": "smallest_index",
              "type": 775,
              "typeName": "QueueIndex",
              "docs": []
            },
            {
              "name": "freed_indices",
              "type": 776,
              "typeName": "BinaryHeap<ReverseQueueIndex>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 775,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "types",
        "QueueIndex"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 776,
    "type": {
      "path": [
        "BinaryHeap"
      ],
      "params": [
        {
          "name": "T",
          "type": 777
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 778,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 777,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "types",
        "ReverseQueueIndex"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 778,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 777
        }
      },
      "docs": []
    }
  },
  {
    "id": 779,
    "type": {
      "path": [
        "BinaryHeap"
      ],
      "params": [
        {
          "name": "T",
          "type": 780
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 781,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 780,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "types",
        "EnqueuedOrder"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "para_id",
              "type": 163,
              "typeName": "ParaId",
              "docs": []
            },
            {
              "name": "idx",
              "type": 775,
              "typeName": "QueueIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 781,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 780
        }
      },
      "docs": []
    }
  },
  {
    "id": 782,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 6
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 783,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 783,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 6
        }
      },
      "docs": []
    }
  },
  {
    "id": 784,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_on_demand",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "QueueFull",
              "fields": [],
              "index": 0,
              "docs": [
                "The order queue is full, `place_order` will not continue."
              ]
            },
            {
              "name": "SpotPriceHigherThanMaxAmount",
              "fields": [],
              "index": 1,
              "docs": [
                "The current spot price is higher than the max amount specified in the `place_order`",
                "call, making it invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 785,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          476
        ]
      },
      "docs": []
    }
  },
  {
    "id": 786,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_coretime",
        "Schedule"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "assignments",
              "type": 343,
              "typeName": "Vec<(CoreAssignment, PartsOf57600)>",
              "docs": []
            },
            {
              "name": "end_hint",
              "type": 152,
              "typeName": "Option<N>",
              "docs": []
            },
            {
              "name": "next_schedule",
              "type": 152,
              "typeName": "Option<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 787,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_coretime",
        "CoreDescriptor"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "queue",
              "type": 788,
              "typeName": "Option<QueueDescriptor<N>>",
              "docs": []
            },
            {
              "name": "current_work",
              "type": 790,
              "typeName": "Option<WorkState<N>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 788,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 789
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 789,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 789,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_coretime",
        "QueueDescriptor"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "first",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "last",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 790,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 791
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 791,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 791,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_coretime",
        "WorkState"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "assignments",
              "type": 792,
              "typeName": "Vec<(CoreAssignment, AssignmentState)>",
              "docs": []
            },
            {
              "name": "end_hint",
              "type": 152,
              "typeName": "Option<N>",
              "docs": []
            },
            {
              "name": "pos",
              "type": 91,
              "typeName": "u16",
              "docs": []
            },
            {
              "name": "step",
              "type": 346,
              "typeName": "PartsOf57600",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 792,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 793
        }
      },
      "docs": []
    }
  },
  {
    "id": 793,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          345,
          794
        ]
      },
      "docs": []
    }
  },
  {
    "id": 794,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_coretime",
        "AssignmentState"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "ratio",
              "type": 346,
              "typeName": "PartsOf57600",
              "docs": []
            },
            {
              "name": "remaining",
              "type": 346,
              "typeName": "PartsOf57600",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 795,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "assigner_coretime",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AssignmentsEmpty",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "OverScheduled",
              "fields": [],
              "index": 1,
              "docs": [
                "Assignments together exceeded 57600."
              ]
            },
            {
              "name": "UnderScheduled",
              "fields": [],
              "index": 2,
              "docs": [
                "Assignments together less than 57600"
              ]
            },
            {
              "name": "DisallowedInsert",
              "fields": [],
              "index": 3,
              "docs": [
                "assign_core is only allowed to append new assignments at the end of already existing",
                "ones."
              ]
            },
            {
              "name": "DuplicateInsert",
              "fields": [],
              "index": 4,
              "docs": [
                "Tried to insert a schedule for the same core and block number as an existing schedule"
              ]
            },
            {
              "name": "AssignmentsNotSorted",
              "fields": [],
              "index": 5,
              "docs": [
                "Tried to add an unsorted set of assignments"
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 796,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "paras_registrar",
        "ParaInfo"
      ],
      "params": [
        {
          "name": "Account",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "manager",
              "type": 0,
              "typeName": "Account",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "locked",
              "type": 179,
              "typeName": "Option<bool>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 797,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "paras_registrar",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotRegistered",
              "fields": [],
              "index": 0,
              "docs": [
                "The ID is not registered."
              ]
            },
            {
              "name": "AlreadyRegistered",
              "fields": [],
              "index": 1,
              "docs": [
                "The ID is already registered."
              ]
            },
            {
              "name": "NotOwner",
              "fields": [],
              "index": 2,
              "docs": [
                "The caller is not the owner of this Id."
              ]
            },
            {
              "name": "CodeTooLarge",
              "fields": [],
              "index": 3,
              "docs": [
                "Invalid para code size."
              ]
            },
            {
              "name": "HeadDataTooLarge",
              "fields": [],
              "index": 4,
              "docs": [
                "Invalid para head data size."
              ]
            },
            {
              "name": "NotParachain",
              "fields": [],
              "index": 5,
              "docs": [
                "Para is not a Parachain."
              ]
            },
            {
              "name": "NotParathread",
              "fields": [],
              "index": 6,
              "docs": [
                "Para is not a Parathread (on-demand parachain)."
              ]
            },
            {
              "name": "CannotDeregister",
              "fields": [],
              "index": 7,
              "docs": [
                "Cannot deregister para"
              ]
            },
            {
              "name": "CannotDowngrade",
              "fields": [],
              "index": 8,
              "docs": [
                "Cannot schedule downgrade of lease holding parachain to on-demand parachain"
              ]
            },
            {
              "name": "CannotUpgrade",
              "fields": [],
              "index": 9,
              "docs": [
                "Cannot schedule upgrade of on-demand parachain to lease holding parachain"
              ]
            },
            {
              "name": "ParaLocked",
              "fields": [],
              "index": 10,
              "docs": [
                "Para is locked from manipulation by the manager. Must use parachain or relay chain",
                "governance."
              ]
            },
            {
              "name": "NotReserved",
              "fields": [],
              "index": 11,
              "docs": [
                "The ID given for registration has not been reserved."
              ]
            },
            {
              "name": "InvalidCode",
              "fields": [],
              "index": 12,
              "docs": [
                "The validation code is invalid."
              ]
            },
            {
              "name": "CannotSwap",
              "fields": [],
              "index": 13,
              "docs": [
                "Cannot perform a parachain slot / lifecycle swap. Check that the state of both paras",
                "are correct for the swap to work."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 798,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 520
        }
      },
      "docs": []
    }
  },
  {
    "id": 799,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "slots",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "ParaNotOnboarding",
              "fields": [],
              "index": 0,
              "docs": [
                "The parachain ID is not onboarding."
              ]
            },
            {
              "name": "LeaseError",
              "fields": [],
              "index": 1,
              "docs": [
                "There was an error with the lease."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 800,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          163
        ]
      },
      "docs": []
    }
  },
  {
    "id": 801,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "array": {
          "len": 36,
          "type": 802
        }
      },
      "docs": []
    }
  },
  {
    "id": 802,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 803
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 803,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 803,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          0,
          163,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 804,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "auctions",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AuctionInProgress",
              "fields": [],
              "index": 0,
              "docs": [
                "This auction is already in progress."
              ]
            },
            {
              "name": "LeasePeriodInPast",
              "fields": [],
              "index": 1,
              "docs": [
                "The lease period is in the past."
              ]
            },
            {
              "name": "ParaNotRegistered",
              "fields": [],
              "index": 2,
              "docs": [
                "Para is not registered"
              ]
            },
            {
              "name": "NotCurrentAuction",
              "fields": [],
              "index": 3,
              "docs": [
                "Not a current auction."
              ]
            },
            {
              "name": "NotAuction",
              "fields": [],
              "index": 4,
              "docs": [
                "Not an auction."
              ]
            },
            {
              "name": "AuctionEnded",
              "fields": [],
              "index": 5,
              "docs": [
                "Auction has already ended."
              ]
            },
            {
              "name": "AlreadyLeasedOut",
              "fields": [],
              "index": 6,
              "docs": [
                "The para is already leased out for part of this range."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 805,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "crowdloan",
        "FundInfo"
      ],
      "params": [
        {
          "name": "AccountId",
          "type": 0
        },
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "BlockNumber",
          "type": 4
        },
        {
          "name": "LeasePeriod",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "depositor",
              "type": 0,
              "typeName": "AccountId",
              "docs": []
            },
            {
              "name": "verifier",
              "type": 338,
              "typeName": "Option<MultiSigner>",
              "docs": []
            },
            {
              "name": "deposit",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "raised",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "end",
              "type": 4,
              "typeName": "BlockNumber",
              "docs": []
            },
            {
              "name": "cap",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "last_contribution",
              "type": 806,
              "typeName": "LastContribution<BlockNumber>",
              "docs": []
            },
            {
              "name": "first_period",
              "type": 4,
              "typeName": "LeasePeriod",
              "docs": []
            },
            {
              "name": "last_period",
              "type": 4,
              "typeName": "LeasePeriod",
              "docs": []
            },
            {
              "name": "fund_index",
              "type": 4,
              "typeName": "FundIndex",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 806,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "crowdloan",
        "LastContribution"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Never",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "PreEnding",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "u32",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ending",
              "fields": [
                {
                  "name": null,
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 807,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "crowdloan",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "FirstPeriodInPast",
              "fields": [],
              "index": 0,
              "docs": [
                "The current lease period is more than the first lease period."
              ]
            },
            {
              "name": "FirstPeriodTooFarInFuture",
              "fields": [],
              "index": 1,
              "docs": [
                "The first lease period needs to at least be less than 3 `max_value`."
              ]
            },
            {
              "name": "LastPeriodBeforeFirstPeriod",
              "fields": [],
              "index": 2,
              "docs": [
                "Last lease period must be greater than first lease period."
              ]
            },
            {
              "name": "LastPeriodTooFarInFuture",
              "fields": [],
              "index": 3,
              "docs": [
                "The last lease period cannot be more than 3 periods after the first period."
              ]
            },
            {
              "name": "CannotEndInPast",
              "fields": [],
              "index": 4,
              "docs": [
                "The campaign ends before the current block number. The end must be in the future."
              ]
            },
            {
              "name": "EndTooFarInFuture",
              "fields": [],
              "index": 5,
              "docs": [
                "The end date for this crowdloan is not sensible."
              ]
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 6,
              "docs": [
                "There was an overflow."
              ]
            },
            {
              "name": "ContributionTooSmall",
              "fields": [],
              "index": 7,
              "docs": [
                "The contribution was below the minimum, `MinContribution`."
              ]
            },
            {
              "name": "InvalidParaId",
              "fields": [],
              "index": 8,
              "docs": [
                "Invalid fund index."
              ]
            },
            {
              "name": "CapExceeded",
              "fields": [],
              "index": 9,
              "docs": [
                "Contributions exceed maximum amount."
              ]
            },
            {
              "name": "ContributionPeriodOver",
              "fields": [],
              "index": 10,
              "docs": [
                "The contribution period has already ended."
              ]
            },
            {
              "name": "InvalidOrigin",
              "fields": [],
              "index": 11,
              "docs": [
                "The origin of this call is invalid."
              ]
            },
            {
              "name": "NotParachain",
              "fields": [],
              "index": 12,
              "docs": [
                "This crowdloan does not correspond to a parachain."
              ]
            },
            {
              "name": "LeaseActive",
              "fields": [],
              "index": 13,
              "docs": [
                "This parachain lease is still active and retirement cannot yet begin."
              ]
            },
            {
              "name": "BidOrLeaseActive",
              "fields": [],
              "index": 14,
              "docs": [
                "This parachain's bid or lease is still active and withdraw cannot yet begin."
              ]
            },
            {
              "name": "FundNotEnded",
              "fields": [],
              "index": 15,
              "docs": [
                "The crowdloan has not yet ended."
              ]
            },
            {
              "name": "NoContributions",
              "fields": [],
              "index": 16,
              "docs": [
                "There are no contributions stored in this crowdloan."
              ]
            },
            {
              "name": "NotReadyToDissolve",
              "fields": [],
              "index": 17,
              "docs": [
                "The crowdloan is not ready to dissolve. Potentially still has a slot or in retirement",
                "period."
              ]
            },
            {
              "name": "InvalidSignature",
              "fields": [],
              "index": 18,
              "docs": [
                "Invalid signature."
              ]
            },
            {
              "name": "MemoTooLarge",
              "fields": [],
              "index": 19,
              "docs": [
                "The provided memo is too large."
              ]
            },
            {
              "name": "AlreadyInNewRaise",
              "fields": [],
              "index": 20,
              "docs": [
                "The fund is already in `NewRaise`"
              ]
            },
            {
              "name": "VrfDelayInProgress",
              "fields": [],
              "index": 21,
              "docs": [
                "No contributions allowed during the VRF delay"
              ]
            },
            {
              "name": "NoLeasePeriod",
              "fields": [],
              "index": 22,
              "docs": [
                "A lease period has not started yet, due to an offset in the starting block."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 808,
    "type": {
      "path": [
        "polkadot_runtime_parachains",
        "coretime",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotBroker",
              "fields": [],
              "index": 0,
              "docs": [
                "The paraid making the call is not the coretime brokerage system parachain."
              ]
            },
            {
              "name": "RequestedFutureRevenue",
              "fields": [],
              "index": 1,
              "docs": [
                "Requested revenue information `when` parameter was in the future from the current",
                "block height."
              ]
            },
            {
              "name": "AssetTransferFailed",
              "fields": [],
              "index": 2,
              "docs": [
                "Failed to transfer assets to the coretime chain"
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 809,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "QueryStatus"
      ],
      "params": [
        {
          "name": "BlockNumber",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Pending",
              "fields": [
                {
                  "name": "responder",
                  "type": 81,
                  "typeName": "VersionedLocation",
                  "docs": []
                },
                {
                  "name": "maybe_match_querier",
                  "type": 810,
                  "typeName": "Option<VersionedLocation>",
                  "docs": []
                },
                {
                  "name": "maybe_notify",
                  "type": 811,
                  "typeName": "Option<(u8, u8)>",
                  "docs": []
                },
                {
                  "name": "timeout",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionNotifier",
              "fields": [
                {
                  "name": "origin",
                  "type": 81,
                  "typeName": "VersionedLocation",
                  "docs": []
                },
                {
                  "name": "is_active",
                  "type": 8,
                  "typeName": "bool",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Ready",
              "fields": [
                {
                  "name": "response",
                  "type": 813,
                  "typeName": "VersionedResponse",
                  "docs": []
                },
                {
                  "name": "at",
                  "type": 4,
                  "typeName": "BlockNumber",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 810,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 81
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 81,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 811,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 812
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 812,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 812,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          2,
          2
        ]
      },
      "docs": []
    }
  },
  {
    "id": 813,
    "type": {
      "path": [
        "xcm",
        "VersionedResponse"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "V2",
              "fields": [
                {
                  "name": null,
                  "type": 365,
                  "typeName": "v2::Response",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "V3",
              "fields": [
                {
                  "name": null,
                  "type": 383,
                  "typeName": "v3::Response",
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "V4",
              "fields": [
                {
                  "name": null,
                  "type": 408,
                  "typeName": "v4::Response",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 814,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          81
        ]
      },
      "docs": []
    }
  },
  {
    "id": 815,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          12,
          10,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 816,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 817
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 818,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 817,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          81,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 818,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 817
        }
      },
      "docs": []
    }
  },
  {
    "id": 819,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "VersionMigrationStage"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "MigrateSupportedVersion",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "MigrateVersionNotifiers",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "NotifyCurrentTargets",
              "fields": [
                {
                  "name": null,
                  "type": 820,
                  "typeName": "Option<Vec<u8>>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "MigrateAndNotifyOldTargets",
              "fields": [],
              "index": 3,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 820,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 14
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 14,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 821,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          0,
          431
        ]
      },
      "docs": []
    }
  },
  {
    "id": 822,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "RemoteLockedFungibleRecord"
      ],
      "params": [
        {
          "name": "ConsumerIdentifier",
          "type": 35
        },
        {
          "name": "MaxConsumers",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "amount",
              "type": 6,
              "typeName": "u128",
              "docs": []
            },
            {
              "name": "owner",
              "type": 81,
              "typeName": "VersionedLocation",
              "docs": []
            },
            {
              "name": "locker",
              "type": 81,
              "typeName": "VersionedLocation",
              "docs": []
            },
            {
              "name": "consumers",
              "type": 823,
              "typeName": "BoundedVec<(ConsumerIdentifier, u128), MaxConsumers>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 823,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 824
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 825,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 824,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          35,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 825,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 824
        }
      },
      "docs": []
    }
  },
  {
    "id": 826,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 827
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 828,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 827,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          81
        ]
      },
      "docs": []
    }
  },
  {
    "id": 828,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 827
        }
      },
      "docs": []
    }
  },
  {
    "id": 829,
    "type": {
      "path": [
        "pallet_xcm",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unreachable",
              "fields": [],
              "index": 0,
              "docs": [
                "The desired destination was unreachable, generally because there is a no way of routing",
                "to it."
              ]
            },
            {
              "name": "SendFailure",
              "fields": [],
              "index": 1,
              "docs": [
                "There was some other issue (i.e. not to do with routing) in sending the message.",
                "Perhaps a lack of space for buffering the message."
              ]
            },
            {
              "name": "Filtered",
              "fields": [],
              "index": 2,
              "docs": [
                "The message execution fails the filter."
              ]
            },
            {
              "name": "UnweighableMessage",
              "fields": [],
              "index": 3,
              "docs": [
                "The message's weight could not be determined."
              ]
            },
            {
              "name": "DestinationNotInvertible",
              "fields": [],
              "index": 4,
              "docs": [
                "The destination `Location` provided cannot be inverted."
              ]
            },
            {
              "name": "Empty",
              "fields": [],
              "index": 5,
              "docs": [
                "The assets to be sent are empty."
              ]
            },
            {
              "name": "CannotReanchor",
              "fields": [],
              "index": 6,
              "docs": [
                "Could not re-anchor the assets to declare the fees for the destination chain."
              ]
            },
            {
              "name": "TooManyAssets",
              "fields": [],
              "index": 7,
              "docs": [
                "Too many assets have been attempted for transfer."
              ]
            },
            {
              "name": "InvalidOrigin",
              "fields": [],
              "index": 8,
              "docs": [
                "Origin is invalid for sending."
              ]
            },
            {
              "name": "BadVersion",
              "fields": [],
              "index": 9,
              "docs": [
                "The version of the `Versioned` value used is not able to be interpreted."
              ]
            },
            {
              "name": "BadLocation",
              "fields": [],
              "index": 10,
              "docs": [
                "The given location could not be used (e.g. because it cannot be expressed in the",
                "desired version of XCM)."
              ]
            },
            {
              "name": "NoSubscription",
              "fields": [],
              "index": 11,
              "docs": [
                "The referenced subscription could not be found."
              ]
            },
            {
              "name": "AlreadySubscribed",
              "fields": [],
              "index": 12,
              "docs": [
                "The location is invalid since it already has a subscription from us."
              ]
            },
            {
              "name": "CannotCheckOutTeleport",
              "fields": [],
              "index": 13,
              "docs": [
                "Could not check-out the assets for teleportation to the destination chain."
              ]
            },
            {
              "name": "LowBalance",
              "fields": [],
              "index": 14,
              "docs": [
                "The owner does not own (all) of the asset that they wish to do the operation on."
              ]
            },
            {
              "name": "TooManyLocks",
              "fields": [],
              "index": 15,
              "docs": [
                "The asset owner has too many locks on the asset."
              ]
            },
            {
              "name": "AccountNotSovereign",
              "fields": [],
              "index": 16,
              "docs": [
                "The given account is not an identifiable sovereign account for any location."
              ]
            },
            {
              "name": "FeesNotMet",
              "fields": [],
              "index": 17,
              "docs": [
                "The operation required fees to be paid which the initiator could not meet."
              ]
            },
            {
              "name": "LockNotFound",
              "fields": [],
              "index": 18,
              "docs": [
                "A remote lock with the corresponding data could not be found."
              ]
            },
            {
              "name": "InUse",
              "fields": [],
              "index": 19,
              "docs": [
                "The unlock operation cannot succeed because there are still consumers of the lock."
              ]
            },
            {
              "name": "InvalidAssetUnknownReserve",
              "fields": [],
              "index": 21,
              "docs": [
                "Invalid asset, reserve chain could not be determined for it."
              ]
            },
            {
              "name": "InvalidAssetUnsupportedReserve",
              "fields": [],
              "index": 22,
              "docs": [
                "Invalid asset, do not support remote asset reserves with different fees reserves."
              ]
            },
            {
              "name": "TooManyReserves",
              "fields": [],
              "index": 23,
              "docs": [
                "Too many assets with different reserve locations have been attempted for transfer."
              ]
            },
            {
              "name": "LocalExecutionIncomplete",
              "fields": [],
              "index": 24,
              "docs": [
                "Local XCM execution incomplete."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 830,
    "type": {
      "path": [
        "pallet_message_queue",
        "BookState"
      ],
      "params": [
        {
          "name": "MessageOrigin",
          "type": 433
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "begin",
              "type": 4,
              "typeName": "PageIndex",
              "docs": []
            },
            {
              "name": "end",
              "type": 4,
              "typeName": "PageIndex",
              "docs": []
            },
            {
              "name": "count",
              "type": 4,
              "typeName": "PageIndex",
              "docs": []
            },
            {
              "name": "ready_neighbours",
              "type": 831,
              "typeName": "Option<Neighbours<MessageOrigin>>",
              "docs": []
            },
            {
              "name": "message_count",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "size",
              "type": 12,
              "typeName": "u64",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 831,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 832
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 832,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 832,
    "type": {
      "path": [
        "pallet_message_queue",
        "Neighbours"
      ],
      "params": [
        {
          "name": "MessageOrigin",
          "type": 433
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "prev",
              "type": 433,
              "typeName": "MessageOrigin",
              "docs": []
            },
            {
              "name": "next",
              "type": 433,
              "typeName": "MessageOrigin",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 833,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          433,
          4
        ]
      },
      "docs": []
    }
  },
  {
    "id": 834,
    "type": {
      "path": [
        "pallet_message_queue",
        "Page"
      ],
      "params": [
        {
          "name": "Size",
          "type": 4
        },
        {
          "name": "HeapSize",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "remaining",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "remaining_size",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "first_index",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "first",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "last",
              "type": 4,
              "typeName": "Size",
              "docs": []
            },
            {
              "name": "heap",
              "type": 835,
              "typeName": "BoundedVec<u8, IntoU32<HeapSize, Size>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 835,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 2
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 836,
    "type": {
      "path": [
        "pallet_message_queue",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "NotReapable",
              "fields": [],
              "index": 0,
              "docs": [
                "Page is not reapable because it has items remaining to be processed and is not old",
                "enough."
              ]
            },
            {
              "name": "NoPage",
              "fields": [],
              "index": 1,
              "docs": [
                "Page to be reaped does not exist."
              ]
            },
            {
              "name": "NoMessage",
              "fields": [],
              "index": 2,
              "docs": [
                "The referenced message could not be found."
              ]
            },
            {
              "name": "AlreadyProcessed",
              "fields": [],
              "index": 3,
              "docs": [
                "The message was already processed and cannot be processed again."
              ]
            },
            {
              "name": "Queued",
              "fields": [],
              "index": 4,
              "docs": [
                "The message is queued for future execution."
              ]
            },
            {
              "name": "InsufficientWeight",
              "fields": [],
              "index": 5,
              "docs": [
                "There is temporarily not enough weight to continue servicing messages."
              ]
            },
            {
              "name": "TemporarilyUnprocessable",
              "fields": [],
              "index": 6,
              "docs": [
                "This message is temporarily unprocessable.",
                "",
                "Such errors are expected, but not guaranteed, to resolve themselves eventually through",
                "retrying."
              ]
            },
            {
              "name": "QueuePaused",
              "fields": [],
              "index": 7,
              "docs": [
                "The queue is paused and no message can be executed from it.",
                "",
                "This can change at any time and may resolve in the future by re-trying."
              ]
            },
            {
              "name": "RecursiveDisallowed",
              "fields": [],
              "index": 8,
              "docs": [
                "Another call is in progress and needs to finish before this call can happen."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 837,
    "type": {
      "path": [
        "pallet_asset_rate",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "UnknownAssetKind",
              "fields": [],
              "index": 0,
              "docs": [
                "The given asset ID is unknown."
              ]
            },
            {
              "name": "AlreadyExists",
              "fields": [],
              "index": 1,
              "docs": [
                "The given asset ID already has an assigned conversion rate and cannot be re-created."
              ]
            },
            {
              "name": "Overflow",
              "fields": [],
              "index": 2,
              "docs": [
                "Overflow ocurred when calculating the inverse rate."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 838,
    "type": {
      "path": [
        "bounded_collections",
        "bounded_vec",
        "BoundedVec"
      ],
      "params": [
        {
          "name": "T",
          "type": 138
        },
        {
          "name": "S",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 839,
              "typeName": "Vec<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 839,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 138
        }
      },
      "docs": []
    }
  },
  {
    "id": 840,
    "type": {
      "path": [
        "pallet_beefy",
        "pallet",
        "Error"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidKeyOwnershipProof",
              "fields": [],
              "index": 0,
              "docs": [
                "A key ownership proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "InvalidEquivocationProof",
              "fields": [],
              "index": 1,
              "docs": [
                "An equivocation proof provided as part of an equivocation report is invalid."
              ]
            },
            {
              "name": "DuplicateOffenceReport",
              "fields": [],
              "index": 2,
              "docs": [
                "A given equivocation report is valid but already previously reported."
              ]
            },
            {
              "name": "InvalidConfiguration",
              "fields": [],
              "index": 3,
              "docs": [
                "Submitted configuration is invalid."
              ]
            }
          ]
        }
      },
      "docs": [
        "The `Error` enum of this pallet."
      ]
    }
  },
  {
    "id": 841,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "mmr",
        "BeefyAuthoritySet"
      ],
      "params": [
        {
          "name": "AuthoritySetCommitment",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "id",
              "type": 12,
              "typeName": "crate::ValidatorSetId",
              "docs": []
            },
            {
              "name": "len",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "keyset_commitment",
              "type": 13,
              "typeName": "AuthoritySetCommitment",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 842,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          843,
          844,
          845,
          846,
          847,
          849,
          850,
          851,
          852,
          853
        ]
      },
      "docs": []
    }
  },
  {
    "id": 843,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_non_zero_sender",
        "CheckNonZeroSender"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 844,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_spec_version",
        "CheckSpecVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 845,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_tx_version",
        "CheckTxVersion"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 846,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_genesis",
        "CheckGenesis"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 847,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_mortality",
        "CheckMortality"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 848,
              "typeName": "Era",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 848,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "era",
        "Era"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Immortal",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Mortal1",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Mortal2",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Mortal3",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 3,
              "docs": []
            },
            {
              "name": "Mortal4",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Mortal5",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Mortal6",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 6,
              "docs": []
            },
            {
              "name": "Mortal7",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Mortal8",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 8,
              "docs": []
            },
            {
              "name": "Mortal9",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Mortal10",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Mortal11",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Mortal12",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 12,
              "docs": []
            },
            {
              "name": "Mortal13",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 13,
              "docs": []
            },
            {
              "name": "Mortal14",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 14,
              "docs": []
            },
            {
              "name": "Mortal15",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 15,
              "docs": []
            },
            {
              "name": "Mortal16",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 16,
              "docs": []
            },
            {
              "name": "Mortal17",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 17,
              "docs": []
            },
            {
              "name": "Mortal18",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 18,
              "docs": []
            },
            {
              "name": "Mortal19",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "Mortal20",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Mortal21",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Mortal22",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 22,
              "docs": []
            },
            {
              "name": "Mortal23",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Mortal24",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Mortal25",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Mortal26",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Mortal27",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 27,
              "docs": []
            },
            {
              "name": "Mortal28",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 28,
              "docs": []
            },
            {
              "name": "Mortal29",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Mortal30",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Mortal31",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 31,
              "docs": []
            },
            {
              "name": "Mortal32",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 32,
              "docs": []
            },
            {
              "name": "Mortal33",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 33,
              "docs": []
            },
            {
              "name": "Mortal34",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "Mortal35",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 35,
              "docs": []
            },
            {
              "name": "Mortal36",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "Mortal37",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "Mortal38",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "Mortal39",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "Mortal40",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Mortal41",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 41,
              "docs": []
            },
            {
              "name": "Mortal42",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 42,
              "docs": []
            },
            {
              "name": "Mortal43",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 43,
              "docs": []
            },
            {
              "name": "Mortal44",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 44,
              "docs": []
            },
            {
              "name": "Mortal45",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 45,
              "docs": []
            },
            {
              "name": "Mortal46",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 46,
              "docs": []
            },
            {
              "name": "Mortal47",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 47,
              "docs": []
            },
            {
              "name": "Mortal48",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 48,
              "docs": []
            },
            {
              "name": "Mortal49",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 49,
              "docs": []
            },
            {
              "name": "Mortal50",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 50,
              "docs": []
            },
            {
              "name": "Mortal51",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "Mortal52",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 52,
              "docs": []
            },
            {
              "name": "Mortal53",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "Mortal54",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Mortal55",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 55,
              "docs": []
            },
            {
              "name": "Mortal56",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Mortal57",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 57,
              "docs": []
            },
            {
              "name": "Mortal58",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 58,
              "docs": []
            },
            {
              "name": "Mortal59",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 59,
              "docs": []
            },
            {
              "name": "Mortal60",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "Mortal61",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 61,
              "docs": []
            },
            {
              "name": "Mortal62",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "Mortal63",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "Mortal64",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "Mortal65",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 65,
              "docs": []
            },
            {
              "name": "Mortal66",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 66,
              "docs": []
            },
            {
              "name": "Mortal67",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 67,
              "docs": []
            },
            {
              "name": "Mortal68",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 68,
              "docs": []
            },
            {
              "name": "Mortal69",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 69,
              "docs": []
            },
            {
              "name": "Mortal70",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Mortal71",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Mortal72",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Mortal73",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Mortal74",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "Mortal75",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 75,
              "docs": []
            },
            {
              "name": "Mortal76",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 76,
              "docs": []
            },
            {
              "name": "Mortal77",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 77,
              "docs": []
            },
            {
              "name": "Mortal78",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 78,
              "docs": []
            },
            {
              "name": "Mortal79",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 79,
              "docs": []
            },
            {
              "name": "Mortal80",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 80,
              "docs": []
            },
            {
              "name": "Mortal81",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 81,
              "docs": []
            },
            {
              "name": "Mortal82",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 82,
              "docs": []
            },
            {
              "name": "Mortal83",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 83,
              "docs": []
            },
            {
              "name": "Mortal84",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 84,
              "docs": []
            },
            {
              "name": "Mortal85",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 85,
              "docs": []
            },
            {
              "name": "Mortal86",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 86,
              "docs": []
            },
            {
              "name": "Mortal87",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 87,
              "docs": []
            },
            {
              "name": "Mortal88",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 88,
              "docs": []
            },
            {
              "name": "Mortal89",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 89,
              "docs": []
            },
            {
              "name": "Mortal90",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 90,
              "docs": []
            },
            {
              "name": "Mortal91",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 91,
              "docs": []
            },
            {
              "name": "Mortal92",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 92,
              "docs": []
            },
            {
              "name": "Mortal93",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 93,
              "docs": []
            },
            {
              "name": "Mortal94",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 94,
              "docs": []
            },
            {
              "name": "Mortal95",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 95,
              "docs": []
            },
            {
              "name": "Mortal96",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 96,
              "docs": []
            },
            {
              "name": "Mortal97",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 97,
              "docs": []
            },
            {
              "name": "Mortal98",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "Mortal99",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "Mortal100",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "Mortal101",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Mortal102",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 102,
              "docs": []
            },
            {
              "name": "Mortal103",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 103,
              "docs": []
            },
            {
              "name": "Mortal104",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 104,
              "docs": []
            },
            {
              "name": "Mortal105",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 105,
              "docs": []
            },
            {
              "name": "Mortal106",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 106,
              "docs": []
            },
            {
              "name": "Mortal107",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 107,
              "docs": []
            },
            {
              "name": "Mortal108",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 108,
              "docs": []
            },
            {
              "name": "Mortal109",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 109,
              "docs": []
            },
            {
              "name": "Mortal110",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 110,
              "docs": []
            },
            {
              "name": "Mortal111",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 111,
              "docs": []
            },
            {
              "name": "Mortal112",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 112,
              "docs": []
            },
            {
              "name": "Mortal113",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 113,
              "docs": []
            },
            {
              "name": "Mortal114",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 114,
              "docs": []
            },
            {
              "name": "Mortal115",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 115,
              "docs": []
            },
            {
              "name": "Mortal116",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 116,
              "docs": []
            },
            {
              "name": "Mortal117",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 117,
              "docs": []
            },
            {
              "name": "Mortal118",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 118,
              "docs": []
            },
            {
              "name": "Mortal119",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 119,
              "docs": []
            },
            {
              "name": "Mortal120",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 120,
              "docs": []
            },
            {
              "name": "Mortal121",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 121,
              "docs": []
            },
            {
              "name": "Mortal122",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 122,
              "docs": []
            },
            {
              "name": "Mortal123",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 123,
              "docs": []
            },
            {
              "name": "Mortal124",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 124,
              "docs": []
            },
            {
              "name": "Mortal125",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 125,
              "docs": []
            },
            {
              "name": "Mortal126",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 126,
              "docs": []
            },
            {
              "name": "Mortal127",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 127,
              "docs": []
            },
            {
              "name": "Mortal128",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 128,
              "docs": []
            },
            {
              "name": "Mortal129",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 129,
              "docs": []
            },
            {
              "name": "Mortal130",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 130,
              "docs": []
            },
            {
              "name": "Mortal131",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 131,
              "docs": []
            },
            {
              "name": "Mortal132",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 132,
              "docs": []
            },
            {
              "name": "Mortal133",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 133,
              "docs": []
            },
            {
              "name": "Mortal134",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 134,
              "docs": []
            },
            {
              "name": "Mortal135",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 135,
              "docs": []
            },
            {
              "name": "Mortal136",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 136,
              "docs": []
            },
            {
              "name": "Mortal137",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 137,
              "docs": []
            },
            {
              "name": "Mortal138",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 138,
              "docs": []
            },
            {
              "name": "Mortal139",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 139,
              "docs": []
            },
            {
              "name": "Mortal140",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 140,
              "docs": []
            },
            {
              "name": "Mortal141",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 141,
              "docs": []
            },
            {
              "name": "Mortal142",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 142,
              "docs": []
            },
            {
              "name": "Mortal143",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 143,
              "docs": []
            },
            {
              "name": "Mortal144",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 144,
              "docs": []
            },
            {
              "name": "Mortal145",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 145,
              "docs": []
            },
            {
              "name": "Mortal146",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 146,
              "docs": []
            },
            {
              "name": "Mortal147",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 147,
              "docs": []
            },
            {
              "name": "Mortal148",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 148,
              "docs": []
            },
            {
              "name": "Mortal149",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 149,
              "docs": []
            },
            {
              "name": "Mortal150",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 150,
              "docs": []
            },
            {
              "name": "Mortal151",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 151,
              "docs": []
            },
            {
              "name": "Mortal152",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 152,
              "docs": []
            },
            {
              "name": "Mortal153",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 153,
              "docs": []
            },
            {
              "name": "Mortal154",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 154,
              "docs": []
            },
            {
              "name": "Mortal155",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 155,
              "docs": []
            },
            {
              "name": "Mortal156",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 156,
              "docs": []
            },
            {
              "name": "Mortal157",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 157,
              "docs": []
            },
            {
              "name": "Mortal158",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 158,
              "docs": []
            },
            {
              "name": "Mortal159",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 159,
              "docs": []
            },
            {
              "name": "Mortal160",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 160,
              "docs": []
            },
            {
              "name": "Mortal161",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 161,
              "docs": []
            },
            {
              "name": "Mortal162",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 162,
              "docs": []
            },
            {
              "name": "Mortal163",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 163,
              "docs": []
            },
            {
              "name": "Mortal164",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 164,
              "docs": []
            },
            {
              "name": "Mortal165",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 165,
              "docs": []
            },
            {
              "name": "Mortal166",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 166,
              "docs": []
            },
            {
              "name": "Mortal167",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 167,
              "docs": []
            },
            {
              "name": "Mortal168",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 168,
              "docs": []
            },
            {
              "name": "Mortal169",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 169,
              "docs": []
            },
            {
              "name": "Mortal170",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 170,
              "docs": []
            },
            {
              "name": "Mortal171",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 171,
              "docs": []
            },
            {
              "name": "Mortal172",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 172,
              "docs": []
            },
            {
              "name": "Mortal173",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 173,
              "docs": []
            },
            {
              "name": "Mortal174",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 174,
              "docs": []
            },
            {
              "name": "Mortal175",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 175,
              "docs": []
            },
            {
              "name": "Mortal176",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 176,
              "docs": []
            },
            {
              "name": "Mortal177",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 177,
              "docs": []
            },
            {
              "name": "Mortal178",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 178,
              "docs": []
            },
            {
              "name": "Mortal179",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 179,
              "docs": []
            },
            {
              "name": "Mortal180",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 180,
              "docs": []
            },
            {
              "name": "Mortal181",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 181,
              "docs": []
            },
            {
              "name": "Mortal182",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 182,
              "docs": []
            },
            {
              "name": "Mortal183",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 183,
              "docs": []
            },
            {
              "name": "Mortal184",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 184,
              "docs": []
            },
            {
              "name": "Mortal185",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 185,
              "docs": []
            },
            {
              "name": "Mortal186",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 186,
              "docs": []
            },
            {
              "name": "Mortal187",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 187,
              "docs": []
            },
            {
              "name": "Mortal188",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 188,
              "docs": []
            },
            {
              "name": "Mortal189",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 189,
              "docs": []
            },
            {
              "name": "Mortal190",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 190,
              "docs": []
            },
            {
              "name": "Mortal191",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 191,
              "docs": []
            },
            {
              "name": "Mortal192",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 192,
              "docs": []
            },
            {
              "name": "Mortal193",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 193,
              "docs": []
            },
            {
              "name": "Mortal194",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 194,
              "docs": []
            },
            {
              "name": "Mortal195",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 195,
              "docs": []
            },
            {
              "name": "Mortal196",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 196,
              "docs": []
            },
            {
              "name": "Mortal197",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 197,
              "docs": []
            },
            {
              "name": "Mortal198",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 198,
              "docs": []
            },
            {
              "name": "Mortal199",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 199,
              "docs": []
            },
            {
              "name": "Mortal200",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            },
            {
              "name": "Mortal201",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 201,
              "docs": []
            },
            {
              "name": "Mortal202",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 202,
              "docs": []
            },
            {
              "name": "Mortal203",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 203,
              "docs": []
            },
            {
              "name": "Mortal204",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 204,
              "docs": []
            },
            {
              "name": "Mortal205",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 205,
              "docs": []
            },
            {
              "name": "Mortal206",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 206,
              "docs": []
            },
            {
              "name": "Mortal207",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 207,
              "docs": []
            },
            {
              "name": "Mortal208",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 208,
              "docs": []
            },
            {
              "name": "Mortal209",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 209,
              "docs": []
            },
            {
              "name": "Mortal210",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 210,
              "docs": []
            },
            {
              "name": "Mortal211",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 211,
              "docs": []
            },
            {
              "name": "Mortal212",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 212,
              "docs": []
            },
            {
              "name": "Mortal213",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 213,
              "docs": []
            },
            {
              "name": "Mortal214",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 214,
              "docs": []
            },
            {
              "name": "Mortal215",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 215,
              "docs": []
            },
            {
              "name": "Mortal216",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 216,
              "docs": []
            },
            {
              "name": "Mortal217",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 217,
              "docs": []
            },
            {
              "name": "Mortal218",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 218,
              "docs": []
            },
            {
              "name": "Mortal219",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 219,
              "docs": []
            },
            {
              "name": "Mortal220",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 220,
              "docs": []
            },
            {
              "name": "Mortal221",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 221,
              "docs": []
            },
            {
              "name": "Mortal222",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 222,
              "docs": []
            },
            {
              "name": "Mortal223",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 223,
              "docs": []
            },
            {
              "name": "Mortal224",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 224,
              "docs": []
            },
            {
              "name": "Mortal225",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 225,
              "docs": []
            },
            {
              "name": "Mortal226",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 226,
              "docs": []
            },
            {
              "name": "Mortal227",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 227,
              "docs": []
            },
            {
              "name": "Mortal228",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 228,
              "docs": []
            },
            {
              "name": "Mortal229",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 229,
              "docs": []
            },
            {
              "name": "Mortal230",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 230,
              "docs": []
            },
            {
              "name": "Mortal231",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 231,
              "docs": []
            },
            {
              "name": "Mortal232",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 232,
              "docs": []
            },
            {
              "name": "Mortal233",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 233,
              "docs": []
            },
            {
              "name": "Mortal234",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 234,
              "docs": []
            },
            {
              "name": "Mortal235",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 235,
              "docs": []
            },
            {
              "name": "Mortal236",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 236,
              "docs": []
            },
            {
              "name": "Mortal237",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 237,
              "docs": []
            },
            {
              "name": "Mortal238",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 238,
              "docs": []
            },
            {
              "name": "Mortal239",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 239,
              "docs": []
            },
            {
              "name": "Mortal240",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 240,
              "docs": []
            },
            {
              "name": "Mortal241",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 241,
              "docs": []
            },
            {
              "name": "Mortal242",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 242,
              "docs": []
            },
            {
              "name": "Mortal243",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 243,
              "docs": []
            },
            {
              "name": "Mortal244",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 244,
              "docs": []
            },
            {
              "name": "Mortal245",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 245,
              "docs": []
            },
            {
              "name": "Mortal246",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 246,
              "docs": []
            },
            {
              "name": "Mortal247",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 247,
              "docs": []
            },
            {
              "name": "Mortal248",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 248,
              "docs": []
            },
            {
              "name": "Mortal249",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 249,
              "docs": []
            },
            {
              "name": "Mortal250",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 250,
              "docs": []
            },
            {
              "name": "Mortal251",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 251,
              "docs": []
            },
            {
              "name": "Mortal252",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 252,
              "docs": []
            },
            {
              "name": "Mortal253",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 253,
              "docs": []
            },
            {
              "name": "Mortal254",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 254,
              "docs": []
            },
            {
              "name": "Mortal255",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 255,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 849,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_nonce",
        "CheckNonce"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 59,
              "typeName": "T::Nonce",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 850,
    "type": {
      "path": [
        "frame_system",
        "extensions",
        "check_weight",
        "CheckWeight"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 851,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "ChargeTransactionPayment"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 63,
              "typeName": "BalanceOf<T>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 852,
    "type": {
      "path": [
        "polkadot_runtime_common",
        "claims",
        "PrevalidateAttests"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 853,
    "type": {
      "path": [
        "frame_metadata_hash_extension",
        "CheckMetadataHash"
      ],
      "params": [
        {
          "name": "T",
          "type": null
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "mode",
              "type": 854,
              "typeName": "Mode",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 854,
    "type": {
      "path": [
        "frame_metadata_hash_extension",
        "Mode"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Disabled",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Enabled",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 855,
    "type": {
      "path": [
        "polkadot_runtime",
        "Runtime"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": []
        }
      },
      "docs": []
    }
  },
  {
    "id": 856,
    "type": {
      "path": [
        "relay_common",
        "apis",
        "InflationInfo"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "inflation",
              "type": 174,
              "typeName": "sp_runtime::Perquintill",
              "docs": []
            },
            {
              "name": "next_mint",
              "type": 857,
              "typeName": "(polkadot_primitives::Balance, polkadot_primitives::Balance)",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 857,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          6,
          6
        ]
      },
      "docs": []
    }
  },
  {
    "id": 858,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "block",
        "Block"
      ],
      "params": [
        {
          "name": "Header",
          "type": 104
        },
        {
          "name": "Extrinsic",
          "type": 859
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "header",
              "type": 104,
              "typeName": "Header",
              "docs": []
            },
            {
              "name": "extrinsics",
              "type": 860,
              "typeName": "Vec<Extrinsic>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 859,
    "type": {
      "path": [
        "sp_runtime",
        "generic",
        "unchecked_extrinsic",
        "UncheckedExtrinsic"
      ],
      "params": [
        {
          "name": "Address",
          "type": 113
        },
        {
          "name": "Call",
          "type": 93
        },
        {
          "name": "Signature",
          "type": 341
        },
        {
          "name": "Extra",
          "type": 842
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 860,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 859
        }
      },
      "docs": []
    }
  },
  {
    "id": 861,
    "type": {
      "path": [
        "sp_runtime",
        "ExtrinsicInclusionMode"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "AllExtrinsics",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "OnlyInherents",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 862,
    "type": {
      "path": [
        "sp_core",
        "OpaqueMetadata"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 863,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 862
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 862,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 864,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 34
        },
        {
          "name": "E",
          "type": 865
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 34,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 865,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 865,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "TransactionValidityError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Invalid",
              "fields": [
                {
                  "name": null,
                  "type": 866,
                  "typeName": "InvalidTransaction",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Unknown",
              "fields": [
                {
                  "name": null,
                  "type": 867,
                  "typeName": "UnknownTransaction",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 866,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "InvalidTransaction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Call",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Payment",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Future",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Stale",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "BadProof",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "AncientBirthBlock",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "ExhaustsResources",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "Custom",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "BadMandatory",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "MandatoryValidation",
              "fields": [],
              "index": 9,
              "docs": []
            },
            {
              "name": "BadSigner",
              "fields": [],
              "index": 10,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 867,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "UnknownTransaction"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "CannotLookup",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "NoUnsignedValidator",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Custom",
              "fields": [
                {
                  "name": null,
                  "type": 2,
                  "typeName": "u8",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 868,
    "type": {
      "path": [
        "sp_inherents",
        "InherentData"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "data",
              "type": 869,
              "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 869,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 364
        },
        {
          "name": "V",
          "type": 14
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 870,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 870,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 871
        }
      },
      "docs": []
    }
  },
  {
    "id": 871,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          364,
          14
        ]
      },
      "docs": []
    }
  },
  {
    "id": 872,
    "type": {
      "path": [
        "sp_inherents",
        "CheckInherentsResult"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "okay",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "fatal_error",
              "type": 8,
              "typeName": "bool",
              "docs": []
            },
            {
              "name": "errors",
              "type": 868,
              "typeName": "InherentData",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 873,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "TransactionSource"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InBlock",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Local",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "External",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 874,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 875
        },
        {
          "name": "E",
          "type": 865
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 875,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 865,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 875,
    "type": {
      "path": [
        "sp_runtime",
        "transaction_validity",
        "ValidTransaction"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "priority",
              "type": 12,
              "typeName": "TransactionPriority",
              "docs": []
            },
            {
              "name": "requires",
              "type": 97,
              "typeName": "Vec<TransactionTag>",
              "docs": []
            },
            {
              "name": "provides",
              "type": 97,
              "typeName": "Vec<TransactionTag>",
              "docs": []
            },
            {
              "name": "longevity",
              "type": 12,
              "typeName": "TransactionLongevity",
              "docs": []
            },
            {
              "name": "propagate",
              "type": 8,
              "typeName": "bool",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 876,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          723,
          877
        ]
      },
      "docs": []
    }
  },
  {
    "id": 877,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "GroupRotationInfo"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "session_start_block",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "group_rotation_frequency",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "now",
              "type": 4,
              "typeName": "N",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 878,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 879
        }
      },
      "docs": []
    }
  },
  {
    "id": 879,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "CoreState"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Occupied",
              "fields": [
                {
                  "name": null,
                  "type": 880,
                  "typeName": "OccupiedCore<H, N>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Scheduled",
              "fields": [
                {
                  "name": null,
                  "type": 882,
                  "typeName": "ScheduledCore",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Free",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 880,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "OccupiedCore"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "next_up_on_available",
              "type": 881,
              "typeName": "Option<ScheduledCore>",
              "docs": []
            },
            {
              "name": "occupied_since",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "time_out_at",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "next_up_on_time_out",
              "type": 881,
              "typeName": "Option<ScheduledCore>",
              "docs": []
            },
            {
              "name": "availability",
              "type": 292,
              "typeName": "BitVec<u8, bitvec::order::Lsb0>",
              "docs": []
            },
            {
              "name": "group_responsible",
              "type": 477,
              "typeName": "GroupIndex",
              "docs": []
            },
            {
              "name": "candidate_hash",
              "type": 315,
              "typeName": "CandidateHash",
              "docs": []
            },
            {
              "name": "candidate_descriptor",
              "type": 299,
              "typeName": "CandidateDescriptor<H>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 881,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 882
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 882,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 882,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "ScheduledCore"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "para_id",
              "type": 163,
              "typeName": "Id",
              "docs": []
            },
            {
              "name": "collator",
              "type": 883,
              "typeName": "Option<CollatorId>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 883,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 300
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 300,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 884,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "OccupiedCoreAssumption"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Included",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "TimedOut",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "Free",
              "fields": [],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 885,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 886
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 886,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 886,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "PersistedValidationData"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "parent_head",
              "type": 310,
              "typeName": "HeadData",
              "docs": []
            },
            {
              "name": "relay_parent_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "relay_parent_storage_root",
              "type": 13,
              "typeName": "H",
              "docs": []
            },
            {
              "name": "max_pov_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 887,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 888
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 888,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 888,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          886,
          302
        ]
      },
      "docs": []
    }
  },
  {
    "id": 889,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 298
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 298,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 890,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 891
        }
      },
      "docs": []
    }
  },
  {
    "id": 891,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "CandidateEvent"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "CandidateBacked",
              "fields": [
                {
                  "name": null,
                  "type": 475,
                  "typeName": "CandidateReceipt<H>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 477,
                  "typeName": "GroupIndex",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "CandidateIncluded",
              "fields": [
                {
                  "name": null,
                  "type": 475,
                  "typeName": "CandidateReceipt<H>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 477,
                  "typeName": "GroupIndex",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "CandidateTimedOut",
              "fields": [
                {
                  "name": null,
                  "type": 475,
                  "typeName": "CandidateReceipt<H>",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 310,
                  "typeName": "HeadData",
                  "docs": []
                },
                {
                  "name": null,
                  "type": 476,
                  "typeName": "CoreIndex",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 892,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 163
        },
        {
          "name": "V",
          "type": 755
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 893,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 893,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 894
        }
      },
      "docs": []
    }
  },
  {
    "id": 894,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          163,
          755
        ]
      },
      "docs": []
    }
  },
  {
    "id": 895,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 717
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 717,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 896,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 761
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 761,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 897,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 302
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 302,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 898,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 899
        }
      },
      "docs": []
    }
  },
  {
    "id": 899,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          315,
          765
        ]
      },
      "docs": []
    }
  },
  {
    "id": 900,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 278
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 278,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 901,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 902
        }
      },
      "docs": []
    }
  },
  {
    "id": 902,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          315,
          768
        ]
      },
      "docs": []
    }
  },
  {
    "id": 903,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 904
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 904,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 904,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "slashing",
        "OpaqueKeyOwnershipProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 905,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 35
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 35,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 906,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 907
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 907,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 907,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "async_backing",
        "BackingState"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "constraints",
              "type": 908,
              "typeName": "Constraints<N>",
              "docs": []
            },
            {
              "name": "pending_availability",
              "type": 916,
              "typeName": "Vec<CandidatePendingAvailability<H, N>>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 908,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "async_backing",
        "Constraints"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "min_relay_parent_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "max_pov_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_code_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "ump_remaining",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "ump_remaining_bytes",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "max_ump_num_per_candidate",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "dmp_remaining_messages",
              "type": 121,
              "typeName": "Vec<N>",
              "docs": []
            },
            {
              "name": "hrmp_inbound",
              "type": 909,
              "typeName": "InboundHrmpLimitations<N>",
              "docs": []
            },
            {
              "name": "hrmp_channels_out",
              "type": 910,
              "typeName": "Vec<(Id, OutboundHrmpChannelLimitations)>",
              "docs": []
            },
            {
              "name": "max_hrmp_num_per_candidate",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "required_parent",
              "type": 310,
              "typeName": "HeadData",
              "docs": []
            },
            {
              "name": "validation_code_hash",
              "type": 302,
              "typeName": "ValidationCodeHash",
              "docs": []
            },
            {
              "name": "upgrade_restriction",
              "type": 913,
              "typeName": "Option<UpgradeRestriction>",
              "docs": []
            },
            {
              "name": "future_validation_code",
              "type": 914,
              "typeName": "Option<(N, ValidationCodeHash)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 909,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "async_backing",
        "InboundHrmpLimitations"
      ],
      "params": [
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "valid_watermarks",
              "type": 121,
              "typeName": "Vec<N>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 910,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 911
        }
      },
      "docs": []
    }
  },
  {
    "id": 911,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          163,
          912
        ]
      },
      "docs": []
    }
  },
  {
    "id": 912,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "async_backing",
        "OutboundHrmpChannelLimitations"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "bytes_remaining",
              "type": 4,
              "typeName": "u32",
              "docs": []
            },
            {
              "name": "messages_remaining",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 913,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 745
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 745,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 914,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 915
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 915,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 915,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          4,
          302
        ]
      },
      "docs": []
    }
  },
  {
    "id": 916,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 917
        }
      },
      "docs": []
    }
  },
  {
    "id": 917,
    "type": {
      "path": [
        "polkadot_primitives",
        "v7",
        "async_backing",
        "CandidatePendingAvailability"
      ],
      "params": [
        {
          "name": "H",
          "type": 13
        },
        {
          "name": "N",
          "type": 4
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "candidate_hash",
              "type": 315,
              "typeName": "CandidateHash",
              "docs": []
            },
            {
              "name": "descriptor",
              "type": 299,
              "typeName": "CandidateDescriptor<H>",
              "docs": []
            },
            {
              "name": "commitments",
              "type": 303,
              "typeName": "CandidateCommitments",
              "docs": []
            },
            {
              "name": "relay_parent_number",
              "type": 4,
              "typeName": "N",
              "docs": []
            },
            {
              "name": "max_pov_size",
              "type": 4,
              "typeName": "u32",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 918,
    "type": {
      "path": [
        "BTreeMap"
      ],
      "params": [
        {
          "name": "K",
          "type": 476
        },
        {
          "name": "V",
          "type": 737
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 919,
              "typeName": null,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 919,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 920
        }
      },
      "docs": []
    }
  },
  {
    "id": 920,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          476,
          737
        ]
      },
      "docs": []
    }
  },
  {
    "id": 921,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 298
        }
      },
      "docs": []
    }
  },
  {
    "id": 922,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 923
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 923,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 923,
    "type": {
      "path": [
        "sp_consensus_beefy",
        "ValidatorSet"
      ],
      "params": [
        {
          "name": "AuthorityId",
          "type": 138
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "validators",
              "type": 839,
              "typeName": "Vec<AuthorityId>",
              "docs": []
            },
            {
              "name": "id",
              "type": 12,
              "typeName": "ValidatorSetId",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 924,
    "type": {
      "path": [
        "sp_runtime",
        "OpaqueValue"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 925,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 924
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 924,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 926,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 13
        },
        {
          "name": "E",
          "type": 927
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 13,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 927,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 927,
    "type": {
      "path": [
        "sp_mmr_primitives",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "InvalidNumericOp",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Push",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "GetRoot",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "Commit",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "GenerateProof",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Verify",
              "fields": [],
              "index": 5,
              "docs": []
            },
            {
              "name": "LeafNotFound",
              "fields": [],
              "index": 6,
              "docs": []
            },
            {
              "name": "PalletNotIncluded",
              "fields": [],
              "index": 7,
              "docs": []
            },
            {
              "name": "InvalidLeafIndex",
              "fields": [],
              "index": 8,
              "docs": []
            },
            {
              "name": "InvalidBestKnownBlock",
              "fields": [],
              "index": 9,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 928,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 12
        },
        {
          "name": "E",
          "type": 927
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 12,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 927,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 929,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 930
        },
        {
          "name": "E",
          "type": 927
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 930,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 927,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 930,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          931,
          933
        ]
      },
      "docs": []
    }
  },
  {
    "id": 931,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 932
        }
      },
      "docs": []
    }
  },
  {
    "id": 932,
    "type": {
      "path": [
        "sp_mmr_primitives",
        "EncodableOpaqueLeaf"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 933,
    "type": {
      "path": [
        "sp_mmr_primitives",
        "LeafProof"
      ],
      "params": [
        {
          "name": "Hash",
          "type": 13
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "leaf_indices",
              "type": 680,
              "typeName": "Vec<LeafIndex>",
              "docs": []
            },
            {
              "name": "leaf_count",
              "type": 12,
              "typeName": "NodeIndex",
              "docs": []
            },
            {
              "name": "items",
              "type": 101,
              "typeName": "Vec<Hash>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 934,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 35
        },
        {
          "name": "E",
          "type": 927
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 35,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 927,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 935,
    "type": {
      "path": [
        "sp_consensus_babe",
        "BabeConfiguration"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "slot_duration",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "epoch_length",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "c",
              "type": 109,
              "typeName": "(u64, u64)",
              "docs": []
            },
            {
              "name": "authorities",
              "type": 530,
              "typeName": "Vec<(AuthorityId, BabeAuthorityWeight)>",
              "docs": []
            },
            {
              "name": "randomness",
              "type": 1,
              "typeName": "Randomness",
              "docs": []
            },
            {
              "name": "allowed_slots",
              "type": 110,
              "typeName": "AllowedSlots",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 936,
    "type": {
      "path": [
        "sp_consensus_babe",
        "Epoch"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "epoch_index",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "start_slot",
              "type": 106,
              "typeName": "Slot",
              "docs": []
            },
            {
              "name": "duration",
              "type": 12,
              "typeName": "u64",
              "docs": []
            },
            {
              "name": "authorities",
              "type": 530,
              "typeName": "Vec<(AuthorityId, BabeAuthorityWeight)>",
              "docs": []
            },
            {
              "name": "randomness",
              "type": 1,
              "typeName": "Randomness",
              "docs": []
            },
            {
              "name": "config",
              "type": 539,
              "typeName": "BabeEpochConfiguration",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 937,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 938
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 938,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 938,
    "type": {
      "path": [
        "sp_consensus_babe",
        "OpaqueKeyOwnershipProof"
      ],
      "params": [],
      "def": {
        "composite": {
          "fields": [
            {
              "name": null,
              "type": 14,
              "typeName": "Vec<u8>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 939,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 940
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 940,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 940,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 941
        }
      },
      "docs": []
    }
  },
  {
    "id": 941,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          14,
          595
        ]
      },
      "docs": []
    }
  },
  {
    "id": 942,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "types",
        "RuntimeDispatchInfo"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        },
        {
          "name": "Weight",
          "type": 10
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "weight",
              "type": 10,
              "typeName": "Weight",
              "docs": []
            },
            {
              "name": "class",
              "type": 24,
              "typeName": "DispatchClass",
              "docs": []
            },
            {
              "name": "partial_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 943,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "types",
        "FeeDetails"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "inclusion_fee",
              "type": 944,
              "typeName": "Option<InclusionFee<Balance>>",
              "docs": []
            },
            {
              "name": "tip",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 944,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 945
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 945,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 945,
    "type": {
      "path": [
        "pallet_transaction_payment",
        "types",
        "InclusionFee"
      ],
      "params": [
        {
          "name": "Balance",
          "type": 6
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "base_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "len_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            },
            {
              "name": "adjusted_weight_fee",
              "type": 6,
              "typeName": "Balance",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 946,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 947
        },
        {
          "name": "E",
          "type": 948
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 947,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 948,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 947,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 431
        }
      },
      "docs": []
    }
  },
  {
    "id": 948,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "fees",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionedConversionFailed",
              "fields": [],
              "index": 1,
              "docs": []
            },
            {
              "name": "WeightNotComputable",
              "fields": [],
              "index": 2,
              "docs": []
            },
            {
              "name": "UnhandledXcmVersion",
              "fields": [],
              "index": 3,
              "docs": []
            },
            {
              "name": "AssetNotFound",
              "fields": [],
              "index": 4,
              "docs": []
            },
            {
              "name": "Unroutable",
              "fields": [],
              "index": 5,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 949,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 10
        },
        {
          "name": "E",
          "type": 948
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 10,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 948,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 950,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 6
        },
        {
          "name": "E",
          "type": 948
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 6,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 948,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 951,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 418
        },
        {
          "name": "E",
          "type": 948
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 418,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 948,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 952,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 953
        },
        {
          "name": "E",
          "type": 959
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 953,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 959,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 953,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "dry_run",
        "CallDryRunEffects"
      ],
      "params": [
        {
          "name": "Event",
          "type": 21
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "execution_result",
              "type": 450,
              "typeName": "DispatchResultWithPostInfo",
              "docs": []
            },
            {
              "name": "emitted_events",
              "type": 954,
              "typeName": "Vec<Event>",
              "docs": []
            },
            {
              "name": "local_xcm",
              "type": 955,
              "typeName": "Option<VersionedXcm<()>>",
              "docs": []
            },
            {
              "name": "forwarded_xcms",
              "type": 956,
              "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 954,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 21
        }
      },
      "docs": []
    }
  },
  {
    "id": 955,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 354
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 354,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 956,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 957
        }
      },
      "docs": []
    }
  },
  {
    "id": 957,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "tuple": [
          81,
          958
        ]
      },
      "docs": []
    }
  },
  {
    "id": 958,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 354
        }
      },
      "docs": []
    }
  },
  {
    "id": 959,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "dry_run",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unimplemented",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionedConversionFailed",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 960,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 961
        },
        {
          "name": "E",
          "type": 959
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 961,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 959,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 961,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "dry_run",
        "XcmDryRunEffects"
      ],
      "params": [
        {
          "name": "Event",
          "type": 21
        }
      ],
      "def": {
        "composite": {
          "fields": [
            {
              "name": "execution_result",
              "type": 493,
              "typeName": "Outcome",
              "docs": []
            },
            {
              "name": "emitted_events",
              "type": 954,
              "typeName": "Vec<Event>",
              "docs": []
            },
            {
              "name": "forwarded_xcms",
              "type": 956,
              "typeName": "Vec<(VersionedLocation, Vec<VersionedXcm<()>>)>",
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 962,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 0
        },
        {
          "name": "E",
          "type": 963
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 0,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 963,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 963,
    "type": {
      "path": [
        "xcm_runtime_apis",
        "conversions",
        "Error"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Unsupported",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "VersionedConversionFailed",
              "fields": [],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 964,
    "type": {
      "path": [
        "Result"
      ],
      "params": [
        {
          "name": "T",
          "type": 35
        },
        {
          "name": "E",
          "type": 500
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "Ok",
              "fields": [
                {
                  "name": null,
                  "type": 35,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Err",
              "fields": [
                {
                  "name": null,
                  "type": 500,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 965,
    "type": {
      "path": [
        "Option"
      ],
      "params": [
        {
          "name": "T",
          "type": 500
        }
      ],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "None",
              "fields": [],
              "index": 0,
              "docs": []
            },
            {
              "name": "Some",
              "fields": [
                {
                  "name": null,
                  "type": 500,
                  "typeName": null,
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  },
  {
    "id": 966,
    "type": {
      "path": [],
      "params": [],
      "def": {
        "sequence": {
          "type": 500
        }
      },
      "docs": []
    }
  },
  {
    "id": 967,
    "type": {
      "path": [
        "polkadot_runtime",
        "RuntimeError"
      ],
      "params": [],
      "def": {
        "variant": {
          "variants": [
            {
              "name": "System",
              "fields": [
                {
                  "name": null,
                  "type": 512,
                  "typeName": "frame_system::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 0,
              "docs": []
            },
            {
              "name": "Scheduler",
              "fields": [
                {
                  "name": null,
                  "type": 518,
                  "typeName": "pallet_scheduler::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 1,
              "docs": []
            },
            {
              "name": "Preimage",
              "fields": [
                {
                  "name": null,
                  "type": 527,
                  "typeName": "pallet_preimage::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 10,
              "docs": []
            },
            {
              "name": "Babe",
              "fields": [
                {
                  "name": null,
                  "type": 543,
                  "typeName": "pallet_babe::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 2,
              "docs": []
            },
            {
              "name": "Indices",
              "fields": [
                {
                  "name": null,
                  "type": 545,
                  "typeName": "pallet_indices::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 4,
              "docs": []
            },
            {
              "name": "Balances",
              "fields": [
                {
                  "name": null,
                  "type": 564,
                  "typeName": "pallet_balances::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 5,
              "docs": []
            },
            {
              "name": "Staking",
              "fields": [
                {
                  "name": null,
                  "type": 588,
                  "typeName": "pallet_staking::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 7,
              "docs": []
            },
            {
              "name": "Session",
              "fields": [
                {
                  "name": null,
                  "type": 596,
                  "typeName": "pallet_session::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 9,
              "docs": []
            },
            {
              "name": "Grandpa",
              "fields": [
                {
                  "name": null,
                  "type": 600,
                  "typeName": "pallet_grandpa::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 11,
              "docs": []
            },
            {
              "name": "Treasury",
              "fields": [
                {
                  "name": null,
                  "type": 609,
                  "typeName": "pallet_treasury::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 19,
              "docs": []
            },
            {
              "name": "ConvictionVoting",
              "fields": [
                {
                  "name": null,
                  "type": 622,
                  "typeName": "pallet_conviction_voting::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 20,
              "docs": []
            },
            {
              "name": "Referenda",
              "fields": [
                {
                  "name": null,
                  "type": 640,
                  "typeName": "pallet_referenda::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 21,
              "docs": []
            },
            {
              "name": "Whitelist",
              "fields": [
                {
                  "name": null,
                  "type": 641,
                  "typeName": "pallet_whitelist::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 23,
              "docs": []
            },
            {
              "name": "Claims",
              "fields": [
                {
                  "name": null,
                  "type": 642,
                  "typeName": "claims::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 24,
              "docs": []
            },
            {
              "name": "Vesting",
              "fields": [
                {
                  "name": null,
                  "type": 646,
                  "typeName": "pallet_vesting::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 25,
              "docs": []
            },
            {
              "name": "Utility",
              "fields": [
                {
                  "name": null,
                  "type": 647,
                  "typeName": "pallet_utility::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 26,
              "docs": []
            },
            {
              "name": "Proxy",
              "fields": [
                {
                  "name": null,
                  "type": 656,
                  "typeName": "pallet_proxy::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 29,
              "docs": []
            },
            {
              "name": "Multisig",
              "fields": [
                {
                  "name": null,
                  "type": 660,
                  "typeName": "pallet_multisig::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 30,
              "docs": []
            },
            {
              "name": "Bounties",
              "fields": [
                {
                  "name": null,
                  "type": 664,
                  "typeName": "pallet_bounties::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 34,
              "docs": []
            },
            {
              "name": "ChildBounties",
              "fields": [
                {
                  "name": null,
                  "type": 667,
                  "typeName": "pallet_child_bounties::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 38,
              "docs": []
            },
            {
              "name": "ElectionProviderMultiPhase",
              "fields": [
                {
                  "name": null,
                  "type": 677,
                  "typeName": "pallet_election_provider_multi_phase::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 36,
              "docs": []
            },
            {
              "name": "VoterList",
              "fields": [
                {
                  "name": null,
                  "type": 681,
                  "typeName": "pallet_bags_list::Error<Runtime, pallet_bags_list::Instance1>",
                  "docs": []
                }
              ],
              "index": 37,
              "docs": []
            },
            {
              "name": "NominationPools",
              "fields": [
                {
                  "name": null,
                  "type": 699,
                  "typeName": "pallet_nomination_pools::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 39,
              "docs": []
            },
            {
              "name": "FastUnstake",
              "fields": [
                {
                  "name": null,
                  "type": 704,
                  "typeName": "pallet_fast_unstake::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 40,
              "docs": []
            },
            {
              "name": "Configuration",
              "fields": [
                {
                  "name": null,
                  "type": 708,
                  "typeName": "parachains_configuration::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 51,
              "docs": []
            },
            {
              "name": "ParaInclusion",
              "fields": [
                {
                  "name": null,
                  "type": 716,
                  "typeName": "parachains_inclusion::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 53,
              "docs": []
            },
            {
              "name": "ParaInherent",
              "fields": [
                {
                  "name": null,
                  "type": 722,
                  "typeName": "parachains_paras_inherent::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 54,
              "docs": []
            },
            {
              "name": "Paras",
              "fields": [
                {
                  "name": null,
                  "type": 747,
                  "typeName": "parachains_paras::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 56,
              "docs": []
            },
            {
              "name": "Hrmp",
              "fields": [
                {
                  "name": null,
                  "type": 759,
                  "typeName": "parachains_hrmp::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 60,
              "docs": []
            },
            {
              "name": "ParasDisputes",
              "fields": [
                {
                  "name": null,
                  "type": 767,
                  "typeName": "parachains_disputes::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 62,
              "docs": []
            },
            {
              "name": "ParasSlashing",
              "fields": [
                {
                  "name": null,
                  "type": 772,
                  "typeName": "parachains_slashing::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 63,
              "docs": []
            },
            {
              "name": "OnDemand",
              "fields": [
                {
                  "name": null,
                  "type": 784,
                  "typeName": "parachains_assigner_on_demand::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 64,
              "docs": []
            },
            {
              "name": "CoretimeAssignmentProvider",
              "fields": [
                {
                  "name": null,
                  "type": 795,
                  "typeName": "parachains_assigner_coretime::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 65,
              "docs": []
            },
            {
              "name": "Registrar",
              "fields": [
                {
                  "name": null,
                  "type": 797,
                  "typeName": "paras_registrar::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 70,
              "docs": []
            },
            {
              "name": "Slots",
              "fields": [
                {
                  "name": null,
                  "type": 799,
                  "typeName": "slots::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 71,
              "docs": []
            },
            {
              "name": "Auctions",
              "fields": [
                {
                  "name": null,
                  "type": 804,
                  "typeName": "auctions::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 72,
              "docs": []
            },
            {
              "name": "Crowdloan",
              "fields": [
                {
                  "name": null,
                  "type": 807,
                  "typeName": "crowdloan::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 73,
              "docs": []
            },
            {
              "name": "Coretime",
              "fields": [
                {
                  "name": null,
                  "type": 808,
                  "typeName": "coretime::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 74,
              "docs": []
            },
            {
              "name": "StateTrieMigration",
              "fields": [
                {
                  "name": null,
                  "type": 491,
                  "typeName": "pallet_state_trie_migration::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 98,
              "docs": []
            },
            {
              "name": "XcmPallet",
              "fields": [
                {
                  "name": null,
                  "type": 829,
                  "typeName": "pallet_xcm::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 99,
              "docs": []
            },
            {
              "name": "MessageQueue",
              "fields": [
                {
                  "name": null,
                  "type": 836,
                  "typeName": "pallet_message_queue::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 100,
              "docs": []
            },
            {
              "name": "AssetRate",
              "fields": [
                {
                  "name": null,
                  "type": 837,
                  "typeName": "pallet_asset_rate::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 101,
              "docs": []
            },
            {
              "name": "Beefy",
              "fields": [
                {
                  "name": null,
                  "type": 840,
                  "typeName": "pallet_beefy::Error<Runtime>",
                  "docs": []
                }
              ],
              "index": 200,
              "docs": []
            }
          ]
        }
      },
      "docs": []
    }
  }
]