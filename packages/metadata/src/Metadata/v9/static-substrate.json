{
  "magicNumber": 1635018093,
  "metadata": {
    "V9": {
      "modules": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "items": [
              {
                "name": "AccountNonce",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "Index",
                    "linked": false
                  }
                },
                "fallback": "0x00000000",
                "documentation": [
                  " Extrinsics nonce for accounts."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00",
                "documentation": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "AllExtrinsicsWeight",
                "modifier": "Optional",
                "type": {
                  "Plain": "Weight"
                },
                "fallback": "0x00",
                "documentation": [
                  " Total weight for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00",
                "documentation": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "BlockNumber",
                    "value": "Hash",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "u32",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "type": {
                  "Plain": "BlockNumber"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "type": {
                  "Plain": "Hash"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "ExtrinsicsRoot",
                "modifier": "Default",
                "type": {
                  "Plain": "Hash"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " Extrinsics root of the current block, also part of the block header."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "type": {
                  "Plain": "DigestOf"
                },
                "fallback": "0x00",
                "documentation": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<EventRecord>"
                },
                "fallback": "0x00",
                "documentation": [
                  " Events deposited for the current block."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "type": {
                  "Plain": "EventIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Blake2_256",
                    "key1": "()",
                    "key2": "Hash",
                    "value": "Vec<(BlockNumber,EventIndex)>",
                    "key2Hasher": "Blake2_256"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " The first key serves no purpose. This field is declared as double_map just",
                  " for convenience of using `remove_prefix`.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "fill_block",
              "args": [],
              "documentation": [
                " A big dispatch that will disallow any other transaction to be included."
              ]
            },
            {
              "name": "remark",
              "args": [
                {
                  "name": "_remark",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Make some on-chain remark."
              ]
            },
            {
              "name": "set_heap_pages",
              "args": [
                {
                  "name": "pages",
                  "type": "u64"
                }
              ],
              "documentation": [
                " Set the number of pages in the WebAssembly environment's heap."
              ]
            },
            {
              "name": "set_code",
              "args": [
                {
                  "name": "new",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Set the new code."
              ]
            },
            {
              "name": "set_storage",
              "args": [
                {
                  "name": "items",
                  "type": "Vec<KeyValue>"
                }
              ],
              "documentation": [
                " Set some items of storage."
              ]
            },
            {
              "name": "kill_storage",
              "args": [
                {
                  "name": "keys",
                  "type": "Vec<Key>"
                }
              ],
              "documentation": [
                " Kill some items from storage."
              ]
            },
            {
              "name": "kill_prefix",
              "args": [
                {
                  "name": "prefix",
                  "type": "Key"
                }
              ],
              "documentation": [
                " Kill all storage items with a key that starts with the given prefix."
              ]
            }
          ],
          "events": [
            {
              "name": "ExtrinsicSuccess",
              "args": [
                "DispatchInfo"
              ],
              "documentation": [
                " An extrinsic completed successfully."
              ]
            },
            {
              "name": "ExtrinsicFailed",
              "args": [
                "DispatchError",
                "DispatchInfo"
              ],
              "documentation": [
                " An extrinsic failed."
              ]
            }
          ],
          "constants": [],
          "errors": [
            {
              "name": "RequireSignedOrigin",
              "documentation": []
            },
            {
              "name": "RequireRootOrigin",
              "documentation": []
            },
            {
              "name": "RequireNoOrigin",
              "documentation": []
            }
          ]
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": [
            {
              "name": "batch",
              "args": [
                {
                  "name": "calls",
                  "type": "Vec<Call>"
                }
              ],
              "documentation": [
                " Send a batch of dispatch calls (only root)."
              ]
            }
          ],
          "events": [
            {
              "name": "BatchExecuted",
              "args": [
                "Vec<Result<(),DispatchError>>"
              ],
              "documentation": []
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "Babe",
          "storage": {
            "prefix": "Babe",
            "items": [
              {
                "name": "EpochIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " Current epoch index."
                ]
              },
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<(AuthorityId,BabeAuthorityWeight)>"
                },
                "fallback": "0x00",
                "documentation": [
                  " Current epoch authorities."
                ]
              },
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "type": {
                  "Plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " The slot at which the first epoch actually started. This is 0",
                  " until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "type": {
                  "Plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " Current slot number."
                ]
              },
              {
                "name": "Randomness",
                "modifier": "Default",
                "type": {
                  "Plain": "[u8;32]"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " The epoch randomness for the *current* epoch.",
                  "",
                  " # Security",
                  "",
                  " This MUST NOT be used for gambling, as it can be influenced by a",
                  " malicious validator in the short term. It MAY be used in many",
                  " cryptographic protocols, however, so long as one remembers that this",
                  " (like everything else on-chain) it is public. For example, it can be",
                  " used where a number is needed that cannot have been chosen by an",
                  " adversary, for purposes such as public-coin zero-knowledge proofs."
                ]
              },
              {
                "name": "NextRandomness",
                "modifier": "Default",
                "type": {
                  "Plain": "[u8;32]"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " Next epoch randomness."
                ]
              },
              {
                "name": "SegmentIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " Randomness under construction.",
                  "",
                  " We make a tradeoff between storage accesses and list length.",
                  " We store the under-construction randomness in segments of up to",
                  " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                  "",
                  " Once a segment reaches this length, we begin the next one.",
                  " We reset all segments and return to `0` at the beginning of every",
                  " epoch."
                ]
              },
              {
                "name": "UnderConstruction",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "u32",
                    "value": "Vec<[u8;32]>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": []
              },
              {
                "name": "Initialized",
                "modifier": "Optional",
                "type": {
                  "Plain": "MaybeVrf"
                },
                "fallback": "0x00",
                "documentation": [
                  " Temporary value (cleared at block finalization) which is `Some`",
                  " if per-block initialization has already been called for current block."
                ]
              }
            ]
          },
          "calls": [],
          "events": null,
          "constants": [
            {
              "name": "EpochDuration",
              "type": "u64",
              "value": "0xc800000000000000",
              "documentation": [
                " The number of **slots** that an epoch takes. We couple sessions to",
                " epochs, i.e. we start a new session once the new epoch begins."
              ]
            },
            {
              "name": "ExpectedBlockTime",
              "type": "Moment",
              "value": "0xb80b000000000000",
              "documentation": [
                " The expected average block time at which BABE should be creating",
                " blocks. Since BABE is probabilistic it is not trivial to figure out",
                " what the expected average block time should be based on the slot",
                " duration and the security parameter `c` (where `1 - c` represents",
                " the probability of a slot being empty)."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "items": [
              {
                "name": "Now",
                "modifier": "Default",
                "type": {
                  "Plain": "Moment"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "type": {
                  "Plain": "bool"
                },
                "fallback": "0x00",
                "documentation": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set",
              "args": [
                {
                  "name": "now",
                  "type": "Compact<Moment>"
                }
              ],
              "documentation": [
                " Set the current time.",
                "",
                " This call should be invoked exactly once per block. It will panic at the finalization",
                " phase, if this call hasn't been invoked by that time.",
                "",
                " The timestamp should be greater than the previous one by the amount specified by",
                " `MinimumPeriod`.",
                "",
                " The dispatch origin for this call must be `Inherent`."
              ]
            }
          ],
          "events": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "type": "Moment",
              "value": "0xdc05000000000000",
              "documentation": [
                " The minimum period between blocks. Beware that this is different to the *expected* period",
                " that the block production apparatus provides. Your chosen consensus system will generally",
                " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                " period on default settings."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Authorship",
          "storage": {
            "prefix": "Authorship",
            "items": [
              {
                "name": "Uncles",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<UncleEntryItem>"
                },
                "fallback": "0x00",
                "documentation": [
                  " Uncles"
                ]
              },
              {
                "name": "Author",
                "modifier": "Optional",
                "type": {
                  "Plain": "AccountId"
                },
                "fallback": "0x00",
                "documentation": [
                  " Author of current block."
                ]
              },
              {
                "name": "DidSetUncles",
                "modifier": "Default",
                "type": {
                  "Plain": "bool"
                },
                "fallback": "0x00",
                "documentation": [
                  " Whether uncles were already set in this block."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_uncles",
              "args": [
                {
                  "name": "new_uncles",
                  "type": "Vec<Header>"
                }
              ],
              "documentation": [
                " Provide a set of uncles."
              ]
            }
          ],
          "events": null,
          "constants": [],
          "errors": []
        },
        {
          "name": "Indices",
          "storage": {
            "prefix": "Indices",
            "items": [
              {
                "name": "NextEnumSet",
                "modifier": "Default",
                "type": {
                  "Plain": "AccountIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The next free enumeration set."
                ]
              },
              {
                "name": "EnumSet",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountIndex",
                    "value": "Vec<AccountId>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The enumeration sets."
                ]
              }
            ]
          },
          "calls": [],
          "events": [
            {
              "name": "NewAccountIndex",
              "args": [
                "AccountId",
                "AccountIndex"
              ],
              "documentation": [
                " A new account index was assigned.",
                "",
                " This event is not triggered when an existing index is reassigned",
                " to another `AccountId`."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "type": {
                  "Plain": "Balance"
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "Vesting",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "VestingSchedule",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Information regarding the vesting of a given account."
                ]
              },
              {
                "name": "FreeBalance",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "Balance",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " The 'free' balance of a given account.",
                  "",
                  " This is the only balance that matters in terms of most operations on tokens. It",
                  " alone is used to determine the balance when in the contract execution environment. When this",
                  " balance falls below the value of `ExistentialDeposit`, then the 'current account' is",
                  " deleted: specifically `FreeBalance`. Further, the `OnFreeBalanceZero` callback",
                  " is invoked, giving a chance to external modules to clean up data associated with",
                  " the deleted account.",
                  "",
                  " `system::AccountNonce` is also deleted if `ReservedBalance` is also zero (it also gets",
                  " collapsed to zero if it ever becomes less than `ExistentialDeposit`."
                ]
              },
              {
                "name": "ReservedBalance",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "Balance",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " The amount of the balance of a given account that is externally reserved; this can still get",
                  " slashed, but gets slashed last of all.",
                  "",
                  " This balance is a 'reserve' balance that other subsystems use in order to set aside tokens",
                  " that are still 'owned' by the account holder, but which are suspendable.",
                  "",
                  " When this balance falls below the value of `ExistentialDeposit`, then this 'reserve account'",
                  " is deleted: specifically, `ReservedBalance`.",
                  "",
                  " `system::AccountNonce` is also deleted if `FreeBalance` is also zero (it also gets",
                  " collapsed to zero if it ever becomes less than `ExistentialDeposit`.)"
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "Vec<BalanceLock>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Any liquidity locks on some account balances."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "transfer",
              "args": [
                {
                  "name": "dest",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Transfer some liquid free balance to another account.",
                "",
                " `transfer` will set the `FreeBalance` of the sender and receiver.",
                " It will decrease the total issuance of the system by the `TransferFee`.",
                " If the sender's account is below the existential deposit as a result",
                " of the transfer, the account will be reaped.",
                "",
                " The dispatch origin for this call must be `Signed` by the transactor.",
                "",
                " # <weight>",
                " - Dependent on arguments but not critical, given proper implementations for",
                "   input config types. See related functions below.",
                " - It contains a limited number of reads and writes internally and no complex computation.",
                "",
                " Related functions:",
                "",
                "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                "   - Transferring balances to accounts that did not exist before will cause",
                "      `T::OnNewAccount::on_new_account` to be called.",
                "   - Removing enough funds from an account will trigger",
                "     `T::DustRemoval::on_unbalanced` and `T::OnFreeBalanceZero::on_free_balance_zero`.",
                "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                "     check that the transfer will not kill the origin account.",
                "",
                " # </weight>"
              ]
            },
            {
              "name": "set_balance",
              "args": [
                {
                  "name": "who",
                  "type": "LookupSource"
                },
                {
                  "name": "new_free",
                  "type": "Compact<Balance>"
                },
                {
                  "name": "new_reserved",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Set the balances of a given account.",
                "",
                " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                " also decrease the total issuance of the system (`TotalIssuance`).",
                " If the new free or reserved balance is below the existential deposit,",
                " it will reset the account nonce (`system::AccountNonce`).",
                "",
                " The dispatch origin for this call is `root`.",
                "",
                " # <weight>",
                " - Independent of the arguments.",
                " - Contains a limited number of reads and writes.",
                " # </weight>"
              ]
            },
            {
              "name": "force_transfer",
              "args": [
                {
                  "name": "source",
                  "type": "LookupSource"
                },
                {
                  "name": "dest",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Exactly as `transfer`, except the origin must be root and the source account may be",
                " specified."
              ]
            },
            {
              "name": "transfer_keep_alive",
              "args": [
                {
                  "name": "dest",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<Balance>"
                }
              ],
              "documentation": [
                " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                " origin account.",
                "",
                " 99% of the time you want [`transfer`] instead.",
                "",
                " [`transfer`]: struct.Module.html#method.transfer"
              ]
            }
          ],
          "events": [
            {
              "name": "NewAccount",
              "args": [
                "AccountId",
                "Balance"
              ],
              "documentation": [
                " A new account was created."
              ]
            },
            {
              "name": "ReapedAccount",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " An account was reaped."
              ]
            },
            {
              "name": "Transfer",
              "args": [
                "AccountId",
                "AccountId",
                "Balance",
                "Balance"
              ],
              "documentation": [
                " Transfer succeeded (from, to, value, fees)."
              ]
            }
          ],
          "constants": [
            {
              "name": "ExistentialDeposit",
              "type": "Balance",
              "value": "0x00407a10f35a00000000000000000000",
              "documentation": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "TransferFee",
              "type": "Balance",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The fee required to make a transfer."
              ]
            },
            {
              "name": "CreationFee",
              "type": "Balance",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The fee required to create an account."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "Balances",
            "items": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "type": {
                  "Plain": "Multiplier"
                },
                "fallback": "0x0000000000000000",
                "documentation": []
              }
            ]
          },
          "calls": null,
          "events": null,
          "constants": [
            {
              "name": "TransactionBaseFee",
              "type": "BalanceOf",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The fee to be paid for making a transaction; the base."
              ]
            },
            {
              "name": "TransactionByteFee",
              "type": "BalanceOf",
              "value": "0x00e40b54020000000000000000000000",
              "documentation": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Staking",
          "storage": {
            "prefix": "Staking",
            "items": [
              {
                "name": "ValidatorCount",
                "modifier": "Default",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The ideal number of staking participants."
                ]
              },
              {
                "name": "MinimumValidatorCount",
                "modifier": "Default",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x04000000",
                "documentation": [
                  " Minimum number of staking participants before emergency conditions are imposed."
                ]
              },
              {
                "name": "Invulnerables",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                  " easy to initialize and the performance hit is minimal (we expect no more than four",
                  " invulnerables) and restricted to testnets."
                ]
              },
              {
                "name": "Bonded",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "AccountId",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Map from all locked \"stash\" accounts to the controller account."
                ]
              },
              {
                "name": "Ledger",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "StakingLedger",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                ]
              },
              {
                "name": "Payee",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "RewardDestination",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Where the reward payment should be made. Keyed by stash."
                ]
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "ValidatorPrefs",
                    "linked": true
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The map from (wannabe) validator stash key to the preferences of that validator."
                ]
              },
              {
                "name": "Nominators",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "Nominations",
                    "linked": true
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                  "",
                  " NOTE: is private so that we can ensure upgraded before all typical accesses.",
                  " Direct storage APIs can still bypass this protection."
                ]
              },
              {
                "name": "Stakers",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "Exposure",
                    "linked": false
                  }
                },
                "fallback": "0x000000",
                "documentation": [
                  " Nominators for a particular account that is in action right now. You can't iterate",
                  " through validators here, but you can find them in the Session module.",
                  "",
                  " This is keyed by the stash account."
                ]
              },
              {
                "name": "CurrentElected",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The currently elected validator set keyed by stash account ID."
                ]
              },
              {
                "name": "CurrentEra",
                "modifier": "Default",
                "type": {
                  "Plain": "EraIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The current era index."
                ]
              },
              {
                "name": "CurrentEraStart",
                "modifier": "Default",
                "type": {
                  "Plain": "MomentOf"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " The start of the current era."
                ]
              },
              {
                "name": "CurrentEraStartSessionIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "SessionIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The session index at which the current era started."
                ]
              },
              {
                "name": "CurrentEraPointsEarned",
                "modifier": "Default",
                "type": {
                  "Plain": "EraPoints"
                },
                "fallback": "0x0000000000",
                "documentation": [
                  " Rewards for the current era. Using indices of current elected set."
                ]
              },
              {
                "name": "SlotStake",
                "modifier": "Default",
                "type": {
                  "Plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " The amount of balance actively at stake for each validator slot, currently.",
                  "",
                  " This is used to derive rewards and punishments."
                ]
              },
              {
                "name": "ForceEra",
                "modifier": "Default",
                "type": {
                  "Plain": "Forcing"
                },
                "fallback": "0x00",
                "documentation": [
                  " True if the next session change will be a new era regardless of index."
                ]
              },
              {
                "name": "SlashRewardFraction",
                "modifier": "Default",
                "type": {
                  "Plain": "Perbill"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The percentage of the slash that is distributed to reporters.",
                  "",
                  " The rest of the slashed value is handled by the `Slash`."
                ]
              },
              {
                "name": "CanceledSlashPayout",
                "modifier": "Default",
                "type": {
                  "Plain": "BalanceOf"
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " The amount of currency given to reporters of a slash event which was",
                  " canceled by extraordinary circumstances (e.g. governance)."
                ]
              },
              {
                "name": "UnappliedSlashes",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "EraIndex",
                    "value": "Vec<UnappliedSlash>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " All unapplied slashes that are queued for later."
                ]
              },
              {
                "name": "BondedEras",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<(EraIndex,SessionIndex)>"
                },
                "fallback": "0x00",
                "documentation": [
                  " A mapping from still-bonded eras to the first session index of that era."
                ]
              },
              {
                "name": "ValidatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Blake2_256",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "(Perbill,BalanceOf)",
                    "key2Hasher": "Twox128"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " All slashing events on validators, mapped by era to the highest slash proportion",
                  " and slash value of the era."
                ]
              },
              {
                "name": "NominatorSlashInEra",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Blake2_256",
                    "key1": "EraIndex",
                    "key2": "AccountId",
                    "value": "BalanceOf",
                    "key2Hasher": "Twox128"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " All slashing events on nominators, mapped by era to the highest slash value of the era."
                ]
              },
              {
                "name": "SlashingSpans",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "SlashingSpans",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Slashing spans for stash accounts."
                ]
              },
              {
                "name": "SpanSlash",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "(AccountId,SpanIndex)",
                    "value": "SpanRecord",
                    "linked": false
                  }
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " Records information about the maximum slash of a stash within a slashing span,",
                  " as well as how much reward has been paid out."
                ]
              },
              {
                "name": "EarliestUnappliedSlash",
                "modifier": "Optional",
                "type": {
                  "Plain": "EraIndex"
                },
                "fallback": "0x00",
                "documentation": [
                  " The earliest era for which we have a pending, unapplied slash."
                ]
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The version of storage for upgrade."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "bond",
              "args": [
                {
                  "name": "controller",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                },
                {
                  "name": "payee",
                  "type": "RewardDestination"
                }
              ],
              "documentation": [
                " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                " be the account that controls it.",
                "",
                " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash account.",
                "",
                " # <weight>",
                " - Independent of the arguments. Moderate complexity.",
                " - O(1).",
                " - Three extra DB entries.",
                "",
                " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned unless",
                " the `origin` falls below _existential deposit_ and gets removed as dust.",
                " # </weight>"
              ]
            },
            {
              "name": "bond_extra",
              "args": [
                {
                  "name": "max_additional",
                  "type": "Compact<BalanceOf>"
                }
              ],
              "documentation": [
                " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                " for staking.",
                "",
                " Use this if there are additional funds in your stash account that you wish to bond.",
                " Unlike [`bond`] or [`unbond`] this function does not impose any limitation on the amount",
                " that can be added.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - O(1).",
                " - One DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "unbond",
              "args": [
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                }
              ],
              "documentation": [
                " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                " period ends. If this leaves an amount actively bonded less than",
                " T::Currency::minimum_balance(), then it is increased to the full amount.",
                "",
                " Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                " the funds out of management ready for transfer.",
                "",
                " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                " can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                " to be called first to remove some of the chunks (if possible).",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " See also [`Call::withdraw_unbonded`].",
                "",
                " # <weight>",
                " - Independent of the arguments. Limited but potentially exploitable complexity.",
                " - Contains a limited number of reads.",
                " - Each call (requires the remainder of the bonded balance to be above `minimum_balance`)",
                "   will cause a new entry to be inserted into a vector (`Ledger.unlocking`) kept in storage.",
                "   The only way to clean the aforementioned storage item is also user-controlled via `withdraw_unbonded`.",
                " - One DB entry.",
                " </weight>"
              ]
            },
            {
              "name": "withdraw_unbonded",
              "args": [],
              "documentation": [
                " Remove any unlocked chunks from the `unlocking` queue from our management.",
                "",
                " This essentially frees up that balance to be used by the stash account to do",
                " whatever it wants.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " See also [`Call::unbond`].",
                "",
                " # <weight>",
                " - Could be dependent on the `origin` argument and how much `unlocking` chunks exist.",
                "  It implies `consolidate_unlocked` which loops over `Ledger.unlocking`, which is",
                "  indirectly user-controlled. See [`unbond`] for more detail.",
                " - Contains a limited number of reads, yet the size of which could be large based on `ledger`.",
                " - Writes are limited to the `origin` account key.",
                " # </weight>"
              ]
            },
            {
              "name": "validate",
              "args": [
                {
                  "name": "prefs",
                  "type": "ValidatorPrefs"
                }
              ],
              "documentation": [
                " Declare the desire to validate for the origin controller.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " # </weight>"
              ]
            },
            {
              "name": "nominate",
              "args": [
                {
                  "name": "targets",
                  "type": "Vec<LookupSource>"
                }
              ],
              "documentation": [
                " Declare the desire to nominate `targets` for the origin controller.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " # <weight>",
                " - The transaction's complexity is proportional to the size of `targets`,",
                " which is capped at `MAX_NOMINATIONS`.",
                " - Both the reads and writes follow a similar pattern.",
                " # </weight>"
              ]
            },
            {
              "name": "chill",
              "args": [],
              "documentation": [
                " Declare no desire to either validate or nominate.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains one read.",
                " - Writes are limited to the `origin` account key.",
                " # </weight>"
              ]
            },
            {
              "name": "set_payee",
              "args": [
                {
                  "name": "payee",
                  "type": "RewardDestination"
                }
              ],
              "documentation": [
                " (Re-)set the payment target for a controller.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " # </weight>"
              ]
            },
            {
              "name": "set_controller",
              "args": [
                {
                  "name": "controller",
                  "type": "LookupSource"
                }
              ],
              "documentation": [
                " (Re-)set the controller of a stash.",
                "",
                " Effects will be felt at the beginning of the next era.",
                "",
                " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                "",
                " # <weight>",
                " - Independent of the arguments. Insignificant complexity.",
                " - Contains a limited number of reads.",
                " - Writes are limited to the `origin` account key.",
                " # </weight>"
              ]
            },
            {
              "name": "set_validator_count",
              "args": [
                {
                  "name": "new",
                  "type": "Compact<u32>"
                }
              ],
              "documentation": [
                " The ideal number of validators."
              ]
            },
            {
              "name": "force_no_eras",
              "args": [],
              "documentation": [
                " Force there to be no new eras indefinitely.",
                "",
                " # <weight>",
                " - No arguments.",
                " # </weight>"
              ]
            },
            {
              "name": "force_new_era",
              "args": [],
              "documentation": [
                " Force there to be a new era at the end of the next session. After this, it will be",
                " reset to normal (non-forced) behaviour.",
                "",
                " # <weight>",
                " - No arguments.",
                " # </weight>"
              ]
            },
            {
              "name": "set_invulnerables",
              "args": [
                {
                  "name": "validators",
                  "type": "Vec<AccountId>"
                }
              ],
              "documentation": [
                " Set the validators who cannot be slashed (if any)."
              ]
            },
            {
              "name": "force_unstake",
              "args": [
                {
                  "name": "stash",
                  "type": "AccountId"
                }
              ],
              "documentation": [
                " Force a current staker to become completely unstaked, immediately."
              ]
            },
            {
              "name": "force_new_era_always",
              "args": [],
              "documentation": [
                " Force there to be a new era at the end of sessions indefinitely.",
                "",
                " # <weight>",
                " - One storage write",
                " # </weight>"
              ]
            },
            {
              "name": "cancel_deferred_slash",
              "args": [
                {
                  "name": "era",
                  "type": "EraIndex"
                },
                {
                  "name": "slash_indices",
                  "type": "Vec<u32>"
                }
              ],
              "documentation": [
                " Cancel enactment of a deferred slash. Can be called by either the root origin or",
                " the `T::SlashCancelOrigin`.",
                " passing the era and indices of the slashes for that era to kill.",
                "",
                " # <weight>",
                " - One storage write.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Reward",
              "args": [
                "Balance",
                "Balance"
              ],
              "documentation": [
                " All validators have been rewarded by the first balance; the second is the remainder",
                " from the maximum amount of reward."
              ]
            },
            {
              "name": "Slash",
              "args": [
                "AccountId",
                "Balance"
              ],
              "documentation": [
                " One validator (and its nominators) has been slashed by the given amount."
              ]
            },
            {
              "name": "OldSlashingReportDiscarded",
              "args": [
                "SessionIndex"
              ],
              "documentation": [
                " An old slashing report from a prior era was discarded because it could",
                " not be processed."
              ]
            }
          ],
          "constants": [
            {
              "name": "SessionsPerEra",
              "type": "SessionIndex",
              "value": "0x06000000",
              "documentation": [
                " Number of sessions per era."
              ]
            },
            {
              "name": "BondingDuration",
              "type": "EraIndex",
              "value": "0xa0020000",
              "documentation": [
                " Number of eras that staked funds must remain bonded for."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Session",
          "storage": {
            "prefix": "Session",
            "items": [
              {
                "name": "Validators",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<ValidatorId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The current set of validators."
                ]
              },
              {
                "name": "CurrentIndex",
                "modifier": "Default",
                "type": {
                  "Plain": "SessionIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " Current index of the session."
                ]
              },
              {
                "name": "QueuedChanged",
                "modifier": "Default",
                "type": {
                  "Plain": "bool"
                },
                "fallback": "0x00",
                "documentation": [
                  " True if the underlying economic identities or weighting behind the validators",
                  " has changed in the queued validator set."
                ]
              },
              {
                "name": "QueuedKeys",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<(ValidatorId,Keys)>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The queued keys for the next session. When the next session begins, these keys",
                  " will be used to determine the validator's session keys."
                ]
              },
              {
                "name": "DisabledValidators",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<u32>"
                },
                "fallback": "0x00",
                "documentation": [
                  " Indices of disabled validators.",
                  "",
                  " The set is cleared when `on_session_ending` returns a new set of identities."
                ]
              },
              {
                "name": "NextKeys",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "Bytes",
                    "key2": "ValidatorId",
                    "value": "Keys",
                    "key2Hasher": "Blake2_256"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The next session keys for a validator.",
                  "",
                  " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                  " the trie. Having all data in the same branch should prevent slowing down other queries."
                ]
              },
              {
                "name": "KeyOwner",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Twox64Concat",
                    "key1": "Bytes",
                    "key2": "(KeyTypeId,Bytes)",
                    "value": "ValidatorId",
                    "key2Hasher": "Blake2_256"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The owner of a key. The second key is the `KeyTypeId` + the encoded key.",
                  "",
                  " The first key is always `DEDUP_KEY_PREFIX` to have all the data in the same branch of",
                  " the trie. Having all data in the same branch should prevent slowing down other queries."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_keys",
              "args": [
                {
                  "name": "keys",
                  "type": "Keys"
                },
                {
                  "name": "proof",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Sets the session key(s) of the function caller to `key`.",
                " Allows an account to set its session key prior to becoming a validator.",
                " This doesn't take effect until the next session.",
                "",
                " The dispatch origin of this function must be signed.",
                "",
                " # <weight>",
                " - O(log n) in number of accounts.",
                " - One extra DB entry.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "NewSession",
              "args": [
                "SessionIndex"
              ],
              "documentation": [
                " New session has happened. Note that the argument is the session index, not the block",
                " number as the type might suggest."
              ]
            }
          ],
          "constants": [
            {
              "name": "DEDUP_KEY_PREFIX",
              "type": "Bytes",
              "value": "0x343a73657373696f6e3a6b657973",
              "documentation": [
                " Used as first key for `NextKeys` and `KeyOwner` to put all the data into the same branch",
                " of the trie."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Democracy",
          "storage": {
            "prefix": "Democracy",
            "items": [
              {
                "name": "PublicPropCount",
                "modifier": "Default",
                "type": {
                  "Plain": "PropIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The number of (public) proposals that have been made so far."
                ]
              },
              {
                "name": "PublicProps",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<(PropIndex,Hash,AccountId)>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The public proposals. Unsorted. The second item is the proposal's hash."
                ]
              },
              {
                "name": "Preimages",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Hash",
                    "value": "(Bytes,AccountId,BalanceOf,BlockNumber)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Map of hashes to the proposal preimage, along with who registered it and their deposit.",
                  " The block number is the block at which it was deposited."
                ]
              },
              {
                "name": "DepositOf",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "PropIndex",
                    "value": "(BalanceOf,Vec<AccountId>)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Those who have locked a deposit."
                ]
              },
              {
                "name": "ReferendumCount",
                "modifier": "Default",
                "type": {
                  "Plain": "ReferendumIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The next free referendum index, aka the number of referenda started so far."
                ]
              },
              {
                "name": "NextTally",
                "modifier": "Default",
                "type": {
                  "Plain": "ReferendumIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The next referendum index that should be tallied."
                ]
              },
              {
                "name": "ReferendumInfoOf",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "ReferendumIndex",
                    "value": "ReferendumInfo",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Information concerning any given referendum."
                ]
              },
              {
                "name": "DispatchQueue",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Twox64Concat",
                    "key": "BlockNumber",
                    "value": "Vec<Option<(Hash,ReferendumIndex)>>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Queue of successful referenda to be dispatched."
                ]
              },
              {
                "name": "VotersFor",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "ReferendumIndex",
                    "value": "Vec<AccountId>",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Get the voters for the current proposal."
                ]
              },
              {
                "name": "VoteOf",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "(ReferendumIndex,AccountId)",
                    "value": "Vote",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Get the vote in a given referendum of a particular voter. The result is meaningful only",
                  " if `voters_for` includes the voter when called with the referendum (you'll get the",
                  " default `Vote` value otherwise). If you don't want to check `voters_for`, then you can",
                  " also check for simple existence with `VoteOf::exists` first."
                ]
              },
              {
                "name": "Proxy",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "AccountId",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Who is able to vote for whom. Value is the fund-holding account, key is the",
                  " vote-transaction-sending account."
                ]
              },
              {
                "name": "Delegations",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "(AccountId,Conviction)",
                    "linked": true
                  }
                },
                "fallback": "0x000000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " Get the account (and lock periods) to which another account is delegating vote."
                ]
              },
              {
                "name": "LastTabledWasExternal",
                "modifier": "Default",
                "type": {
                  "Plain": "bool"
                },
                "fallback": "0x00",
                "documentation": [
                  " True if the last referendum tabled was submitted externally. False if it was a public",
                  " proposal."
                ]
              },
              {
                "name": "NextExternal",
                "modifier": "Optional",
                "type": {
                  "Plain": "(Hash,VoteThreshold)"
                },
                "fallback": "0x00",
                "documentation": [
                  " The referendum to be tabled whenever it would be valid to table an external proposal.",
                  " This happens when a referendum needs to be tabled and one of two conditions are met:",
                  " - `LastTabledWasExternal` is `false`; or",
                  " - `PublicProps` is empty."
                ]
              },
              {
                "name": "Blacklist",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Hash",
                    "value": "(BlockNumber,Vec<AccountId>)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " A record of who vetoed what. Maps proposal hash to a possible existent block number",
                  " (until when it may not be resubmitted) and who vetoed it."
                ]
              },
              {
                "name": "Cancellations",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Hash",
                    "value": "bool",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Record of all proposals that have been subject to emergency cancellation."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "propose",
              "args": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                },
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                }
              ],
              "documentation": [
                " Propose a sensitive action to be taken.",
                "",
                " # <weight>",
                " - O(1).",
                " - Two DB changes, one DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "second",
              "args": [
                {
                  "name": "proposal",
                  "type": "Compact<PropIndex>"
                }
              ],
              "documentation": [
                " Propose a sensitive action to be taken.",
                "",
                " # <weight>",
                " - O(1).",
                " - One DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "vote",
              "args": [
                {
                  "name": "ref_index",
                  "type": "Compact<ReferendumIndex>"
                },
                {
                  "name": "vote",
                  "type": "Vote"
                }
              ],
              "documentation": [
                " Vote in a referendum. If `vote.is_aye()`, the vote is to enact the proposal;",
                " otherwise it is a vote to keep the status quo.",
                "",
                " # <weight>",
                " - O(1).",
                " - One DB change, one DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "proxy_vote",
              "args": [
                {
                  "name": "ref_index",
                  "type": "Compact<ReferendumIndex>"
                },
                {
                  "name": "vote",
                  "type": "Vote"
                }
              ],
              "documentation": [
                " Vote in a referendum on behalf of a stash. If `vote.is_aye()`, the vote is to enact",
                " the proposal;  otherwise it is a vote to keep the status quo.",
                "",
                " # <weight>",
                " - O(1).",
                " - One DB change, one DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "emergency_cancel",
              "args": [
                {
                  "name": "ref_index",
                  "type": "ReferendumIndex"
                }
              ],
              "documentation": [
                " Schedule an emergency cancellation of a referendum. Cannot happen twice to the same",
                " referendum."
              ]
            },
            {
              "name": "external_propose",
              "args": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                }
              ],
              "documentation": [
                " Schedule a referendum to be tabled once it is legal to schedule an external",
                " referendum."
              ]
            },
            {
              "name": "external_propose_majority",
              "args": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                }
              ],
              "documentation": [
                " Schedule a majority-carries referendum to be tabled next once it is legal to schedule",
                " an external referendum.",
                "",
                " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                " pre-scheduled `external_propose` call."
              ]
            },
            {
              "name": "external_propose_default",
              "args": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                }
              ],
              "documentation": [
                " Schedule a negative-turnout-bias referendum to be tabled next once it is legal to",
                " schedule an external referendum.",
                "",
                " Unlike `external_propose`, blacklisting has no effect on this and it may replace a",
                " pre-scheduled `external_propose` call."
              ]
            },
            {
              "name": "fast_track",
              "args": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                },
                {
                  "name": "voting_period",
                  "type": "BlockNumber"
                },
                {
                  "name": "delay",
                  "type": "BlockNumber"
                }
              ],
              "documentation": [
                " Schedule the currently externally-proposed majority-carries referendum to be tabled",
                " immediately. If there is no externally-proposed referendum currently, or if there is one",
                " but it is not a majority-carries referendum then it fails.",
                "",
                " - `proposal_hash`: The hash of the current external proposal.",
                " - `voting_period`: The period that is allowed for voting on this proposal. Increased to",
                "   `EmergencyVotingPeriod` if too low.",
                " - `delay`: The number of block after voting has ended in approval and this should be",
                "   enacted. This doesn't have a minimum amount."
              ]
            },
            {
              "name": "veto_external",
              "args": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                }
              ],
              "documentation": [
                " Veto and blacklist the external proposal hash."
              ]
            },
            {
              "name": "cancel_referendum",
              "args": [
                {
                  "name": "ref_index",
                  "type": "Compact<ReferendumIndex>"
                }
              ],
              "documentation": [
                " Remove a referendum."
              ]
            },
            {
              "name": "cancel_queued",
              "args": [
                {
                  "name": "when",
                  "type": "Compact<BlockNumber>"
                },
                {
                  "name": "which",
                  "type": "Compact<u32>"
                },
                {
                  "name": "what",
                  "type": "Compact<ReferendumIndex>"
                }
              ],
              "documentation": [
                " Cancel a proposal queued for enactment."
              ]
            },
            {
              "name": "set_proxy",
              "args": [
                {
                  "name": "proxy",
                  "type": "AccountId"
                }
              ],
              "documentation": [
                " Specify a proxy. Called by the stash.",
                "",
                " # <weight>",
                " - One extra DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "resign_proxy",
              "args": [],
              "documentation": [
                " Clear the proxy. Called by the proxy.",
                "",
                " # <weight>",
                " - One DB clear.",
                " # </weight>"
              ]
            },
            {
              "name": "remove_proxy",
              "args": [
                {
                  "name": "proxy",
                  "type": "AccountId"
                }
              ],
              "documentation": [
                " Clear the proxy. Called by the stash.",
                "",
                " # <weight>",
                " - One DB clear.",
                " # </weight>"
              ]
            },
            {
              "name": "delegate",
              "args": [
                {
                  "name": "to",
                  "type": "AccountId"
                },
                {
                  "name": "conviction",
                  "type": "Conviction"
                }
              ],
              "documentation": [
                " Delegate vote.",
                "",
                " # <weight>",
                " - One extra DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "undelegate",
              "args": [],
              "documentation": [
                " Undelegate vote.",
                "",
                " # <weight>",
                " - O(1).",
                " # </weight>"
              ]
            },
            {
              "name": "clear_public_proposals",
              "args": [],
              "documentation": [
                " Veto and blacklist the proposal hash. Must be from Root origin."
              ]
            },
            {
              "name": "note_preimage",
              "args": [
                {
                  "name": "encoded_proposal",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Register the preimage for an upcoming proposal. This doesn't require the proposal to be",
                " in the dispatch queue but does require a deposit, returned once enacted."
              ]
            },
            {
              "name": "note_imminent_preimage",
              "args": [
                {
                  "name": "encoded_proposal",
                  "type": "Bytes"
                },
                {
                  "name": "when",
                  "type": "BlockNumber"
                },
                {
                  "name": "which",
                  "type": "u32"
                }
              ],
              "documentation": [
                " Register the preimage for an upcoming proposal. This requires the proposal to be",
                " in the dispatch queue. No deposit is needed."
              ]
            },
            {
              "name": "reap_preimage",
              "args": [
                {
                  "name": "proposal_hash",
                  "type": "Hash"
                }
              ],
              "documentation": [
                " Remove an expired proposal preimage and collect the deposit."
              ]
            }
          ],
          "events": [
            {
              "name": "Proposed",
              "args": [
                "PropIndex",
                "Balance"
              ],
              "documentation": [
                " A motion has been proposed by a public account."
              ]
            },
            {
              "name": "Tabled",
              "args": [
                "PropIndex",
                "Balance",
                "Vec<AccountId>"
              ],
              "documentation": [
                " A public proposal has been tabled for referendum vote."
              ]
            },
            {
              "name": "ExternalTabled",
              "args": [],
              "documentation": [
                " An external proposal has been tabled."
              ]
            },
            {
              "name": "Started",
              "args": [
                "ReferendumIndex",
                "VoteThreshold"
              ],
              "documentation": [
                " A referendum has begun."
              ]
            },
            {
              "name": "Passed",
              "args": [
                "ReferendumIndex"
              ],
              "documentation": [
                " A proposal has been approved by referendum."
              ]
            },
            {
              "name": "NotPassed",
              "args": [
                "ReferendumIndex"
              ],
              "documentation": [
                " A proposal has been rejected by referendum."
              ]
            },
            {
              "name": "Cancelled",
              "args": [
                "ReferendumIndex"
              ],
              "documentation": [
                " A referendum has been cancelled."
              ]
            },
            {
              "name": "Executed",
              "args": [
                "ReferendumIndex",
                "bool"
              ],
              "documentation": [
                " A proposal has been enacted."
              ]
            },
            {
              "name": "Delegated",
              "args": [
                "AccountId",
                "AccountId"
              ],
              "documentation": [
                " An account has delegated their vote to another account."
              ]
            },
            {
              "name": "Undelegated",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " An account has cancelled a previous delegation operation."
              ]
            },
            {
              "name": "Vetoed",
              "args": [
                "AccountId",
                "Hash",
                "BlockNumber"
              ],
              "documentation": [
                " An external proposal has been vetoed."
              ]
            },
            {
              "name": "PreimageNoted",
              "args": [
                "Hash",
                "AccountId",
                "Balance"
              ],
              "documentation": [
                " A proposal's preimage was noted, and the deposit taken."
              ]
            },
            {
              "name": "PreimageUsed",
              "args": [
                "Hash",
                "AccountId",
                "Balance"
              ],
              "documentation": [
                " A proposal preimage was removed and used (the deposit was returned)."
              ]
            },
            {
              "name": "PreimageInvalid",
              "args": [
                "Hash",
                "ReferendumIndex"
              ],
              "documentation": [
                " A proposal could not be executed because its preimage was invalid."
              ]
            },
            {
              "name": "PreimageMissing",
              "args": [
                "Hash",
                "ReferendumIndex"
              ],
              "documentation": [
                " A proposal could not be executed because its preimage was missing."
              ]
            },
            {
              "name": "PreimageReaped",
              "args": [
                "Hash",
                "AccountId",
                "Balance",
                "AccountId"
              ],
              "documentation": [
                " A registered preimage was removed and the deposit collected by the reaper (last item)."
              ]
            }
          ],
          "constants": [
            {
              "name": "EnactmentPeriod",
              "type": "BlockNumber",
              "value": "0x002f0d00",
              "documentation": [
                " The minimum period of locking and the period between a proposal being approved and enacted.",
                "",
                " It should generally be a little more than the unstake period to ensure that",
                " voting stakers have an opportunity to remove themselves from the system in the case where",
                " they are on the losing side of a vote."
              ]
            },
            {
              "name": "LaunchPeriod",
              "type": "BlockNumber",
              "value": "0x004e0c00",
              "documentation": [
                " How often (in blocks) new public referenda are launched."
              ]
            },
            {
              "name": "VotingPeriod",
              "type": "BlockNumber",
              "value": "0x004e0c00",
              "documentation": [
                " How often (in blocks) to check for new votes."
              ]
            },
            {
              "name": "MinimumDeposit",
              "type": "BalanceOf",
              "value": "0x0000c16ff28623000000000000000000",
              "documentation": [
                " The minimum amount to be used as a deposit for a public referendum proposal."
              ]
            },
            {
              "name": "EmergencyVotingPeriod",
              "type": "BlockNumber",
              "value": "0x80510100",
              "documentation": [
                " Minimum voting period allowed for an emergency referendum."
              ]
            },
            {
              "name": "CooloffPeriod",
              "type": "BlockNumber",
              "value": "0x004e0c00",
              "documentation": [
                " Period in blocks where an external proposal may not be re-submitted after being vetoed."
              ]
            },
            {
              "name": "PreimageByteDeposit",
              "type": "BalanceOf",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The amount of balance that must be deposited per byte of preimage stored."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Council",
          "storage": {
            "prefix": "Instance1Collective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<Hash>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Hash",
                    "value": "Proposal",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Hash",
                    "value": "Votes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_members",
              "args": [
                {
                  "name": "new_members",
                  "type": "Vec<AccountId>"
                }
              ],
              "documentation": [
                " Set the collective's membership manually to `new_members`. Be nice to the chain and",
                " provide it pre-sorted.",
                "",
                " Requires root origin."
              ]
            },
            {
              "name": "execute",
              "args": [
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": [
                " Dispatch a proposal from a member using the `Member` origin.",
                "",
                " Origin must be a member of the collective."
              ]
            },
            {
              "name": "propose",
              "args": [
                {
                  "name": "threshold",
                  "type": "Compact<MemberCount>"
                },
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": [
                " # <weight>",
                " - Bounded storage reads and writes.",
                " - Argument `threshold` has bearing on weight.",
                " # </weight>"
              ]
            },
            {
              "name": "vote",
              "args": [
                {
                  "name": "proposal",
                  "type": "Hash"
                },
                {
                  "name": "index",
                  "type": "Compact<ProposalIndex>"
                },
                {
                  "name": "approve",
                  "type": "bool"
                }
              ],
              "documentation": [
                " # <weight>",
                " - Bounded storage read and writes.",
                " - Will be slightly heavier if the proposal is approved / disapproved after the vote.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Proposed",
              "args": [
                "AccountId",
                "ProposalIndex",
                "Hash",
                "MemberCount"
              ],
              "documentation": [
                " A motion (given hash) has been proposed (by given account) with a threshold (given",
                " `MemberCount`)."
              ]
            },
            {
              "name": "Voted",
              "args": [
                "AccountId",
                "Hash",
                "bool",
                "MemberCount",
                "MemberCount"
              ],
              "documentation": [
                " A motion (given hash) has been voted on by given account, leaving",
                " a tally (yes votes and no votes given respectively as `MemberCount`)."
              ]
            },
            {
              "name": "Approved",
              "args": [
                "Hash"
              ],
              "documentation": [
                " A motion was approved by the required threshold."
              ]
            },
            {
              "name": "Disapproved",
              "args": [
                "Hash"
              ],
              "documentation": [
                " A motion was not approved by the required threshold."
              ]
            },
            {
              "name": "Executed",
              "args": [
                "Hash",
                "bool"
              ],
              "documentation": [
                " A motion was executed; `bool` is true if returned without error."
              ]
            },
            {
              "name": "MemberExecuted",
              "args": [
                "Hash",
                "bool"
              ],
              "documentation": [
                " A single member did some action; `bool` is true if returned without error."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "TechnicalCommittee",
          "storage": {
            "prefix": "Instance2Collective",
            "items": [
              {
                "name": "Proposals",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<Hash>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The hashes of the active proposals."
                ]
              },
              {
                "name": "ProposalOf",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Hash",
                    "value": "Proposal",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Actual proposal for a given hash, if it's current."
                ]
              },
              {
                "name": "Voting",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Hash",
                    "value": "Votes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Votes on a given proposal, if it is ongoing."
                ]
              },
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " Proposals so far."
                ]
              },
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The current members of the collective. This is stored sorted (just by value)."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_members",
              "args": [
                {
                  "name": "new_members",
                  "type": "Vec<AccountId>"
                }
              ],
              "documentation": [
                " Set the collective's membership manually to `new_members`. Be nice to the chain and",
                " provide it pre-sorted.",
                "",
                " Requires root origin."
              ]
            },
            {
              "name": "execute",
              "args": [
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": [
                " Dispatch a proposal from a member using the `Member` origin.",
                "",
                " Origin must be a member of the collective."
              ]
            },
            {
              "name": "propose",
              "args": [
                {
                  "name": "threshold",
                  "type": "Compact<MemberCount>"
                },
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": [
                " # <weight>",
                " - Bounded storage reads and writes.",
                " - Argument `threshold` has bearing on weight.",
                " # </weight>"
              ]
            },
            {
              "name": "vote",
              "args": [
                {
                  "name": "proposal",
                  "type": "Hash"
                },
                {
                  "name": "index",
                  "type": "Compact<ProposalIndex>"
                },
                {
                  "name": "approve",
                  "type": "bool"
                }
              ],
              "documentation": [
                " # <weight>",
                " - Bounded storage read and writes.",
                " - Will be slightly heavier if the proposal is approved / disapproved after the vote.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Proposed",
              "args": [
                "AccountId",
                "ProposalIndex",
                "Hash",
                "MemberCount"
              ],
              "documentation": [
                " A motion (given hash) has been proposed (by given account) with a threshold (given",
                " `MemberCount`)."
              ]
            },
            {
              "name": "Voted",
              "args": [
                "AccountId",
                "Hash",
                "bool",
                "MemberCount",
                "MemberCount"
              ],
              "documentation": [
                " A motion (given hash) has been voted on by given account, leaving",
                " a tally (yes votes and no votes given respectively as `MemberCount`)."
              ]
            },
            {
              "name": "Approved",
              "args": [
                "Hash"
              ],
              "documentation": [
                " A motion was approved by the required threshold."
              ]
            },
            {
              "name": "Disapproved",
              "args": [
                "Hash"
              ],
              "documentation": [
                " A motion was not approved by the required threshold."
              ]
            },
            {
              "name": "Executed",
              "args": [
                "Hash",
                "bool"
              ],
              "documentation": [
                " A motion was executed; `bool` is true if returned without error."
              ]
            },
            {
              "name": "MemberExecuted",
              "args": [
                "Hash",
                "bool"
              ],
              "documentation": [
                " A single member did some action; `bool` is true if returned without error."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "Elections",
          "storage": {
            "prefix": "PhragmenElection",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<(AccountId,BalanceOf)>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The current elected membership. Sorted based on account id."
                ]
              },
              {
                "name": "RunnersUp",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<(AccountId,BalanceOf)>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The current runners_up. Sorted based on low to high merit (worse to best runner)."
                ]
              },
              {
                "name": "ElectionRounds",
                "modifier": "Default",
                "type": {
                  "Plain": "u32"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The total number of vote rounds that have happened, excluding the upcoming one."
                ]
              },
              {
                "name": "VotesOf",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "Vec<AccountId>",
                    "linked": true
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Votes of a particular voter, with the round index of the votes."
                ]
              },
              {
                "name": "StakeOf",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "BalanceOf",
                    "linked": false
                  }
                },
                "fallback": "0x00000000000000000000000000000000",
                "documentation": [
                  " Locked stake of a voter."
                ]
              },
              {
                "name": "Candidates",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The present candidate list. Sorted based on account id. A current member can never enter",
                  " this vector and is always implicitly assumed to be a candidate."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "vote",
              "args": [
                {
                  "name": "votes",
                  "type": "Vec<AccountId>"
                },
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                }
              ],
              "documentation": [
                " Vote for a set of candidates for the upcoming round of election.",
                "",
                " The `votes` should:",
                "   - not be empty.",
                "   - be less than the number of candidates.",
                "",
                " Upon voting, `value` units of `who`'s balance is locked and a bond amount is reserved.",
                " It is the responsibility of the caller to not place all of their balance into the lock",
                " and keep some for further transactions.",
                "",
                " # <weight>",
                " #### State",
                " Reads: O(1)",
                " Writes: O(V) given `V` votes. V is bounded by 16.",
                " # </weight>"
              ]
            },
            {
              "name": "remove_voter",
              "args": [],
              "documentation": [
                " Remove `origin` as a voter. This removes the lock and returns the bond.",
                "",
                " # <weight>",
                " #### State",
                " Reads: O(1)",
                " Writes: O(1)",
                " # </weight>"
              ]
            },
            {
              "name": "report_defunct_voter",
              "args": [
                {
                  "name": "target",
                  "type": "LookupSource"
                }
              ],
              "documentation": [
                " Report `target` for being an defunct voter. In case of a valid report, the reporter is",
                " rewarded by the bond amount of `target`. Otherwise, the reporter itself is removed and",
                " their bond is slashed.",
                "",
                " A defunct voter is defined to be:",
                "   - a voter whose current submitted votes are all invalid. i.e. all of them are no",
                "     longer a candidate nor an active member.",
                "",
                " # <weight>",
                " #### State",
                " Reads: O(NLogM) given M current candidates and N votes for `target`.",
                " Writes: O(1)",
                " # </weight>"
              ]
            },
            {
              "name": "submit_candidacy",
              "args": [],
              "documentation": [
                " Submit oneself for candidacy.",
                "",
                " A candidate will either:",
                "   - Lose at the end of the term and forfeit their deposit.",
                "   - Win and become a member. Members will eventually get their stash back.",
                "   - Become a runner-up. Runners-ups are reserved members in case one gets forcefully",
                "     removed.",
                "",
                " # <weight>",
                " #### State",
                " Reads: O(LogN) Given N candidates.",
                " Writes: O(1)",
                " # </weight>"
              ]
            },
            {
              "name": "renounce_candidacy",
              "args": [],
              "documentation": [
                " Renounce one's intention to be a candidate for the next election round. 3 potential",
                " outcomes exist:",
                " - `origin` is a candidate and not elected in any set. In this case, the bond is",
                "   unreserved, returned and origin is removed as a candidate.",
                " - `origin` is a current runner up. In this case, the bond is unreserved, returned and",
                "   origin is removed as a runner.",
                " - `origin` is a current member. In this case, the bond is unreserved and origin is",
                "   removed as a member, consequently not being a candidate for the next round anymore.",
                "   Similar to [`remove_voter`], if replacement runners exists, they are immediately used."
              ]
            },
            {
              "name": "remove_member",
              "args": [
                {
                  "name": "who",
                  "type": "LookupSource"
                }
              ],
              "documentation": [
                " Remove a particular member from the set. This is effective immediately and the bond of",
                " the outgoing member is slashed.",
                "",
                " If a runner-up is available, then the best runner-up will be removed and replaces the",
                " outgoing member. Otherwise, a new phragmen round is started.",
                "",
                " Note that this does not affect the designated block number of the next election.",
                "",
                " # <weight>",
                " #### State",
                " Reads: O(do_phragmen)",
                " Writes: O(do_phragmen)",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "NewTerm",
              "args": [
                "Vec<(AccountId,Balance)>"
              ],
              "documentation": [
                " A new term with new members. This indicates that enough candidates existed, not that",
                " enough have has been elected. The inner value must be examined for this purpose."
              ]
            },
            {
              "name": "EmptyTerm",
              "args": [],
              "documentation": [
                " No (or not enough) candidates existed for this round."
              ]
            },
            {
              "name": "MemberKicked",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " A member has been removed. This should always be followed by either `NewTerm` ot",
                " `EmptyTerm`."
              ]
            },
            {
              "name": "MemberRenounced",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " A member has renounced their candidacy."
              ]
            },
            {
              "name": "VoterReported",
              "args": [
                "AccountId",
                "AccountId",
                "bool"
              ],
              "documentation": [
                " A voter (first element) was reported (byt the second element) with the the report being",
                " successful or not (third element)."
              ]
            }
          ],
          "constants": [
            {
              "name": "CandidacyBond",
              "type": "BalanceOf",
              "value": "0x0080c6a47e8d03000000000000000000",
              "documentation": []
            },
            {
              "name": "VotingBond",
              "type": "BalanceOf",
              "value": "0x00407a10f35a00000000000000000000",
              "documentation": []
            },
            {
              "name": "DesiredMembers",
              "type": "u32",
              "value": "0x0d000000",
              "documentation": []
            },
            {
              "name": "DesiredRunnersUp",
              "type": "u32",
              "value": "0x07000000",
              "documentation": []
            },
            {
              "name": "TermDuration",
              "type": "BlockNumber",
              "value": "0x80130300",
              "documentation": []
            }
          ],
          "errors": []
        },
        {
          "name": "TechnicalMembership",
          "storage": {
            "prefix": "Instance1Membership",
            "items": [
              {
                "name": "Members",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<AccountId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The current membership, stored as an ordered Vec."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "add_member",
              "args": [
                {
                  "name": "who",
                  "type": "AccountId"
                }
              ],
              "documentation": [
                " Add a member `who` to the set.",
                "",
                " May only be called from `AddOrigin` or root."
              ]
            },
            {
              "name": "remove_member",
              "args": [
                {
                  "name": "who",
                  "type": "AccountId"
                }
              ],
              "documentation": [
                " Remove a member `who` from the set.",
                "",
                " May only be called from `RemoveOrigin` or root."
              ]
            },
            {
              "name": "swap_member",
              "args": [
                {
                  "name": "remove",
                  "type": "AccountId"
                },
                {
                  "name": "add",
                  "type": "AccountId"
                }
              ],
              "documentation": [
                " Swap out one member `remove` for another `add`.",
                "",
                " May only be called from `SwapOrigin` or root."
              ]
            },
            {
              "name": "reset_members",
              "args": [
                {
                  "name": "members",
                  "type": "Vec<AccountId>"
                }
              ],
              "documentation": [
                " Change the membership to a new set, disregarding the existing membership. Be nice and",
                " pass `members` pre-sorted.",
                "",
                " May only be called from `ResetOrigin` or root."
              ]
            },
            {
              "name": "change_key",
              "args": [
                {
                  "name": "new",
                  "type": "AccountId"
                }
              ],
              "documentation": [
                " Swap out the sending member for some other key `new`.",
                "",
                " May only be called from `Signed` origin of a current member."
              ]
            }
          ],
          "events": [
            {
              "name": "MemberAdded",
              "args": [],
              "documentation": [
                " The given member was added; see the transaction for who."
              ]
            },
            {
              "name": "MemberRemoved",
              "args": [],
              "documentation": [
                " The given member was removed; see the transaction for who."
              ]
            },
            {
              "name": "MembersSwapped",
              "args": [],
              "documentation": [
                " Two members were swapped; see the transaction for who."
              ]
            },
            {
              "name": "MembersReset",
              "args": [],
              "documentation": [
                " The membership was reset; see the transaction for who the new set is."
              ]
            },
            {
              "name": "KeyChanged",
              "args": [],
              "documentation": [
                " One of the members' keys changed."
              ]
            },
            {
              "name": "Dummy",
              "args": [
                "PhantomData"
              ],
              "documentation": [
                " Phantom member, never used."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "FinalityTracker",
          "storage": null,
          "calls": [
            {
              "name": "final_hint",
              "args": [
                {
                  "name": "hint",
                  "type": "Compact<BlockNumber>"
                }
              ],
              "documentation": [
                " Hint that the author of this block thinks the best finalized",
                " block is the given number."
              ]
            }
          ],
          "events": null,
          "constants": [
            {
              "name": "WindowSize",
              "type": "BlockNumber",
              "value": "0x65000000",
              "documentation": [
                " The number of recent samples to keep from this chain. Default is 101."
              ]
            },
            {
              "name": "ReportLatency",
              "type": "BlockNumber",
              "value": "0xe8030000",
              "documentation": [
                " The delay after which point things become suspicious. Default is 1000."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "GrandpaFinality",
            "items": [
              {
                "name": "Authorities",
                "modifier": "Default",
                "type": {
                  "Plain": "AuthorityList"
                },
                "fallback": "0x00",
                "documentation": [
                  " DEPRECATED",
                  "",
                  " This used to store the current authority set, which has been migrated to the well-known",
                  " GRANDPA_AUTHORITES_KEY unhashed key."
                ]
              },
              {
                "name": "State",
                "modifier": "Default",
                "type": {
                  "Plain": "StoredState"
                },
                "fallback": "0x00",
                "documentation": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "type": {
                  "Plain": "StoredPendingChange"
                },
                "fallback": "0x00",
                "documentation": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "type": {
                  "Plain": "BlockNumber"
                },
                "fallback": "0x00",
                "documentation": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "type": {
                  "Plain": "(BlockNumber,BlockNumber)"
                },
                "fallback": "0x00",
                "documentation": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "type": {
                  "Plain": "SetId"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "SetId",
                    "value": "SessionIndex",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its members were responsible."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "report_misbehavior",
              "args": [
                {
                  "name": "_report",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Report some misbehavior."
              ]
            }
          ],
          "events": [
            {
              "name": "NewAuthorities",
              "args": [
                "AuthorityList"
              ],
              "documentation": [
                " New authority set has been applied."
              ]
            },
            {
              "name": "Paused",
              "args": [],
              "documentation": [
                " Current authority set has been paused."
              ]
            },
            {
              "name": "Resumed",
              "args": [],
              "documentation": [
                " Current authority set has been resumed."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "Treasury",
          "storage": {
            "prefix": "Treasury",
            "items": [
              {
                "name": "ProposalCount",
                "modifier": "Default",
                "type": {
                  "Plain": "ProposalIndex"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " Number of proposals that have been made."
                ]
              },
              {
                "name": "Proposals",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "ProposalIndex",
                    "value": "TreasuryProposal",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Proposals that have been made."
                ]
              },
              {
                "name": "Approvals",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<ProposalIndex>"
                },
                "fallback": "0x00",
                "documentation": [
                  " Proposal indices that have been approved but not yet awarded."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "propose_spend",
              "args": [
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                },
                {
                  "name": "beneficiary",
                  "type": "LookupSource"
                }
              ],
              "documentation": [
                " Put forward a suggestion for spending. A deposit proportional to the value",
                " is reserved and slashed if the proposal is rejected. It is returned once the",
                " proposal is awarded.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB change, one extra DB entry.",
                " # </weight>"
              ]
            },
            {
              "name": "reject_proposal",
              "args": [
                {
                  "name": "proposal_id",
                  "type": "Compact<ProposalIndex>"
                }
              ],
              "documentation": [
                " Reject a proposed spend. The original deposit will be slashed.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB clear.",
                " # </weight>"
              ]
            },
            {
              "name": "approve_proposal",
              "args": [
                {
                  "name": "proposal_id",
                  "type": "Compact<ProposalIndex>"
                }
              ],
              "documentation": [
                " Approve a proposal. At a later time, the proposal will be allocated to the beneficiary",
                " and the original deposit will be returned.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB change.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Proposed",
              "args": [
                "ProposalIndex"
              ],
              "documentation": [
                " New proposal."
              ]
            },
            {
              "name": "Spending",
              "args": [
                "Balance"
              ],
              "documentation": [
                " We have ended a spend period and will now allocate funds."
              ]
            },
            {
              "name": "Awarded",
              "args": [
                "ProposalIndex",
                "Balance",
                "AccountId"
              ],
              "documentation": [
                " Some funds have been allocated."
              ]
            },
            {
              "name": "Burnt",
              "args": [
                "Balance"
              ],
              "documentation": [
                " Some of our funds have been burnt."
              ]
            },
            {
              "name": "Rollover",
              "args": [
                "Balance"
              ],
              "documentation": [
                " Spending has finished; this is the amount that rolls over until next spend."
              ]
            },
            {
              "name": "Deposit",
              "args": [
                "Balance"
              ],
              "documentation": [
                " Some funds have been deposited."
              ]
            }
          ],
          "constants": [
            {
              "name": "ProposalBond",
              "type": "Permill",
              "value": "0x50c30000",
              "documentation": [
                " Fraction of a proposal's value that should be bonded in order to place the proposal.",
                " An accepted proposal gets these back. A rejected proposal does not."
              ]
            },
            {
              "name": "ProposalBondMinimum",
              "type": "BalanceOf",
              "value": "0x00407a10f35a00000000000000000000",
              "documentation": [
                " Minimum amount of funds that should be placed in a deposit for making a proposal."
              ]
            },
            {
              "name": "SpendPeriod",
              "type": "BlockNumber",
              "value": "0x80700000",
              "documentation": [
                " Period between successive spends."
              ]
            },
            {
              "name": "Burn",
              "type": "Permill",
              "value": "0x20a10700",
              "documentation": [
                " Percentage of spare funds (if any) that are burnt per spend period."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Contracts",
          "storage": {
            "prefix": "Contract",
            "items": [
              {
                "name": "GasSpent",
                "modifier": "Default",
                "type": {
                  "Plain": "Gas"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " Gas spent so far in this block."
                ]
              },
              {
                "name": "CurrentSchedule",
                "modifier": "Default",
                "type": {
                  "Plain": "Schedule"
                },
                "fallback": "0x0000000001000000000000000100000000000000010000000000000001000000000000000100000000000000010000000000000001000000000000008700000000000000af0000000000000001000000000000000100000000000000040000000000010010000000004000000020000000",
                "documentation": [
                  " Current cost schedule for contracts."
                ]
              },
              {
                "name": "PristineCode",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "CodeHash",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " A mapping from an original code hash to the original code, untouched by instrumentation."
                ]
              },
              {
                "name": "CodeStorage",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "CodeHash",
                    "value": "PrefabWasmModule",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " A mapping between an original code hash and instrumented wasm code, ready for execution."
                ]
              },
              {
                "name": "AccountCounter",
                "modifier": "Default",
                "type": {
                  "Plain": "u64"
                },
                "fallback": "0x0000000000000000",
                "documentation": [
                  " The subtrie counter."
                ]
              },
              {
                "name": "ContractInfoOf",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "ContractInfo",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The code associated with a given account."
                ]
              },
              {
                "name": "GasPrice",
                "modifier": "Default",
                "type": {
                  "Plain": "BalanceOf"
                },
                "fallback": "0x01000000000000000000000000000000",
                "documentation": [
                  " The price of one unit of gas."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "update_schedule",
              "args": [
                {
                  "name": "schedule",
                  "type": "Schedule"
                }
              ],
              "documentation": [
                " Updates the schedule for metering contracts.",
                "",
                " The schedule must have a greater version than the stored schedule."
              ]
            },
            {
              "name": "put_code",
              "args": [
                {
                  "name": "gas_limit",
                  "type": "Compact<Gas>"
                },
                {
                  "name": "code",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Stores the given binary Wasm code into the chain's storage and returns its `codehash`.",
                " You can instantiate contracts only with stored code."
              ]
            },
            {
              "name": "call",
              "args": [
                {
                  "name": "dest",
                  "type": "LookupSource"
                },
                {
                  "name": "value",
                  "type": "Compact<BalanceOf>"
                },
                {
                  "name": "gas_limit",
                  "type": "Compact<Gas>"
                },
                {
                  "name": "data",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Makes a call to an account, optionally transferring some balance.",
                "",
                " * If the account is a smart-contract account, the associated code will be",
                " executed and any value will be transferred.",
                " * If the account is a regular account, any value will be transferred.",
                " * If no account exists and the call value is not less than `existential_deposit`,",
                " a regular account will be created and any value will be transferred."
              ]
            },
            {
              "name": "instantiate",
              "args": [
                {
                  "name": "endowment",
                  "type": "Compact<BalanceOf>"
                },
                {
                  "name": "gas_limit",
                  "type": "Compact<Gas>"
                },
                {
                  "name": "code_hash",
                  "type": "CodeHash"
                },
                {
                  "name": "data",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Instantiates a new contract from the `codehash` generated by `put_code`, optionally transferring some balance.",
                "",
                " Instantiation is executed as follows:",
                "",
                " - The destination address is computed based on the sender and hash of the code.",
                " - The smart-contract account is created at the computed address.",
                " - The `ctor_code` is executed in the context of the newly-created account. Buffer returned",
                "   after the execution is saved as the `code` of the account. That code will be invoked",
                "   upon any call received by this account.",
                " - The contract is initialized."
              ]
            },
            {
              "name": "claim_surcharge",
              "args": [
                {
                  "name": "dest",
                  "type": "AccountId"
                },
                {
                  "name": "aux_sender",
                  "type": "Option<AccountId>"
                }
              ],
              "documentation": [
                " Allows block producers to claim a small reward for evicting a contract. If a block producer",
                " fails to do so, a regular users will be allowed to claim the reward.",
                "",
                " If contract is not evicted as a result of this call, no actions are taken and",
                " the sender is not eligible for the reward."
              ]
            }
          ],
          "events": [
            {
              "name": "Transfer",
              "args": [
                "AccountId",
                "AccountId",
                "Balance"
              ],
              "documentation": [
                " Transfer happened `from` to `to` with given `value` as part of a `call` or `instantiate`."
              ]
            },
            {
              "name": "Instantiated",
              "args": [
                "AccountId",
                "AccountId"
              ],
              "documentation": [
                " Contract deployed by address at the specified address."
              ]
            },
            {
              "name": "CodeStored",
              "args": [
                "Hash"
              ],
              "documentation": [
                " Code with the specified hash has been stored."
              ]
            },
            {
              "name": "ScheduleUpdated",
              "args": [
                "u32"
              ],
              "documentation": [
                " Triggered when the current schedule is updated."
              ]
            },
            {
              "name": "Dispatched",
              "args": [
                "AccountId",
                "bool"
              ],
              "documentation": [
                " A call was dispatched from the given account. The bool signals whether it was",
                " successful execution or not."
              ]
            },
            {
              "name": "Contract",
              "args": [
                "AccountId",
                "Bytes"
              ],
              "documentation": [
                " An event from contract of account."
              ]
            }
          ],
          "constants": [
            {
              "name": "SignedClaimHandicap",
              "type": "BlockNumber",
              "value": "0x02000000",
              "documentation": [
                " Number of block delay an extrinsic claim surcharge has.",
                "",
                " When claim surcharge is called by an extrinsic the rent is checked",
                " for current_block - delay"
              ]
            },
            {
              "name": "TombstoneDeposit",
              "type": "BalanceOf",
              "value": "0x00407a10f35a00000000000000000000",
              "documentation": [
                " The minimum amount required to generate a tombstone."
              ]
            },
            {
              "name": "StorageSizeOffset",
              "type": "u32",
              "value": "0x08000000",
              "documentation": [
                " Size of a contract at the time of instantiaion. This is a simple way to ensure that",
                " empty contracts eventually gets deleted."
              ]
            },
            {
              "name": "RentByteFee",
              "type": "BalanceOf",
              "value": "0x00407a10f35a00000000000000000000",
              "documentation": [
                " Price of a byte of storage per one block interval. Should be greater than 0."
              ]
            },
            {
              "name": "RentDepositOffset",
              "type": "BalanceOf",
              "value": "0x00008a5d784563010000000000000000",
              "documentation": [
                " The amount of funds a contract should deposit in order to offset",
                " the cost of one byte.",
                "",
                " Let's suppose the deposit is 1,000 BU (balance units)/byte and the rent is 1 BU/byte/day,",
                " then a contract with 1,000,000 BU that uses 1,000 bytes of storage would pay no rent.",
                " But if the balance reduced to 500,000 BU and the storage stayed the same at 1,000,",
                " then it would pay 500 BU/day."
              ]
            },
            {
              "name": "SurchargeReward",
              "type": "BalanceOf",
              "value": "0x0080a1a76b4a35000000000000000000",
              "documentation": [
                " Reward that is received by the party whose touch has led",
                " to removal of a contract."
              ]
            },
            {
              "name": "TransferFee",
              "type": "BalanceOf",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The fee required to make a transfer."
              ]
            },
            {
              "name": "CreationFee",
              "type": "BalanceOf",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The fee required to create an account."
              ]
            },
            {
              "name": "TransactionBaseFee",
              "type": "BalanceOf",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The fee to be paid for making a transaction; the base."
              ]
            },
            {
              "name": "TransactionByteFee",
              "type": "BalanceOf",
              "value": "0x00e40b54020000000000000000000000",
              "documentation": [
                " The fee to be paid for making a transaction; the per-byte portion."
              ]
            },
            {
              "name": "ContractFee",
              "type": "BalanceOf",
              "value": "0x0010a5d4e80000000000000000000000",
              "documentation": [
                " The fee required to instantiate a contract instance. A reasonable default value",
                " is 21."
              ]
            },
            {
              "name": "CallBaseFee",
              "type": "Gas",
              "value": "0xe803000000000000",
              "documentation": [
                " The base fee charged for calling into a contract. A reasonable default",
                " value is 135."
              ]
            },
            {
              "name": "InstantiateBaseFee",
              "type": "Gas",
              "value": "0xe803000000000000",
              "documentation": [
                " The base fee charged for instantiating a contract. A reasonable default value",
                " is 175."
              ]
            },
            {
              "name": "MaxDepth",
              "type": "u32",
              "value": "0x20000000",
              "documentation": [
                " The maximum nesting level of a call/instantiate stack. A reasonable default",
                " value is 100."
              ]
            },
            {
              "name": "MaxValueSize",
              "type": "u32",
              "value": "0x00400000",
              "documentation": [
                " The maximum size of a storage value in bytes. A reasonable default is 16 KiB."
              ]
            },
            {
              "name": "BlockGasLimit",
              "type": "Gas",
              "value": "0x8096980000000000",
              "documentation": [
                " The maximum amount of gas that could be expended per block. A reasonable",
                " default value is 10_000_000."
              ]
            }
          ],
          "errors": []
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "Key",
                "modifier": "Default",
                "type": {
                  "Plain": "AccountId"
                },
                "fallback": "0x0000000000000000000000000000000000000000000000000000000000000000",
                "documentation": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "sudo",
              "args": [
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": [
                " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB write (event).",
                " - Unknown weight of derivative `proposal` execution.",
                " # </weight>"
              ]
            },
            {
              "name": "set_key",
              "args": [
                {
                  "name": "new",
                  "type": "LookupSource"
                }
              ],
              "documentation": [
                " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB change.",
                " # </weight>"
              ]
            },
            {
              "name": "sudo_as",
              "args": [
                {
                  "name": "who",
                  "type": "LookupSource"
                },
                {
                  "name": "proposal",
                  "type": "Proposal"
                }
              ],
              "documentation": [
                " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                " a given account.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - Limited storage reads.",
                " - One DB write (event).",
                " - Unknown weight of derivative `proposal` execution.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "Sudid",
              "args": [
                "bool"
              ],
              "documentation": [
                " A sudo just took place."
              ]
            },
            {
              "name": "KeyChanged",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " The sudoer just switched identity; the old key is supplied."
              ]
            },
            {
              "name": "SudoAsDone",
              "args": [
                "bool"
              ],
              "documentation": [
                " A sudo just took place."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "ImOnline",
          "storage": {
            "prefix": "ImOnline",
            "items": [
              {
                "name": "GossipAt",
                "modifier": "Default",
                "type": {
                  "Plain": "BlockNumber"
                },
                "fallback": "0x00000000",
                "documentation": [
                  " The block number when we should gossip."
                ]
              },
              {
                "name": "Keys",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<AuthorityId>"
                },
                "fallback": "0x00",
                "documentation": [
                  " The current set of keys that may issue a heartbeat."
                ]
              },
              {
                "name": "ReceivedHeartbeats",
                "modifier": "Optional",
                "type": {
                  "DoubleMap": {
                    "hasher": "Blake2_256",
                    "key1": "SessionIndex",
                    "key2": "AuthIndex",
                    "value": "Bytes",
                    "key2Hasher": "Blake2_256"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " For each session index, we keep a mapping of `AuthIndex`",
                  " to `offchain::OpaqueNetworkState`."
                ]
              },
              {
                "name": "AuthoredBlocks",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Blake2_256",
                    "key1": "SessionIndex",
                    "key2": "ValidatorId",
                    "value": "u32",
                    "key2Hasher": "Blake2_256"
                  }
                },
                "fallback": "0x00000000",
                "documentation": [
                  " For each session index, we keep a mapping of `T::ValidatorId` to the",
                  " number of blocks authored by the given authority."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "heartbeat",
              "args": [
                {
                  "name": "heartbeat",
                  "type": "Heartbeat"
                },
                {
                  "name": "_signature",
                  "type": "Signature"
                }
              ],
              "documentation": []
            }
          ],
          "events": [
            {
              "name": "HeartbeatReceived",
              "args": [
                "AuthorityId"
              ],
              "documentation": [
                " A new heartbeat was received from `AuthorityId`"
              ]
            },
            {
              "name": "AllGood",
              "args": [],
              "documentation": [
                " At the end of the session, no offence was committed."
              ]
            },
            {
              "name": "SomeOffline",
              "args": [
                "Vec<IdentificationTuple>"
              ],
              "documentation": [
                " At the end of the session, at least once validator was found to be offline."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "AuthorityDiscovery",
          "storage": null,
          "calls": [],
          "events": null,
          "constants": [],
          "errors": []
        },
        {
          "name": "Offences",
          "storage": {
            "prefix": "Offences",
            "items": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "ReportIdOf",
                    "value": "OffenceDetails",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "type": {
                  "DoubleMap": {
                    "hasher": "Blake2_256",
                    "key1": "Kind",
                    "key2": "OpaqueTimeSlot",
                    "value": "Vec<ReportIdOf>",
                    "key2Hasher": "Blake2_256"
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "Kind",
                    "value": "Bytes",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": [],
          "events": [
            {
              "name": "Offence",
              "args": [
                "Kind",
                "OpaqueTimeSlot"
              ],
              "documentation": [
                " There is an offence reported of the given `kind` happened at the `session_index` and",
                " (kind-specific) time slot. This event is not deposited for duplicate slashes."
              ]
            }
          ],
          "constants": [],
          "errors": []
        },
        {
          "name": "RandomnessCollectiveFlip",
          "storage": {
            "prefix": "RandomnessCollectiveFlip",
            "items": [
              {
                "name": "RandomMaterial",
                "modifier": "Default",
                "type": {
                  "Plain": "Vec<Hash>"
                },
                "fallback": "0x00",
                "documentation": [
                  " Series of block headers from the last 81 blocks that acts as random seed material. This",
                  " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                  " the oldest hash."
                ]
              }
            ]
          },
          "calls": [],
          "events": null,
          "constants": [],
          "errors": []
        },
        {
          "name": "Nicks",
          "storage": {
            "prefix": "Sudo",
            "items": [
              {
                "name": "NameOf",
                "modifier": "Optional",
                "type": {
                  "Map": {
                    "hasher": "Blake2_256",
                    "key": "AccountId",
                    "value": "(Bytes,BalanceOf)",
                    "linked": false
                  }
                },
                "fallback": "0x00",
                "documentation": [
                  " The lookup table for names."
                ]
              }
            ]
          },
          "calls": [
            {
              "name": "set_name",
              "args": [
                {
                  "name": "name",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Set an account's name. The name should be a UTF-8-encoded string by convention, though",
                " we don't check it.",
                "",
                " The name may not be more than `T::MaxLength` bytes, nor less than `T::MinLength` bytes.",
                "",
                " If the account doesn't already have a name, then a fee of `ReservationFee` is reserved",
                " in the account.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - At most one balance operation.",
                " - One storage read/write.",
                " - One event.",
                " # </weight>"
              ]
            },
            {
              "name": "clear_name",
              "args": [],
              "documentation": [
                " Clear an account's name and return the deposit. Fails if the account was not named.",
                "",
                " The dispatch origin for this call must be _Signed_.",
                "",
                " # <weight>",
                " - O(1).",
                " - One balance operation.",
                " - One storage read/write.",
                " - One event.",
                " # </weight>"
              ]
            },
            {
              "name": "kill_name",
              "args": [
                {
                  "name": "target",
                  "type": "LookupSource"
                }
              ],
              "documentation": [
                " Remove an account's name and take charge of the deposit.",
                "",
                " Fails if `who` has not been named. The deposit is dealt with through `T::Slashed`",
                " imbalance handler.",
                "",
                " The dispatch origin for this call must be _Root_ or match `T::ForceOrigin`.",
                "",
                " # <weight>",
                " - O(1).",
                " - One unbalanced handler (probably a balance transfer)",
                " - One storage read/write.",
                " - One event.",
                " # </weight>"
              ]
            },
            {
              "name": "force_name",
              "args": [
                {
                  "name": "target",
                  "type": "LookupSource"
                },
                {
                  "name": "name",
                  "type": "Bytes"
                }
              ],
              "documentation": [
                " Set a third-party account's name with no deposit.",
                "",
                " No length checking is done on the name.",
                "",
                " The dispatch origin for this call must be _Root_ or match `T::ForceOrigin`.",
                "",
                " # <weight>",
                " - O(1).",
                " - At most one balance operation.",
                " - One storage read/write.",
                " - One event.",
                " # </weight>"
              ]
            }
          ],
          "events": [
            {
              "name": "NameSet",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " A name was set."
              ]
            },
            {
              "name": "NameForced",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " A name was forcibly set."
              ]
            },
            {
              "name": "NameChanged",
              "args": [
                "AccountId"
              ],
              "documentation": [
                " A name was changed."
              ]
            },
            {
              "name": "NameCleared",
              "args": [
                "AccountId",
                "Balance"
              ],
              "documentation": [
                " A name was cleared, and the given balance returned."
              ]
            },
            {
              "name": "NameKilled",
              "args": [
                "AccountId",
                "Balance"
              ],
              "documentation": [
                " A name was removed and the given balance slashed."
              ]
            }
          ],
          "constants": [
            {
              "name": "ReservationFee",
              "type": "BalanceOf",
              "value": "0x00407a10f35a00000000000000000000",
              "documentation": [
                " Reservation fee."
              ]
            },
            {
              "name": "MinLength",
              "type": "u32",
              "value": "0x03000000",
              "documentation": [
                " The minimum length a name may be."
              ]
            },
            {
              "name": "MaxLength",
              "type": "u32",
              "value": "0x10000000",
              "documentation": [
                " The maximum length a name may be."
              ]
            }
          ],
          "errors": []
        }
      ]
    }
  }
}
